export type Problem = {
  id: number;
  title: string;
  titleSlug: string;
  difficulty: string;
  category: string;
  topics: string[];
  constaints: string;
  question: string;
  examples: {
    id: number;
    inputText: string;
    outputText: string;
    explanation: string;
  }[];
  tests: string;
  answer: string;
  code: string;
  videoId?: string;
  likes: number;
  dislikes: number;
};

export const problems: Problem[] = [
  {
    id: 2,
    title: "Add Two Numbers",
    titleSlug: "add-two-numbers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Math", "Recursion"],
    constaints:
      "<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>It is guaranteed that the list represents a number that does not have leading zeros.</li>",
    question:
      "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>",
    examples: [
      {
        id: 1,
        inputText: "l1 = [2,4,3], l2 = [5,6,4]",
        outputText: "[7,0,8]",
        explanation: "342 + 465 = 807.",
      },
      {
        id: 2,
        inputText: "l1 = [0], l2 = [0]",
        outputText: "[0]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        outputText: "[8,9,9,9,0,0,0,1]",
        explanation: "",
      },
    ],
    tests: "[[2, 4, 3], [0], [9, 9, 9, 9, 9, 9, 9]]",
    answer: "[[7, 0, 8], [0], [8, 9, 9, 9, 0, 0, 0, 1]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 3,
    title: "Longest Substring Without Repeating Characters",
    titleSlug: "longest-substring-without-repeating-characters",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sliding Window"],
    constaints:
      "<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> consists of English letters, digits, symbols and spaces.</li>",
    question:
      '<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword="substring-nonempty"><strong>substring</strong></span> without repeating characters.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "abcabcbb"',
        outputText: "3",
        explanation: 'The answer is "abc", with the length of 3.',
      },
      {
        id: 2,
        inputText: 's = "bbbbb"',
        outputText: "1",
        explanation: 'The answer is "b", with the length of 1.',
      },
      {
        id: 3,
        inputText: 's = "pwwkew"',
        outputText: "3",
        explanation:
          'The answer is "wke", with the length of 3.\nNotice that the answer must be a substring, "pwke" is a subsequence and not a substring.',
      },
    ],
    tests: '["abcabcbb", "bbbbb", "pwwkew"]',
    answer: "[3, 1, 3]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 4,
    title: "Median of Two Sorted Arrays",
    titleSlug: "median-of-two-sorted-arrays",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Divide and Conquer"],
    constaints:
      "<li><code>nums1.length == m</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m &lt;= 1000</code></li> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= m + n &lt;= 2000</code></li> <li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p><p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [1,3], nums2 = [2]",
        outputText: "2.00000",
        explanation: "merged array = [1,2,3] and median is 2.",
      },
      {
        id: 2,
        inputText: "nums1 = [1,2], nums2 = [3,4]",
        outputText: "2.50000",
        explanation:
          "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.",
      },
    ],
    tests: "[[1, 3], [1, 2]]",
    answer: "[2.0, 2.5]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 5,
    title: "Longest Palindromic Substring",
    titleSlug: "longest-palindromic-substring",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consist of only digits and English letters.</li>",
    question:
      '<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword="palindromic-string"><em>palindromic</em></span> <span data-keyword="substring-nonempty"><em>substring</em></span> in <code>s</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "babad"',
        outputText: '"bab"',
        explanation: '"aba" is also a valid answer.',
      },
      { id: 2, inputText: 's = "cbbd"', outputText: '"bb"', explanation: "" },
    ],
    tests: '["babad", "cbbd"]',
    answer: '["bab", "bb"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 7,
    title: "Reverse Integer",
    titleSlug: "reverse-integer",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p><p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>",
    examples: [
      { id: 1, inputText: "x = 123", outputText: "321", explanation: "" },
      { id: 2, inputText: "x = -123", outputText: "-321", explanation: "" },
      { id: 3, inputText: "x = 120", outputText: "21", explanation: "" },
    ],
    tests: "[123, -123, 120]",
    answer: "[321, -321, 21]",
    code: "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 8,
    title: "String to Integer (atoi)",
    titleSlug: "string-to-integer-atoi",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>Read in and ignore any leading whitespace.</li> <li>Check if the next character (if not already at the end of the string) is <code>'-'</code> or <code>'+'</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li> <li>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.</li> <li>Convert these digits into an integer (i.e. <code>\"123\" -&gt; 123</code>, <code>\"0032\" -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li> <li>If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be clamped to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be clamped to <code>2<sup>31</sup> - 1</code>.</li> <li>Return the integer as the final result.</li> <li>Only the space character <code>' '</code> is considered a whitespace character.</li> <li><strong>Do not ignore</strong> any characters other than the leading whitespace or the rest of the string after the digits.</li> <li><code>0 &lt;= s.length &lt;= 200</code></li> <li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>' '</code>, <code>'+'</code>, <code>'-'</code>, and <code>'.'</code>.</li>",
    question:
      "<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++'s <code>atoi</code> function).</p><p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p><p><strong>Note:</strong></p>",
    examples: [
      {
        id: 1,
        inputText: 's = "42"',
        outputText: "42",
        explanation:
          'The underlined characters are what is read in, the caret is the current reader position.\nStep 1: "42" (no characters read because there is no leading whitespace)\n         ^\nStep 2: "42" (no characters read because there is neither a \'-\' nor \'+\')\n         ^\nStep 3: "',
      },
      {
        id: 2,
        inputText: 's = "   -42"',
        outputText: "-42",
        explanation: 'Step 1: "',
      },
      {
        id: 3,
        inputText: 's = "4193 with words"',
        outputText: "4193",
        explanation:
          'Step 1: "4193 with words" (no characters read because there is no leading whitespace)\n         ^\nStep 2: "4193 with words" (no characters read because there is neither a \'-\' nor \'+\')\n         ^\nStep 3: "',
      },
    ],
    tests: '["42", "   -42", "4193 with words"]',
    answer: "[42, -42, 4193]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar myAtoi = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 9,
    title: "Palindrome Number",
    titleSlug: "palindrome-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li><code>-2<sup>31</sup>\u00a0&lt;= x &lt;= 2<sup>31</sup>\u00a0- 1</code></li>",
    question:
      '<p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span data-keyword="palindrome-integer"><em><strong>palindrome</strong></em></span><em>, and </em><code>false</code><em> otherwise</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "x = 121",
        outputText: "true",
        explanation:
          "121 reads as 121 from left to right and from right to left.",
      },
      {
        id: 2,
        inputText: "x = -121",
        outputText: "false",
        explanation:
          "From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.",
      },
      {
        id: 3,
        inputText: "x = 10",
        outputText: "false",
        explanation:
          "Reads 01 from right to left. Therefore it is not a palindrome.",
      },
    ],
    tests: "[121, -121, 10]",
    answer: "[true, false, false]",
    code: "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 10,
    title: "Regular Expression Matching",
    titleSlug: "regular-expression-matching",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming", "Recursion"],
    constaints:
      "<li><code>'.'</code> Matches any single character.\u200b\u200b\u200b\u200b</li> <li><code>'*'</code> Matches zero or more of the preceding element.</li> <li><code>1 &lt;= s.length\u00a0&lt;= 20</code></li> <li><code>1 &lt;= p.length\u00a0&lt;= 20</code></li> <li><code>s</code> contains only lowercase English letters.</li> <li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and\u00a0<code>'*'</code>.</li> <li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li>",
    question:
      "<p>Given an input string <code>s</code>\u00a0and a pattern <code>p</code>, implement regular expression matching with support for <code>'.'</code> and <code>'*'</code> where:</p><p>The matching should cover the <strong>entire</strong> input string (not partial).</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aa", p = "a"',
        outputText: "false",
        explanation: '"a" does not match the entire string "aa".',
      },
      {
        id: 2,
        inputText: 's = "aa", p = "a*"',
        outputText: "true",
        explanation:
          "'*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".",
      },
      {
        id: 3,
        inputText: 's = "ab", p = ".*"',
        outputText: "true",
        explanation: '".*" means "zero or more (*) of any character (.)".',
      },
    ],
    tests: '["aa", "aa", "ab"]',
    answer: "[false, true, true]",
    code: "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 11,
    title: "Container With Most Water",
    titleSlug: "container-with-most-water",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Greedy"],
    constaints:
      "<li><code>n == height.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p><p>Return <em>the maximum amount of water a container can store</em>.</p><p><strong>Notice</strong> that you may not slant the container.</p>",
    examples: [
      {
        id: 1,
        inputText: "height = [1,8,6,2,5,4,8,3,7]",
        outputText: "49",
        explanation:
          "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.",
      },
      { id: 2, inputText: "height = [1,1]", outputText: "1", explanation: "" },
    ],
    tests: "[[1, 8, 6, 2, 5, 4, 8, 3, 7], [1, 1]]",
    answer: "[49, 1]",
    code: "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 14,
    title: "Longest Common Prefix",
    titleSlug: "longest-common-prefix",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Trie"],
    constaints:
      "<li><code>1 &lt;= strs.length &lt;= 200</code></li> <li><code>0 &lt;= strs[i].length &lt;= 200</code></li> <li><code>strs[i]</code> consists of only lowercase English letters.</li>",
    question:
      '<p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string <code>""</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'strs = ["flower","flow","flight"]',
        outputText: '"fl"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'strs = ["dog","racecar","car"]',
        outputText: '""',
        explanation: "There is no common prefix among the input strings.",
      },
    ],
    tests: '[["flower", "flow", "flight"], ["dog", "racecar", "car"]]',
    answer: '["fl", ""]',
    code: "/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function(strs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 15,
    title: "3Sum",
    titleSlug: "3sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Sorting"],
    constaints:
      "<li><code>3 &lt;= nums.length &lt;= 3000</code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p><p>Notice that the solution set must not contain duplicate triplets.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [-1,0,1,2,-1,-4]",
        outputText: "[[-1,-1,2],[-1,0,1]]",
        explanation:
          "nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.",
      },
      {
        id: 2,
        inputText: "nums = [0,1,1]",
        outputText: "[]",
        explanation: "The only possible triplet does not sum up to 0.",
      },
      {
        id: 3,
        inputText: "nums = [0,0,0]",
        outputText: "[[0,0,0]]",
        explanation: "The only possible triplet sums up to 0.",
      },
    ],
    tests: "[[-1, 0, 1, 2, -1, -4], [0, 1, 1], [0, 0, 0]]",
    answer: "[[[-1, -1, 2], [-1, 0, 1]], [], [[0, 0, 0]]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 16,
    title: "3Sum Closest",
    titleSlug: "3sum-closest",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Sorting"],
    constaints:
      "<li><code>3 &lt;= nums.length &lt;= 500</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p><p>Return <em>the sum of the three integers</em>.</p><p>You may assume that each input would have exactly one solution.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [-1,2,1,-4], target = 1",
        outputText: "2",
        explanation:
          "The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).",
      },
      {
        id: 2,
        inputText: "nums = [0,0,0], target = 1",
        outputText: "0",
        explanation:
          "The sum that is closest to the target is 0. (0 + 0 + 0 = 0).",
      },
    ],
    tests: "[[-1, 2, 1, -4], [0, 0, 0]]",
    answer: "[2, 0]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar threeSumClosest = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 17,
    title: "Letter Combinations of a Phone Number",
    titleSlug: "letter-combinations-of-a-phone-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Backtracking"],
    constaints:
      "<li><code>0 &lt;= digits.length &lt;= 4</code></li> <li><code>digits[i]</code> is a digit in the range <code>['2', '9']</code>.</li>",
    question:
      "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p><p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>",
    examples: [
      {
        id: 1,
        inputText: 'digits = "23"',
        outputText: '["ad","ae","af","bd","be","bf","cd","ce","cf"]',
        explanation: "",
      },
      { id: 2, inputText: 'digits = ""', outputText: "[]", explanation: "" },
      {
        id: 3,
        inputText: 'digits = "2"',
        outputText: '["a","b","c"]',
        explanation: "",
      },
    ],
    tests: '["23", "", "2"]',
    answer:
      '[["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"], [], ["a", "b", "c"]]',
    code: "/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 18,
    title: "4Sum",
    titleSlug: "4sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Sorting"],
    constaints:
      "<li><code>0 &lt;= a, b, c, d\u00a0&lt; n</code></li> <li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <strong>distinct</strong>.</li> <li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an array <code>nums</code> of <code>n</code> integers, return <em>an array of all the <strong>unique</strong> quadruplets</em> <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p><p>You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,0,-1,0,-2,2], target = 0",
        outputText: "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [2,2,2,2,2], target = 8",
        outputText: "[[2,2,2,2]]",
        explanation: "",
      },
    ],
    tests: "[[1, 0, -1, 0, -2, 2], [2, 2, 2, 2, 2]]",
    answer: "[[[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]], [[2, 2, 2, 2]]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 19,
    title: "Remove Nth Node From End of List",
    titleSlug: "remove-nth-node-from-end-of-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers"],
    constaints:
      "<li>The number of nodes in the list is <code>sz</code>.</li> <li><code>1 &lt;= sz &lt;= 30</code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= sz</code></li>",
    question:
      "<p>Given the <code>head</code> of a linked list, remove the <code>n<sup>th</sup></code> node from the end of the list and return its head.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4,5], n = 2",
        outputText: "[1,2,3,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [1], n = 1",
        outputText: "[]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "head = [1,2], n = 1",
        outputText: "[1]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [1], [1, 2]]",
    answer: "[[1, 2, 3, 5], [], [1]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 20,
    title: "Valid Parentheses",
    titleSlug: "valid-parentheses",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li>Open brackets must be closed by the same type of brackets.</li> <li>Open brackets must be closed in the correct order.</li> <li>Every close bracket has a corresponding open bracket of the same type.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of parentheses only <code>'()[]{}'</code>.</li>",
    question:
      "<p>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p><p>An input string is valid if:</p>",
    examples: [
      { id: 1, inputText: 's = "()"', outputText: "true", explanation: "" },
      { id: 2, inputText: 's = "()[]{}"', outputText: "true", explanation: "" },
      { id: 3, inputText: 's = "(]"', outputText: "false", explanation: "" },
    ],
    tests: '["()", "()[]{}", "(]"]',
    answer: "[true, true, false]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 21,
    title: "Merge Two Sorted Lists",
    titleSlug: "merge-two-sorted-lists",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Linked List", "Recursion"],
    constaints:
      "<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li>",
    question:
      "<p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p><p>Merge the two lists into one <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p><p>Return <em>the head of the merged linked list</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "list1 = [1,2,4], list2 = [1,3,4]",
        outputText: "[1,1,2,3,4,4]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "list1 = [], list2 = []",
        outputText: "[]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "list1 = [], list2 = [0]",
        outputText: "[0]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 4], [], []]",
    answer: "[[1, 1, 2, 3, 4, 4], [], [0]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeTwoLists = function(list1, list2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 22,
    title: "Generate Parentheses",
    titleSlug: "generate-parentheses",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming", "Backtracking"],
    constaints: "<li><code>1 &lt;= n &lt;= 8</code></li>",
    question:
      "<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText: '["((()))","(()())","(())()","()(())","()()()"]',
        explanation: "",
      },
      { id: 2, inputText: "n = 1", outputText: '["()"]', explanation: "" },
    ],
    tests: "[3, 1]",
    answer: '[["((()))", "(()())", "(())()", "()(())", "()()()"], ["()"]]',
    code: "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 23,
    title: "Merge k Sorted Lists",
    titleSlug: "merge-k-sorted-lists",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort",
    ],
    constaints:
      "<li><code>k == lists.length</code></li> <li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= lists[i].length &lt;= 500</code></li> <li><code>-10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></code></li> <li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li> <li>The sum of <code>lists[i].length</code> will not exceed <code>10<sup>4</sup></code>.</li>",
    question:
      "<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p><p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "lists = [[1,4,5],[1,3,4],[2,6]]",
        outputText: "[1,1,2,3,4,4,5,6]",
        explanation:
          "The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6",
      },
      { id: 2, inputText: "lists = []", outputText: "[]", explanation: "" },
      { id: 3, inputText: "lists = [[]]", outputText: "[]", explanation: "" },
    ],
    tests: "[[[1, 4, 5], [1, 3, 4], [2, 6]], [], [[]]]",
    answer: "[[1, 1, 2, 3, 4, 4, 5, 6], [], []]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function(lists) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 24,
    title: "Swap Nodes in Pairs",
    titleSlug: "swap-nodes-in-pairs",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Recursion"],
    constaints:
      "<li>The number of nodes in the\u00a0list\u00a0is in the range <code>[0, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given a\u00a0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\u00a0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4]",
        outputText: "[2,1,4,3]",
        explanation: "",
      },
      { id: 2, inputText: "head = []", outputText: "[]", explanation: "" },
      { id: 3, inputText: "head = [1]", outputText: "[1]", explanation: "" },
    ],
    tests: "[[1, 2, 3, 4], [], [1]]",
    answer: "[[2, 1, 4, 3], [], [1]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 25,
    title: "Reverse Nodes in k-Group",
    titleSlug: "reverse-nodes-in-k-group",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Linked List", "Recursion"],
    constaints:
      "<li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.</p><p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p><p>You may not alter the values in the list's nodes, only nodes themselves may be changed.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4,5], k = 2",
        outputText: "[2,1,4,3,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [1,2,3,4,5], k = 3",
        outputText: "[3,2,1,4,5]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]",
    answer: "[[2, 1, 4, 3, 5], [3, 2, 1, 4, 5]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar reverseKGroup = function(head, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 29,
    title: "Divide Two Integers",
    titleSlug: "divide-two-integers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation"],
    constaints:
      "<li><code>-2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1</code></li> <li><code>divisor != 0</code></li>",
    question:
      "<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers <strong>without</strong> using multiplication, division, and mod operator.</p><p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>8.345</code> would be truncated to <code>8</code>, and <code>-2.7335</code> would be truncated to <code>-2</code>.</p><p>Return <em>the <strong>quotient</strong> after dividing </em><code>dividend</code><em> by </em><code>divisor</code>.</p><p><strong>Note: </strong>Assume we are dealing with an environment that could only store integers within the <strong>32-bit</strong> signed integer range: <code>[\u22122<sup>31</sup>, 2<sup>31</sup> \u2212 1]</code>. For this problem, if the quotient is <strong>strictly greater than</strong> <code>2<sup>31</sup> - 1</code>, then return <code>2<sup>31</sup> - 1</code>, and if the quotient is <strong>strictly less than</strong> <code>-2<sup>31</sup></code>, then return <code>-2<sup>31</sup></code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "dividend = 10, divisor = 3",
        outputText: "3",
        explanation: "10/3 = 3.33333.. which is truncated to 3.",
      },
      {
        id: 2,
        inputText: "dividend = 7, divisor = -3",
        outputText: "-2",
        explanation: "7/-3 = -2.33333.. which is truncated to -2.",
      },
    ],
    tests: "[10, 7]",
    answer: "[3, -2]",
    code: "/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */\nvar divide = function(dividend, divisor) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 30,
    title: "Substring with Concatenation of All Words",
    titleSlug: "substring-with-concatenation-of-all-words",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sliding Window"],
    constaints:
      '<li>For example, if <code>words = ["ab","cd","ef"]</code>, then <code>"abcdef"</code>, <code>"abefcd"</code>, <code>"cdabef"</code>, <code>"cdefab"</code>, <code>"efabcd"</code>, and <code>"efcdab"</code> are all concatenated strings. <code>"acdbef"</code> is not a concatenated substring because it is not the concatenation of any permutation of <code>words</code>.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= words.length &lt;= 5000</code></li> <li><code>1 &lt;= words[i].length &lt;= 30</code></li> <li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li>',
    question:
      "<p>You are given a string <code>s</code> and an array of strings <code>words</code>. All the strings of <code>words</code> are of <strong>the same length</strong>.</p><p>A <strong>concatenated substring</strong> in <code>s</code> is a substring that contains all the strings of any permutation of <code>words</code> concatenated.</p><p>Return <em>the starting indices of all the concatenated substrings in </em><code>s</code>. You can return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "barfoothefoobarman", words = ["foo","bar"]',
        outputText: "[0,9]",
        explanation:
          'Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is "barfoo". It is the concatenation of ["bar","foo"] which is a permutation of words.\nThe substring starting at 9 is "foobar". It is the concatenation of ["foo","bar"] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.',
      },
      {
        id: 2,
        inputText:
          's = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]',
        outputText: "[]",
        explanation:
          "Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array.",
      },
      {
        id: 3,
        inputText:
          's = "barfoofoobarthefoobarman", words = ["bar","foo","the"]',
        outputText: "[6,9,12]",
        explanation:
          'Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is "foobarthe". It is the concatenation of ["foo","bar","the"] which is a permutation of words.\nThe substring starting at 9 is "barthefoo". It is the concatenation of ["bar","the","foo"] which is a permutation of words.\nThe substring starting at 12 is "thefoobar". It is the concatenation of ["the","foo","bar"] which is a permutation of words.',
      },
    ],
    tests:
      '["barfoothefoobarman", "wordgoodgoodgoodbestword", "barfoofoobarthefoobarman"]',
    answer: "[[0, 9], [], [6, 9, 12]]",
    code: "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 32,
    title: "Longest Valid Parentheses",
    titleSlug: "longest-valid-parentheses",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming", "Stack"],
    constaints:
      "<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>s[i]</code> is <code>'('</code>, or <code>')'</code>.</li>",
    question:
      "<p>Given a string containing just the characters <code>'('</code> and <code>')'</code>, return <em>the length of the longest valid (well-formed) parentheses </em><span data-keyword=\"substring-nonempty\"><em>substring</em></span>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "(()"',
        outputText: "2",
        explanation: 'The longest valid parentheses substring is "()".',
      },
      {
        id: 2,
        inputText: 's = ")()())"',
        outputText: "4",
        explanation: 'The longest valid parentheses substring is "()()".',
      },
      { id: 3, inputText: 's = ""', outputText: "0", explanation: "" },
    ],
    tests: '["(()", ")()())", ""]',
    answer: "[2, 4, 0]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 33,
    title: "Search in Rotated Sorted Array",
    titleSlug: "search-in-rotated-sorted-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li>All values of <code>nums</code> are <strong>unique</strong>.</li> <li><code>nums</code> is an ascending array that is possibly rotated.</li> <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p><p>Prior to being passed to your function, <code>nums</code> is <strong>possibly rotated</strong> at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p><p>Given the array <code>nums</code> <strong>after</strong> the possible rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p><p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,5,6,7,0,1,2], target = 0",
        outputText: "4",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [4,5,6,7,0,1,2], target = 3",
        outputText: "-1",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [1], target = 0",
        outputText: "-1",
        explanation: "",
      },
    ],
    tests: "[[4, 5, 6, 7, 0, 1, 2], [4, 5, 6, 7, 0, 1, 2], [1]]",
    answer: "[4, -1, -1]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 35,
    title: "Search Insert Position",
    titleSlug: "search-insert-position",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li> <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You must\u00a0write an algorithm with\u00a0<code>O(log n)</code> runtime complexity.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3,5,6], target = 5",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [1,3,5,6], target = 2",
        outputText: "1",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [1,3,5,6], target = 7",
        outputText: "4",
        explanation: "",
      },
    ],
    tests: "[[1, 3, 5, 6], [1, 3, 5, 6], [1, 3, 5, 6]]",
    answer: "[2, 1, 4]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 36,
    title: "Valid Sudoku",
    titleSlug: "valid-sudoku",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Matrix"],
    constaints:
      "<li>Each row\u00a0must contain the\u00a0digits\u00a0<code>1-9</code> without repetition.</li> <li>Each column must contain the digits\u00a0<code>1-9</code>\u00a0without repetition.</li> <li>Each of the nine\u00a0<code>3 x 3</code> sub-boxes of the grid must contain the digits\u00a0<code>1-9</code>\u00a0without repetition.</li> <li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li> <li>Only the filled cells need to be validated according to the mentioned\u00a0rules.</li> <li><code>board.length == 9</code></li> <li><code>board[i].length == 9</code></li> <li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>'.'</code>.</li>",
    question:
      "<p>Determine if a\u00a0<code>9 x 9</code> Sudoku board\u00a0is valid.\u00a0Only the filled cells need to be validated\u00a0<strong>according to the following rules</strong>:</p><p><strong>Note:</strong></p>",
    examples: [
      {
        id: 1,
        inputText:
          'board = \n[["5","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]',
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          'board = \n[["8","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]',
        outputText: "false",
        explanation: "Same as Example 1, except with the",
      },
    ],
    tests:
      '[[["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]], [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]]',
    answer: "[true, false]",
    code: "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function(board) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 37,
    title: "Sudoku Solver",
    titleSlug: "sudoku-solver",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Backtracking", "Matrix"],
    constaints:
      "<li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li> <li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li> <li>Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li> <li><code>board.length == 9</code></li> <li><code>board[i].length == 9</code></li> <li><code>board[i][j]</code> is a digit or <code>'.'</code>.</li> <li>It is <strong>guaranteed</strong> that the input board has only one solution.</li>",
    question:
      "<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p><p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p><p>The <code>'.'</code> character indicates empty cells.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]',
        outputText:
          '[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]',
        explanation:
          "The input board is shown above and the only valid solution is shown below:",
      },
    ],
    tests:
      '[[["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]]',
    answer:
      '[[["5", "3", "4", "6", "7", "8", "9", "1", "2"], ["6", "7", "2", "1", "9", "5", "3", "4", "8"], ["1", "9", "8", "3", "4", "2", "5", "6", "7"], ["8", "5", "9", "7", "6", "1", "4", "2", "3"], ["4", "2", "6", "8", "5", "3", "7", "9", "1"], ["7", "1", "3", "9", "2", "4", "8", "5", "6"], ["9", "6", "1", "5", "3", "7", "2", "8", "4"], ["2", "8", "7", "4", "1", "9", "6", "3", "5"], ["3", "4", "5", "2", "8", "6", "1", "7", "9"]]]',
    code: "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solveSudoku = function(board) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 38,
    title: "Count and Say",
    titleSlug: "count-and-say",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      '<li><code>countAndSay(1) = "1"</code></li> <li><code>countAndSay(n)</code> is the way you would "say" the digit string from <code>countAndSay(n-1)</code>, which is then converted into a different digit string.</li> <li><code>1 &lt;= n &lt;= 30</code></li>',
    question:
      '<p>The <strong>count-and-say</strong> sequence is a sequence of digit strings defined by the recursive formula:</p><p>To determine how you "say" a digit string, split it into the <strong>minimal</strong> number of substrings such that each substring contains exactly <strong>one</strong> unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.</p><p>For example, the saying and conversion for digit string <code>"3322251"</code>:</p><p>Given a positive integer <code>n</code>, return <em>the </em><code>n<sup>th</sup></code><em> term of the <strong>count-and-say</strong> sequence</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "n = 1",
        outputText: '"1"',
        explanation: "This is the base case.",
      },
      {
        id: 2,
        inputText: "n = 4",
        outputText: '"1211"',
        explanation:
          'countAndSay(1) = "1"\ncountAndSay(2) = say "1" = one 1 = "11"\ncountAndSay(3) = say "11" = two 1\'s = "21"\ncountAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"',
      },
    ],
    tests: "[1, 4]",
    answer: '["1", "1211"]',
    code: "/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 39,
    title: "Combination Sum",
    titleSlug: "combination-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking"],
    constaints:
      "<li><code>1 &lt;= candidates.length &lt;= 30</code></li> <li><code>2 &lt;= candidates[i] &lt;= 40</code></li> <li>All elements of <code>candidates</code> are <strong>distinct</strong>.</li> <li><code>1 &lt;= target &lt;= 40</code></li>",
    question:
      '<p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of </em><code>candidates</code><em> where the chosen numbers sum to </em><code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p><p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the <span data-keyword="frequency-array">frequency</span> of at least one of the chosen numbers is different.</p><p>The test cases are generated such that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p>',
    examples: [
      {
        id: 1,
        inputText: "candidates = [2,3,6,7], target = 7",
        outputText: "[[2,2,3],[7]]",
        explanation:
          "2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.",
      },
      {
        id: 2,
        inputText: "candidates = [2,3,5], target = 8",
        outputText: "[[2,2,2,2],[2,3,3],[3,5]]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "candidates = [2], target = 1",
        outputText: "[]",
        explanation: "",
      },
    ],
    tests: "[[2, 3, 6, 7], [2, 3, 5], [2]]",
    answer: "[[[2, 2, 3], [7]], [[2, 2, 2, 2], [2, 3, 3], [3, 5]], []]",
    code: "/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 41,
    title: "First Missing Positive",
    titleSlug: "first-missing-positive",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an unsorted integer array <code>nums</code>, return the smallest missing positive integer.</p><p>You must implement an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> auxiliary space.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,0]",
        outputText: "3",
        explanation: "The numbers in the range [1,2] are all in the array.",
      },
      {
        id: 2,
        inputText: "nums = [3,4,-1,1]",
        outputText: "2",
        explanation: "1 is in the array but 2 is missing.",
      },
      {
        id: 3,
        inputText: "nums = [7,8,9,11,12]",
        outputText: "1",
        explanation: "The smallest positive integer 1 is missing.",
      },
    ],
    tests: "[[1, 2, 0], [3, 4, -1, 1], [7, 8, 9, 11, 12]]",
    answer: "[3, 2, 1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar firstMissingPositive = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 42,
    title: "Trapping Rain Water",
    titleSlug: "trapping-rain-water",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack",
    ],
    constaints:
      "<li><code>n == height.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>",
    examples: [
      {
        id: 1,
        inputText: "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        outputText: "6",
        explanation:
          "The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.",
      },
      {
        id: 2,
        inputText: "height = [4,2,0,3,2,5]",
        outputText: "9",
        explanation: "",
      },
    ],
    tests: "[[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], [4, 2, 0, 3, 2, 5]]",
    answer: "[6, 9]",
    code: "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 43,
    title: "Multiply Strings",
    titleSlug: "multiply-strings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String", "Simulation"],
    constaints:
      "<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li> <li><code>num1</code> and <code>num2</code> consist of digits only.</li> <li>Both <code>num1</code> and <code>num2</code>\u00a0do not contain any leading zero, except the number <code>0</code> itself.</li>",
    question:
      "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p><p><strong>Note:</strong>\u00a0You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>",
    examples: [
      {
        id: 1,
        inputText: 'num1 = "2", num2 = "3"',
        outputText: '"6"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'num1 = "123", num2 = "456"',
        outputText: '"56088"',
        explanation: "",
      },
    ],
    tests: '["2", "123"]',
    answer: '["6", "56088"]',
    code: "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 44,
    title: "Wildcard Matching",
    titleSlug: "wildcard-matching",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming", "Greedy", "Recursion"],
    constaints:
      "<li><code>'?'</code> Matches any single character.</li> <li><code>'*'</code> Matches any sequence of characters (including the empty sequence).</li> <li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li> <li><code>s</code> contains only lowercase English letters.</li> <li><code>p</code> contains only lowercase English letters, <code>'?'</code> or <code>'*'</code>.</li>",
    question:
      "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>'?'</code> and <code>'*'</code> where:</p><p>The matching should cover the <strong>entire</strong> input string (not partial).</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aa", p = "a"',
        outputText: "false",
        explanation: '"a" does not match the entire string "aa".',
      },
      {
        id: 2,
        inputText: 's = "aa", p = "*"',
        outputText: "true",
        explanation: "'*' matches any sequence.",
      },
      {
        id: 3,
        inputText: 's = "cb", p = "?a"',
        outputText: "false",
        explanation:
          "'?' matches 'c', but the second letter is 'a', which does not match 'b'.",
      },
    ],
    tests: '["aa", "aa", "cb"]',
    answer: "[false, true, false]",
    code: "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nvar isMatch = function(s, p) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 45,
    title: "Jump Game II",
    titleSlug: "jump-game-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Greedy"],
    constaints:
      "<li><code>0 &lt;= j &lt;= nums[i]</code> and</li> <li><code>i + j &lt; n</code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li>It's guaranteed that you can reach <code>nums[n - 1]</code>.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p><p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p><p>Return <em>the minimum number of jumps to reach </em><code>nums[n - 1]</code>. The test cases are generated such that you can reach <code>nums[n - 1]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,3,1,1,4]",
        outputText: "2",
        explanation:
          "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.",
      },
      {
        id: 2,
        inputText: "nums = [2,3,0,1,4]",
        outputText: "2",
        explanation: "",
      },
    ],
    tests: "[[2, 3, 1, 1, 4], [2, 3, 0, 1, 4]]",
    answer: "[2, 2]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar jump = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 46,
    title: "Permutations",
    titleSlug: "permutations",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 6</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3]",
        outputText: "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [0,1]",
        outputText: "[[0,1],[1,0]]",
        explanation: "",
      },
      { id: 3, inputText: "nums = [1]", outputText: "[[1]]", explanation: "" },
    ],
    tests: "[[1, 2, 3], [0, 1], [1]]",
    answer:
      "[[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]], [[0, 1], [1, 0]], [[1]]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 47,
    title: "Permutations II",
    titleSlug: "permutations-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 8</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li>",
    question:
      "<p>Given a collection of numbers, <code>nums</code>,\u00a0that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong>.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,2]",
        outputText: "[[1,1,2],\n [1,2,1],\n [2,1,1]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3]",
        outputText: "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        explanation: "",
      },
    ],
    tests: "[[1, 1, 2], [1, 2, 3]]",
    answer:
      "[[[1, 1, 2], [1, 2, 1], [2, 1, 1]], [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permuteUnique = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 48,
    title: "Rotate Image",
    titleSlug: "rotate-image",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Matrix"],
    constaints:
      "<li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>",
    question:
      '<p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).</p><p>You have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>',
    examples: [
      {
        id: 1,
        inputText: "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        outputText: "[[7,4,1],[8,5,2],[9,6,3]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
        outputText: "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]]",
    answer:
      "[[[7, 4, 1], [8, 5, 2], [9, 6, 3]], [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]]",
    code: "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 49,
    title: "Group Anagrams",
    titleSlug: "group-anagrams",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Sorting"],
    constaints:
      "<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i]</code> consists of lowercase English letters.</li>",
    question:
      "<p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p><p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>",
    examples: [
      {
        id: 1,
        inputText: 'strs = ["eat","tea","tan","ate","nat","bat"]',
        outputText: '[["bat"],["nat","tan"],["ate","eat","tea"]]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'strs = [""]',
        outputText: '[[""]]',
        explanation: "",
      },
      {
        id: 3,
        inputText: 'strs = ["a"]',
        outputText: '[["a"]]',
        explanation: "",
      },
    ],
    tests: '[["eat", "tea", "tan", "ate", "nat", "bat"], [""], ["a"]]',
    answer:
      '[[["bat"], ["nat", "tan"], ["ate", "eat", "tea"]], [[""]], [["a"]]]',
    code: "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 50,
    title: "Pow(x, n)",
    titleSlug: "powx-n",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Recursion"],
    constaints:
      "<li><code>-100.0 &lt; x &lt; 100.0</code></li> <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li> <li><code>n</code> is an integer.</li> <li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li> <li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>",
    question:
      '<p>Implement <a href="http://www.cplusplus.com/reference/valarray/pow/" target="_blank">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p>',
    examples: [
      {
        id: 1,
        inputText: "x = 2.00000, n = 10",
        outputText: "1024.00000",
        explanation: "",
      },
      {
        id: 2,
        inputText: "x = 2.10000, n = 3",
        outputText: "9.26100",
        explanation: "",
      },
      {
        id: 3,
        inputText: "x = 2.00000, n = -2",
        outputText: "0.25000",
        explanation: "2",
      },
    ],
    tests: "[2.0, 2.1, 2.0]",
    answer: "[1024.0, 9.261, 0.25]",
    code: "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 51,
    title: "N-Queens",
    titleSlug: "n-queens",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Backtracking"],
    constaints: "<li><code>1 &lt;= n &lt;= 9</code></li>",
    question:
      "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p><p>Given an integer <code>n</code>, return <em>all distinct solutions to the <strong>n-queens puzzle</strong></em>. You may return the answer in <strong>any order</strong>.</p><p>Each solution contains a distinct board configuration of the n-queens' placement, where <code>'Q'</code> and <code>'.'</code> both indicate a queen and an empty space, respectively.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 4",
        outputText:
          '[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]',
        explanation:
          "There exist two distinct solutions to the 4-queens puzzle as shown above",
      },
      { id: 2, inputText: "n = 1", outputText: '[["Q"]]', explanation: "" },
    ],
    tests: "[4, 1]",
    answer:
      '[[[".Q..", "...Q", "Q...", "..Q."], ["..Q.", "Q...", "...Q", ".Q.."]], [["Q"]]]',
    code: "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 54,
    title: "Spiral Matrix",
    titleSlug: "spiral-matrix",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints:
      "<li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10</code></li> <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>",
    question:
      "<p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        outputText: "[1,2,3,6,9,8,7,4,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
        outputText: "[1,2,3,4,8,12,11,10,9,5,6,7]",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]]",
    answer:
      "[[1, 2, 3, 6, 9, 8, 7, 4, 5], [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]]",
    code: "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 55,
    title: "Jump Game",
    titleSlug: "jump-game",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Greedy"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code>. You are initially positioned at the array's <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p><p>Return <code>true</code><em> if you can reach the last index, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,3,1,1,4]",
        outputText: "true",
        explanation:
          "Jump 1 step from index 0 to 1, then 3 steps to the last index.",
      },
      {
        id: 2,
        inputText: "nums = [3,2,1,0,4]",
        outputText: "false",
        explanation:
          "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.",
      },
    ],
    tests: "[[2, 3, 1, 1, 4], [3, 2, 1, 0, 4]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 56,
    title: "Merge Intervals",
    titleSlug: "merge-intervals",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an array\u00a0of <code>intervals</code>\u00a0where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        outputText: "[[1,6],[8,10],[15,18]]",
        explanation:
          "Since intervals [1,3] and [2,6] overlap, merge them into [1,6].",
      },
      {
        id: 2,
        inputText: "intervals = [[1,4],[4,5]]",
        outputText: "[[1,5]]",
        explanation: "Intervals [1,4] and [4,5] are considered overlapping.",
      },
    ],
    tests: "[[[1, 3], [2, 6], [8, 10], [15, 18]], [[1, 4], [4, 5]]]",
    answer: "[[[1, 6], [8, 10], [15, 18]], [[1, 5]]]",
    code: "/**\n * @param {number[][]} intervals\n * @return {number[][]}\n */\nvar merge = function(intervals) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 58,
    title: "Length of Last Word",
    titleSlug: "length-of-last-word",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of only English letters and spaces <code>' '</code>.</li> <li>There will be at least one word in <code>s</code>.</li>",
    question:
      '<p>Given a string <code>s</code> consisting of words and spaces, return <em>the length of the <strong>last</strong> word in the string.</em></p><p>A <strong>word</strong> is a maximal <span data-keyword="substring-nonempty">substring</span> consisting of non-space characters only.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "Hello World"',
        outputText: "5",
        explanation: 'The last word is "World" with length 5.',
      },
      {
        id: 2,
        inputText: 's = "   fly me   to   the moon  "',
        outputText: "4",
        explanation: 'The last word is "moon" with length 4.',
      },
      {
        id: 3,
        inputText: 's = "luffy is still joyboy"',
        outputText: "6",
        explanation: 'The last word is "joyboy" with length 6.',
      },
    ],
    tests:
      '["Hello World", "   fly me   to   the moon  ", "luffy is still joyboy"]',
    answer: "[5, 4, 6]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLastWord = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 59,
    title: "Spiral Matrix II",
    titleSlug: "spiral-matrix-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints: "<li><code>1 &lt;= n &lt;= 20</code></li>",
    question:
      "<p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n<sup>2</sup></code> in spiral order.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText: "[[1,2,3],[8,9,4],[7,6,5]]",
        explanation: "",
      },
      { id: 2, inputText: "n = 1", outputText: "[[1]]", explanation: "" },
    ],
    tests: "[3, 1]",
    answer: "[[[1, 2, 3], [8, 9, 4], [7, 6, 5]], [[1]]]",
    code: "/**\n * @param {number} n\n * @return {number[][]}\n */\nvar generateMatrix = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 60,
    title: "Permutation Sequence",
    titleSlug: "permutation-sequence",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Math", "Recursion"],
    constaints:
      '<li><code>"123"</code></li> <li><code>"132"</code></li> <li><code>"213"</code></li> <li><code>"231"</code></li> <li><code>"312"</code></li> <li><code>"321"</code></li> <li><code>1 &lt;= n &lt;= 9</code></li> <li><code>1 &lt;= k &lt;= n!</code></li>',
    question:
      "<p>The set <code>[1, 2, 3, ...,\u00a0n]</code> contains a total of <code>n!</code> unique permutations.</p><p>By listing and labeling all of the permutations in order, we get the following sequence for <code>n = 3</code>:</p><p>Given <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> permutation sequence.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3, k = 3",
        outputText: '"213"',
        explanation: "",
      },
      {
        id: 2,
        inputText: "n = 4, k = 9",
        outputText: '"2314"',
        explanation: "",
      },
      {
        id: 3,
        inputText: "n = 3, k = 1",
        outputText: '"123"',
        explanation: "",
      },
    ],
    tests: "[3, 4, 3]",
    answer: '["213", "2314", "123"]',
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getPermutation = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 61,
    title: "Rotate List",
    titleSlug: "rotate-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[0, 500]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>0 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>",
    question:
      "<p>Given the <code>head</code> of a linked\u00a0list, rotate the list to the right by <code>k</code> places.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4,5], k = 2",
        outputText: "[4,5,1,2,3]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [0,1,2], k = 4",
        outputText: "[2,0,1]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [0, 1, 2]]",
    answer: "[[4, 5, 1, 2, 3], [2, 0, 1]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 62,
    title: "Unique Paths",
    titleSlug: "unique-paths",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Combinatorics"],
    constaints: "<li><code>1 &lt;= m, n &lt;= 100</code></li>",
    question:
      "<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p><p>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p><p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p>",
    examples: [
      { id: 1, inputText: "m = 3, n = 7", outputText: "28", explanation: "" },
      {
        id: 2,
        inputText: "m = 3, n = 2",
        outputText: "3",
        explanation:
          "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down",
      },
    ],
    tests: "[3, 3]",
    answer: "[28, 3]",
    code: "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 63,
    title: "Unique Paths II",
    titleSlug: "unique-paths-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Matrix"],
    constaints:
      "<li><code>m == obstacleGrid.length</code></li> <li><code>n == obstacleGrid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>obstacleGrid[i][j]</code> is <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>You are given an <code>m x n</code> integer array <code>grid</code>. There is a robot initially located at the <b>top-left corner</b> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p><p>An obstacle and space are marked as <code>1</code> or <code>0</code> respectively in <code>grid</code>. A path that the robot takes cannot include <strong>any</strong> square that is an obstacle.</p><p>Return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p><p>The testcases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]",
        outputText: "2",
        explanation:
          "There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right",
      },
      {
        id: 2,
        inputText: "obstacleGrid = [[0,1],[0,0]]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[[0, 0, 0], [0, 1, 0], [0, 0, 0]], [[0, 1], [0, 0]]]",
    answer: "[2, 1]",
    code: "/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function(obstacleGrid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 64,
    title: "Minimum Path Sum",
    titleSlug: "minimum-path-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Matrix"],
    constaints:
      "<li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 200</code></li>",
    question:
      "<p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p><p><strong>Note:</strong> You can only move either down or right at any point in time.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[1,3,1],[1,5,1],[4,2,1]]",
        outputText: "7",
        explanation:
          "Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.",
      },
      {
        id: 2,
        inputText: "grid = [[1,2,3],[4,5,6]]",
        outputText: "12",
        explanation: "",
      },
    ],
    tests: "[[[1, 3, 1], [1, 5, 1], [4, 2, 1]], [[1, 2, 3], [4, 5, 6]]]",
    answer: "[7, 12]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minPathSum = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 65,
    title: "Valid Number",
    titleSlug: "valid-number",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>A <strong>decimal number</strong> or an <strong>integer</strong>.</li> <li>(Optional) An <code>'e'</code> or <code>'E'</code>, followed by an <strong>integer</strong>.</li> <li>(Optional) A sign character (either <code>'+'</code> or <code>'-'</code>).</li> <li>One of the following formats:\n\t<ol>\n<li>One or more digits, followed by a dot <code>'.'</code>.</li>\n<li>One or more digits, followed by a dot <code>'.'</code>, followed by one or more digits.</li>\n<li>A dot <code>'.'</code>, followed by one or more digits.</li>\n</ol>\n</li> <li>One or more digits, followed by a dot <code>'.'</code>.</li> <li>One or more digits, followed by a dot <code>'.'</code>, followed by one or more digits.</li> <li>A dot <code>'.'</code>, followed by one or more digits.</li> <li>(Optional) A sign character (either <code>'+'</code> or <code>'-'</code>).</li> <li>One or more digits.</li> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>s</code> consists of only English letters (both uppercase and lowercase), digits (<code>0-9</code>), plus <code>'+'</code>, minus <code>'-'</code>, or dot <code>'.'</code>.</li>",
    question:
      '<p>A <strong>valid number</strong> can be split up into these components (in order):</p><p>A <strong>decimal number</strong> can be split up into these components (in order):</p><p>An <strong>integer</strong> can be split up into these components (in order):</p><p>For example, all the following are valid numbers: <code>["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"]</code>, while the following are not valid numbers: <code>["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"]</code>.</p><p>Given a string <code>s</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>valid number</strong></em>.</p>',
    examples: [
      { id: 1, inputText: 's = "0"', outputText: "true", explanation: "" },
      { id: 2, inputText: 's = "e"', outputText: "false", explanation: "" },
      { id: 3, inputText: 's = "."', outputText: "false", explanation: "" },
    ],
    tests: '["0", "e", "."]',
    answer: "[true, false, false]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 66,
    title: "Plus One",
    titleSlug: "plus-one",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li><code>1 &lt;= digits.length &lt;= 100</code></li> <li><code>0 &lt;= digits[i] &lt;= 9</code></li> <li><code>digits</code> does not contain any leading <code>0</code>'s.</li>",
    question:
      "<p>You are given a <strong>large integer</strong> represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the <code>i<sup>th</sup></code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code>0</code>'s.</p><p>Increment the large integer by one and return <em>the resulting array of digits</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "digits = [1,2,3]",
        outputText: "[1,2,4]",
        explanation:
          "The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].",
      },
      {
        id: 2,
        inputText: "digits = [4,3,2,1]",
        outputText: "[4,3,2,2]",
        explanation:
          "The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].",
      },
      {
        id: 3,
        inputText: "digits = [9]",
        outputText: "[1,0]",
        explanation:
          "The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].",
      },
    ],
    tests: "[[1, 2, 3], [4, 3, 2, 1], [9]]",
    answer: "[[1, 2, 4], [4, 3, 2, 2], [1, 0]]",
    code: "/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar plusOne = function(digits) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 67,
    title: "Add Binary",
    titleSlug: "add-binary",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "String", "Bit Manipulation", "Simulation"],
    constaints:
      "<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li> <li><code>a</code> and <code>b</code> consist\u00a0only of <code>'0'</code> or <code>'1'</code> characters.</li> <li>Each string does not contain leading zeros except for the zero itself.</li>",
    question:
      "<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'a = "11", b = "1"',
        outputText: '"100"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'a = "1010", b = "1011"',
        outputText: '"10101"',
        explanation: "",
      },
    ],
    tests: '["11", "1010"]',
    answer: '["100", "10101"]',
    code: "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 69,
    title: "Sqrt(x)",
    titleSlug: "sqrtx",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Binary Search"],
    constaints:
      "<li>For example, do not use <code>pow(x, 0.5)</code> in c++ or <code>x ** 0.5</code> in python.</li> <li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given a non-negative integer <code>x</code>, return <em>the square root of </em><code>x</code><em> rounded down to the nearest integer</em>. The returned integer should be <strong>non-negative</strong> as well.</p><p>You <strong>must not use</strong> any built-in exponent function or operator.</p>",
    examples: [
      {
        id: 1,
        inputText: "x = 4",
        outputText: "2",
        explanation: "The square root of 4 is 2, so we return 2.",
      },
      {
        id: 2,
        inputText: "x = 8",
        outputText: "2",
        explanation:
          "The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.",
      },
    ],
    tests: "[4, 8]",
    answer: "[2, 2]",
    code: "/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 70,
    title: "Climbing Stairs",
    titleSlug: "climbing-stairs",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Memoization"],
    constaints: "<li><code>1 &lt;= n &lt;= 45</code></li>",
    question:
      "<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p><p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "2",
        explanation:
          "There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps",
      },
      {
        id: 2,
        inputText: "n = 3",
        outputText: "3",
        explanation:
          "There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step",
      },
    ],
    tests: "[2, 3]",
    answer: "[2, 3]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 71,
    title: "Simplify Path",
    titleSlug: "simplify-path",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li>The path starts with a single slash <code>'/'</code>.</li> <li>Any two directories are separated by a single slash <code>'/'</code>.</li> <li>The path does not end with a trailing <code>'/'</code>.</li> <li>The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period <code>'.'</code> or double period <code>'..'</code>)</li> <li><code>1 &lt;= path.length &lt;= 3000</code></li> <li><code>path</code> consists of English letters, digits, period <code>'.'</code>, slash <code>'/'</code> or <code>'_'</code>.</li> <li><code>path</code> is a valid absolute Unix path.</li>",
    question:
      "<p>Given a string <code>path</code>, which is an <strong>absolute path</strong> (starting with a slash <code>'/'</code>) to a file or directory in a Unix-style file system, convert it to the simplified <strong>canonical path</strong>.</p><p>In a Unix-style file system, a period <code>'.'</code> refers to the current directory, a double period <code>'..'</code> refers to the directory up a level, and any multiple consecutive slashes (i.e. <code>'//'</code>) are treated as a single slash <code>'/'</code>. For this problem, any other format of periods such as <code>'...'</code> are treated as file/directory names.</p><p>The <strong>canonical path</strong> should have the following format:</p><p>Return <em>the simplified <strong>canonical path</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'path = "/home/"',
        outputText: '"/home"',
        explanation:
          "Note that there is no trailing slash after the last directory name.",
      },
      {
        id: 2,
        inputText: 'path = "/../"',
        outputText: '"/"',
        explanation:
          "Going one level up from the root directory is a no-op, as the root level is the highest level you can go.",
      },
      {
        id: 3,
        inputText: 'path = "/home//foo/"',
        outputText: '"/home/foo"',
        explanation:
          "In the canonical path, multiple consecutive slashes are replaced by a single one.",
      },
    ],
    tests: '["/home/", "/../", "/home//foo/"]',
    answer: '["/home", "/", "/home/foo"]',
    code: "/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 72,
    title: "Edit Distance",
    titleSlug: "edit-distance",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li>Insert a character</li> <li>Delete a character</li> <li>Replace a character</li> <li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li> <li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>",
    question:
      "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p><p>You have the following three operations permitted on a word:</p>",
    examples: [
      {
        id: 1,
        inputText: 'word1 = "horse", word2 = "ros"',
        outputText: "3",
        explanation:
          "horse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')",
      },
      {
        id: 2,
        inputText: 'word1 = "intention", word2 = "execution"',
        outputText: "5",
        explanation:
          "intention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')",
      },
    ],
    tests: '["horse", "intention"]',
    answer: "[3, 5]",
    code: "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 73,
    title: "Set Matrix Zeroes",
    titleSlug: "set-matrix-zeroes",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Matrix"],
    constaints:
      "<li><code>m == matrix.length</code></li> <li><code>n == matrix[0].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li> <li>A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</li> <li>A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</li> <li>Could you devise a constant space solution?</li>",
    question:
      '<p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0</code>\'s.</p><p>You must do it <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in place</a>.</p>',
    examples: [
      {
        id: 1,
        inputText: "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
        outputText: "[[1,0,1],[0,0,0],[1,0,1]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
        outputText: "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 1, 1], [1, 0, 1], [1, 1, 1]], [[0, 1, 2, 0], [3, 4, 5, 2], [1, 3, 1, 5]]]",
    answer:
      "[[[1, 0, 1], [0, 0, 0], [1, 0, 1]], [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]]]",
    code: "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar setZeroes = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 74,
    title: "Search a 2D Matrix",
    titleSlug: "search-a-2d-matrix",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Matrix"],
    constaints:
      "<li>Each row is sorted in non-decreasing order.</li> <li>The first integer of each row is greater than the last integer of the previous row.</li> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p><p>Given an integer <code>target</code>, return <code>true</code> <em>if</em> <code>target</code> <em>is in</em> <code>matrix</code> <em>or</em> <code>false</code> <em>otherwise</em>.</p><p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
        outputText: "false",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]], [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 75,
    title: "Sort Colors",
    titleSlug: "sort-colors",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Sorting"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>nums[i]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li>",
    question:
      '<p>Given an array <code>nums</code> with <code>n</code> objects colored red, white, or blue, sort them <strong><a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a> </strong>so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p><p>We will use the integers <code>0</code>, <code>1</code>, and <code>2</code> to represent the color red, white, and blue, respectively.</p><p>You must solve this problem without using the library\'s sort function.</p>',
    examples: [
      {
        id: 1,
        inputText: "nums = [2,0,2,1,1,0]",
        outputText: "[0,0,1,1,2,2]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [2,0,1]",
        outputText: "[0,1,2]",
        explanation: "",
      },
    ],
    tests: "[[2, 0, 2, 1, 1, 0], [2, 0, 1]]",
    answer: "[[0, 0, 1, 1, 2, 2], [0, 1, 2]]",
    code: "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar sortColors = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 76,
    title: "Minimum Window Substring",
    titleSlug: "minimum-window-substring",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sliding Window"],
    constaints:
      "<li><code>m == s.length</code></li> <li><code>n == t.length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>",
    question:
      '<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword="substring-nonempty"><strong><em>substring</em></strong></span><em> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string </em><code>""</code>.</p><p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "ADOBECODEBANC", t = "ABC"',
        outputText: '"BANC"',
        explanation:
          "The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.",
      },
      {
        id: 2,
        inputText: 's = "a", t = "a"',
        outputText: '"a"',
        explanation: "The entire string s is the minimum window.",
      },
      {
        id: 3,
        inputText: 's = "a", t = "aa"',
        outputText: '""',
        explanation:
          "Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.",
      },
    ],
    tests: '["ADOBECODEBANC", "a", "a"]',
    answer: '["BANC", "a", ""]',
    code: "/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 77,
    title: "Combinations",
    titleSlug: "combinations",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Backtracking"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= k &lt;= n</code></li>",
    question:
      "<p>Given two integers <code>n</code> and <code>k</code>, return <em>all possible combinations of</em> <code>k</code> <em>numbers chosen from the range</em> <code>[1, n]</code>.</p><p>You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 4, k = 2",
        outputText: "[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
        explanation:
          "There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.",
      },
      {
        id: 2,
        inputText: "n = 1, k = 1",
        outputText: "[[1]]",
        explanation: "There is 1 choose 1 = 1 total combination.",
      },
    ],
    tests: "[4, 1]",
    answer: "[[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]], [[1]]]",
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {number[][]}\n */\nvar combine = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 78,
    title: "Subsets",
    titleSlug: "subsets",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li>All the numbers of\u00a0<code>nums</code> are <strong>unique</strong>.</li>",
    question:
      '<p>Given an integer array <code>nums</code> of <strong>unique</strong> elements, return <em>all possible</em> <span data-keyword="subset"><em>subsets</em></span> <em>(the power set)</em>.</p><p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>',
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3]",
        outputText: "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [0]",
        outputText: "[[],[0]]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3], [0]]",
    answer:
      "[[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]], [[], [0]]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsets = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 79,
    title: "Word Search",
    titleSlug: "word-search",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking", "Matrix"],
    constaints:
      "<li><code>m == board.length</code></li> <li><code>n = board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 6</code></li> <li><code>1 &lt;= word.length &lt;= 15</code></li> <li><code>board</code> and <code>word</code> consists of only lowercase and uppercase English letters.</li>",
    question:
      "<p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> <em>if</em> <code>word</code> <em>exists in the grid</em>.</p><p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"',
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          'board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"',
        outputText: "true",
        explanation: "",
      },
      {
        id: 3,
        inputText:
          'board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests:
      '[[["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]]]',
    answer: "[true, true, false]",
    code: "/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar exist = function(board, word) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 81,
    title: "Search in Rotated Sorted Array II",
    titleSlug: "search-in-rotated-sorted-array-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> is guaranteed to be rotated at some pivot.</li> <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>There is an integer array <code>nums</code> sorted in non-decreasing order (not necessarily with <strong>distinct</strong> values).</p><p>Before being passed to your function, <code>nums</code> is <strong>rotated</strong> at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.</p><p>Given the array <code>nums</code> <strong>after</strong> the rotation and an integer <code>target</code>, return <code>true</code><em> if </em><code>target</code><em> is in </em><code>nums</code><em>, or </em><code>false</code><em> if it is not in </em><code>nums</code><em>.</em></p><p>You must decrease the overall operation steps as much as possible.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,5,6,0,0,1,2], target = 0",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [2,5,6,0,0,1,2], target = 3",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[2, 5, 6, 0, 0, 1, 2], [2, 5, 6, 0, 0, 1, 2]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {boolean}\n */\nvar search = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 82,
    title: "Remove Duplicates from Sorted List II",
    titleSlug: "remove-duplicates-from-sorted-list-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>",
    question:
      "<p>Given the <code>head</code> of a sorted linked list, <em>delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,3,4,4,5]",
        outputText: "[1,2,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [1,1,1,2,3]",
        outputText: "[2,3]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 3, 4, 4, 5], [1, 1, 1, 2, 3]]",
    answer: "[[1, 2, 5], [2, 3]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 83,
    title: "Remove Duplicates from Sorted List",
    titleSlug: "remove-duplicates-from-sorted-list",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Linked List"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>The list is guaranteed to be <strong>sorted</strong> in ascending order.</li>",
    question:
      "<p>Given the <code>head</code> of a sorted linked list, <em>delete all duplicates such that each element appears only once</em>. Return <em>the linked list <strong>sorted</strong> as well</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,1,2]",
        outputText: "[1,2]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [1,1,2,3,3]",
        outputText: "[1,2,3]",
        explanation: "",
      },
    ],
    tests: "[[1, 1, 2], [1, 1, 2, 3, 3]]",
    answer: "[[1, 2], [1, 2, 3]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 84,
    title: "Largest Rectangle in Histogram",
    titleSlug: "largest-rectangle-in-histogram",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Stack", "Monotonic Stack"],
    constaints:
      "<li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an array of integers <code>heights</code> representing the histogram's bar height where the width of each bar is <code>1</code>, return <em>the area of the largest rectangle in the histogram</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "heights = [2,1,5,6,2,3]",
        outputText: "10",
        explanation:
          "The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.",
      },
      { id: 2, inputText: "heights = [2,4]", outputText: "4", explanation: "" },
    ],
    tests: "[[2, 1, 5, 6, 2, 3], [2, 4]]",
    answer: "[10, 4]",
    code: "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 86,
    title: "Partition List",
    titleSlug: "partition-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[0, 200]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>-200 &lt;= x &lt;= 200</code></li>",
    question:
      "<p>Given the <code>head</code> of a linked list and a value <code>x</code>, partition it such that all nodes <strong>less than</strong> <code>x</code> come before nodes <strong>greater than or equal</strong> to <code>x</code>.</p><p>You should <strong>preserve</strong> the original relative order of the nodes in each of the two partitions.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,4,3,2,5,2], x = 3",
        outputText: "[1,2,2,4,3,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [2,1], x = 2",
        outputText: "[1,2]",
        explanation: "",
      },
    ],
    tests: "[[1, 4, 3, 2, 5, 2], [2, 1]]",
    answer: "[[1, 2, 2, 4, 3, 5], [1, 2]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */\nvar partition = function(head, x) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 87,
    title: "Scramble String",
    titleSlug: "scramble-string",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li>If the length of the string is 1, stop.</li> <li>If the length of the string is &gt; 1, do the following:\n\t<ul>\n<li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li>\n<li><strong>Randomly</strong>\u00a0decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li>\n<li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li>\n</ul>\n</li> <li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li> <li><strong>Randomly</strong>\u00a0decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li> <li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li> <li><code>s1.length == s2.length</code></li> <li><code>1 &lt;= s1.length &lt;= 30</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>",
    question:
      "<p>We can scramble a string s to get a string t using the following algorithm:</p><p>Given two strings <code>s1</code> and <code>s2</code> of <strong>the same length</strong>, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's1 = "great", s2 = "rgeat"',
        outputText: "true",
        explanation:
          'One possible scenario applied on s1 is:\n"great" --> "gr/eat" // divide at random index.\n"gr/eat" --> "gr/eat" // random decision is not to swap the two substrings and keep them in order.\n"gr/eat" --> "g/r / e/at" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n"g/r / e/at" --> "r/g / e/at" // random decision was to swap the first substring and to keep the second substring in the same order.\n"r/g / e/at" --> "r/g / e/ a/t" // again apply the algorithm recursively, divide "at" to "a/t".\n"r/g / e/ a/t" --> "r/g / e/ a/t" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is "rgeat" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.',
      },
      {
        id: 2,
        inputText: 's1 = "abcde", s2 = "caebd"',
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: 's1 = "a", s2 = "a"',
        outputText: "true",
        explanation: "",
      },
    ],
    tests: '["great", "abcde", "a"]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar isScramble = function(s1, s2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 88,
    title: "Merge Sorted Array",
    titleSlug: "merge-sorted-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Sorting"],
    constaints:
      "<li><code>nums1.length == m + n</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m, n &lt;= 200</code></li> <li><code>1 &lt;= m + n &lt;= 200</code></li> <li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p><p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p><p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        outputText: "[1,2,2,3,5,6]",
        explanation:
          "The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [",
      },
      {
        id: 2,
        inputText: "nums1 = [1], m = 1, nums2 = [], n = 0",
        outputText: "[1]",
        explanation:
          "The arrays we are merging are [1] and [].\nThe result of the merge is [1].",
      },
      {
        id: 3,
        inputText: "nums1 = [0], m = 0, nums2 = [1], n = 1",
        outputText: "[1]",
        explanation:
          "The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.",
      },
    ],
    tests: "[[1, 2, 3, 0, 0, 0], [1], [0]]",
    answer: "[[1, 2, 2, 3, 5, 6], [1], [1]]",
    code: "/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 89,
    title: "Gray Code",
    titleSlug: "gray-code",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Backtracking", "Bit Manipulation"],
    constaints:
      "<li>Every integer is in the <strong>inclusive</strong> range <code>[0, 2<sup>n</sup> - 1]</code>,</li> <li>The first integer is <code>0</code>,</li> <li>An integer appears <strong>no more than once</strong> in the sequence,</li> <li>The binary representation of every pair of <strong>adjacent</strong> integers differs by <strong>exactly one bit</strong>, and</li> <li>The binary representation of the <strong>first</strong> and <strong>last</strong> integers differs by <strong>exactly one bit</strong>.</li> <li><code>1 &lt;= n &lt;= 16</code></li>",
    question:
      "<p>An <strong>n-bit gray code sequence</strong> is a sequence of <code>2<sup>n</sup></code> integers where:</p><p>Given an integer <code>n</code>, return <em>any valid <strong>n-bit gray code sequence</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "[0,1,3,2]",
        explanation:
          "The binary representation of [0,1,3,2] is [00,01,11,10].\n- 0",
      },
      { id: 2, inputText: "n = 1", outputText: "[0,1]", explanation: "" },
    ],
    tests: "[2, 1]",
    answer: "[[0, 1, 3, 2], [0, 1]]",
    code: "/**\n * @param {number} n\n * @return {number[]}\n */\nvar grayCode = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 90,
    title: "Subsets II",
    titleSlug: "subsets-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li>",
    question:
      '<p>Given an integer array <code>nums</code> that may contain duplicates, return <em>all possible</em> <span data-keyword="subset"><em>subsets</em></span><em> (the power set)</em>.</p><p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>',
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,2]",
        outputText: "[[],[1],[1,2],[1,2,2],[2],[2,2]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [0]",
        outputText: "[[],[0]]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 2], [0]]",
    answer: "[[[], [1], [1, 2], [1, 2, 2], [2], [2, 2]], [[], [0]]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar subsetsWithDup = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 92,
    title: "Reverse Linked List II",
    titleSlug: "reverse-linked-list-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List"],
    constaints:
      "<li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>-500 &lt;= Node.val &lt;= 500</code></li> <li><code>1 &lt;= left &lt;= right &lt;= n</code></li>",
    question:
      "<p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return <em>the reversed list</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4,5], left = 2, right = 4",
        outputText: "[1,4,3,2,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [5], left = 1, right = 1",
        outputText: "[5]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [5]]",
    answer: "[[1, 4, 3, 2, 5], [5]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} left\n * @param {number} right\n * @return {ListNode}\n */\nvar reverseBetween = function(head, left, right) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 93,
    title: "Restore IP Addresses",
    titleSlug: "restore-ip-addresses",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Backtracking"],
    constaints:
      '<li>For example, <code>"0.1.2.201"</code> and <code>"192.168.1.1"</code> are <strong>valid</strong> IP addresses, but <code>"0.011.255.245"</code>, <code>"192.168.1.312"</code> and <code>"192.168@1.1"</code> are <strong>invalid</strong> IP addresses.</li> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>s</code> consists of digits only.</li>',
    question:
      "<p>A <strong>valid IP address</strong> consists of exactly four integers separated by single dots. Each integer is between <code>0</code> and <code>255</code> (<strong>inclusive</strong>) and cannot have leading zeros.</p><p>Given a string <code>s</code> containing only digits, return <em>all possible valid IP addresses that can be formed by inserting dots into </em><code>s</code>. You are <strong>not</strong> allowed to reorder or remove any digits in <code>s</code>. You may return the valid IP addresses in <strong>any</strong> order.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "25525511135"',
        outputText: '["255.255.11.135","255.255.111.35"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "0000"',
        outputText: '["0.0.0.0"]',
        explanation: "",
      },
      {
        id: 3,
        inputText: 's = "101023"',
        outputText:
          '["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]',
        explanation: "",
      },
    ],
    tests: '["25525511135", "0000", "101023"]',
    answer:
      '[["255.255.11.135", "255.255.111.35"], ["0.0.0.0"], ["1.0.10.23", "1.0.102.3", "10.1.0.23", "10.10.2.3", "101.0.2.3"]]',
    code: "/**\n * @param {string} s\n * @return {string[]}\n */\nvar restoreIpAddresses = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 94,
    title: "Binary Tree Inorder Traversal",
    titleSlug: "binary-tree-inorder-traversal",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes' values</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,2,3]",
        outputText: "[1,3,2]",
        explanation: "",
      },
      { id: 2, inputText: "root = []", outputText: "[]", explanation: "" },
      { id: 3, inputText: "root = [1]", outputText: "[1]", explanation: "" },
    ],
    tests: "[[1, null, 2, 3], [], [1]]",
    answer: "[[1, 3, 2], [], [1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 95,
    title: "Unique Binary Search Trees II",
    titleSlug: "unique-binary-search-trees-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Dynamic Programming",
      "Backtracking",
      "Tree",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints: "<li><code>1 &lt;= n &lt;= 8</code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <em>all the structurally unique <strong>BST'</strong>s (binary search trees), which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>. Return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText:
          "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
        explanation: "",
      },
      { id: 2, inputText: "n = 1", outputText: "[[1]]", explanation: "" },
    ],
    tests: "[3, 1]",
    answer:
      "[[[1, null, 2, null, 3], [1, null, 3, 2], [2, 1, 3], [3, 1, null, null, 2], [3, 2, null, 1]], [[1]]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number} n\n * @return {TreeNode[]}\n */\nvar generateTrees = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 96,
    title: "Unique Binary Search Trees",
    titleSlug: "unique-binary-search-trees",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints: "<li><code>1 &lt;= n &lt;= 19</code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <em>the number of structurally unique <strong>BST'</strong>s (binary search trees) which has exactly </em><code>n</code><em> nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>.</p>",
    examples: [
      { id: 1, inputText: "n = 3", outputText: "5", explanation: "" },
      { id: 2, inputText: "n = 1", outputText: "1", explanation: "" },
    ],
    tests: "[3, 1]",
    answer: "[5, 1]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 97,
    title: "Interleaving String",
    titleSlug: "interleaving-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li> <li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li> <li><code>|n - m| &lt;= 1</code></li> <li>The <strong>interleaving</strong> is <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> or <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li> <li><code>0 &lt;= s1.length, s2.length &lt;= 100</code></li> <li><code>0 &lt;= s3.length &lt;= 200</code></li> <li><code>s1</code>, <code>s2</code>, and <code>s3</code> consist of lowercase English letters.</li>",
    question:
      '<p>Given strings <code>s1</code>, <code>s2</code>, and <code>s3</code>, find whether <code>s3</code> is formed by an <strong>interleaving</strong> of <code>s1</code> and <code>s2</code>.</p><p>An <strong>interleaving</strong> of two strings <code>s</code> and <code>t</code> is a configuration where <code>s</code> and <code>t</code> are divided into <code>n</code> and <code>m</code> <span data-keyword="substring-nonempty">substrings</span> respectively, such that:</p><p><strong>Note:</strong> <code>a + b</code> is the concatenation of strings <code>a</code> and <code>b</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"',
        outputText: "true",
        explanation:
          'One way to obtain s3 is:\nSplit s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".\nInterleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".\nSince s3 can be obtained by interleaving s1 and s2, we return true.',
      },
      {
        id: 2,
        inputText: 's1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"',
        outputText: "false",
        explanation:
          "Notice how it is impossible to interleave s2 with any other string to obtain s3.",
      },
      {
        id: 3,
        inputText: 's1 = "", s2 = "", s3 = ""',
        outputText: "true",
        explanation: "",
      },
    ],
    tests: '["aabcc", "aabcc", ""]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {boolean}\n */\nvar isInterleave = function(s1, s2, s3) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 98,
    title: "Validate Binary Search Tree",
    titleSlug: "validate-binary-search-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The left <span data-keyword=\"subtree\">subtree</span> of a node contains only nodes with keys <strong>less than</strong> the node's key.</li> <li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p><p>A <strong>valid BST</strong> is defined as follows:</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [2,1,3]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [5,1,4,null,null,3,6]",
        outputText: "false",
        explanation:
          "The root node's value is 5 but its right child's value is 4.",
      },
    ],
    tests: "[[2, 1, 3], [5, 1, 4, null, null, 3, 6]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 99,
    title: "Recover Binary Search Tree",
    titleSlug: "recover-binary-search-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[2, 1000]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>You are given the <code>root</code> of a binary search tree (BST), where the values of <strong>exactly</strong> two nodes of the tree were swapped by mistake. <em>Recover the tree without changing its structure</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,3,null,null,2]",
        outputText: "[3,1,null,null,2]",
        explanation:
          "3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.",
      },
      {
        id: 2,
        inputText: "root = [3,1,4,null,null,2]",
        outputText: "[2,1,4,null,null,3]",
        explanation:
          "2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.",
      },
    ],
    tests: "[[1, 3, null, null, 2], [3, 1, 4, null, null, 2]]",
    answer: "[[3, 1, null, null, 2], [2, 1, 4, null, null, 3]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar recoverTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 100,
    title: "Same Tree",
    titleSlug: "same-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p><p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>",
    examples: [
      {
        id: 1,
        inputText: "p = [1,2,3], q = [1,2,3]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "p = [1,2], q = [1,null,2]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "p = [1,2,1], q = [1,1,2]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3], [1, 2], [1, 2, 1]]",
    answer: "[true, false, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 101,
    title: "Symmetric Tree",
    titleSlug: "symmetric-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, <em>check whether it is a mirror of itself</em> (i.e., symmetric around its center).</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,2,3,4,4,3]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [1,2,2,null,3,null,3]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 2, 3, 4, 4, 3], [1, 2, 2, null, 3, null, 3]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 103,
    title: "Binary Tree Zigzag Level Order Traversal",
    titleSlug: "binary-tree-zigzag-level-order-traversal",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Breadth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the zigzag level order traversal of its nodes' values</em>. (i.e., from left to right, then right to left for the next level and alternate between).</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,9,20,null,null,15,7]",
        outputText: "[[3],[20,9],[15,7]]",
        explanation: "",
      },
      { id: 2, inputText: "root = [1]", outputText: "[[1]]", explanation: "" },
      { id: 3, inputText: "root = []", outputText: "[]", explanation: "" },
    ],
    tests: "[[3, 9, 20, null, null, 15, 7], [1], []]",
    answer: "[[[3], [20, 9], [15, 7]], [[1]], []]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 104,
    title: "Maximum Depth of Binary Tree",
    titleSlug: "maximum-depth-of-binary-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p><p>A binary tree's <strong>maximum depth</strong>\u00a0is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,9,20,null,null,15,7]",
        outputText: "3",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [1,null,2]",
        outputText: "2",
        explanation: "",
      },
    ],
    tests: "[[3, 9, 20, null, null, 15, 7], [1, null, 2]]",
    answer: "[3, 2]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 105,
    title: "Construct Binary Tree from Preorder and Inorder Traversal",
    titleSlug: "construct-binary-tree-from-preorder-and-inorder-traversal",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Tree",
      "Binary Tree",
    ],
    constaints:
      "<li><code>1 &lt;= preorder.length &lt;= 3000</code></li> <li><code>inorder.length == preorder.length</code></li> <li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li> <li><code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li> <li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li> <li><code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li> <li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>",
    question:
      "<p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
        outputText: "[3,9,20,null,null,15,7]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "preorder = [-1], inorder = [-1]",
        outputText: "[-1]",
        explanation: "",
      },
    ],
    tests: "[[3, 9, 20, 15, 7], [-1]]",
    answer: "[[3, 9, 20, null, null, 15, 7], [-1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */\nvar buildTree = function(preorder, inorder) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 106,
    title: "Construct Binary Tree from Inorder and Postorder Traversal",
    titleSlug: "construct-binary-tree-from-inorder-and-postorder-traversal",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Tree",
      "Binary Tree",
    ],
    constaints:
      "<li><code>1 &lt;= inorder.length &lt;= 3000</code></li> <li><code>postorder.length == inorder.length</code></li> <li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li> <li><code>inorder</code> and <code>postorder</code> consist of <strong>unique</strong> values.</li> <li>Each value of <code>postorder</code> also appears in <code>inorder</code>.</li> <li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li> <li><code>postorder</code> is <strong>guaranteed</strong> to be the postorder traversal of the tree.</li>",
    question:
      "<p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]",
        outputText: "[3,9,20,null,null,15,7]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "inorder = [-1], postorder = [-1]",
        outputText: "[-1]",
        explanation: "",
      },
    ],
    tests: "[[9, 3, 15, 20, 7], [-1]]",
    answer: "[[3, 9, 20, null, null, 15, 7], [-1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} inorder\n * @param {number[]} postorder\n * @return {TreeNode}\n */\nvar buildTree = function(inorder, postorder) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 107,
    title: "Binary Tree Level Order Traversal II",
    titleSlug: "binary-tree-level-order-traversal-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Breadth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the bottom-up level order traversal of its nodes' values</em>. (i.e., from left to right, level by level from leaf to root).</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,9,20,null,null,15,7]",
        outputText: "[[15,7],[9,20],[3]]",
        explanation: "",
      },
      { id: 2, inputText: "root = [1]", outputText: "[[1]]", explanation: "" },
      { id: 3, inputText: "root = []", outputText: "[]", explanation: "" },
    ],
    tests: "[[3, 9, 20, null, null, 15, 7], [1], []]",
    answer: "[[[15, 7], [9, 20], [3]], [[1]], []]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrderBottom = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 108,
    title: "Convert Sorted Array to Binary Search Tree",
    titleSlug: "convert-sorted-array-to-binary-search-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Array",
      "Divide and Conquer",
      "Tree",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> is sorted in a <strong>strictly increasing</strong> order.</li>",
    question:
      '<p>Given an integer array <code>nums</code> where the elements are sorted in <strong>ascending order</strong>, convert <em>it to a </em><span data-keyword="height-balanced"><strong><em>height-balanced</em></strong></span> <em>binary search tree</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "nums = [-10,-3,0,5,9]",
        outputText: "[0,-3,9,-10,null,5]",
        explanation: "[0,-10,5,null,-3,null,9] is also accepted:",
      },
      {
        id: 2,
        inputText: "nums = [1,3]",
        outputText: "[3,1]",
        explanation: "[1,null,3] and [3,1] are both height-balanced BSTs.",
      },
    ],
    tests: "[[-10, -3, 0, 5, 9], [1, 3]]",
    answer: "[[0, -3, 9, -10, null, 5], [3, 1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar sortedArrayToBST = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 109,
    title: "Convert Sorted List to Binary Search Tree",
    titleSlug: "convert-sorted-list-to-binary-search-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Linked List",
      "Divide and Conquer",
      "Tree",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in <code>head</code> is in the range <code>[0, 2 * 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      '<p>Given the <code>head</code> of a singly linked list where elements are sorted in <strong>ascending order</strong>, convert <em>it to a </em><span data-keyword="height-balanced"><strong><em>height-balanced</em></strong></span> <em>binary search tree</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "head = [-10,-3,0,5,9]",
        outputText: "[0,-3,9,-10,null,5]",
        explanation:
          "One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.",
      },
      { id: 2, inputText: "head = []", outputText: "[]", explanation: "" },
    ],
    tests: "[[-10, -3, 0, 5, 9], []]",
    answer: "[[0, -3, 9, -10, null, 5], []]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {TreeNode}\n */\nvar sortedListToBST = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 110,
    title: "Balanced Binary Tree",
    titleSlug: "balanced-binary-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>",
    question:
      '<p>Given a binary tree, determine if it is <span data-keyword="height-balanced"><strong>height-balanced</strong></span>.</p>',
    examples: [
      {
        id: 1,
        inputText: "root = [3,9,20,null,null,15,7]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [1,2,2,3,3,null,null,4,4]",
        outputText: "false",
        explanation: "",
      },
      { id: 3, inputText: "root = []", outputText: "true", explanation: "" },
    ],
    tests:
      "[[3, 9, 20, null, null, 15, 7], [1, 2, 2, 3, 3, null, null, 4, 4], []]",
    answer: "[true, false, true]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 111,
    title: "Minimum Depth of Binary Tree",
    titleSlug: "minimum-depth-of-binary-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 10<sup>5</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>Given a binary tree, find its minimum depth.</p><p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p><p><strong>Note:</strong>\u00a0A leaf is a node with no children.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,9,20,null,null,15,7]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [2,null,3,null,4,null,5,null,6]",
        outputText: "5",
        explanation: "",
      },
    ],
    tests:
      "[[3, 9, 20, null, null, 15, 7], [2, null, 3, null, 4, null, 5, null, 6]]",
    answer: "[2, 5]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 112,
    title: "Path Sum",
    titleSlug: "path-sum",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <code>true</code> if the tree has a <strong>root-to-leaf</strong> path such that adding up all the values along the path equals <code>targetSum</code>.</p><p>A <strong>leaf</strong> is a node with no children.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22",
        outputText: "true",
        explanation: "The root-to-leaf path with the target sum is shown.",
      },
      {
        id: 2,
        inputText: "root = [1,2,3], targetSum = 5",
        outputText: "false",
        explanation:
          "There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.",
      },
      {
        id: 3,
        inputText: "root = [], targetSum = 0",
        outputText: "false",
        explanation:
          "Since the tree is empty, there are no root-to-leaf paths.",
      },
    ],
    tests:
      "[[5, 4, 8, 11, null, 13, 4, 7, 2, null, null, null, 1], [1, 2, 3], []]",
    answer: "[true, false, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {boolean}\n */\nvar hasPathSum = function(root, targetSum) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 113,
    title: "Path Sum II",
    titleSlug: "path-sum-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Backtracking", "Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <em>all <strong>root-to-leaf</strong> paths where the sum of the node values in the path equals </em><code>targetSum</code><em>. Each path should be returned as a list of the node <strong>values</strong>, not node references</em>.</p><p>A <strong>root-to-leaf</strong> path is a path starting from the root and ending at any leaf node. A <strong>leaf</strong> is a node with no children.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
        outputText: "[[5,4,11,2],[5,8,4,5]]",
        explanation:
          "There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22",
      },
      {
        id: 2,
        inputText: "root = [1,2,3], targetSum = 5",
        outputText: "[]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "root = [1,2], targetSum = 0",
        outputText: "[]",
        explanation: "",
      },
    ],
    tests:
      "[[5, 4, 8, 11, null, 13, 4, 7, 2, null, null, 5, 1], [1, 2, 3], [1, 2]]",
    answer: "[[[5, 4, 11, 2], [5, 8, 4, 5]], [], []]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {number[][]}\n */\nvar pathSum = function(root, targetSum) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 114,
    title: "Flatten Binary Tree to Linked List",
    titleSlug: "flatten-binary-tree-to-linked-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Linked List",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree",
    ],
    constaints:
      '<li>The "linked list" should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>.</li> <li>The "linked list" should be in the same order as a <a href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR" target="_blank"><strong>pre-order</strong><strong> traversal</strong></a> of the binary tree.</li> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>',
    question:
      '<p>Given the <code>root</code> of a binary tree, flatten the tree into a "linked list":</p>',
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,5,3,4,null,6]",
        outputText: "[1,null,2,null,3,null,4,null,5,null,6]",
        explanation: "",
      },
      { id: 2, inputText: "root = []", outputText: "[]", explanation: "" },
      { id: 3, inputText: "root = [0]", outputText: "[0]", explanation: "" },
    ],
    tests: "[[1, 2, 5, 3, 4, null, 6], [], [0]]",
    answer: "[[1, null, 2, null, 3, null, 4, null, 5, null, 6], [], [0]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar flatten = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 115,
    title: "Distinct Subsequences",
    titleSlug: "distinct-subsequences",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= s.length, t.length &lt;= 1000</code></li> <li><code>s</code> and <code>t</code> consist of English letters.</li>",
    question:
      "<p>Given two strings s and t, return <i>the number of distinct</i> <b><i>subsequences</i></b><i> of </i>s<i> which equals </i>t.</p><p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "rabbbit", t = "rabbit"',
        outputText: "3",
        explanation:
          'As shown below, there are 3 ways you can generate "rabbit" from s.',
      },
      {
        id: 2,
        inputText: 's = "babgbag", t = "bag"',
        outputText: "5",
        explanation:
          'As shown below, there are 5 ways you can generate "bag" from s.',
      },
    ],
    tests: '["rabbbit", "babgbag"]',
    answer: "[3, 5]",
    code: "/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar numDistinct = function(s, t) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 118,
    title: "Pascal's Triangle",
    titleSlug: "pascals-triangle",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints: "<li><code>1 &lt;= numRows &lt;= 30</code></li>",
    question:
      "<p>Given an integer <code>numRows</code>, return the first numRows of <strong>Pascal's triangle</strong>.</p><p>In <strong>Pascal's triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>",
    examples: [
      {
        id: 1,
        inputText: "numRows = 5",
        outputText: "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        explanation: "",
      },
      { id: 2, inputText: "numRows = 1", outputText: "[[1]]", explanation: "" },
    ],
    tests: "[5, 1]",
    answer: "[[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]], [[1]]]",
    code: "/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 119,
    title: "Pascal's Triangle II",
    titleSlug: "pascals-triangle-ii",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints: "<li><code>0 &lt;= rowIndex &lt;= 33</code></li>",
    question:
      "<p>Given an integer <code>rowIndex</code>, return the <code>rowIndex<sup>th</sup></code> (<strong>0-indexed</strong>) row of the <strong>Pascal's triangle</strong>.</p><p>In <strong>Pascal's triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>",
    examples: [
      {
        id: 1,
        inputText: "rowIndex = 3",
        outputText: "[1,3,3,1]",
        explanation: "",
      },
      { id: 2, inputText: "rowIndex = 0", outputText: "[1]", explanation: "" },
      {
        id: 3,
        inputText: "rowIndex = 1",
        outputText: "[1,1]",
        explanation: "",
      },
    ],
    tests: "[3, 0, 1]",
    answer: "[[1, 3, 3, 1], [1], [1, 1]]",
    code: "/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 120,
    title: "Triangle",
    titleSlug: "triangle",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= triangle.length &lt;= 200</code></li> <li><code>triangle[0].length == 1</code></li> <li><code>triangle[i].length == triangle[i - 1].length + 1</code></li> <li><code>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given a <code>triangle</code> array, return <em>the minimum path sum from top to bottom</em>.</p><p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index <code>i</code> on the current row, you may move to either index <code>i</code> or index <code>i + 1</code> on the next row.</p>",
    examples: [
      {
        id: 1,
        inputText: "triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]",
        outputText: "11",
        explanation: "The triangle looks like:",
      },
      {
        id: 2,
        inputText: "triangle = [[-10]]",
        outputText: "-10",
        explanation: "",
      },
    ],
    tests: "[[[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [[-10]]]",
    answer: "[11, -10]",
    code: "/**\n * @param {number[][]} triangle\n * @return {number}\n */\nvar minimumTotal = function(triangle) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 121,
    title: "Best Time to Buy and Sell Stock",
    titleSlug: "best-time-to-buy-and-sell-stock",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p><p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p><p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "prices = [7,1,5,3,6,4]",
        outputText: "5",
        explanation:
          "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.",
      },
      {
        id: 2,
        inputText: "prices = [7,6,4,3,1]",
        outputText: "0",
        explanation:
          "In this case, no transactions are done and the max profit = 0.",
      },
    ],
    tests: "[[7, 1, 5, 3, 6, 4], [7, 6, 4, 3, 1]]",
    answer: "[5, 0]",
    code: "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 122,
    title: "Best Time to Buy and Sell Stock II",
    titleSlug: "best-time-to-buy-and-sell-stock-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Greedy"],
    constaints:
      "<li><code>1 &lt;= prices.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p><p>On each day, you may decide to buy and/or sell the stock. You can only hold <strong>at most one</strong> share of the stock at any time. However, you can buy it then immediately sell it on the <strong>same day</strong>.</p><p>Find and return <em>the <strong>maximum</strong> profit you can achieve</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "prices = [7,1,5,3,6,4]",
        outputText: "7",
        explanation:
          "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.",
      },
      {
        id: 2,
        inputText: "prices = [1,2,3,4,5]",
        outputText: "4",
        explanation:
          "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.",
      },
      {
        id: 3,
        inputText: "prices = [7,6,4,3,1]",
        outputText: "0",
        explanation:
          "There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.",
      },
    ],
    tests: "[[7, 1, 5, 3, 6, 4], [1, 2, 3, 4, 5], [7, 6, 4, 3, 1]]",
    answer: "[7, 4, 0]",
    code: "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 123,
    title: "Best Time to Buy and Sell Stock III",
    titleSlug: "best-time-to-buy-and-sell-stock-iii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= prices[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p><p>Find the maximum profit you can achieve. You may complete <strong>at most two transactions</strong>.</p><p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>",
    examples: [
      {
        id: 1,
        inputText: "prices = [3,3,5,0,0,3,1,4]",
        outputText: "6",
        explanation:
          "Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.",
      },
      {
        id: 2,
        inputText: "prices = [1,2,3,4,5]",
        outputText: "4",
        explanation:
          "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.",
      },
      {
        id: 3,
        inputText: "prices = [7,6,4,3,1]",
        outputText: "0",
        explanation:
          "In this case, no transaction is done, i.e. max profit = 0.",
      },
    ],
    tests: "[[3, 3, 5, 0, 0, 3, 1, 4], [1, 2, 3, 4, 5], [7, 6, 4, 3, 1]]",
    answer: "[6, 4, 0]",
    code: "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 124,
    title: "Binary Tree Maximum Path Sum",
    titleSlug: "binary-tree-maximum-path-sum",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 3 * 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>A <strong>path</strong> in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <strong>at most once</strong>. Note that the path does not need to pass through the root.</p><p>The <strong>path sum</strong> of a path is the sum of the node's values in the path.</p><p>Given the <code>root</code> of a binary tree, return <em>the maximum <strong>path sum</strong> of any <strong>non-empty</strong> path</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3]",
        outputText: "6",
        explanation:
          "The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.",
      },
      {
        id: 2,
        inputText: "root = [-10,9,20,null,null,15,7]",
        outputText: "42",
        explanation:
          "The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.",
      },
    ],
    tests: "[[1, 2, 3], [-10, 9, 20, null, null, 15, 7]]",
    answer: "[6, 42]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 125,
    title: "Valid Palindrome",
    titleSlug: "valid-palindrome",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>s</code> consists only of printable ASCII characters.</li>",
    question:
      "<p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p><p>Given a string <code>s</code>, return <code>true</code><em> if it is a <strong>palindrome</strong>, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "A man, a plan, a canal: Panama"',
        outputText: "true",
        explanation: '"amanaplanacanalpanama" is a palindrome.',
      },
      {
        id: 2,
        inputText: 's = "race a car"',
        outputText: "false",
        explanation: '"raceacar" is not a palindrome.',
      },
      {
        id: 3,
        inputText: 's = " "',
        outputText: "true",
        explanation:
          's is an empty string "" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.',
      },
    ],
    tests: '["A man, a plan, a canal: Panama", "race a car", " "]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 126,
    title: "Word Ladder II",
    titleSlug: "word-ladder-ii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Backtracking", "Breadth-First Search"],
    constaints:
      "<li>Every adjacent pair of words differs by a single letter.</li> <li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li> <li><code>s<sub>k</sub> == endWord</code></li> <li><code>1 &lt;= beginWord.length &lt;= 5</code></li> <li><code>endWord.length == beginWord.length</code></li> <li><code>1 &lt;= wordList.length &lt;= 500</code></li> <li><code>wordList[i].length == beginWord.length</code></li> <li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li> <li><code>beginWord != endWord</code></li> <li>All the words in <code>wordList</code> are <strong>unique</strong>.</li> <li>The <strong>sum</strong> of all shortest transformation sequences does not exceed <code>10<sup>5</sup></code>.</li>",
    question:
      "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p><p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>all the <strong>shortest transformation sequences</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words </em><code>[beginWord, s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]',
        outputText:
          '[["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]',
        explanation:
          'There are 2 shortest transformation sequences:\n"hit" -> "hot" -> "dot" -> "dog" -> "cog"\n"hit" -> "hot" -> "lot" -> "log" -> "cog"',
      },
      {
        id: 2,
        inputText:
          'beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]',
        outputText: "[]",
        explanation:
          'The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.',
      },
    ],
    tests: '["hit", "hit"]',
    answer:
      '[[["hit", "hot", "dot", "dog", "cog"], ["hit", "hot", "lot", "log", "cog"]], []]',
    code: "/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */\nvar findLadders = function(beginWord, endWord, wordList) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 127,
    title: "Word Ladder",
    titleSlug: "word-ladder",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Breadth-First Search"],
    constaints:
      "<li>Every adjacent pair of words differs by a single letter.</li> <li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li> <li><code>s<sub>k</sub> == endWord</code></li> <li><code>1 &lt;= beginWord.length &lt;= 10</code></li> <li><code>endWord.length == beginWord.length</code></li> <li><code>1 &lt;= wordList.length &lt;= 5000</code></li> <li><code>wordList[i].length == beginWord.length</code></li> <li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li> <li><code>beginWord != endWord</code></li> <li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>",
    question:
      "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p><p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or </em><code>0</code><em> if no such sequence exists.</em></p>",
    examples: [
      {
        id: 1,
        inputText:
          'beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]',
        outputText: "5",
        explanation:
          'One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.',
      },
      {
        id: 2,
        inputText:
          'beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]',
        outputText: "0",
        explanation:
          'The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.',
      },
    ],
    tests: '["hit", "hit"]',
    answer: "[5, 0]",
    code: "/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nvar ladderLength = function(beginWord, endWord, wordList) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 128,
    title: "Longest Consecutive Sequence",
    titleSlug: "longest-consecutive-sequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Union Find"],
    constaints:
      "<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest consecutive elements sequence.</em></p><p>You must write an algorithm that runs in\u00a0<code>O(n)</code>\u00a0time.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [100,4,200,1,3,2]",
        outputText: "4",
        explanation: "The longest consecutive elements sequence is",
      },
      {
        id: 2,
        inputText: "nums = [0,3,7,2,5,8,4,6,0,1]",
        outputText: "9",
        explanation: "",
      },
    ],
    tests: "[[100, 4, 200, 1, 3, 2], [0, 3, 7, 2, 5, 8, 4, 6, 0, 1]]",
    answer: "[4, 9]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 129,
    title: "Sum Root to Leaf Numbers",
    titleSlug: "sum-root-to-leaf-numbers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>For example, the root-to-leaf path <code>1 -&gt; 2 -&gt; 3</code> represents the number <code>123</code>.</li> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>The depth of the tree will not exceed <code>10</code>.</li>",
    question:
      "<p>You are given the <code>root</code> of a binary tree containing digits from <code>0</code> to <code>9</code> only.</p><p>Each root-to-leaf path in the tree represents a number.</p><p>Return <em>the total sum of all root-to-leaf numbers</em>. Test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p><p>A <strong>leaf</strong> node is a node with no children.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3]",
        outputText: "25",
        explanation: "The root-to-leaf path",
      },
      {
        id: 2,
        inputText: "root = [4,9,0,5,1]",
        outputText: "1026",
        explanation: "The root-to-leaf path",
      },
    ],
    tests: "[[1, 2, 3], [4, 9, 0, 5, 1]]",
    answer: "[25, 1026]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 130,
    title: "Surrounded Regions",
    titleSlug: "surrounded-regions",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix",
    ],
    constaints:
      "<li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>board[i][j]</code> is <code>'X'</code> or <code>'O'</code>.</li>",
    question:
      "<p>Given an <code>m x n</code> matrix <code>board</code> containing <code>'X'</code> and <code>'O'</code>, <em>capture all regions that are 4-directionally\u00a0surrounded by</em> <code>'X'</code>.</p><p>A region is <strong>captured</strong> by flipping all <code>'O'</code>s into <code>'X'</code>s in that surrounded region.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]',
        outputText:
          '[["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]',
        explanation:
          "Notice that an 'O' should not be flipped if:\n- It is on the border, or\n- It is adjacent to an 'O' that should not be flipped.\nThe bottom 'O' is on the border, so it is not flipped.\nThe other three 'O' form a surrounded region, so they are flipped.",
      },
      {
        id: 2,
        inputText: 'board = [["X"]]',
        outputText: '[["X"]]',
        explanation: "",
      },
    ],
    tests:
      '[[["X", "X", "X", "X"], ["X", "O", "O", "X"], ["X", "X", "O", "X"], ["X", "O", "X", "X"]], [["X"]]]',
    answer:
      '[[["X", "X", "X", "X"], ["X", "X", "X", "X"], ["X", "X", "X", "X"], ["X", "O", "X", "X"]], [["X"]]]',
    code: "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 131,
    title: "Palindrome Partitioning",
    titleSlug: "palindrome-partitioning",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming", "Backtracking"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 16</code></li> <li><code>s</code> contains only lowercase English letters.</li>",
    question:
      '<p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword="substring-nonempty">substring</span> of the partition is a <span data-keyword="palindrome-string"><strong>palindrome</strong></span>. Return <em>all possible palindrome partitioning of </em><code>s</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "aab"',
        outputText: '[["a","a","b"],["aa","b"]]',
        explanation: "",
      },
      { id: 2, inputText: 's = "a"', outputText: '[["a"]]', explanation: "" },
    ],
    tests: '["aab", "a"]',
    answer: '[[["a", "a", "b"], ["aa", "b"]], [["a"]]]',
    code: "/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 132,
    title: "Palindrome Partitioning II",
    titleSlug: "palindrome-partitioning-ii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> consists of lowercase English letters only.</li>",
    question:
      '<p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword="substring-nonempty">substring</span> of the partition is a <span data-keyword="palindrome-string">palindrome</span>.</p><p>Return <em>the <strong>minimum</strong> cuts needed for a palindrome partitioning of</em> <code>s</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "aab"',
        outputText: "1",
        explanation:
          'The palindrome partitioning ["aa","b"] could be produced using 1 cut.',
      },
      { id: 2, inputText: 's = "a"', outputText: "0", explanation: "" },
      { id: 3, inputText: 's = "ab"', outputText: "1", explanation: "" },
    ],
    tests: '["aab", "a", "ab"]',
    answer: "[1, 0, 1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar minCut = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 134,
    title: "Gas Station",
    titleSlug: "gas-station",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy"],
    constaints:
      "<li><code>n == gas.length == cost.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= gas[i], cost[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>i<sup>th</sup></code> station is <code>gas[i]</code>.</p><p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>i<sup>th</sup></code> station to its next <code>(i + 1)<sup>th</sup></code> station. You begin the journey with an empty tank at one of the gas stations.</p><p>Given two integer arrays <code>gas</code> and <code>cost</code>, return <em>the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return</em> <code>-1</code>. If there exists a solution, it is <strong>guaranteed</strong> to be <strong>unique</strong></p>",
    examples: [
      {
        id: 1,
        inputText: "gas = [1,2,3,4,5], cost = [3,4,5,1,2]",
        outputText: "3",
        explanation:
          "Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.",
      },
      {
        id: 2,
        inputText: "gas = [2,3,4], cost = [3,4,3]",
        outputText: "-1",
        explanation:
          "You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [2, 3, 4]]",
    answer: "[3, -1]",
    code: "/**\n * @param {number[]} gas\n * @param {number[]} cost\n * @return {number}\n */\nvar canCompleteCircuit = function(gas, cost) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 135,
    title: "Candy",
    titleSlug: "candy",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Greedy"],
    constaints:
      "<li>Each child must have at least one candy.</li> <li>Children with a higher rating get more candies than their neighbors.</li> <li><code>n == ratings.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= ratings[i] &lt;= 2 * 10<sup>4</sup></code></li>",
    question:
      "<p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p><p>You are giving candies to these children subjected to the following requirements:</p><p>Return <em>the minimum number of candies you need to have to distribute the candies to the children</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "ratings = [1,0,2]",
        outputText: "5",
        explanation:
          "You can allocate to the first, second and third child with 2, 1, 2 candies respectively.",
      },
      {
        id: 2,
        inputText: "ratings = [1,2,2]",
        outputText: "4",
        explanation:
          "You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.",
      },
    ],
    tests: "[[1, 0, 2], [1, 2, 2]]",
    answer: "[5, 4]",
    code: "/**\n * @param {number[]} ratings\n * @return {number}\n */\nvar candy = function(ratings) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 136,
    title: "Single Number",
    titleSlug: "single-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li> <li>Each element in the array appears twice except for one element which appears only once.</li>",
    question:
      "<p>Given a <strong>non-empty</strong>\u00a0array of integers <code>nums</code>, every element appears <em>twice</em> except for one. Find that single one.</p><p>You must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.</p>",
    examples: [
      { id: 1, inputText: "nums = [2,2,1]", outputText: "1", explanation: "" },
      {
        id: 2,
        inputText: "nums = [4,1,2,1,2]",
        outputText: "4",
        explanation: "",
      },
      { id: 3, inputText: "nums = [1]", outputText: "1", explanation: "" },
    ],
    tests: "[[2, 2, 1], [4, 1, 2, 1, 2], [1]]",
    answer: "[1, 4, 1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 137,
    title: "Single Number II",
    titleSlug: "single-number-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li>Each element in <code>nums</code> appears exactly <strong>three times</strong> except for one element which appears <strong>once</strong>.</li>",
    question:
      "<p>Given an integer array <code>nums</code> where\u00a0every element appears <strong>three times</strong> except for one, which appears <strong>exactly once</strong>. <em>Find the single element and return it</em>.</p><p>You must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,2,3,2]",
        outputText: "3",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [0,1,0,1,0,1,99]",
        outputText: "99",
        explanation: "",
      },
    ],
    tests: "[[2, 2, 3, 2], [0, 1, 0, 1, 0, 1, 99]]",
    answer: "[3, 99]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 138,
    title: "Copy List with Random Pointer",
    titleSlug: "copy-list-with-random-pointer",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Linked List"],
    constaints:
      "<li><code>val</code>: an integer representing <code>Node.val</code></li> <li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li>",
    question:
      '<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p><p>Construct a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p><p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p><p>Return <em>the head of the copied linked list</em>.</p><p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p><p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p>',
    examples: [
      {
        id: 1,
        inputText: "head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
        outputText: "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [[1,1],[2,1]]",
        outputText: "[[1,1],[2,1]]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "head = [[3,null],[3,0],[3,null]]",
        outputText: "[[3,null],[3,0],[3,null]]",
        explanation: "",
      },
    ],
    tests:
      "[[[7, null], [13, 0], [11, 4], [10, 2], [1, 0]], [[1, 1], [2, 1]], [[3, null], [3, 0], [3, null]]]",
    answer:
      "[[[7, null], [13, 0], [11, 4], [10, 2], [1, 0]], [[1, 1], [2, 1]], [[3, null], [3, 0], [3, null]]]",
    code: "/**\n * // Definition for a Node.\n * function Node(val, next, random) {\n *    this.val = val;\n *    this.next = next;\n *    this.random = random;\n * };\n */\n\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar copyRandomList = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 139,
    title: "Word Break",
    titleSlug: "word-break",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Trie",
      "Memoization",
    ],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 300</code></li> <li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> <li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li> <li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li> <li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p><p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "leetcode", wordDict = ["leet","code"]',
        outputText: "true",
        explanation:
          'Return true because "leetcode" can be segmented as "leet code".',
      },
      {
        id: 2,
        inputText: 's = "applepenapple", wordDict = ["apple","pen"]',
        outputText: "true",
        explanation:
          'Return true because "applepenapple" can be segmented as "apple pen apple".\nNote that you are allowed to reuse a dictionary word.',
      },
      {
        id: 3,
        inputText:
          's = "catsandog", wordDict = ["cats","dog","sand","and","cat"]',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["leetcode", "applepenapple", "catsandog"]',
    answer: "[true, true, false]",
    code: "/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 140,
    title: "Word Break II",
    titleSlug: "word-break-ii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Trie",
      "Memoization",
    ],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> <li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li> <li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li> <li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li> <li>Input is generated in a way that the length of the answer doesn't exceed\u00a010<sup>5</sup>.</li>",
    question:
      "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, add spaces in <code>s</code> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in <strong>any order</strong>.</p><p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>",
    examples: [
      {
        id: 1,
        inputText:
          's = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]',
        outputText: '["cats and dog","cat sand dog"]',
        explanation: "",
      },
      {
        id: 2,
        inputText:
          's = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]',
        outputText:
          '["pine apple pen apple","pineapple pen apple","pine applepen apple"]',
        explanation: "Note that you are allowed to reuse a dictionary word.",
      },
      {
        id: 3,
        inputText:
          's = "catsandog", wordDict = ["cats","dog","sand","and","cat"]',
        outputText: "[]",
        explanation: "",
      },
    ],
    tests: '["catsanddog", "pineapplepenapple", "catsandog"]',
    answer:
      '[["cats and dog", "cat sand dog"], ["pine apple pen apple", "pineapple pen apple", "pine applepen apple"], []]',
    code: "/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {string[]}\n */\nvar wordBreak = function(s, wordDict) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 144,
    title: "Binary Tree Preorder Traversal",
    titleSlug: "binary-tree-preorder-traversal",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the preorder traversal of its nodes' values</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,2,3]",
        outputText: "[1,2,3]",
        explanation: "",
      },
      { id: 2, inputText: "root = []", outputText: "[]", explanation: "" },
      { id: 3, inputText: "root = [1]", outputText: "[1]", explanation: "" },
    ],
    tests: "[[1, null, 2, 3], [], [1]]",
    answer: "[[1, 2, 3], [], [1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 145,
    title: "Binary Tree Postorder Traversal",
    titleSlug: "binary-tree-postorder-traversal",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Stack", "Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of the nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a\u00a0binary tree, return <em>the postorder traversal of its nodes' values</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,2,3]",
        outputText: "[3,2,1]",
        explanation: "",
      },
      { id: 2, inputText: "root = []", outputText: "[]", explanation: "" },
      { id: 3, inputText: "root = [1]", outputText: "[1]", explanation: "" },
    ],
    tests: "[[1, null, 2, 3], [], [1]]",
    answer: "[[3, 2, 1], [], [1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 146,
    title: "LRU Cache",
    titleSlug: "lru-cache",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    constaints:
      "<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li> <li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li> <li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li> <li><code>1 &lt;= capacity &lt;= 3000</code></li> <li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li> <li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>get</code> and <code>put</code>.</li>",
    question:
      '<p>Design a data structure that follows the constraints of a <strong><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank">Least Recently Used (LRU) cache</a></strong>.</p><p>Implement the <code>LRUCache</code> class:</p><p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>',
    examples: [
      {
        id: 1,
        inputText:
          '["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]',
        outputText: "[null, null, null, 1, null, -1, null, -1, 3, 4]",
        explanation:
          "LRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4",
      },
    ],
    tests:
      '[["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]]',
    answer: "[[null, null, null, 1, null, -1, null, -1, 3, 4]]",
    code: "/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    \n};\n\n/** \n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 147,
    title: "Insertion Sort List",
    titleSlug: "insertion-sort-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Sorting"],
    constaints:
      "<li>Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.</li> <li>At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.</li> <li>It repeats until no input elements remain.</li> <li>The number of nodes in the list is in the range <code>[1, 5000]</code>.</li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>",
    question:
      "<p>Given the <code>head</code> of a singly linked list, sort the list using <strong>insertion sort</strong>, and return <em>the sorted list's head</em>.</p><p>The steps of the <strong>insertion sort</strong> algorithm:</p><p>The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [4,2,1,3]",
        outputText: "[1,2,3,4]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [-1,5,3,4,0]",
        outputText: "[-1,0,3,4,5]",
        explanation: "",
      },
    ],
    tests: "[[4, 2, 1, 3], [-1, 5, 3, 4, 0]]",
    answer: "[[1, 2, 3, 4], [-1, 0, 3, 4, 5]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar insertionSortList = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 148,
    title: "Sort List",
    titleSlug: "sort-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Linked List",
      "Two Pointers",
      "Divide and Conquer",
      "Sorting",
      "Merge Sort",
    ],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[0, 5 * 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given the <code>head</code> of a linked list, return <em>the list after sorting it in <strong>ascending order</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [4,2,1,3]",
        outputText: "[1,2,3,4]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [-1,5,3,4,0]",
        outputText: "[-1,0,3,4,5]",
        explanation: "",
      },
      { id: 3, inputText: "head = []", outputText: "[]", explanation: "" },
    ],
    tests: "[[4, 2, 1, 3], [-1, 5, 3, 4, 0], []]",
    answer: "[[1, 2, 3, 4], [-1, 0, 3, 4, 5], []]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar sortList = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 149,
    title: "Max Points on a Line",
    titleSlug: "max-points-on-a-line",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Math", "Geometry"],
    constaints:
      "<li><code>1 &lt;= points.length &lt;= 300</code></li> <li><code>points[i].length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>All the <code>points</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane, return <em>the maximum number of points that lie on the same straight line</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "points = [[1,1],[2,2],[3,3]]",
        outputText: "3",
        explanation: "",
      },
      {
        id: 2,
        inputText: "points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
        outputText: "4",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 1], [2, 2], [3, 3]], [[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]]]",
    answer: "[3, 4]",
    code: "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxPoints = function(points) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 150,
    title: "Evaluate Reverse Polish Notation",
    titleSlug: "evaluate-reverse-polish-notation",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Stack"],
    constaints:
      "<li>The valid operators are <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, and <code>'/'</code>.</li> <li>Each operand may be an integer or another expression.</li> <li>The division between two integers always <strong>truncates toward zero</strong>.</li> <li>There will not be any division by zero.</li> <li>The input represents a valid arithmetic expression in a reverse polish notation.</li> <li>The answer and all the intermediate calculations can be represented in a <strong>32-bit</strong> integer.</li> <li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li> <li><code>tokens[i]</code> is either an operator: <code>\"+\"</code>, <code>\"-\"</code>, <code>\"*\"</code>, or <code>\"/\"</code>, or an integer in the range <code>[-200, 200]</code>.</li>",
    question:
      '<p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank">Reverse Polish Notation</a>.</p><p>Evaluate the expression. Return <em>an integer that represents the value of the expression</em>.</p><p><strong>Note</strong> that:</p>',
    examples: [
      {
        id: 1,
        inputText: 'tokens = ["2","1","+","3","*"]',
        outputText: "9",
        explanation: "((2 + 1) * 3) = 9",
      },
      {
        id: 2,
        inputText: 'tokens = ["4","13","5","/","+"]',
        outputText: "6",
        explanation: "(4 + (13 / 5)) = 6",
      },
      {
        id: 3,
        inputText:
          'tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]',
        outputText: "22",
        explanation:
          "((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22",
      },
    ],
    tests:
      '[["2", "1", "+", "3", "*"], ["4", "13", "5", "/", "+"], ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]]',
    answer: "[9, 6, 22]",
    code: "/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function(tokens) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 151,
    title: "Reverse Words in a String",
    titleSlug: "reverse-words-in-a-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>' '</code>.</li> <li>There is <strong>at least one</strong> word in <code>s</code>.</li>",
    question:
      "<p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p><p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p><p>Return <em>a string of the words in reverse order concatenated by a single space.</em></p><p><b>Note</b> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "the sky is blue"',
        outputText: '"blue is sky the"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "  hello world  "',
        outputText: '"world hello"',
        explanation:
          "Your reversed string should not contain leading or trailing spaces.",
      },
      {
        id: 3,
        inputText: 's = "a good   example"',
        outputText: '"example good a"',
        explanation:
          "You need to reduce multiple spaces between two words to a single space in the reversed string.",
      },
    ],
    tests: '["the sky is blue", "  hello world  ", "a good   example"]',
    answer: '["blue is sky the", "world hello", "example good a"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 152,
    title: "Maximum Product Subarray",
    titleSlug: "maximum-product-subarray",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>",
    question:
      '<p>Given an integer array <code>nums</code>, find a <span data-keyword="subarray-nonempty">subarray</span> that has the largest product, and return <em>the product</em>.</p><p>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p>',
    examples: [
      {
        id: 1,
        inputText: "nums = [2,3,-2,4]",
        outputText: "6",
        explanation: "[2,3] has the largest product 6.",
      },
      {
        id: 2,
        inputText: "nums = [-2,0,-1]",
        outputText: "0",
        explanation:
          "The result cannot be 2, because [-2,-1] is not a subarray.",
      },
    ],
    tests: "[[2, 3, -2, 4], [-2, 0, -1]]",
    answer: "[6, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 153,
    title: "Find Minimum in Rotated Sorted Array",
    titleSlug: "find-minimum-in-rotated-sorted-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>[4,5,6,7,0,1,2]</code> if it was rotated <code>4</code> times.</li> <li><code>[0,1,2,4,5,6,7]</code> if it was rotated <code>7</code> times.</li> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li> <li>All the integers of <code>nums</code> are <strong>unique</strong>.</li> <li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li>",
    question:
      "<p>Suppose an array of length <code>n</code> sorted in ascending order is <strong>rotated</strong> between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might become:</p><p>Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p><p>Given the sorted rotated array <code>nums</code> of <strong>unique</strong> elements, return <em>the minimum element of this array</em>.</p><p>You must write an algorithm that runs in\u00a0<code>O(log n) time.</code></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,4,5,1,2]",
        outputText: "1",
        explanation: "The original array was [1,2,3,4,5] rotated 3 times.",
      },
      {
        id: 2,
        inputText: "nums = [4,5,6,7,0,1,2]",
        outputText: "0",
        explanation:
          "The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.",
      },
      {
        id: 3,
        inputText: "nums = [11,13,15,17]",
        outputText: "11",
        explanation:
          "The original array was [11,13,15,17] and it was rotated 4 times.",
      },
    ],
    tests: "[[3, 4, 5, 1, 2], [4, 5, 6, 7, 0, 1, 2], [11, 13, 15, 17]]",
    answer: "[1, 0, 11]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 154,
    title: "Find Minimum in Rotated Sorted Array II",
    titleSlug: "find-minimum-in-rotated-sorted-array-ii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>[4,5,6,7,0,1,4]</code> if it was rotated <code>4</code> times.</li> <li><code>[0,1,4,4,5,6,7]</code> if it was rotated <code>7</code> times.</li> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li> <li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li>",
    question:
      "<p>Suppose an array of length <code>n</code> sorted in ascending order is <strong>rotated</strong> between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,4,4,5,6,7]</code> might become:</p><p>Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p><p>Given the sorted rotated array <code>nums</code> that may contain <strong>duplicates</strong>, return <em>the minimum element of this array</em>.</p><p>You must decrease the overall operation steps as much as possible.</p>",
    examples: [
      { id: 1, inputText: "nums = [1,3,5]", outputText: "1", explanation: "" },
      {
        id: 2,
        inputText: "nums = [2,2,2,0,1]",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[[1, 3, 5], [2, 2, 2, 0, 1]]",
    answer: "[1, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 155,
    title: "Min Stack",
    titleSlug: "min-stack",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Stack", "Design"],
    constaints:
      "<li><code>MinStack()</code> initializes the stack object.</li> <li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li> <li><code>void pop()</code> removes the element on the top of the stack.</li> <li><code>int top()</code> gets the top element of the stack.</li> <li><code>int getMin()</code> retrieves the minimum element in the stack.</li> <li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li> <li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li>",
    question:
      "<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><p>Implement the <code>MinStack</code> class:</p><p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MinStack","push","push","push","getMin","pop","top","getMin"]\n[[],[-2],[0],[-3],[],[],[],[]]',
        outputText: "[null,null,null,null,-3,null,0,-2]",
        explanation:
          "MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2",
      },
    ],
    tests:
      '[["MinStack", "push", "push", "push", "getMin", "pop", "top", "getMin"]]',
    answer: "[[null, null, null, null, -3, null, 0, -2]]",
    code: "\nvar MinStack = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nMinStack.prototype.push = function(val) {\n    \n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.getMin = function() {\n    \n};\n\n/** \n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(val)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 162,
    title: "Find Peak Element",
    titleSlug: "find-peak-element",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li>",
    question:
      "<p>A peak element is an element that is strictly greater than its neighbors.</p><p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to <strong>any of the peaks</strong>.</p><p>You may imagine that <code>nums[-1] = nums[n] = -\u221e</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p><p>You must write an algorithm that runs in <code>O(log n)</code> time.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,1]",
        outputText: "2",
        explanation:
          "3 is a peak element and your function should return the index number 2.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,1,3,5,6,4]",
        outputText: "5",
        explanation:
          "Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.",
      },
    ],
    tests: "[[1, 2, 3, 1], [1, 2, 1, 3, 5, 6, 4]]",
    answer: "[2, 5]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findPeakElement = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 164,
    title: "Maximum Gap",
    titleSlug: "maximum-gap",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sorting", "Bucket Sort", "Radix Sort"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>the maximum difference between two successive elements in its sorted form</em>. If the array contains less than two elements, return <code>0</code>.</p><p>You must write an algorithm that runs in linear time and uses linear extra space.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,6,9,1]",
        outputText: "3",
        explanation:
          "The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.",
      },
      {
        id: 2,
        inputText: "nums = [10]",
        outputText: "0",
        explanation:
          "The array contains less than 2 elements, therefore return 0.",
      },
    ],
    tests: "[[3, 6, 9, 1], [10]]",
    answer: "[3, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumGap = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 165,
    title: "Compare Version Numbers",
    titleSlug: "compare-version-numbers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li>If <code>version1 &lt; version2</code>, return <code>-1</code>.</li> <li>If <code>version1 &gt; version2</code>, return <code>1</code>.</li> <li>Otherwise, return <code>0</code>.</li> <li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li> <li><code>version1</code> and <code>version2</code>\u00a0only contain digits and <code>'.'</code>.</li> <li><code>version1</code> and <code>version2</code>\u00a0<strong>are valid version numbers</strong>.</li> <li>All the given revisions in\u00a0<code>version1</code> and <code>version2</code>\u00a0can be stored in\u00a0a\u00a0<strong>32-bit integer</strong>.</li>",
    question:
      "<p>Given two version numbers,\u00a0<code>version1</code> and <code>version2</code>, compare them.</p><p>Version numbers consist of <strong>one or more revisions</strong> joined by a dot\u00a0<code>'.'</code>. Each revision\u00a0consists of <strong>digits</strong>\u00a0and may contain leading <strong>zeros</strong>. Every revision contains <strong>at least one character</strong>. Revisions are <strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example\u00a0<code>2.5.33</code>\u00a0and\u00a0<code>0.1</code>\u00a0are valid version numbers.</p><p>To compare version numbers, compare their revisions in <strong>left-to-right order</strong>. Revisions are compared using their\u00a0<strong>integer value ignoring any leading zeros</strong>. This means that revisions\u00a0<code>1</code>\u00a0and\u00a0<code>001</code>\u00a0are considered\u00a0<strong>equal</strong>. If a version number does not specify a revision at an index, then\u00a0<strong>treat the revision as\u00a0<code>0</code></strong>. For example, version\u00a0<code>1.0</code> is less than version\u00a0<code>1.1</code>\u00a0because their revision 0s are the same, but their revision 1s are\u00a0<code>0</code>\u00a0and\u00a0<code>1</code>\u00a0respectively, and\u00a0<code>0 &lt; 1</code>.</p><p><em>Return the following:</em></p>",
    examples: [
      {
        id: 1,
        inputText: 'version1 = "1.01", version2 = "1.001"',
        outputText: "0",
        explanation:
          'Ignoring leading zeroes, both "01" and "001" represent the same integer "1".',
      },
      {
        id: 2,
        inputText: 'version1 = "1.0", version2 = "1.0.0"',
        outputText: "0",
        explanation:
          'version1 does not specify revision 2, which means it is treated as "0".',
      },
      {
        id: 3,
        inputText: 'version1 = "0.1", version2 = "1.1"',
        outputText: "-1",
        explanation:
          'version1\'s revision 0 is "0", while version2\'s revision 0 is "1". 0 < 1, so version1 < version2.',
      },
    ],
    tests: '["1.01", "1.0", "0.1"]',
    answer: "[0, 0, -1]",
    code: "/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 166,
    title: "Fraction to Recurring Decimal",
    titleSlug: "fraction-to-recurring-decimal",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Math", "String"],
    constaints:
      "<li><code>-2<sup>31</sup> &lt;=\u00a0numerator, denominator &lt;= 2<sup>31</sup> - 1</code></li> <li><code>denominator != 0</code></li>",
    question:
      "<p>Given two integers representing the <code>numerator</code> and <code>denominator</code> of a fraction, return <em>the fraction in string format</em>.</p><p>If the fractional part is repeating, enclose the repeating part in parentheses.</p><p>If multiple answers are possible, return <strong>any of them</strong>.</p><p>It is <strong>guaranteed</strong> that the length of the answer string is less than <code>10<sup>4</sup></code> for all the given inputs.</p>",
    examples: [
      {
        id: 1,
        inputText: "numerator = 1, denominator = 2",
        outputText: '"0.5"',
        explanation: "",
      },
      {
        id: 2,
        inputText: "numerator = 2, denominator = 1",
        outputText: '"2"',
        explanation: "",
      },
      {
        id: 3,
        inputText: "numerator = 4, denominator = 333",
        outputText: '"0.(012)"',
        explanation: "",
      },
    ],
    tests: "[1, 2, 4]",
    answer: '["0.5", "2", "0.(012)"]',
    code: "/**\n * @param {number} numerator\n * @param {number} denominator\n * @return {string}\n */\nvar fractionToDecimal = function(numerator, denominator) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 169,
    title: "Majority Element",
    titleSlug: "majority-element",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Counting",
    ],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.</p><p>The majority element is the element that appears more than <code>\u230an / 2\u230b</code> times. You may assume that the majority element always exists in the array.</p>",
    examples: [
      { id: 1, inputText: "nums = [3,2,3]", outputText: "3", explanation: "" },
      {
        id: 2,
        inputText: "nums = [2,2,1,1,1,2,2]",
        outputText: "2",
        explanation: "",
      },
    ],
    tests: "[[3, 2, 3], [2, 2, 1, 1, 1, 2, 2]]",
    answer: "[3, 2]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 172,
    title: "Factorial Trailing Zeroes",
    titleSlug: "factorial-trailing-zeroes",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math"],
    constaints: "<li><code>0 &lt;= n &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <em>the number of trailing zeroes in </em><code>n!</code>.</p><p>Note that <code>n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText: "0",
        explanation: "3! = 6, no trailing zero.",
      },
      {
        id: 2,
        inputText: "n = 5",
        outputText: "1",
        explanation: "5! = 120, one trailing zero.",
      },
      { id: 3, inputText: "n = 0", outputText: "0", explanation: "" },
    ],
    tests: "[3, 5, 0]",
    answer: "[0, 1, 0]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 174,
    title: "Dungeon Game",
    titleSlug: "dungeon-game",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Matrix"],
    constaints:
      "<li><code>m == dungeon.length</code></li> <li><code>n == dungeon[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>-1000 &lt;= dungeon[i][j] &lt;= 1000</code></li>",
    question:
      "<p>The demons had captured the princess and imprisoned her in <strong>the bottom-right corner</strong> of a <code>dungeon</code>. The <code>dungeon</code> consists of <code>m x n</code> rooms laid out in a 2D grid. Our valiant knight was initially positioned in <strong>the top-left room</strong> and must fight his way through <code>dungeon</code> to rescue the princess.</p><p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to <code>0</code> or below, he dies immediately.</p><p>Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).</p><p>To reach the princess as quickly as possible, the knight decides to move only <strong>rightward</strong> or <strong>downward</strong> in each step.</p><p>Return <em>the knight's minimum initial health so that he can rescue the princess</em>.</p><p><strong>Note</strong> that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p>",
    examples: [
      {
        id: 1,
        inputText: "dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]",
        outputText: "7",
        explanation:
          "The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.",
      },
      { id: 2, inputText: "dungeon = [[0]]", outputText: "1", explanation: "" },
    ],
    tests: "[[[-2, -3, 3], [-5, -10, 1], [10, 30, -5]], [[0]]]",
    answer: "[7, 1]",
    code: "/**\n * @param {number[][]} dungeon\n * @return {number}\n */\nvar calculateMinimumHP = function(dungeon) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 179,
    title: "Largest Number",
    titleSlug: "largest-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "String", "Greedy", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given a list of non-negative integers <code>nums</code>, arrange them such that they form the largest number and return it.</p><p>Since the result may be very large, so you need to return a string instead of an integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [10,2]",
        outputText: '"210"',
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [3,30,34,5,9]",
        outputText: '"9534330"',
        explanation: "",
      },
    ],
    tests: "[[10, 2], [3, 30, 34, 5, 9]]",
    answer: '["210", "9534330"]',
    code: "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar largestNumber = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 187,
    title: "Repeated DNA Sequences",
    titleSlug: "repeated-dna-sequences",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function",
    ],
    constaints:
      "<li>For example, <code>\"ACGAATTCCG\"</code> is a <strong>DNA sequence</strong>.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, or <code>'T'</code>.</li>",
    question:
      "<p>The <strong>DNA sequence</strong> is composed of a series of nucleotides abbreviated as <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, and <code>'T'</code>.</p><p>When studying <strong>DNA</strong>, it is useful to identify repeated sequences within the DNA.</p><p>Given a string <code>s</code> that represents a <strong>DNA sequence</strong>, return all the <strong><code>10</code>-letter-long</strong> sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"',
        outputText: '["AAAAACCCCC","CCCCCAAAAA"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "AAAAAAAAAAAAA"',
        outputText: '["AAAAAAAAAA"]',
        explanation: "",
      },
    ],
    tests: '["AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT", "AAAAAAAAAAAAA"]',
    answer: '[["AAAAACCCCC", "CCCCCAAAAA"], ["AAAAAAAAAA"]]',
    code: "/**\n * @param {string} s\n * @return {string[]}\n */\nvar findRepeatedDnaSequences = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 189,
    title: "Rotate Array",
    titleSlug: "rotate-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Two Pointers"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li> <li>Try to come up with as many solutions as you can. There are at least <strong>three</strong> different ways to solve this problem.</li> <li>Could you do it in-place with <code>O(1)</code> extra space?</li>",
    question:
      "<p>Given an integer array <code>nums</code>, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4,5,6,7], k = 3",
        outputText: "[5,6,7,1,2,3,4]",
        explanation:
          "rotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]",
      },
      {
        id: 2,
        inputText: "nums = [-1,-100,3,99], k = 2",
        outputText: "[3,99,-1,-100]",
        explanation:
          "rotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]",
      },
    ],
    tests: "[[1, 2, 3, 4, 5, 6, 7], [-1, -100, 3, 99]]",
    answer: "[[5, 6, 7, 1, 2, 3, 4], [3, 99, -1, -100]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 198,
    title: "House Robber",
    titleSlug: "house-robber",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 400</code></li>",
    question:
      "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p><p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <b>without alerting the police</b></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,1]",
        outputText: "4",
        explanation:
          "Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.",
      },
      {
        id: 2,
        inputText: "nums = [2,7,9,3,1]",
        outputText: "12",
        explanation:
          "Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.",
      },
    ],
    tests: "[[1, 2, 3, 1], [2, 7, 9, 3, 1]]",
    answer: "[4, 12]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 200,
    title: "Number of Islands",
    titleSlug: "number-of-islands",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix",
    ],
    constaints:
      "<li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>grid[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li>",
    question:
      "<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>'1'</code>s (land) and <code>'0'</code>s (water), return <em>the number of islands</em>.</p><p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'grid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]',
        outputText: "1",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          'grid = [\n  ["1","1","0","0","0"],\n  ["1","1","0","0","0"],\n  ["0","0","1","0","0"],\n  ["0","0","0","1","1"]\n]',
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      '[[["1", "1", "1", "1", "0"], ["1", "1", "0", "1", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "0", "0", "0"]], [["1", "1", "0", "0", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "1", "0", "0"], ["0", "0", "0", "1", "1"]]]',
    answer: "[1, 3]",
    code: "/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 201,
    title: "Bitwise AND of Numbers Range",
    titleSlug: "bitwise-and-of-numbers-range",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Bit Manipulation"],
    constaints:
      "<li><code>0 &lt;= left &lt;= right &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given two integers <code>left</code> and <code>right</code> that represent the range <code>[left, right]</code>, return <em>the bitwise AND of all numbers in this range, inclusive</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "left = 5, right = 7",
        outputText: "4",
        explanation: "",
      },
      {
        id: 2,
        inputText: "left = 0, right = 0",
        outputText: "0",
        explanation: "",
      },
      {
        id: 3,
        inputText: "left = 1, right = 2147483647",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[5, 0, 1]",
    answer: "[4, 0, 0]",
    code: "/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar rangeBitwiseAnd = function(left, right) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 203,
    title: "Remove Linked List Elements",
    titleSlug: "remove-linked-list-elements",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Linked List", "Recursion"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 50</code></li> <li><code>0 &lt;= val &lt;= 50</code></li>",
    question:
      "<p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return <em>the new head</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,6,3,4,5,6], val = 6",
        outputText: "[1,2,3,4,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [], val = 1",
        outputText: "[]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "head = [7,7,7,7], val = 7",
        outputText: "[]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 6, 3, 4, 5, 6], [], [7, 7, 7, 7]]",
    answer: "[[1, 2, 3, 4, 5], [], []]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */\nvar removeElements = function(head, val) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 205,
    title: "Isomorphic Strings",
    titleSlug: "isomorphic-strings",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>t.length == s.length</code></li> <li><code>s</code> and <code>t</code> consist of any valid ascii character.</li>",
    question:
      "<p>Given two strings <code>s</code> and <code>t</code>, <em>determine if they are isomorphic</em>.</p><p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p><p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "egg", t = "add"',
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "foo", t = "bar"',
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: 's = "paper", t = "title"',
        outputText: "true",
        explanation: "",
      },
    ],
    tests: '["egg", "foo", "paper"]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isIsomorphic = function(s, t) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 206,
    title: "Reverse Linked List",
    titleSlug: "reverse-linked-list",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Linked List", "Recursion"],
    constaints:
      "<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>",
    question:
      "<p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4,5]",
        outputText: "[5,4,3,2,1]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [1,2]",
        outputText: "[2,1]",
        explanation: "",
      },
      { id: 3, inputText: "head = []", outputText: "[]", explanation: "" },
    ],
    tests: "[[1, 2, 3, 4, 5], [1, 2], []]",
    answer: "[[5, 4, 3, 2, 1], [2, 1], []]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 208,
    title: "Implement Trie (Prefix Tree)",
    titleSlug: "implement-trie-prefix-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Design", "Trie"],
    constaints:
      "<li><code>Trie()</code> Initializes the trie object.</li> <li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li> <li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li> <li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li> <li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> <li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li> <li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>",
    question:
      '<p>A <a href="https://en.wikipedia.org/wiki/Trie" target="_blank"><strong>trie</strong></a> (pronounced as "try") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p><p>Implement the Trie class:</p>',
    examples: [
      {
        id: 1,
        inputText:
          '["Trie", "insert", "search", "search", "startsWith", "insert", "search"]\n[[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]',
        outputText: "[null, null, true, false, true, null, true]",
        explanation:
          'Trie trie = new Trie();\ntrie.insert("apple");\ntrie.search("apple");   // return True\ntrie.search("app");     // return False\ntrie.startsWith("app"); // return True\ntrie.insert("app");\ntrie.search("app");     // return True',
      },
    ],
    tests:
      '[["Trie", "insert", "search", "search", "startsWith", "insert", "search"]]',
    answer: "[[null, null, true, false, true, null, true]]",
    code: "\nvar Trie = function() {\n    \n};\n\n/** \n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function(word) {\n    \n};\n\n/** \n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function(word) {\n    \n};\n\n/** \n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function(prefix) {\n    \n};\n\n/** \n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 209,
    title: "Minimum Size Subarray Sum",
    titleSlug: "minimum-size-subarray-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Sliding Window", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      '<p>Given an array of positive integers <code>nums</code> and a positive integer <code>target</code>, return <em>the <strong>minimal length</strong> of a </em><span data-keyword="subarray-nonempty"><em>subarray</em></span><em> whose sum is greater than or equal to</em> <code>target</code>. If there is no such subarray, return <code>0</code> instead.</p>',
    examples: [
      {
        id: 1,
        inputText: "target = 7, nums = [2,3,1,2,4,3]",
        outputText: "2",
        explanation:
          "The subarray [4,3] has the minimal length under the problem constraint.",
      },
      {
        id: 2,
        inputText: "target = 4, nums = [1,4,4]",
        outputText: "1",
        explanation: "",
      },
      {
        id: 3,
        inputText: "target = 11, nums = [1,1,1,1,1,1,1,1]",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[7, 4, 11]",
    answer: "[2, 1, 0]",
    code: "/**\n * @param {number} target\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(target, nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 210,
    title: "Course Schedule II",
    titleSlug: "course-schedule-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
    ],
    constaints:
      "<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> <li><code>1 &lt;= numCourses &lt;= 2000</code></li> <li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li> <li><code>prerequisites[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are <strong>distinct</strong>.</li>",
    question:
      "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p><p>Return <em>the ordering of courses you should take to finish all courses</em>. If there are many valid answers, return <strong>any</strong> of them. If it is impossible to finish all courses, return <strong>an empty array</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "numCourses = 2, prerequisites = [[1,0]]",
        outputText: "[0,1]",
        explanation:
          "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].",
      },
      {
        id: 2,
        inputText: "numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]",
        outputText: "[0,2,1,3]",
        explanation:
          "There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].",
      },
      {
        id: 3,
        inputText: "numCourses = 1, prerequisites = []",
        outputText: "[0]",
        explanation: "",
      },
    ],
    tests: "[2, 4, 1]",
    answer: "[[0, 1], [0, 2, 1, 3], [0]]",
    code: "/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {number[]}\n */\nvar findOrder = function(numCourses, prerequisites) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 211,
    title: "Design Add and Search Words Data Structure",
    titleSlug: "design-add-and-search-words-data-structure",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Depth-First Search", "Design", "Trie"],
    constaints:
      "<li><code>WordDictionary()</code>\u00a0Initializes the object.</li> <li><code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.</li> <li><code>bool search(word)</code>\u00a0Returns <code>true</code> if there is any string in the data structure that matches <code>word</code>\u00a0or <code>false</code> otherwise. <code>word</code> may contain dots <code>'.'</code> where dots can be matched with any letter.</li> <li><code>1 &lt;= word.length &lt;= 25</code></li> <li><code>word</code> in <code>addWord</code> consists of lowercase English letters.</li> <li><code>word</code> in <code>search</code> consist of <code>'.'</code> or lowercase English letters.</li> <li>There will be at most <code>2</code> dots in <code>word</code> for <code>search</code> queries.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>addWord</code> and <code>search</code>.</li>",
    question:
      "<p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p><p>Implement the <code>WordDictionary</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["WordDictionary","addWord","addWord","addWord","search","search","search","search"]\n[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]',
        outputText: "[null,null,null,null,false,true,true,true]",
        explanation:
          'WordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord("bad");\nwordDictionary.addWord("dad");\nwordDictionary.addWord("mad");\nwordDictionary.search("pad"); // return False\nwordDictionary.search("bad"); // return True\nwordDictionary.search(".ad"); // return True\nwordDictionary.search("b.."); // return True',
      },
    ],
    tests:
      '[["WordDictionary", "addWord", "addWord", "addWord", "search", "search", "search", "search"]]',
    answer: "[[null, null, null, null, false, true, true, true]]",
    code: "\nvar WordDictionary = function() {\n    \n};\n\n/** \n * @param {string} word\n * @return {void}\n */\nWordDictionary.prototype.addWord = function(word) {\n    \n};\n\n/** \n * @param {string} word\n * @return {boolean}\n */\nWordDictionary.prototype.search = function(word) {\n    \n};\n\n/** \n * Your WordDictionary object will be instantiated and called as such:\n * var obj = new WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 212,
    title: "Word Search II",
    titleSlug: "word-search-ii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "String", "Backtracking", "Trie", "Matrix"],
    constaints:
      "<li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 12</code></li> <li><code>board[i][j]</code> is a lowercase English letter.</li> <li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> <li>All the strings of <code>words</code> are unique.</li>",
    question:
      "<p>Given an <code>m x n</code> <code>board</code>\u00a0of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p><p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]',
        outputText: '["eat","oath"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'board = [["a","b"],["c","d"]], words = ["abcb"]',
        outputText: "[]",
        explanation: "",
      },
    ],
    tests:
      '[[["o", "a", "a", "n"], ["e", "t", "a", "e"], ["i", "h", "k", "r"], ["i", "f", "l", "v"]], [["a", "b"], ["c", "d"]]]',
    answer: '[["eat", "oath"], []]',
    code: "/**\n * @param {character[][]} board\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(board, words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 213,
    title: "House Robber II",
    titleSlug: "house-robber-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0<b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p><p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,3,2]",
        outputText: "3",
        explanation:
          "You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,1]",
        outputText: "4",
        explanation:
          "Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.",
      },
      { id: 3, inputText: "nums = [1,2,3]", outputText: "3", explanation: "" },
    ],
    tests: "[[2, 3, 2], [1, 2, 3, 1], [1, 2, 3]]",
    answer: "[3, 4, 3]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar rob = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 214,
    title: "Shortest Palindrome",
    titleSlug: "shortest-palindrome",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Rolling Hash", "String Matching", "Hash Function"],
    constaints:
      "<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters only.</li>",
    question:
      '<p>You are given a string <code>s</code>. You can convert <code>s</code> to a <span data-keyword="palindrome-string">palindrome</span> by adding characters in front of it.</p><p>Return <em>the shortest palindrome you can find by performing this transformation</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "aacecaaa"',
        outputText: '"aaacecaaa"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "abcd"',
        outputText: '"dcbabcd"',
        explanation: "",
      },
    ],
    tests: '["aacecaaa", "abcd"]',
    answer: '["aaacecaaa", "dcbabcd"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar shortestPalindrome = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 215,
    title: "Kth Largest Element in an Array",
    titleSlug: "kth-largest-element-in-an-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect",
    ],
    constaints:
      "<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>largest element in the array</em>.</p><p>Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p><p>Can you solve it without sorting?</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,2,1,5,6,4], k = 2",
        outputText: "5",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [3,2,3,1,2,4,5,5,6], k = 4",
        outputText: "4",
        explanation: "",
      },
    ],
    tests: "[[3, 2, 1, 5, 6, 4], [3, 2, 3, 1, 2, 4, 5, 5, 6]]",
    answer: "[5, 4]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 216,
    title: "Combination Sum III",
    titleSlug: "combination-sum-iii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking"],
    constaints:
      "<li>Only numbers <code>1</code> through <code>9</code> are used.</li> <li>Each number is used <strong>at most once</strong>.</li> <li><code>2 &lt;= k &lt;= 9</code></li> <li><code>1 &lt;= n &lt;= 60</code></li>",
    question:
      "<p>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:</p><p>Return <em>a list of all possible valid combinations</em>. The list must not contain the same combination twice, and the combinations may be returned in any order.</p>",
    examples: [
      {
        id: 1,
        inputText: "k = 3, n = 7",
        outputText: "[[1,2,4]]",
        explanation: "1 + 2 + 4 = 7\nThere are no other valid combinations.",
      },
      {
        id: 2,
        inputText: "k = 3, n = 9",
        outputText: "[[1,2,6],[1,3,5],[2,3,4]]",
        explanation:
          "1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.",
      },
      {
        id: 3,
        inputText: "k = 4, n = 1",
        outputText: "[]",
        explanation:
          "There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.",
      },
    ],
    tests: "[3, 3, 4]",
    answer: "[[[1, 2, 4]], [[1, 2, 6], [1, 3, 5], [2, 3, 4]], []]",
    code: "/**\n * @param {number} k\n * @param {number} n\n * @return {number[][]}\n */\nvar combinationSum3 = function(k, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 217,
    title: "Contains Duplicate",
    titleSlug: "contains-duplicate",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears <strong>at least twice</strong> in the array, and return <code>false</code> if every element is distinct.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,1]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [1,1,1,3,3,4,3,2,4,2]",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 1], [1, 2, 3, 4], [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar containsDuplicate = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 218,
    title: "The Skyline Problem",
    titleSlug: "the-skyline-problem",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set",
    ],
    constaints:
      "<li><code>left<sub>i</sub></code> is the x coordinate of the left edge of the <code>i<sup>th</sup></code> building.</li> <li><code>right<sub>i</sub></code> is the x coordinate of the right edge of the <code>i<sup>th</sup></code> building.</li> <li><code>height<sub>i</sub></code> is the height of the <code>i<sup>th</sup></code> building.</li> <li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li> <li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li> <li><code>buildings</code> is sorted by <code>left<sub>i</sub></code> in\u00a0non-decreasing order.</li>",
    question:
      "<p>A city's <strong>skyline</strong> is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return <em>the <strong>skyline</strong> formed by these buildings collectively</em>.</p><p>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]</code>:</p><p>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.</p><p>The <strong>skyline</strong> should be represented as a list of \"key points\" <strong>sorted by their x-coordinate</strong> in the form <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.</p><p><b>Note:</b> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code></p>",
    examples: [
      {
        id: 1,
        inputText:
          "buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
        outputText: "[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]",
        explanation:
          "Figure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.",
      },
      {
        id: 2,
        inputText: "buildings = [[0,2,3],[2,5,3]]",
        outputText: "[[0,3],[5,0]]",
        explanation: "",
      },
    ],
    tests:
      "[[[2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8]], [[0, 2, 3], [2, 5, 3]]]",
    answer:
      "[[[2, 10], [3, 15], [7, 12], [12, 0], [15, 10], [20, 8], [24, 0]], [[0, 3], [5, 0]]]",
    code: "/**\n * @param {number[][]} buildings\n * @return {number[][]}\n */\nvar getSkyline = function(buildings) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 219,
    title: "Contains Duplicate II",
    titleSlug: "contains-duplicate-ii",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> <em>if there are two <strong>distinct indices</strong> </em><code>i</code><em> and </em><code>j</code><em> in the array such that </em><code>nums[i] == nums[j]</code><em> and </em><code>abs(i - j) &lt;= k</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,1], k = 3",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [1,0,1,1], k = 1",
        outputText: "true",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [1,2,3,1,2,3], k = 2",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 1], [1, 0, 1, 1], [1, 2, 3, 1, 2, 3]]",
    answer: "[true, true, false]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 220,
    title: "Contains Duplicate III",
    titleSlug: "contains-duplicate-iii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Sliding Window",
      "Sorting",
      "Bucket Sort",
      "Ordered Set",
    ],
    constaints:
      "<li><code>i != j</code>,</li> <li><code>abs(i - j) &lt;= indexDiff</code>.</li> <li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code>, and</li> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= indexDiff &lt;= nums.length</code></li> <li><code>0 &lt;= valueDiff &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code> and two integers <code>indexDiff</code> and <code>valueDiff</code>.</p><p>Find a pair of indices <code>(i, j)</code> such that:</p><p>Return <code>true</code><em> if such pair exists or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,1], indexDiff = 3, valueDiff = 0",
        outputText: "true",
        explanation:
          "We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0",
      },
      {
        id: 2,
        inputText: "nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3",
        outputText: "false",
        explanation:
          "After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.",
      },
    ],
    tests: "[[1, 2, 3, 1], [1, 5, 9, 1, 5, 9]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} nums\n * @param {number} indexDiff\n * @param {number} valueDiff\n * @return {boolean}\n */\nvar containsNearbyAlmostDuplicate = function(nums, indexDiff, valueDiff) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 221,
    title: "Maximal Square",
    titleSlug: "maximal-square",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Matrix"],
    constaints:
      "<li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>matrix[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li>",
    question:
      "<p>Given an <code>m x n</code> binary <code>matrix</code> filled with <code>0</code>'s and <code>1</code>'s, <em>find the largest square containing only</em> <code>1</code>'s <em>and return its area</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]',
        outputText: "4",
        explanation: "",
      },
      {
        id: 2,
        inputText: 'matrix = [["0","1"],["1","0"]]',
        outputText: "1",
        explanation: "",
      },
      {
        id: 3,
        inputText: 'matrix = [["0"]]',
        outputText: "0",
        explanation: "",
      },
    ],
    tests:
      '[[["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]], [["0", "1"], ["1", "0"]], [["0"]]]',
    answer: "[4, 1, 0]",
    code: "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 223,
    title: "Rectangle Area",
    titleSlug: "rectangle-area",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Geometry"],
    constaints:
      "<li><code>-10<sup>4</sup> &lt;= ax1 &lt;= ax2 &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= ay1 &lt;= ay2 &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= bx1 &lt;= bx2 &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= by1 &lt;= by2 &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given the coordinates of two <strong>rectilinear</strong> rectangles in a 2D plane, return <em>the total area covered by the two rectangles</em>.</p><p>The first rectangle is defined by its <strong>bottom-left</strong> corner <code>(ax1, ay1)</code> and its <strong>top-right</strong> corner <code>(ax2, ay2)</code>.</p><p>The second rectangle is defined by its <strong>bottom-left</strong> corner <code>(bx1, by1)</code> and its <strong>top-right</strong> corner <code>(bx2, by2)</code>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2",
        outputText: "45",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2",
        outputText: "16",
        explanation: "",
      },
    ],
    tests: "[-3, -2]",
    answer: "[45, 16]",
    code: "/**\n * @param {number} ax1\n * @param {number} ay1\n * @param {number} ax2\n * @param {number} ay2\n * @param {number} bx1\n * @param {number} by1\n * @param {number} bx2\n * @param {number} by2\n * @return {number}\n */\nvar computeArea = function(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 224,
    title: "Basic Calculator",
    titleSlug: "basic-calculator",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Math", "String", "Stack", "Recursion"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consists of digits, <code>'+'</code>, <code>'-'</code>, <code>'('</code>, <code>')'</code>, and <code>' '</code>.</li> <li><code>s</code> represents a valid expression.</li> <li><code>'+'</code> is <strong>not</strong> used as a unary operation (i.e., <code>\"+1\"</code> and <code>\"+(2 + 3)\"</code> is invalid).</li> <li><code>'-'</code> could be used as a unary operation (i.e., <code>\"-1\"</code> and <code>\"-(2 + 3)\"</code> is valid).</li> <li>There will be no two consecutive operators in the input.</li> <li>Every number and running calculation will fit in a signed 32-bit integer.</li>",
    question:
      "<p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.</p><p><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>",
    examples: [
      { id: 1, inputText: 's = "1 + 1"', outputText: "2", explanation: "" },
      { id: 2, inputText: 's = " 2-1 + 2 "', outputText: "3", explanation: "" },
      {
        id: 3,
        inputText: 's = "(1+(4+5+2)-3)+(6+8)"',
        outputText: "23",
        explanation: "",
      },
    ],
    tests: '["1 + 1", " 2-1 + 2 ", "(1+(4+5+2)-3)+(6+8)"]',
    answer: "[2, 3, 23]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 225,
    title: "Implement Stack using Queues",
    titleSlug: "implement-stack-using-queues",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Stack", "Design", "Queue"],
    constaints:
      "<li><code>void push(int x)</code> Pushes element x to the top of the stack.</li> <li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li> <li><code>int top()</code> Returns the element on the top of the stack.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li> <li>You must use <strong>only</strong> standard operations of a queue, which means that only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code> and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.</li> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>top</code> are valid.</li>",
    question:
      "<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p><p>Implement the <code>MyStack</code> class:</p><p><b>Notes:</b></p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MyStack", "push", "push", "top", "pop", "empty"]\n[[], [1], [2], [], [], []]',
        outputText: "[null, null, null, 2, 2, false]",
        explanation:
          "MyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False",
      },
    ],
    tests: '[["MyStack", "push", "push", "top", "pop", "empty"]]',
    answer: "[[null, null, null, 2, 2, false]]",
    code: "\nvar MyStack = function() {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyStack.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nMyStack.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyStack.prototype.top = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyStack.prototype.empty = function() {\n    \n};\n\n/** \n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 226,
    title: "Invert Binary Tree",
    titleSlug: "invert-binary-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, invert the tree, and return <em>its root</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [4,2,7,1,3,6,9]",
        outputText: "[4,7,2,9,6,3,1]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [2,1,3]",
        outputText: "[2,3,1]",
        explanation: "",
      },
      { id: 3, inputText: "root = []", outputText: "[]", explanation: "" },
    ],
    tests: "[[4, 2, 7, 1, 3, 6, 9], [2, 1, 3], []]",
    answer: "[[4, 7, 2, 9, 6, 3, 1], [2, 3, 1], []]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 227,
    title: "Basic Calculator II",
    titleSlug: "basic-calculator-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String", "Stack"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consists of integers and operators <code>('+', '-', '*', '/')</code> separated by some number of spaces.</li> <li><code>s</code> represents <strong>a valid expression</strong>.</li> <li>All the integers in the expression are non-negative integers in the range <code>[0, 2<sup>31</sup> - 1]</code>.</li> <li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit integer</strong>.</li>",
    question:
      "<p>Given a string <code>s</code> which represents an expression, <em>evaluate this expression and return its value</em>.\u00a0</p><p>The integer division should truncate toward zero.</p><p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p><p><strong>Note:</strong> You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>",
    examples: [
      { id: 1, inputText: 's = "3+2*2"', outputText: "7", explanation: "" },
      { id: 2, inputText: 's = " 3/2 "', outputText: "1", explanation: "" },
      { id: 3, inputText: 's = " 3+5 / 2 "', outputText: "5", explanation: "" },
    ],
    tests: '["3+2*2", " 3/2 ", " 3+5 / 2 "]',
    answer: "[7, 1, 5]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 228,
    title: "Summary Ranges",
    titleSlug: "summary-ranges",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      '<li><code>"a-&gt;b"</code> if <code>a != b</code></li> <li><code>"a"</code> if <code>a == b</code></li> <li><code>0 &lt;= nums.length &lt;= 20</code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li>All the values of <code>nums</code> are <strong>unique</strong>.</li> <li><code>nums</code> is sorted in ascending order.</li>',
    question:
      "<p>You are given a <strong>sorted unique</strong> integer array <code>nums</code>.</p><p>A <strong>range</strong> <code>[a,b]</code> is the set of all integers from <code>a</code> to <code>b</code> (inclusive).</p><p>Return <em>the <strong>smallest sorted</strong> list of ranges that <strong>cover all the numbers in the array exactly</strong></em>. That is, each element of <code>nums</code> is covered by exactly one of the ranges, and there is no integer <code>x</code> such that <code>x</code> is in one of the ranges but not in <code>nums</code>.</p><p>Each range <code>[a,b]</code> in the list should be output as:</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,1,2,4,5,7]",
        outputText: '["0->2","4->5","7"]',
        explanation:
          'The ranges are:\n[0,2] --> "0->2"\n[4,5] --> "4->5"\n[7,7] --> "7"',
      },
      {
        id: 2,
        inputText: "nums = [0,2,3,4,6,8,9]",
        outputText: '["0","2->4","6","8->9"]',
        explanation:
          'The ranges are:\n[0,0] --> "0"\n[2,4] --> "2->4"\n[6,6] --> "6"\n[8,9] --> "8->9"',
      },
    ],
    tests: "[[0, 1, 2, 4, 5, 7], [0, 2, 3, 4, 6, 8, 9]]",
    answer: '[["0->2", "4->5", "7"], ["0", "2->4", "6", "8->9"]]',
    code: "/**\n * @param {number[]} nums\n * @return {string[]}\n */\nvar summaryRanges = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 229,
    title: "Majority Element II",
    titleSlug: "majority-element-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sorting", "Counting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an integer array of size <code>n</code>, find all elements that appear more than <code>\u230a n/3 \u230b</code> times.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,2,3]",
        outputText: "[3]",
        explanation: "",
      },
      { id: 2, inputText: "nums = [1]", outputText: "[1]", explanation: "" },
      {
        id: 3,
        inputText: "nums = [1,2]",
        outputText: "[1,2]",
        explanation: "",
      },
    ],
    tests: "[[3, 2, 3], [1], [1, 2]]",
    answer: "[[3], [1], [1, 2]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar majorityElement = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 230,
    title: "Kth Smallest Element in a BST",
    titleSlug: "kth-smallest-element-in-a-bst",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest value (<strong>1-indexed</strong>) of all the values of the nodes in the tree</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,1,4,null,2], k = 1",
        outputText: "1",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [5,3,6,2,4,null,null,1], k = 3",
        outputText: "3",
        explanation: "",
      },
    ],
    tests: "[[3, 1, 4, null, 2], [5, 3, 6, 2, 4, null, null, 1]]",
    answer: "[1, 3]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(root, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 231,
    title: "Power of Two",
    titleSlug: "power-of-two",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation", "Recursion"],
    constaints:
      "<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of two. Otherwise, return <code>false</code></em>.</p><p>An integer <code>n</code> is a power of two, if there exists an integer <code>x</code> such that <code>n == 2<sup>x</sup></code>.</p>",
    examples: [
      { id: 1, inputText: "n = 1", outputText: "true", explanation: "2" },
      { id: 2, inputText: "n = 16", outputText: "true", explanation: "2" },
      { id: 3, inputText: "n = 3", outputText: "false", explanation: "" },
    ],
    tests: "[1, 16, 3]",
    answer: "[true, true, false]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isPowerOfTwo = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 232,
    title: "Implement Queue using Stacks",
    titleSlug: "implement-queue-using-stacks",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Stack", "Design", "Queue"],
    constaints:
      "<li><code>void push(int x)</code> Pushes element x to the back of the queue.</li> <li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li> <li><code>int peek()</code> Returns the element at the front of the queue.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li> <li>You must use <strong>only</strong> standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.</li> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code>\u00a0calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li>",
    question:
      "<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p><p>Implement the <code>MyQueue</code> class:</p><p><strong>Notes:</strong></p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MyQueue", "push", "push", "peek", "pop", "empty"]\n[[], [1], [2], [], [], []]',
        outputText: "[null, null, null, 1, 1, false]",
        explanation:
          "MyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false",
      },
    ],
    tests: '[["MyQueue", "push", "push", "peek", "pop", "empty"]]',
    answer: "[[null, null, null, 1, 1, false]]",
    code: "\nvar MyQueue = function() {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    \n};\n\n/** \n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 233,
    title: "Number of Digit One",
    titleSlug: "number-of-digit-one",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Recursion"],
    constaints: "<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an integer <code>n</code>, count <em>the total number of digit </em><code>1</code><em> appearing in all non-negative integers less than or equal to</em> <code>n</code>.</p>",
    examples: [
      { id: 1, inputText: "n = 13", outputText: "6", explanation: "" },
      { id: 2, inputText: "n = 0", outputText: "0", explanation: "" },
    ],
    tests: "[13, 0]",
    answer: "[6, 0]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar countDigitOne = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 234,
    title: "Palindrome Linked List",
    titleSlug: "palindrome-linked-list",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers", "Stack", "Recursion"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li>",
    question:
      '<p>Given the <code>head</code> of a singly linked list, return <code>true</code><em> if it is a </em><span data-keyword="palindrome-sequence"><em>palindrome</em></span><em> or </em><code>false</code><em> otherwise</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,2,1]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [1,2]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 2, 1], [1, 2]]",
    answer: "[true, false]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar isPalindrome = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 235,
    title: "Lowest Common Ancestor of a Binary Search Tree",
    titleSlug: "lowest-common-ancestor-of-a-binary-search-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li> <li>All <code>Node.val</code> are <strong>unique</strong>.</li> <li><code>p != q</code></li> <li><code>p</code> and <code>q</code> will exist in the BST.</li>",
    question:
      '<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.</p><p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank">definition of LCA on Wikipedia</a>: \u201cThe lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>).\u201d</p>',
    examples: [
      {
        id: 1,
        inputText: "root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8",
        outputText: "6",
        explanation: "The LCA of nodes 2 and 8 is 6.",
      },
      {
        id: 2,
        inputText: "root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4",
        outputText: "2",
        explanation:
          "The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.",
      },
      {
        id: 3,
        inputText: "root = [2,1], p = 2, q = 1",
        outputText: "2",
        explanation: "",
      },
    ],
    tests:
      "[[6, 2, 8, 0, 4, 7, 9, null, null, 3, 5], [6, 2, 8, 0, 4, 7, 9, null, null, 3, 5], [2, 1]]",
    answer: "[6, 2, 2]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 236,
    title: "Lowest Common Ancestor of a Binary Tree",
    titleSlug: "lowest-common-ancestor-of-a-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li> <li>All <code>Node.val</code> are <strong>unique</strong>.</li> <li><code>p != q</code></li> <li><code>p</code> and <code>q</code> will exist in the tree.</li>",
    question:
      '<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p><p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank">definition of LCA on Wikipedia</a>: \u201cThe lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <b>a node to be a descendant of itself</b>).\u201d</p>',
    examples: [
      {
        id: 1,
        inputText: "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        outputText: "3",
        explanation: "The LCA of nodes 5 and 1 is 3.",
      },
      {
        id: 2,
        inputText: "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        outputText: "5",
        explanation:
          "The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.",
      },
      {
        id: 3,
        inputText: "root = [1,2], p = 1, q = 2",
        outputText: "1",
        explanation: "",
      },
    ],
    tests:
      "[[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4], [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4], [1, 2]]",
    answer: "[3, 5, 1]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function(root, p, q) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 237,
    title: "Delete Node in a Linked List",
    titleSlug: "delete-node-in-a-linked-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List"],
    constaints:
      "<li>The value of the given node should not exist in the linked list.</li> <li>The number of nodes in the linked list should decrease by one.</li> <li>All the values before <code>node</code> should be in the same order.</li> <li>All the values after <code>node</code> should be in the same order.</li> <li>For the input, you should provide the entire linked list <code>head</code> and the node to be given <code>node</code>. <code>node</code> should not be the last node of the list and should be an actual node in the list.</li> <li>We will build the linked list and pass the node to your function.</li> <li>The output will be the entire list after calling your function.</li> <li>The number of the nodes in the given list is in the range <code>[2, 1000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li>The value of each node in the list is <strong>unique</strong>.</li> <li>The <code>node</code> to be deleted is <strong>in the list</strong> and is <strong>not a tail</strong> node.</li>",
    question:
      "<p>There is a singly-linked list <code>head</code> and we want to delete a node <code>node</code> in it.</p><p>You are given the node to be deleted <code>node</code>. You will <strong>not be given access</strong> to the first node of <code>head</code>.</p><p>All the values of the linked list are <strong>unique</strong>, and it is guaranteed that the given node <code>node</code> is not the last node in the linked list.</p><p>Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:</p><p><strong>Custom testing:</strong></p>",
    examples: [
      {
        id: 1,
        inputText: "head = [4,5,1,9], node = 5",
        outputText: "[4,1,9]",
        explanation:
          "You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.",
      },
      {
        id: 2,
        inputText: "head = [4,5,1,9], node = 1",
        outputText: "[4,5,9]",
        explanation:
          "You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.",
      },
    ],
    tests: "[[4, 5, 1, 9], [4, 5, 1, 9]]",
    answer: "[[4, 1, 9], [4, 5, 9]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} node\n * @return {void} Do not return anything, modify node in-place instead.\n */\nvar deleteNode = function(node) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 238,
    title: "Product of Array Except Self",
    titleSlug: "product-of-array-except-self",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Prefix Sum"],
    constaints:
      "<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-30 &lt;= nums[i] &lt;= 30</code></li> <li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p><p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p><p>You must write an algorithm that runs in\u00a0<code>O(n)</code>\u00a0time and without using the division operation.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4]",
        outputText: "[24,12,8,6]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [-1,1,0,-3,3]",
        outputText: "[0,0,9,0,0]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4], [-1, 1, 0, -3, 3]]",
    answer: "[[24, 12, 8, 6], [0, 0, 9, 0, 0]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 239,
    title: "Sliding Window Maximum",
    titleSlug: "sliding-window-maximum",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li>",
    question:
      "<p>You are given an array of integers\u00a0<code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p><p>Return <em>the max sliding window</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        outputText: "[3,3,5,5,6,7]",
        explanation:
          "Window position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7",
      },
      {
        id: 2,
        inputText: "nums = [1], k = 1",
        outputText: "[1]",
        explanation: "",
      },
    ],
    tests: "[[1, 3, -1, -3, 5, 3, 6, 7], [1]]",
    answer: "[[3, 3, 5, 5, 6, 7], [1]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 240,
    title: "Search a 2D Matrix II",
    titleSlug: "search-a-2d-matrix-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Divide and Conquer", "Matrix"],
    constaints:
      "<li>Integers in each row are sorted in ascending from left to right.</li> <li>Integers in each column are sorted in ascending from top to bottom.</li> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= n, m &lt;= 300</code></li> <li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li> <li>All the integers in each row are <strong>sorted</strong> in ascending order.</li> <li>All the integers in each column are <strong>sorted</strong> in ascending order.</li> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Write an efficient algorithm that searches for a value <code>target</code> in an <code>m x n</code> integer matrix <code>matrix</code>. This matrix has the following properties:</p>",
    examples: [
      {
        id: 1,
        inputText:
          "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20",
        outputText: "false",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 241,
    title: "Different Ways to Add Parentheses",
    titleSlug: "different-ways-to-add-parentheses",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Math",
      "String",
      "Dynamic Programming",
      "Recursion",
      "Memoization",
    ],
    constaints:
      "<li><code>1 &lt;= expression.length &lt;= 20</code></li> <li><code>expression</code> consists of digits and the operator <code>'+'</code>, <code>'-'</code>, and <code>'*'</code>.</li> <li>All the integer values in the input expression are in the range <code>[0, 99]</code>.</li>",
    question:
      "<p>Given a string <code>expression</code> of numbers and operators, return <em>all possible results from computing all the different possible ways to group numbers and operators</em>. You may return the answer in <strong>any order</strong>.</p><p>The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed <code>10<sup>4</sup></code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'expression = "2-1-1"',
        outputText: "[0,2]",
        explanation: "((2-1)-1) = 0 \n(2-(1-1)) = 2",
      },
      {
        id: 2,
        inputText: 'expression = "2*3-4*5"',
        outputText: "[-34,-14,-10,-10,10]",
        explanation:
          "(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10",
      },
    ],
    tests: '["2-1-1", "2*3-4*5"]',
    answer: "[[0, 2], [-34, -14, -10, -10, 10]]",
    code: "/**\n * @param {string} expression\n * @return {number[]}\n */\nvar diffWaysToCompute = function(expression) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 242,
    title: "Valid Anagram",
    titleSlug: "valid-anagram",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sorting"],
    constaints:
      "<li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>",
    question:
      "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.</p><p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "anagram", t = "nagaram"',
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "rat", t = "car"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["anagram", "rat"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 257,
    title: "Binary Tree Paths",
    titleSlug: "binary-tree-paths",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "String",
      "Backtracking",
      "Tree",
      "Depth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>all root-to-leaf paths in <strong>any order</strong></em>.</p><p>A <strong>leaf</strong> is a node with no children.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,null,5]",
        outputText: '["1->2->5","1->3"]',
        explanation: "",
      },
      { id: 2, inputText: "root = [1]", outputText: '["1"]', explanation: "" },
    ],
    tests: "[[1, 2, 3, null, 5], [1]]",
    answer: '[["1->2->5", "1->3"], ["1"]]',
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string[]}\n */\nvar binaryTreePaths = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 258,
    title: "Add Digits",
    titleSlug: "add-digits",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Simulation", "Number Theory"],
    constaints: "<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer <code>num</code>, repeatedly add all its digits until the result has only one digit, and return it.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 38",
        outputText: "2",
        explanation:
          "The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it.",
      },
      { id: 2, inputText: "num = 0", outputText: "0", explanation: "" },
    ],
    tests: "[38, 0]",
    answer: "[2, 0]",
    code: "/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 263,
    title: "Ugly Number",
    titleSlug: "ugly-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p><p>Given an integer <code>n</code>, return <code>true</code> <em>if</em> <code>n</code> <em>is an <strong>ugly number</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 6",
        outputText: "true",
        explanation: "6 = 2 \u00d7 3",
      },
      {
        id: 2,
        inputText: "n = 1",
        outputText: "true",
        explanation:
          "1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.",
      },
      {
        id: 3,
        inputText: "n = 14",
        outputText: "false",
        explanation: "14 is not ugly since it includes the prime factor 7.",
      },
    ],
    tests: "[6, 1, 14]",
    answer: "[true, true, false]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isUgly = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 268,
    title: "Missing Number",
    titleSlug: "missing-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Math",
      "Binary Search",
      "Bit Manipulation",
      "Sorting",
    ],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= n</code></li> <li>All the numbers of <code>nums</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return <em>the only number in the range that is missing from the array.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,0,1]",
        outputText: "2",
        explanation:
          "n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.",
      },
      {
        id: 2,
        inputText: "nums = [0,1]",
        outputText: "2",
        explanation:
          "n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.",
      },
      {
        id: 3,
        inputText: "nums = [9,6,4,2,3,5,7,0,1]",
        outputText: "8",
        explanation:
          "n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.",
      },
    ],
    tests: "[[3, 0, 1], [0, 1], [9, 6, 4, 2, 3, 5, 7, 0, 1]]",
    answer: "[2, 2, 8]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 273,
    title: "Integer to English Words",
    titleSlug: "integer-to-english-words",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Math", "String", "Recursion"],
    constaints: "<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Convert a non-negative integer <code>num</code> to its English words representation.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 123",
        outputText: '"One Hundred Twenty Three"',
        explanation: "",
      },
      {
        id: 2,
        inputText: "num = 12345",
        outputText: '"Twelve Thousand Three Hundred Forty Five"',
        explanation: "",
      },
      {
        id: 3,
        inputText: "num = 1234567",
        outputText:
          '"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"',
        explanation: "",
      },
    ],
    tests: "[123, 12345, 1234567]",
    answer:
      '["One Hundred Twenty Three", "Twelve Thousand Three Hundred Forty Five", "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"]',
    code: "/**\n * @param {number} num\n * @return {string}\n */\nvar numberToWords = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 274,
    title: "H-Index",
    titleSlug: "h-index",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sorting", "Counting Sort"],
    constaints:
      "<li><code>n == citations.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>0 &lt;= citations[i] &lt;= 1000</code></li>",
    question:
      '<p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>i<sup>th</sup></code> paper, return <em>the researcher\'s h-index</em>.</p><p>According to the <a href="https://en.wikipedia.org/wiki/H-index" target="_blank">definition of h-index on Wikipedia</a>: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p>',
    examples: [
      {
        id: 1,
        inputText: "citations = [3,0,6,1,5]",
        outputText: "3",
        explanation:
          "[3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
      },
      {
        id: 2,
        inputText: "citations = [1,3,1]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[3, 0, 6, 1, 5], [1, 3, 1]]",
    answer: "[3, 1]",
    code: "/**\n * @param {number[]} citations\n * @return {number}\n */\nvar hIndex = function(citations) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 275,
    title: "H-Index II",
    titleSlug: "h-index-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>n == citations.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= citations[i] &lt;= 1000</code></li> <li><code>citations</code> is sorted in <strong>ascending order</strong>.</li>",
    question:
      '<p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>i<sup>th</sup></code> paper and <code>citations</code> is sorted in <strong>ascending order</strong>, return <em>the researcher\'s h-index</em>.</p><p>According to the <a href="https://en.wikipedia.org/wiki/H-index" target="_blank">definition of h-index on Wikipedia</a>: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p><p>You must write an algorithm that runs in logarithmic time.</p>',
    examples: [
      {
        id: 1,
        inputText: "citations = [0,1,3,5,6]",
        outputText: "3",
        explanation:
          "[0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
      },
      {
        id: 2,
        inputText: "citations = [1,2,100]",
        outputText: "2",
        explanation: "",
      },
    ],
    tests: "[[0, 1, 3, 5, 6], [1, 2, 100]]",
    answer: "[3, 2]",
    code: "/**\n * @param {number[]} citations\n * @return {number}\n */\nvar hIndex = function(citations) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 278,
    title: "First Bad Version",
    titleSlug: "first-bad-version",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Binary Search", "Interactive"],
    constaints:
      "<li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p><p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p><p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5, bad = 4",
        outputText: "4",
        explanation:
          "call isBadVersion(3) -> false\ncall isBadVersion(5)\u00a0-> true\ncall isBadVersion(4)\u00a0-> true\nThen 4 is the first bad version.",
      },
      { id: 2, inputText: "n = 1, bad = 1", outputText: "1", explanation: "" },
    ],
    tests: "[5, 1]",
    answer: "[4, 1]",
    code: "/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */\n\n/**\n * @param {function} isBadVersion()\n * @return {function}\n */\nvar solution = function(isBadVersion) {\n    /**\n     * @param {integer} n Total versions\n     * @return {integer} The first bad version\n     */\n    return function(n) {\n        \n    };\n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 279,
    title: "Perfect Squares",
    titleSlug: "perfect-squares",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Breadth-First Search"],
    constaints: "<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <em>the least number of perfect square numbers that sum to</em> <code>n</code>.</p><p>A <strong>perfect square</strong> is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, <code>1</code>, <code>4</code>, <code>9</code>, and <code>16</code> are perfect squares while <code>3</code> and <code>11</code> are not.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 12",
        outputText: "3",
        explanation: "12 = 4 + 4 + 4.",
      },
      {
        id: 2,
        inputText: "n = 13",
        outputText: "2",
        explanation: "13 = 4 + 9.",
      },
    ],
    tests: "[12, 13]",
    answer: "[3, 2]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 282,
    title: "Expression Add Operators",
    titleSlug: "expression-add-operators",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Math", "String", "Backtracking"],
    constaints:
      "<li><code>1 &lt;= num.length &lt;= 10</code></li> <li><code>num</code> consists of only digits.</li> <li><code>-2<sup>31</sup> &lt;= target &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given a string <code>num</code> that contains only digits and an integer <code>target</code>, return <em><strong>all possibilities</strong> to insert the binary operators </em><code>'+'</code><em>, </em><code>'-'</code><em>, and/or </em><code>'*'</code><em> between the digits of </em><code>num</code><em> so that the resultant expression evaluates to the </em><code>target</code><em> value</em>.</p><p>Note that operands in the returned expressions <strong>should not</strong> contain leading zeros.</p>",
    examples: [
      {
        id: 1,
        inputText: 'num = "123", target = 6',
        outputText: '["1*2*3","1+2+3"]',
        explanation: 'Both "1*2*3" and "1+2+3" evaluate to 6.',
      },
      {
        id: 2,
        inputText: 'num = "232", target = 8',
        outputText: '["2*3+2","2+3*2"]',
        explanation: 'Both "2*3+2" and "2+3*2" evaluate to 8.',
      },
      {
        id: 3,
        inputText: 'num = "3456237490", target = 9191',
        outputText: "[]",
        explanation:
          'There are no expressions that can be created from "3456237490" to evaluate to 9191.',
      },
    ],
    tests: '["123", "232", "3456237490"]',
    answer: '[["1*2*3", "1+2+3"], ["2*3+2", "2+3*2"], []]',
    code: "/**\n * @param {string} num\n * @param {number} target\n * @return {string[]}\n */\nvar addOperators = function(num, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 283,
    title: "Move Zeroes",
    titleSlug: "move-zeroes",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, move all <code>0</code>'s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Note</strong> that you must do this in-place without making a copy of the array.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,1,0,3,12]",
        outputText: "[1,3,12,0,0]",
        explanation: "",
      },
      { id: 2, inputText: "nums = [0]", outputText: "[0]", explanation: "" },
    ],
    tests: "[[0, 1, 0, 3, 12], [0]]",
    answer: "[[1, 3, 12, 0, 0], [0]]",
    code: "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 284,
    title: "Peeking Iterator",
    titleSlug: "peeking-iterator",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Design", "Iterator"],
    constaints:
      "<li><code>PeekingIterator(Iterator&lt;int&gt; nums)</code> Initializes the object with the given integer iterator <code>iterator</code>.</li> <li><code>int next()</code> Returns the next element in the array and moves the pointer to the next element.</li> <li><code>boolean hasNext()</code> Returns <code>true</code> if there are still elements in the array.</li> <li><code>int peek()</code> Returns the next element in the array <strong>without</strong> moving the pointer.</li> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li>All the calls to <code>next</code> and <code>peek</code> are valid.</li> <li>At most <code>1000</code> calls will be made to <code>next</code>, <code>hasNext</code>, and <code>peek</code>.</li>",
    question:
      "<p>Design an iterator that supports the <code>peek</code> operation on an existing iterator in addition to the <code>hasNext</code> and the <code>next</code> operations.</p><p>Implement the <code>PeekingIterator</code> class:</p><p><strong>Note:</strong> Each language may have a different implementation of the constructor and <code>Iterator</code>, but they all support the <code>int next()</code> and <code>boolean hasNext()</code> functions.</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["PeekingIterator", "next", "peek", "next", "next", "hasNext"]\n[[[1, 2, 3]], [], [], [], [], []]',
        outputText: "[null, 1, 2, 2, 3, false]",
        explanation:
          "PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [",
      },
    ],
    tests: '[["PeekingIterator", "next", "peek", "next", "next", "hasNext"]]',
    answer: "[[null, 1, 2, 2, 3, false]]",
    code: "/**\n * // This is the Iterator's API interface.\n * // You should not implement it, or speculate about its implementation.\n * function Iterator() {\n *    @ return {number}\n *    this.next = function() { // return the next number of the iterator\n *       ...\n *    }; \n *\n *    @return {boolean}\n *    this.hasNext = function() { // return true if it still has numbers\n *       ...\n *    };\n * };\n */\n\n/**\n * @param {Iterator} iterator\n */\nvar PeekingIterator = function(iterator) {\n    \n};\n\n/**\n * @return {number}\n */\nPeekingIterator.prototype.peek = function() {\n    \n};\n\n/**\n * @return {number}\n */\nPeekingIterator.prototype.next = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nPeekingIterator.prototype.hasNext = function() {\n    \n};\n\n/** \n * Your PeekingIterator object will be instantiated and called as such:\n * var obj = new PeekingIterator(arr)\n * var param_1 = obj.peek()\n * var param_2 = obj.next()\n * var param_3 = obj.hasNext()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 287,
    title: "Find the Duplicate Number",
    titleSlug: "find-the-duplicate-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Binary Search", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>nums.length == n + 1</code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li> <li>All the integers in <code>nums</code> appear only <strong>once</strong> except for <strong>precisely one integer</strong> which appears <strong>two or more</strong> times.</li> <li>How can we prove that at least one duplicate number must exist in <code>nums</code>?</li> <li>Can you solve the problem in linear runtime complexity?</li>",
    question:
      "<p>Given an array of integers <code>nums</code> containing\u00a0<code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p><p>There is only <strong>one repeated number</strong> in <code>nums</code>, return <em>this\u00a0repeated\u00a0number</em>.</p><p>You must solve the problem <strong>without</strong> modifying the array <code>nums</code>\u00a0and uses only constant extra space.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3,4,2,2]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [3,1,3,4,2]",
        outputText: "3",
        explanation: "",
      },
    ],
    tests: "[[1, 3, 4, 2, 2], [3, 1, 3, 4, 2]]",
    answer: "[2, 3]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDuplicate = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 289,
    title: "Game of Life",
    titleSlug: "game-of-life",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints:
      "<li>Any live cell with fewer than two live neighbors dies as if caused by under-population.</li> <li>Any live cell with two or three live neighbors lives on to the next generation.</li> <li>Any live cell with more than three live neighbors dies, as if by over-population.</li> <li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 25</code></li> <li><code>board[i][j]</code> is <code>0</code> or <code>1</code>.</li> <li>Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.</li> <li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?</li>",
    question:
      '<p>According to\u00a0<a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank">Wikipedia\'s article</a>: "The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."</p><p>The board is made up of an <code>m x n</code> grid of cells, where each cell has an initial state: <b>live</b> (represented by a <code>1</code>) or <b>dead</b> (represented by a <code>0</code>). Each cell interacts with its <a href="https://en.wikipedia.org/wiki/Moore_neighborhood" target="_blank">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p><p><span>The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the <code>m x n</code> grid <code>board</code>, return <em>the next state</em>.</span></p>',
    examples: [
      {
        id: 1,
        inputText: "board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
        outputText: "[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "board = [[1,1],[1,0]]",
        outputText: "[[1,1],[1,1]]",
        explanation: "",
      },
    ],
    tests: "[[[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]], [[1, 1], [1, 0]]]",
    answer: "[[[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]], [[1, 1], [1, 1]]]",
    code: "/**\n * @param {number[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar gameOfLife = function(board) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 290,
    title: "Word Pattern",
    titleSlug: "word-pattern",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= pattern.length &lt;= 300</code></li> <li><code>pattern</code> contains only lower-case English letters.</li> <li><code>1 &lt;= s.length &lt;= 3000</code></li> <li><code>s</code> contains only lowercase English letters and spaces <code>' '</code>.</li> <li><code>s</code> <strong>does not contain</strong> any leading or trailing spaces.</li> <li>All the words in <code>s</code> are separated by a <strong>single space</strong>.</li>",
    question:
      "<p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>\u00a0follows the same pattern.</p><p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>s</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'pattern = "abba", s = "dog cat cat dog"',
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: 'pattern = "abba", s = "dog cat cat fish"',
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: 'pattern = "aaaa", s = "dog cat cat dog"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["abba", "abba", "aaaa"]',
    answer: "[true, false, false]",
    code: "/**\n * @param {string} pattern\n * @param {string} s\n * @return {boolean}\n */\nvar wordPattern = function(pattern, s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 292,
    title: "Nim Game",
    titleSlug: "nim-game",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Brainteaser", "Game Theory"],
    constaints:
      "<li>Initially, there is a heap of stones on the table.</li> <li>You and your friend will alternate taking turns, and <strong>you go first</strong>.</li> <li>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</li> <li>The one who removes the last stone is the winner.</li> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>You are playing the following Nim Game with your friend:</p><p>Given <code>n</code>, the number of stones in the heap, return <code>true</code><em> if you can win the game assuming both you and your friend play optimally, otherwise return </em><code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 4",
        outputText: "false",
        explanation:
          "These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.",
      },
      { id: 2, inputText: "n = 1", outputText: "true", explanation: "" },
      { id: 3, inputText: "n = 2", outputText: "true", explanation: "" },
    ],
    tests: "[4, 1, 2]",
    answer: "[false, true, true]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar canWinNim = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 295,
    title: "Find Median from Data Stream",
    titleSlug: "find-median-from-data-stream",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Two Pointers",
      "Design",
      "Sorting",
      "Heap (Priority Queue)",
      "Data Stream",
    ],
    constaints:
      "<li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li> <li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li> <li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li> <li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li> <li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</li> <li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li> <li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li> <li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li> <li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li> <li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>",
    question:
      "<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p><p>Implement the MedianFinder class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]\n[[], [1], [2], [], [3], []]',
        outputText: "[null, null, null, 1.5, null, 2.0]",
        explanation:
          "MedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0",
      },
    ],
    tests:
      '[["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]]',
    answer: "[[null, null, null, 1.5, null, 2.0]]",
    code: "\nvar MedianFinder = function() {\n    \n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n    \n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n    \n};\n\n/** \n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 297,
    title: "Serialize and Deserialize Binary Tree",
    titleSlug: "serialize-and-deserialize-binary-tree",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      '<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p><p><strong>Clarification:</strong> The input/output format is the same as <a href="https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-" target="_blank">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>',
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,null,null,4,5]",
        outputText: "[1,2,3,null,null,4,5]",
        explanation: "",
      },
      { id: 2, inputText: "root = []", outputText: "[]", explanation: "" },
    ],
    tests: "[[1, 2, 3, null, null, 4, 5], []]",
    answer: "[[1, 2, 3, null, null, 4, 5], []]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 299,
    title: "Bulls and Cows",
    titleSlug: "bulls-and-cows",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Counting"],
    constaints:
      '<li>The number of "bulls", which are digits in the guess that are in the correct position.</li> <li>The number of "cows", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.</li> <li><code>1 &lt;= secret.length, guess.length &lt;= 1000</code></li> <li><code>secret.length == guess.length</code></li> <li><code>secret</code> and <code>guess</code> consist of digits only.</li>',
    question:
      '<p>You are playing the <strong><a href="https://en.wikipedia.org/wiki/Bulls_and_Cows" target="_blank">Bulls and Cows</a></strong> game with your friend.</p><p>You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:</p><p>Given the secret number <code>secret</code> and your friend\'s guess <code>guess</code>, return <em>the hint for your friend\'s guess</em>.</p><p>The hint should be formatted as <code>"xAyB"</code>, where <code>x</code> is the number of bulls and <code>y</code> is the number of cows. Note that both <code>secret</code> and <code>guess</code> may contain duplicate digits.</p>',
    examples: [
      {
        id: 1,
        inputText: 'secret = "1807", guess = "7810"',
        outputText: '"1A3B"',
        explanation:
          'Bulls are connected with a \'|\' and cows are underlined:\n"1807"\n  |\n"',
      },
      {
        id: 2,
        inputText: 'secret = "1123", guess = "0111"',
        outputText: '"1A1B"',
        explanation:
          'Bulls are connected with a \'|\' and cows are underlined:\n"1123"        "1123"\n  |      or     |\n"01',
      },
    ],
    tests: '["1807", "1123"]',
    answer: '["1A3B", "1A1B"]',
    code: "/**\n * @param {string} secret\n * @param {string} guess\n * @return {string}\n */\nvar getHint = function(secret, guess) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 300,
    title: "Longest Increasing Subsequence",
    titleSlug: "longest-increasing-subsequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 2500</code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      '<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing </strong></em><span data-keyword="subsequence-array"><em><strong>subsequence</strong></em></span>.</p>',
    examples: [
      {
        id: 1,
        inputText: "nums = [10,9,2,5,3,7,101,18]",
        outputText: "4",
        explanation:
          "The longest increasing subsequence is [2,3,7,101], therefore the length is 4.",
      },
      {
        id: 2,
        inputText: "nums = [0,1,0,3,2,3]",
        outputText: "4",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [7,7,7,7,7,7,7]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests:
      "[[10, 9, 2, 5, 3, 7, 101, 18], [0, 1, 0, 3, 2, 3], [7, 7, 7, 7, 7, 7, 7]]",
    answer: "[4, 4, 1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 301,
    title: "Remove Invalid Parentheses",
    titleSlug: "remove-invalid-parentheses",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Backtracking", "Breadth-First Search"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 25</code></li> <li><code>s</code> consists of lowercase English letters and parentheses <code>'('</code> and <code>')'</code>.</li> <li>There will be at most <code>20</code> parentheses in <code>s</code>.</li>",
    question:
      "<p>Given a string <code>s</code> that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.</p><p>Return <em>a list of <strong>unique strings</strong> that are valid with the minimum number of removals</em>. You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "()())()"',
        outputText: '["(())()","()()()"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "(a)())()"',
        outputText: '["(a())()","(a)()()"]',
        explanation: "",
      },
      { id: 3, inputText: 's = ")("', outputText: '[""]', explanation: "" },
    ],
    tests: '["()())()", "(a)())()", ")("]',
    answer: '[["(())()", "()()()"], ["(a())()", "(a)()()"], [""]]',
    code: "/**\n * @param {string} s\n * @return {string[]}\n */\nvar removeInvalidParentheses = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 303,
    title: "Range Sum Query - Immutable",
    titleSlug: "range-sum-query-immutable",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Design", "Prefix Sum"],
    constaints:
      "<li>Calculate the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> where <code>left &lt;= right</code>.</li> <li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li> <li><code>int sumRange(int left, int right)</code> Returns the <strong>sum</strong> of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> <strong>inclusive</strong> (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRange</code>.</li>",
    question:
      "<p>Given an integer array <code>nums</code>, handle multiple queries of the following type:</p><p>Implement the <code>NumArray</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["NumArray", "sumRange", "sumRange", "sumRange"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]',
        outputText: "[null, 1, -1, -3]",
        explanation:
          "NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3",
      },
    ],
    tests: '[["NumArray", "sumRange", "sumRange", "sumRange"]]',
    answer: "[[null, 1, -1, -3]]",
    code: "/**\n * @param {number[]} nums\n */\nvar NumArray = function(nums) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {number}\n */\nNumArray.prototype.sumRange = function(left, right) {\n    \n};\n\n/** \n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(left,right)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 304,
    title: "Range Sum Query 2D - Immutable",
    titleSlug: "range-sum-query-2d-immutable",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Design", "Matrix", "Prefix Sum"],
    constaints:
      "<li>Calculate the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li> <li><code>NumMatrix(int[][] matrix)</code> Initializes the object with the integer matrix <code>matrix</code>.</li> <li><code>int sumRegion(int row1, int col1, int row2, int col2)</code> Returns the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>-10<sup>4</sup> &lt;= matrix[i][j] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li> <li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRegion</code>.</li>",
    question:
      "<p>Given a 2D matrix <code>matrix</code>, handle multiple queries of the following type:</p><p>Implement the <code>NumMatrix</code> class:</p><p>You must design an algorithm where <code>sumRegion</code> works on <code>O(1)</code> time complexity.</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["NumMatrix", "sumRegion", "sumRegion", "sumRegion"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]',
        outputText: "[null, 8, 11, 12]",
        explanation:
          "NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)",
      },
    ],
    tests: '[["NumMatrix", "sumRegion", "sumRegion", "sumRegion"]]',
    answer: "[[null, 8, 11, 12]]",
    code: "/**\n * @param {number[][]} matrix\n */\nvar NumMatrix = function(matrix) {\n    \n};\n\n/** \n * @param {number} row1 \n * @param {number} col1 \n * @param {number} row2 \n * @param {number} col2\n * @return {number}\n */\nNumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {\n    \n};\n\n/** \n * Your NumMatrix object will be instantiated and called as such:\n * var obj = new NumMatrix(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 306,
    title: "Additive Number",
    titleSlug: "additive-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Backtracking"],
    constaints:
      "<li><code>1 &lt;= num.length &lt;= 35</code></li> <li><code>num</code> consists only of digits.</li>",
    question:
      "<p>An <strong>additive number</strong> is a string whose digits can form an <strong>additive sequence</strong>.</p><p>A valid <strong>additive sequence</strong> should contain <strong>at least</strong> three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p><p>Given a string containing only digits, return <code>true</code> if it is an <strong>additive number</strong> or <code>false</code> otherwise.</p><p><strong>Note:</strong> Numbers in the additive sequence <strong>cannot</strong> have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.</p>",
    examples: [
      {
        id: 1,
        inputText: '"112358"',
        outputText: "true",
        explanation:
          "The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8",
      },
      {
        id: 2,
        inputText: '"199100199"',
        outputText: "true",
        explanation:
          "The additive sequence is: 1, 99, 100, 199.\u00a0\n1 + 99 = 100, 99 + 100 = 199",
      },
    ],
    tests: '["112358", "199100199"]',
    answer: "[true, true]",
    code: "/**\n * @param {string} num\n * @return {boolean}\n */\nvar isAdditiveNumber = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 312,
    title: "Burst Balloons",
    titleSlug: "burst-balloons",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>You are given <code>n</code> balloons, indexed from <code>0</code> to <code>n - 1</code>. Each balloon is painted with a number on it represented by an array <code>nums</code>. You are asked to burst all the balloons.</p><p>If you burst the <code>i<sup>th</sup></code> balloon, you will get <code>nums[i - 1] * nums[i] * nums[i + 1]</code> coins. If <code>i - 1</code> or <code>i + 1</code> goes out of bounds of the array, then treat it as if there is a balloon with a <code>1</code> painted on it.</p><p>Return <em>the maximum coins you can collect by bursting the balloons wisely</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,1,5,8]",
        outputText: "167",
        explanation:
          "nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167",
      },
      { id: 2, inputText: "nums = [1,5]", outputText: "10", explanation: "" },
    ],
    tests: "[[3, 1, 5, 8], [1, 5]]",
    answer: "[167, 10]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxCoins = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 313,
    title: "Super Ugly Number",
    titleSlug: "super-ugly-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= primes.length &lt;= 100</code></li> <li><code>2 &lt;= primes[i] &lt;= 1000</code></li> <li><code>primes[i]</code> is <strong>guaranteed</strong> to be a prime number.</li> <li>All the values of <code>primes</code> are <strong>unique</strong> and sorted in <strong>ascending order</strong>.</li>",
    question:
      "<p>A <strong>super ugly number</strong> is a positive integer whose prime factors are in the array <code>primes</code>.</p><p>Given an integer <code>n</code> and an array of integers <code>primes</code>, return <em>the</em> <code>n<sup>th</sup></code> <em><strong>super ugly number</strong></em>.</p><p>The <code>n<sup>th</sup></code> <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> signed integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 12, primes = [2,7,13,19]",
        outputText: "32",
        explanation:
          "[1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].",
      },
      {
        id: 2,
        inputText: "n = 1, primes = [2,3,5]",
        outputText: "1",
        explanation:
          "1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].",
      },
    ],
    tests: "[12, 1]",
    answer: "[32, 1]",
    code: "/**\n * @param {number} n\n * @param {number[]} primes\n * @return {number}\n */\nvar nthSuperUglyNumber = function(n, primes) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 315,
    title: "Count of Smaller Numbers After Self",
    titleSlug: "count-of-smaller-numbers-after-self",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return<em> an integer array </em><code>counts</code><em> where </em><code>counts[i]</code><em> is the number of smaller elements to the right of </em><code>nums[i]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [5,2,6,1]",
        outputText: "[2,1,1,0]",
        explanation: "To the right of 5 there are",
      },
      { id: 2, inputText: "nums = [-1]", outputText: "[0]", explanation: "" },
      {
        id: 3,
        inputText: "nums = [-1,-1]",
        outputText: "[0,0]",
        explanation: "",
      },
    ],
    tests: "[[5, 2, 6, 1], [-1], [-1, -1]]",
    answer: "[[2, 1, 1, 0], [0], [0, 0]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar countSmaller = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 316,
    title: "Remove Duplicate Letters",
    titleSlug: "remove-duplicate-letters",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Greedy", "Monotonic Stack"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li>",
    question:
      '<p>Given a string <code>s</code>, remove duplicate letters so that every letter appears once and only once. You must make sure your result is <span data-keyword="lexicographically-smaller-string"><strong>the smallest in lexicographical order</strong></span> among all possible results.</p>',
    examples: [
      { id: 1, inputText: 's = "bcabc"', outputText: '"abc"', explanation: "" },
      {
        id: 2,
        inputText: 's = "cbacdcbc"',
        outputText: '"acdb"',
        explanation: "",
      },
    ],
    tests: '["bcabc", "cbacdcbc"]',
    answer: '["abc", "acdb"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicateLetters = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 318,
    title: "Maximum Product of Word Lengths",
    titleSlug: "maximum-product-of-word-lengths",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "String", "Bit Manipulation"],
    constaints:
      "<li><code>2 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 1000</code></li> <li><code>words[i]</code> consists only of lowercase English letters.</li>",
    question:
      "<p>Given a string array <code>words</code>, return <em>the maximum value of</em> <code>length(word[i]) * length(word[j])</code> <em>where the two words do not share common letters</em>. If no such two words exist, return <code>0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["abcw","baz","foo","bar","xtfn","abcdef"]',
        outputText: "16",
        explanation: 'The two words can be "abcw", "xtfn".',
      },
      {
        id: 2,
        inputText: 'words = ["a","ab","abc","d","cd","bcd","abcd"]',
        outputText: "4",
        explanation: 'The two words can be "ab", "cd".',
      },
      {
        id: 3,
        inputText: 'words = ["a","aa","aaa","aaaa"]',
        outputText: "0",
        explanation: "No such pair of words.",
      },
    ],
    tests:
      '[["abcw", "baz", "foo", "bar", "xtfn", "abcdef"], ["a", "ab", "abc", "d", "cd", "bcd", "abcd"], ["a", "aa", "aaa", "aaaa"]]',
    answer: "[16, 4, 0]",
    code: "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxProduct = function(words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 319,
    title: "Bulb Switcher",
    titleSlug: "bulb-switcher",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Brainteaser"],
    constaints: "<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>There are <code>n</code> bulbs that are initially off. You first turn on all the bulbs, then\u00a0you turn off every second bulb.</p><p>On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the <code>i<sup>th</sup></code> round, you toggle every <code>i</code> bulb. For the <code>n<sup>th</sup></code> round, you only toggle the last bulb.</p><p>Return <em>the number of bulbs that are on after <code>n</code> rounds</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText: "1",
        explanation:
          "At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.",
      },
      { id: 2, inputText: "n = 0", outputText: "0", explanation: "" },
      { id: 3, inputText: "n = 1", outputText: "1", explanation: "" },
    ],
    tests: "[3, 0, 1]",
    answer: "[1, 0, 1]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar bulbSwitch = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 321,
    title: "Create Maximum Number",
    titleSlug: "create-maximum-number",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Stack", "Greedy", "Monotonic Stack"],
    constaints:
      "<li><code>m == nums1.length</code></li> <li><code>n == nums2.length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 9</code></li> <li><code>1 &lt;= k &lt;= m + n</code></li>",
    question:
      "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> of lengths <code>m</code> and <code>n</code> respectively. <code>nums1</code> and <code>nums2</code> represent the digits of two numbers. You are also given an integer <code>k</code>.</p><p>Create the maximum number of length <code>k &lt;= m + n</code> from digits of the two numbers. The relative order of the digits from the same array must be preserved.</p><p>Return an array of the <code>k</code> digits representing the answer.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5",
        outputText: "[9,8,6,5,3]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums1 = [6,7], nums2 = [6,0,4], k = 5",
        outputText: "[6,7,6,0,4]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums1 = [3,9], nums2 = [8,9], k = 3",
        outputText: "[9,8,9]",
        explanation: "",
      },
    ],
    tests: "[[3, 4, 6, 5], [6, 7], [3, 9]]",
    answer: "[[9, 8, 6, 5, 3], [6, 7, 6, 0, 4], [9, 8, 9]]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[]}\n */\nvar maxNumber = function(nums1, nums2, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 322,
    title: "Coin Change",
    titleSlug: "coin-change",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Breadth-First Search"],
    constaints:
      "<li><code>1 &lt;= coins.length &lt;= 12</code></li> <li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p>You may assume that you have an infinite number of each kind of coin.</p>",
    examples: [
      {
        id: 1,
        inputText: "coins = [1,2,5], amount = 11",
        outputText: "3",
        explanation: "11 = 5 + 5 + 1",
      },
      {
        id: 2,
        inputText: "coins = [2], amount = 3",
        outputText: "-1",
        explanation: "",
      },
      {
        id: 3,
        inputText: "coins = [1], amount = 0",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 5], [2], [1]]",
    answer: "[3, -1, 0]",
    code: "/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */\nvar coinChange = function(coins, amount) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 324,
    title: "Wiggle Sort II",
    titleSlug: "wiggle-sort-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Divide and Conquer", "Sorting", "Quickselect"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 5000</code></li> <li>It is guaranteed that there will be an answer for the given input <code>nums</code>.</li>",
    question:
      "<p>Given an integer array <code>nums</code>, reorder it such that <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.</p><p>You may assume the input array always has a valid answer.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,5,1,1,6,4]",
        outputText: "[1,6,1,5,1,4]",
        explanation: "[1,4,1,5,1,6] is also accepted.",
      },
      {
        id: 2,
        inputText: "nums = [1,3,2,2,3,1]",
        outputText: "[2,3,1,3,1,2]",
        explanation: "",
      },
    ],
    tests: "[[1, 5, 1, 1, 6, 4], [1, 3, 2, 2, 3, 1]]",
    answer: "[[1, 6, 1, 5, 1, 4], [2, 3, 1, 3, 1, 2]]",
    code: "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar wiggleSort = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 326,
    title: "Power of Three",
    titleSlug: "power-of-three",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Recursion"],
    constaints:
      "<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of three. Otherwise, return <code>false</code></em>.</p><p>An integer <code>n</code> is a power of three, if there exists an integer <code>x</code> such that <code>n == 3<sup>x</sup></code>.</p>",
    examples: [
      { id: 1, inputText: "n = 27", outputText: "true", explanation: "27 = 3" },
      {
        id: 2,
        inputText: "n = 0",
        outputText: "false",
        explanation: "There is no x where 3",
      },
      {
        id: 3,
        inputText: "n = -1",
        outputText: "false",
        explanation: "There is no x where 3",
      },
    ],
    tests: "[27, 0, -1]",
    answer: "[true, false, false]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isPowerOfThree = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 327,
    title: "Count of Range Sum",
    titleSlug: "count-of-range-sum",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>-10<sup>5</sup> &lt;= lower &lt;= upper &lt;= 10<sup>5</sup></code></li> <li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>",
    question:
      "<p>Given an integer array <code>nums</code> and two integers <code>lower</code> and <code>upper</code>, return <em>the number of range sums that lie in</em> <code>[lower, upper]</code> <em>inclusive</em>.</p><p>Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> inclusive, where <code>i &lt;= j</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [-2,5,-1], lower = -2, upper = 2",
        outputText: "3",
        explanation:
          "The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.",
      },
      {
        id: 2,
        inputText: "nums = [0], lower = 0, upper = 0",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[-2, 5, -1], [0]]",
    answer: "[3, 1]",
    code: "/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */\nvar countRangeSum = function(nums, lower, upper) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 328,
    title: "Odd Even Linked List",
    titleSlug: "odd-even-linked-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List"],
    constaints:
      "<li>The number of nodes in the linked list is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>6</sup> &lt;= Node.val &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given the <code>head</code> of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return <em>the reordered list</em>.</p><p>The <strong>first</strong> node is considered <strong>odd</strong>, and the <strong>second</strong> node is <strong>even</strong>, and so on.</p><p>Note that the relative order inside both the even and odd groups should remain as it was in the input.</p><p>You must solve the problem\u00a0in <code>O(1)</code>\u00a0extra space complexity and <code>O(n)</code> time complexity.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4,5]",
        outputText: "[1,3,5,2,4]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [2,1,3,5,6,4,7]",
        outputText: "[2,3,6,7,1,5,4]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [2, 1, 3, 5, 6, 4, 7]]",
    answer: "[[1, 3, 5, 2, 4], [2, 3, 6, 7, 1, 5, 4]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar oddEvenList = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 329,
    title: "Longest Increasing Path in a Matrix",
    titleSlug: "longest-increasing-path-in-a-matrix",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix",
    ],
    constaints:
      "<li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an <code>m x n</code> integers <code>matrix</code>, return <em>the length of the longest increasing path in </em><code>matrix</code>.</p><p>From each cell, you can either move in four directions: left, right, up, or down. You <strong>may not</strong> move <strong>diagonally</strong> or move <strong>outside the boundary</strong> (i.e., wrap-around is not allowed).</p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[9,9,4],[6,6,8],[2,1,1]]",
        outputText: "4",
        explanation: "The longest increasing path is",
      },
      {
        id: 2,
        inputText: "matrix = [[3,4,5],[3,2,6],[2,2,1]]",
        outputText: "4",
        explanation: "The longest increasing path is",
      },
      { id: 3, inputText: "matrix = [[1]]", outputText: "1", explanation: "" },
    ],
    tests:
      "[[[9, 9, 4], [6, 6, 8], [2, 1, 1]], [[3, 4, 5], [3, 2, 6], [2, 2, 1]], [[1]]]",
    answer: "[4, 4, 1]",
    code: "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar longestIncreasingPath = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 331,
    title: "Verify Preorder Serialization of a Binary Tree",
    titleSlug: "verify-preorder-serialization-of-a-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Tree", "Binary Tree"],
    constaints:
      "<li>For example, it could never contain two consecutive commas, such as <code>\"1,,3\"</code>.</li> <li><code>1 &lt;= preorder.length &lt;= 10<sup>4</sup></code></li> <li><code>preorder</code> consist of integers in the range <code>[0, 100]</code> and <code>'#'</code> separated by commas <code>','</code>.</li>",
    question:
      "<p>One way to serialize a binary tree is to use <strong>preorder traversal</strong>. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as <code>'#'</code>.</p><p>For example, the above binary tree can be serialized to the string <code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code>, where <code>'#'</code> represents a null node.</p><p>Given a string of comma-separated values <code>preorder</code>, return <code>true</code> if it is a correct preorder traversal serialization of a binary tree.</p><p>It is <strong>guaranteed</strong> that each comma-separated value in the string must be either an integer or a character <code>'#'</code> representing null pointer.</p><p>You may assume that the input format is always valid.</p><p><strong>Note:\u00a0</strong>You are not allowed to reconstruct the tree.</p>",
    examples: [
      {
        id: 1,
        inputText: 'preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#"',
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: 'preorder = "1,#"',
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: 'preorder = "9,#,#,1"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["9,3,4,#,#,1,#,#,2,#,6,#,#", "1,#", "9,#,#,1"]',
    answer: "[true, false, false]",
    code: "/**\n * @param {string} preorder\n * @return {boolean}\n */\nvar isValidSerialization = function(preorder) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 332,
    title: "Reconstruct Itinerary",
    titleSlug: "reconstruct-itinerary",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Depth-First Search", "Graph", "Eulerian Circuit"],
    constaints:
      '<li>For example, the itinerary <code>["JFK", "LGA"]</code> has a smaller lexical order than <code>["JFK", "LGB"]</code>.</li> <li><code>1 &lt;= tickets.length &lt;= 300</code></li> <li><code>tickets[i].length == 2</code></li> <li><code>from<sub>i</sub>.length == 3</code></li> <li><code>to<sub>i</sub>.length == 3</code></li> <li><code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> consist of uppercase English letters.</li> <li><code>from<sub>i</sub> != to<sub>i</sub></code></li>',
    question:
      '<p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p><p>All of the tickets belong to a man who departs from <code>"JFK"</code>, thus, the itinerary must begin with <code>"JFK"</code>. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p><p>You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.</p>',
    examples: [
      {
        id: 1,
        inputText:
          'tickets = [["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]',
        outputText: '["JFK","MUC","LHR","SFO","SJC"]',
        explanation: "",
      },
      {
        id: 2,
        inputText:
          'tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]',
        outputText: '["JFK","ATL","JFK","SFO","ATL","SFO"]',
        explanation:
          'Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"] but it is larger in lexical order.',
      },
    ],
    tests:
      '[[["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]], [["JFK", "SFO"], ["JFK", "ATL"], ["SFO", "ATL"], ["ATL", "JFK"], ["ATL", "SFO"]]]',
    answer:
      '[["JFK", "MUC", "LHR", "SFO", "SJC"], ["JFK", "ATL", "JFK", "SFO", "ATL", "SFO"]]',
    code: "/**\n * @param {string[][]} tickets\n * @return {string[]}\n */\nvar findItinerary = function(tickets) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 334,
    title: "Increasing Triplet Subsequence",
    titleSlug: "increasing-triplet-subsequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <code>true</code><em> if there exists a triple of indices </em><code>(i, j, k)</code><em> such that </em><code>i &lt; j &lt; k</code><em> and </em><code>nums[i] &lt; nums[j] &lt; nums[k]</code>. If no such indices exists, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4,5]",
        outputText: "true",
        explanation: "Any triplet where i < j < k is valid.",
      },
      {
        id: 2,
        inputText: "nums = [5,4,3,2,1]",
        outputText: "false",
        explanation: "No triplet exists.",
      },
      {
        id: 3,
        inputText: "nums = [2,1,5,0,4,6]",
        outputText: "true",
        explanation:
          "The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [2, 1, 5, 0, 4, 6]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 335,
    title: "Self Crossing",
    titleSlug: "self-crossing",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry"],
    constaints:
      "<li><code>1 &lt;=\u00a0distance.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;=\u00a0distance[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given an array of integers <code>distance</code>.</p><p>You start at the point <code>(0, 0)</code> on an <strong>X-Y plane,</strong> and you move <code>distance[0]</code> meters to the north, then <code>distance[1]</code> meters to the west, <code>distance[2]</code> meters to the south, <code>distance[3]</code> meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.</p><p>Return <code>true</code> <em>if your path crosses itself or </em><code>false</code><em> if it does not</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "distance = [2,1,1,2]",
        outputText: "true",
        explanation: "The path crosses itself at the point (0, 1).",
      },
      {
        id: 2,
        inputText: "distance = [1,2,3,4]",
        outputText: "false",
        explanation: "The path does not cross itself at any point.",
      },
      {
        id: 3,
        inputText: "distance = [1,1,1,2,1]",
        outputText: "true",
        explanation: "The path crosses itself at the point (0, 0).",
      },
    ],
    tests: "[[2, 1, 1, 2], [1, 2, 3, 4], [1, 1, 1, 2, 1]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} distance\n * @return {boolean}\n */\nvar isSelfCrossing = function(distance) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 336,
    title: "Palindrome Pairs",
    titleSlug: "palindrome-pairs",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Trie"],
    constaints:
      '<li><code>0 &lt;= i, j &lt; words.length</code>,</li> <li><code>i != j</code>, and</li> <li><code>words[i] + words[j]</code> (the concatenation of the two strings) is a <span data-keyword="palindrome-string">palindrome</span>.</li> <li><code>1 &lt;= words.length &lt;= 5000</code></li> <li><code>0 &lt;= words[i].length &lt;= 300</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li>',
    question:
      "<p>You are given a <strong>0-indexed</strong> array of <strong>unique</strong> strings <code>words</code>.</p><p>A <strong>palindrome pair</strong> is a pair of integers <code>(i, j)</code> such that:</p><p>Return <em>an array of all the <strong>palindrome pairs</strong> of </em><code>words</code>.</p><p>You must write an algorithm with\u00a0<code>O(sum of words[i].length)</code>\u00a0runtime complexity.</p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["abcd","dcba","lls","s","sssll"]',
        outputText: "[[0,1],[1,0],[3,2],[2,4]]",
        explanation:
          'The palindromes are ["abcddcba","dcbaabcd","slls","llssssll"]',
      },
      {
        id: 2,
        inputText: 'words = ["bat","tab","cat"]',
        outputText: "[[0,1],[1,0]]",
        explanation: 'The palindromes are ["battab","tabbat"]',
      },
      {
        id: 3,
        inputText: 'words = ["a",""]',
        outputText: "[[0,1],[1,0]]",
        explanation: 'The palindromes are ["a","a"]',
      },
    ],
    tests:
      '[["abcd", "dcba", "lls", "s", "sssll"], ["bat", "tab", "cat"], ["a", ""]]',
    answer:
      "[[[0, 1], [1, 0], [3, 2], [2, 4]], [[0, 1], [1, 0]], [[0, 1], [1, 0]]]",
    code: "/**\n * @param {string[]} words\n * @return {number[][]}\n */\nvar palindromePairs = function(words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 337,
    title: "House Robber III",
    titleSlug: "house-robber-iii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called <code>root</code>.</p><p>Besides the <code>root</code>, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if <strong>two directly-linked houses were broken into on the same night</strong>.</p><p>Given the <code>root</code> of the binary tree, return <em>the maximum amount of money the thief can rob <strong>without alerting the police</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,2,3,null,3,null,1]",
        outputText: "7",
        explanation:
          "Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.",
      },
      {
        id: 2,
        inputText: "root = [3,4,5,1,3,null,1]",
        outputText: "9",
        explanation: "Maximum amount of money the thief can rob = 4 + 5 = 9.",
      },
    ],
    tests: "[[3, 2, 3, null, 3, null, 1], [3, 4, 5, 1, 3, null, 1]]",
    answer: "[7, 9]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar rob = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 338,
    title: "Counting Bits",
    titleSlug: "counting-bits",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Dynamic Programming", "Bit Manipulation"],
    constaints:
      "<li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li> <li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li> <li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li>",
    question:
      "<p>Given an integer <code>n</code>, return <em>an array </em><code>ans</code><em> of length </em><code>n + 1</code><em> such that for each </em><code>i</code><em> </em>(<code>0 &lt;= i &lt;= n</code>)<em>, </em><code>ans[i]</code><em> is the <strong>number of </strong></em><code>1</code><em><strong>'s</strong> in the binary representation of </em><code>i</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "[0,1,1]",
        explanation: "0 --> 0\n1 --> 1\n2 --> 10",
      },
      {
        id: 2,
        inputText: "n = 5",
        outputText: "[0,1,1,2,1,2]",
        explanation:
          "0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101",
      },
    ],
    tests: "[2, 5]",
    answer: "[[0, 1, 1], [0, 1, 1, 2, 1, 2]]",
    code: "/**\n * @param {number} n\n * @return {number[]}\n */\nvar countBits = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 342,
    title: "Power of Four",
    titleSlug: "power-of-four",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation", "Recursion"],
    constaints:
      "<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <em><code>true</code> if it is a power of four. Otherwise, return <code>false</code></em>.</p><p>An integer <code>n</code> is a power of four, if there exists an integer <code>x</code> such that <code>n == 4<sup>x</sup></code>.</p>",
    examples: [
      { id: 1, inputText: "n = 16", outputText: "true", explanation: "" },
      { id: 2, inputText: "n = 5", outputText: "false", explanation: "" },
      { id: 3, inputText: "n = 1", outputText: "true", explanation: "" },
    ],
    tests: "[16, 5, 1]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isPowerOfFour = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 343,
    title: "Integer Break",
    titleSlug: "integer-break",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming"],
    constaints: "<li><code>2 &lt;= n &lt;= 58</code></li>",
    question:
      "<p>Given an integer <code>n</code>, break it into the sum of <code>k</code> <strong>positive integers</strong>, where <code>k &gt;= 2</code>, and maximize the product of those integers.</p><p>Return <em>the maximum product you can get</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "1",
        explanation: "2 = 1 + 1, 1 \u00d7 1 = 1.",
      },
      {
        id: 2,
        inputText: "n = 10",
        outputText: "36",
        explanation: "10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.",
      },
    ],
    tests: "[2, 10]",
    answer: "[1, 36]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 344,
    title: "Reverse String",
    titleSlug: "reverse-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      '<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is a <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters" target="_blank">printable ascii character</a>.</li>',
    question:
      '<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p><p>You must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a> with <code>O(1)</code> extra memory.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = ["h","e","l","l","o"]',
        outputText: '["o","l","l","e","h"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = ["H","a","n","n","a","h"]',
        outputText: '["h","a","n","n","a","H"]',
        explanation: "",
      },
    ],
    tests: '[["h", "e", "l", "l", "o"], ["H", "a", "n", "n", "a", "h"]]',
    answer: '[["o", "l", "l", "e", "h"], ["h", "a", "n", "n", "a", "H"]]',
    code: "/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 345,
    title: "Reverse Vowels of a String",
    titleSlug: "reverse-vowels-of-a-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consist of <strong>printable ASCII</strong> characters.</li>",
    question:
      "<p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p><p>The vowels are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>, and they can appear in both lower and upper cases, more than once.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "hello"',
        outputText: '"holle"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "leetcode"',
        outputText: '"leotcede"',
        explanation: "",
      },
    ],
    tests: '["hello", "leetcode"]',
    answer: '["holle", "leotcede"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseVowels = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 347,
    title: "Top K Frequent Elements",
    titleSlug: "top-k-frequent-elements",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
      "Quickselect",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li> <li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>",
    question:
      "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,1,2,2,3], k = 2",
        outputText: "[1,2]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [1], k = 1",
        outputText: "[1]",
        explanation: "",
      },
    ],
    tests: "[[1, 1, 1, 2, 2, 3], [1]]",
    answer: "[[1, 2], [1]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 349,
    title: "Intersection of Two Arrays",
    titleSlug: "intersection-of-two-arrays",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Two Pointers", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>",
    question:
      "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must be <strong>unique</strong> and you may return the result in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [1,2,2,1], nums2 = [2,2]",
        outputText: "[2]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        outputText: "[9,4]",
        explanation: "[4,9] is also accepted.",
      },
    ],
    tests: "[[1, 2, 2, 1], [4, 9, 5]]",
    answer: "[[2], [9, 4]]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar intersection = function(nums1, nums2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 352,
    title: "Data Stream as Disjoint Intervals",
    titleSlug: "data-stream-as-disjoint-intervals",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Binary Search", "Design", "Ordered Set"],
    constaints:
      "<li><code>SummaryRanges()</code> Initializes the object with an empty stream.</li> <li><code>void addNum(int value)</code> Adds the integer <code>value</code> to the stream.</li> <li><code>int[][] getIntervals()</code> Returns a summary of the integers in the stream currently as a list of disjoint intervals <code>[start<sub>i</sub>, end<sub>i</sub>]</code>. The answer should be sorted by <code>start<sub>i</sub></code>.</li> <li><code>0 &lt;= value &lt;= 10<sup>4</sup></code></li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>getIntervals</code>.</li> <li>At most <code>10<sup>2</sup></code>\u00a0calls will be made to\u00a0<code>getIntervals</code>.</li>",
    question:
      "<p>Given a data stream input of non-negative integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub></code>, summarize the numbers seen so far as a list of disjoint intervals.</p><p>Implement the <code>SummaryRanges</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]',
        outputText:
          "[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]",
        explanation:
          "SummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]",
      },
    ],
    tests:
      '[["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals"]]',
    answer:
      "[[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]]",
    code: "\nvar SummaryRanges = function() {\n    \n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nSummaryRanges.prototype.addNum = function(value) {\n    \n};\n\n/**\n * @return {number[][]}\n */\nSummaryRanges.prototype.getIntervals = function() {\n    \n};\n\n/** \n * Your SummaryRanges object will be instantiated and called as such:\n * var obj = new SummaryRanges()\n * obj.addNum(value)\n * var param_2 = obj.getIntervals()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 355,
    title: "Design Twitter",
    titleSlug: "design-twitter",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Linked List", "Design", "Heap (Priority Queue)"],
    constaints:
      "<li><code>Twitter()</code> Initializes your twitter object.</li> <li><code>void postTweet(int userId, int tweetId)</code> Composes a new tweet with ID <code>tweetId</code> by the user <code>userId</code>. Each call to this function will be made with a unique <code>tweetId</code>.</li> <li><code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the <code>10</code> most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be <strong>ordered from most recent to least recent</strong>.</li> <li><code>void follow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started following the user with ID <code>followeeId</code>.</li> <li><code>void unfollow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started unfollowing the user with ID <code>followeeId</code>.</li> <li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li> <li><code>0 &lt;= tweetId &lt;= 10<sup>4</sup></code></li> <li>All the tweets have <strong>unique</strong> IDs.</li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>, <code>follow</code>, and <code>unfollow</code>.</li>",
    question:
      "<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the <code>10</code> most recent tweets in the user's news feed.</p><p>Implement the <code>Twitter</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]',
        outputText: "[null, null, [5], null, null, [6, 5], null, [5]]",
        explanation:
          "Twitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.",
      },
    ],
    tests:
      '[["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"]]',
    answer: "[[null, null, [5], null, null, [6, 5], null, [5]]]",
    code: "\nvar Twitter = function() {\n    \n};\n\n/** \n * @param {number} userId \n * @param {number} tweetId\n * @return {void}\n */\nTwitter.prototype.postTweet = function(userId, tweetId) {\n    \n};\n\n/** \n * @param {number} userId\n * @return {number[]}\n */\nTwitter.prototype.getNewsFeed = function(userId) {\n    \n};\n\n/** \n * @param {number} followerId \n * @param {number} followeeId\n * @return {void}\n */\nTwitter.prototype.follow = function(followerId, followeeId) {\n    \n};\n\n/** \n * @param {number} followerId \n * @param {number} followeeId\n * @return {void}\n */\nTwitter.prototype.unfollow = function(followerId, followeeId) {\n    \n};\n\n/** \n * Your Twitter object will be instantiated and called as such:\n * var obj = new Twitter()\n * obj.postTweet(userId,tweetId)\n * var param_2 = obj.getNewsFeed(userId)\n * obj.follow(followerId,followeeId)\n * obj.unfollow(followerId,followeeId)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 357,
    title: "Count Numbers with Unique Digits",
    titleSlug: "count-numbers-with-unique-digits",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Backtracking"],
    constaints: "<li><code>0 &lt;= n &lt;= 8</code></li>",
    question:
      "<p>Given an integer <code>n</code>, return the count of all numbers with unique digits, <code>x</code>, where <code>0 &lt;= x &lt; 10<sup>n</sup></code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "91",
        explanation:
          "The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99",
      },
      { id: 2, inputText: "n = 0", outputText: "1", explanation: "" },
    ],
    tests: "[2, 0]",
    answer: "[91, 1]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar countNumbersWithUniqueDigits = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 363,
    title: "Max Sum of Rectangle No Larger Than K",
    titleSlug: "max-sum-of-rectangle-no-larger-than-k",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Matrix", "Prefix Sum", "Ordered Set"],
    constaints:
      "<li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> <li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an <code>m x n</code> matrix <code>matrix</code> and an integer <code>k</code>, return <em>the max sum of a rectangle in the matrix such that its sum is no larger than</em> <code>k</code>.</p><p>It is <strong>guaranteed</strong> that there will be a rectangle with a sum no larger than <code>k</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[1,0,1],[0,-2,3]], k = 2",
        outputText: "2",
        explanation:
          "Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).",
      },
      {
        id: 2,
        inputText: "matrix = [[2,2,-1]], k = 3",
        outputText: "3",
        explanation: "",
      },
    ],
    tests: "[[[1, 0, 1], [0, -2, 3]], [[2, 2, -1]]]",
    answer: "[2, 3]",
    code: "/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar maxSumSubmatrix = function(matrix, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 365,
    title: "Water and Jug Problem",
    titleSlug: "water-and-jug-problem",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Depth-First Search", "Breadth-First Search"],
    constaints:
      "<li>Fill any of the jugs with water.</li> <li>Empty any of the jugs.</li> <li>Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.</li> <li><code>1 &lt;= jug1Capacity, jug2Capacity, targetCapacity &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>You are given two jugs with capacities <code>jug1Capacity</code> and <code>jug2Capacity</code> liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly <code>targetCapacity</code> liters using these two jugs.</p><p>If <code>targetCapacity</code> liters of water are measurable, you must have <code>targetCapacity</code> liters of water contained <strong>within one or both buckets</strong> by the end.</p><p>Operations allowed:</p>",
    examples: [
      {
        id: 1,
        inputText: "jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4",
        outputText: "true",
        explanation: "The famous",
      },
      {
        id: 2,
        inputText: "jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[3, 2, 1]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number} jug1Capacity\n * @param {number} jug2Capacity\n * @param {number} targetCapacity\n * @return {boolean}\n */\nvar canMeasureWater = function(jug1Capacity, jug2Capacity, targetCapacity) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 367,
    title: "Valid Perfect Square",
    titleSlug: "valid-perfect-square",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Binary Search"],
    constaints: "<li><code>1 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given a positive integer num, return <code>true</code> <em>if</em> <code>num</code> <em>is a perfect square or</em> <code>false</code> <em>otherwise</em>.</p><p>A <strong>perfect square</strong> is an integer that is the square of an integer. In other words, it is the product of some integer with itself.</p><p>You must not use any built-in library function, such as <code>sqrt</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 16",
        outputText: "true",
        explanation: "We return true because 4 * 4 = 16 and 4 is an integer.",
      },
      {
        id: 2,
        inputText: "num = 14",
        outputText: "false",
        explanation:
          "We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.",
      },
    ],
    tests: "[16, 14]",
    answer: "[true, false]",
    code: "/**\n * @param {number} num\n * @return {boolean}\n */\nvar isPerfectSquare = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 368,
    title: "Largest Divisible Subset",
    titleSlug: "largest-divisible-subset",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Dynamic Programming", "Sorting"],
    constaints:
      "<li><code>answer[i] % answer[j] == 0</code>, or</li> <li><code>answer[j] % answer[i] == 0</code></li> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>9</sup></code></li> <li>All the integers in <code>nums</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given a set of <strong>distinct</strong> positive integers <code>nums</code>, return the largest subset <code>answer</code> such that every pair <code>(answer[i], answer[j])</code> of elements in this subset satisfies:</p><p>If there are multiple solutions, return any of them.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3]",
        outputText: "[1,2]",
        explanation: "[1,3] is also accepted.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,4,8]",
        outputText: "[1,2,4,8]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3], [1, 2, 4, 8]]",
    answer: "[[1, 2], [1, 2, 4, 8]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar largestDivisibleSubset = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 371,
    title: "Sum of Two Integers",
    titleSlug: "sum-of-two-integers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation"],
    constaints: "<li><code>-1000 &lt;= a, b &lt;= 1000</code></li>",
    question:
      "<p>Given two integers <code>a</code> and <code>b</code>, return <em>the sum of the two integers without using the operators</em> <code>+</code> <em>and</em> <code>-</code>.</p>",
    examples: [
      { id: 1, inputText: "a = 1, b = 2", outputText: "3", explanation: "" },
      { id: 2, inputText: "a = 2, b = 3", outputText: "5", explanation: "" },
    ],
    tests: "[1, 2]",
    answer: "[3, 5]",
    code: "/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar getSum = function(a, b) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 373,
    title: "Find K Pairs with Smallest Sums",
    titleSlug: "find-k-pairs-with-smallest-sums",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Heap (Priority Queue)"],
    constaints:
      "<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li> <li><code>nums1</code> and <code>nums2</code> both are sorted in <strong>non-decreasing order</strong>.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>k &lt;=\u00a0nums1.length *\u00a0nums2.length</code></li>",
    question:
      "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> sorted in <strong>non-decreasing\u00a0order</strong> and an integer <code>k</code>.</p><p>Define a pair <code>(u, v)</code> which consists of one element from the first array and one element from the second array.</p><p>Return <em>the</em> <code>k</code> <em>pairs</em> <code>(u<sub>1</sub>, v<sub>1</sub>), (u<sub>2</sub>, v<sub>2</sub>), ..., (u<sub>k</sub>, v<sub>k</sub>)</code> <em>with the smallest sums</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [1,7,11], nums2 = [2,4,6], k = 3",
        outputText: "[[1,2],[1,4],[1,6]]",
        explanation:
          "The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]",
      },
      {
        id: 2,
        inputText: "nums1 = [1,1,2], nums2 = [1,2,3], k = 2",
        outputText: "[[1,1],[1,1]]",
        explanation:
          "The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]",
      },
    ],
    tests: "[[1, 7, 11], [1, 1, 2]]",
    answer: "[[[1, 2], [1, 4], [1, 6]], [[1, 1], [1, 1]]]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[][]}\n */\nvar kSmallestPairs = function(nums1, nums2, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 374,
    title: "Guess Number Higher or Lower",
    titleSlug: "guess-number-higher-or-lower",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Binary Search", "Interactive"],
    constaints:
      "<li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li> <li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li> <li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> <li><code>1 &lt;= pick &lt;= n</code></li>",
    question:
      "<p>We are playing the Guess Game. The game is as follows:</p><p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p><p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p><p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p><p>Return <em>the number that I picked</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 10, pick = 6",
        outputText: "6",
        explanation: "",
      },
      { id: 2, inputText: "n = 1, pick = 1", outputText: "1", explanation: "" },
      { id: 3, inputText: "n = 2, pick = 1", outputText: "1", explanation: "" },
    ],
    tests: "[10, 1, 2]",
    answer: "[6, 1, 1]",
    code: "/** \n * Forward declaration of guess API.\n * @param {number} num   your guess\n * @return \t     -1 if num is higher than the picked number\n *\t\t\t      1 if num is lower than the picked number\n *               otherwise return 0\n * var guess = function(num) {}\n */\n\n/**\n * @param {number} n\n * @return {number}\n */\nvar guessNumber = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 375,
    title: "Guess Number Higher or Lower II",
    titleSlug: "guess-number-higher-or-lower-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Game Theory"],
    constaints:
      "<li>I pick a number between\u00a0<code>1</code>\u00a0and\u00a0<code>n</code>.</li> <li>You guess a number.</li> <li>If you guess the right number, <strong>you win the game</strong>.</li> <li>If you guess the wrong number, then I will tell you whether the number I picked is <strong>higher or lower</strong>, and you will continue guessing.</li> <li>Every time you guess a wrong number\u00a0<code>x</code>, you will pay\u00a0<code>x</code>\u00a0dollars. If you run out of money, <strong>you lose the game</strong>.</li> <li><code>1 &lt;= n &lt;= 200</code></li>",
    question:
      "<p>We are playing the Guessing Game. The game will work as follows:</p><p>Given a particular\u00a0<code>n</code>, return\u00a0<em>the minimum amount of money you need to\u00a0<strong>guarantee a win regardless of what number I pick</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 10",
        outputText: "16",
        explanation:
          "The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n\u00a0   - If this is my number, your total is $0. Otherwise, you pay $7.\n\u00a0   - If my number is higher, the range is [8,10]. Guess 9.\n\u00a0       - If this is my number, your total is $7. Otherwise, you pay $9.\n\u00a0       - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n\u00a0       - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n\u00a0   - If my number is lower, the range is [1,6]. Guess 3.\n\u00a0       - If this is my number, your total is $7. Otherwise, you pay $3.\n\u00a0       - If my number is higher, the range is [4,6]. Guess 5.\n\u00a0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n\u00a0           - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n\u00a0           - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n\u00a0       - If my number is lower, the range is [1,2]. Guess 1.\n\u00a0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n\u00a0           - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.",
      },
      {
        id: 2,
        inputText: "n = 1",
        outputText: "0",
        explanation:
          "There is only one possible number, so you can guess 1 and not have to pay anything.",
      },
      {
        id: 3,
        inputText: "n = 2",
        outputText: "1",
        explanation:
          "There are two possible numbers, 1 and 2.\n- Guess 1.\n\u00a0   - If this is my number, your total is $0. Otherwise, you pay $1.\n\u00a0   - If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.",
      },
    ],
    tests: "[10, 1, 2]",
    answer: "[16, 0, 1]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar getMoneyAmount = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 376,
    title: "Wiggle Subsequence",
    titleSlug: "wiggle-subsequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Greedy"],
    constaints:
      "<li>For example, <code>[1, 7, 4, 9, 2, 5]</code> is a <strong>wiggle sequence</strong> because the differences <code>(6, -3, 5, -7, 3)</code> alternate between positive and negative.</li> <li>In contrast, <code>[1, 4, 7, 2, 5]</code> and <code>[1, 7, 4, 5, 5]</code> are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.</li> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>A <strong>wiggle sequence</strong> is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.</p><p>A <strong>subsequence</strong> is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.</p><p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>wiggle subsequence</strong> of </em><code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,7,4,9,2,5]",
        outputText: "6",
        explanation:
          "The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).",
      },
      {
        id: 2,
        inputText: "nums = [1,17,5,10,13,15,10,5,16,8]",
        outputText: "7",
        explanation:
          "There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).",
      },
      {
        id: 3,
        inputText: "nums = [1,2,3,4,5,6,7,8,9]",
        outputText: "2",
        explanation: "",
      },
    ],
    tests:
      "[[1, 7, 4, 9, 2, 5], [1, 17, 5, 10, 13, 15, 10, 5, 16, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]]",
    answer: "[6, 7, 2]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar wiggleMaxLength = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 377,
    title: "Combination Sum IV",
    titleSlug: "combination-sum-iv",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li>All the elements of <code>nums</code> are <strong>unique</strong>.</li> <li><code>1 &lt;= target &lt;= 1000</code></li>",
    question:
      "<p>Given an array of <strong>distinct</strong> integers <code>nums</code> and a target integer <code>target</code>, return <em>the number of possible combinations that add up to</em>\u00a0<code>target</code>.</p><p>The test cases are generated so that the answer can fit in a <strong>32-bit</strong> integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3], target = 4",
        outputText: "7",
        explanation:
          "The possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.",
      },
      {
        id: 2,
        inputText: "nums = [9], target = 3",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3], [9]]",
    answer: "[7, 0]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar combinationSum4 = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 378,
    title: "Kth Smallest Element in a Sorted Matrix",
    titleSlug: "kth-smallest-element-in-a-sorted-matrix",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Binary Search",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix",
    ],
    constaints:
      '<li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li> <li>All the rows and columns of <code>matrix</code> are <strong>guaranteed</strong> to be sorted in <strong>non-decreasing order</strong>.</li> <li><code>1 &lt;= k &lt;= n<sup>2</sup></code></li> <li>Could you solve the problem with a constant memory (i.e., <code>O(1)</code> memory complexity)?</li> <li>Could you solve the problem in <code>O(n)</code> time complexity? The solution may be too advanced for an interview but you may find reading <a href="http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf" target="_blank">this paper</a> fun.</li>',
    question:
      "<p>Given an <code>n x n</code> <code>matrix</code> where each of the rows and columns is sorted in ascending order, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest element in the matrix</em>.</p><p>Note that it is the <code>k<sup>th</sup></code> smallest element <strong>in the sorted order</strong>, not the <code>k<sup>th</sup></code> <strong>distinct</strong> element.</p><p>You must find a solution with a memory complexity better than <code>O(n<sup>2</sup>)</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
        outputText: "13",
        explanation: "The elements in the matrix are [1,5,9,10,11,12,13,",
      },
      {
        id: 2,
        inputText: "matrix = [[-5]], k = 1",
        outputText: "-5",
        explanation: "",
      },
    ],
    tests: "[[[1, 5, 9], [10, 11, 13], [12, 13, 15]], [[-5]]]",
    answer: "[13, -5]",
    code: "/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(matrix, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 380,
    title: "Insert Delete GetRandom O(1)",
    titleSlug: "insert-delete-getrandom-o1",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Math", "Design", "Randomized"],
    constaints:
      "<li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li> <li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li> <li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li> <li><code>int getRandom()</code> Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the <b>same probability</b> of being returned.</li> <li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li> <li>At most <code>2 *\u00a0</code><code>10<sup>5</sup></code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li> <li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>",
    question:
      "<p>Implement the <code>RandomizedSet</code> class:</p><p>You must implement the functions of the class such that each function works in\u00a0<strong>average</strong>\u00a0<code>O(1)</code>\u00a0time complexity.</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]\n[[], [1], [2], [2], [], [1], [2], []]',
        outputText: "[null, true, false, true, 2, true, false, 2]",
        explanation:
          "RandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.",
      },
    ],
    tests:
      '[["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]]',
    answer: "[[null, true, false, true, 2, true, false, 2]]",
    code: "\nvar RandomizedSet = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.insert = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.remove = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nRandomizedSet.prototype.getRandom = function() {\n    \n};\n\n/** \n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 382,
    title: "Linked List Random Node",
    titleSlug: "linked-list-random-node",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Math", "Reservoir Sampling", "Randomized"],
    constaints:
      "<li><code>Solution(ListNode head)</code> Initializes the object with the head of the singly-linked list <code>head</code>.</li> <li><code>int getRandom()</code> Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.</li> <li>The number of nodes in the linked list will be in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>getRandom</code>.</li> <li>What if the linked list is extremely large and its length is unknown to you?</li> <li>Could you solve this efficiently without using extra space?</li>",
    question:
      "<p>Given a singly linked list, return a random node's value from the linked list. Each node must have the <strong>same probability</strong> of being chosen.</p><p>Implement the <code>Solution</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"]\n[[[1, 2, 3]], [], [], [], [], []]',
        outputText: "[null, 1, 3, 2, 2, 3]",
        explanation:
          "Solution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.",
      },
    ],
    tests:
      '[["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"]]',
    answer: "[[null, 1, 3, 2, 2, 3]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n */\nvar Solution = function(head) {\n    \n};\n\n/**\n * @return {number}\n */\nSolution.prototype.getRandom = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 383,
    title: "Ransom Note",
    titleSlug: "ransom-note",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Counting"],
    constaints:
      "<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 10<sup>5</sup></code></li> <li><code>ransomNote</code> and <code>magazine</code> consist of lowercase English letters.</li>",
    question:
      "<p>Given two strings <code>ransomNote</code> and <code>magazine</code>, return <code>true</code><em> if </em><code>ransomNote</code><em> can be constructed by using the letters from </em><code>magazine</code><em> and </em><code>false</code><em> otherwise</em>.</p><p>Each letter in <code>magazine</code> can only be used once in <code>ransomNote</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'ransomNote = "a", magazine = "b"',
        outputText: "false",
        explanation: "",
      },
      {
        id: 2,
        inputText: 'ransomNote = "aa", magazine = "ab"',
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: 'ransomNote = "aa", magazine = "aab"',
        outputText: "true",
        explanation: "",
      },
    ],
    tests: '["a", "aa", "aa"]',
    answer: "[false, false, true]",
    code: "/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 385,
    title: "Mini Parser",
    titleSlug: "mini-parser",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Depth-First Search"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> consists of digits, square brackets <code>\"[]\"</code>, negative sign <code>'-'</code>, and commas <code>','</code>.</li> <li><code>s</code> is the serialization of valid <code>NestedInteger</code>.</li> <li>All the values in the input are in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li>",
    question:
      "<p>Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return <em>the deserialized</em> <code>NestedInteger</code>.</p><p>Each element is either an integer or a list whose elements may also be integers or other lists.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "324"',
        outputText: "324",
        explanation:
          "You should return a NestedInteger object which contains a single integer 324.",
      },
      {
        id: 2,
        inputText: 's = "[123,[456,[789]]]"',
        outputText: "[123,[456,[789]]]",
        explanation:
          "Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789",
      },
    ],
    tests: '["324", "[123,[456,[789]]]"]',
    answer: "[324, [123, [456, [789]]]]",
    code: "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     @return {void}\n *     this.setInteger = function(value) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     @return {void}\n *     this.add = function(elem) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @param {string} s\n * @return {NestedInteger}\n */\nvar deserialize = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 386,
    title: "Lexicographical Numbers",
    titleSlug: "lexicographical-numbers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Depth-First Search", "Trie"],
    constaints: "<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer <code>n</code>, return all the numbers in the range <code>[1, n]</code> sorted in lexicographical order.</p><p>You must write an algorithm that runs in\u00a0<code>O(n)</code>\u00a0time and uses <code>O(1)</code> extra space.\u00a0</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 13",
        outputText: "[1,10,11,12,13,2,3,4,5,6,7,8,9]",
        explanation: "",
      },
      { id: 2, inputText: "n = 2", outputText: "[1,2]", explanation: "" },
    ],
    tests: "[13, 2]",
    answer: "[[1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2]]",
    code: "/**\n * @param {number} n\n * @return {number[]}\n */\nvar lexicalOrder = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 387,
    title: "First Unique Character in a String",
    titleSlug: "first-unique-character-in-a-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Queue", "Counting"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li>",
    question:
      "<p>Given a string <code>s</code>, <em>find the first non-repeating character in it and return its index</em>. If it does not exist, return <code>-1</code>.</p>",
    examples: [
      { id: 1, inputText: 's = "leetcode"', outputText: "0", explanation: "" },
      {
        id: 2,
        inputText: 's = "loveleetcode"',
        outputText: "2",
        explanation: "",
      },
      { id: 3, inputText: 's = "aabb"', outputText: "-1", explanation: "" },
    ],
    tests: '["leetcode", "loveleetcode", "aabb"]',
    answer: "[0, 2, -1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar firstUniqChar = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 389,
    title: "Find the Difference",
    titleSlug: "find-the-difference",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Bit Manipulation", "Sorting"],
    constaints:
      "<li><code>0 &lt;= s.length &lt;= 1000</code></li> <li><code>t.length == s.length + 1</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>",
    question:
      "<p>You are given two strings <code>s</code> and <code>t</code>.</p><p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p><p>Return the letter that was added to <code>t</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abcd", t = "abcde"',
        outputText: '"e"',
        explanation: "'e' is the letter that was added.",
      },
      {
        id: 2,
        inputText: 's = "", t = "y"',
        outputText: '"y"',
        explanation: "",
      },
    ],
    tests: '["abcd", ""]',
    answer: '["e", "y"]',
    code: "/**\n * @param {string} s\n * @param {string} t\n * @return {character}\n */\nvar findTheDifference = function(s, t) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 390,
    title: "Elimination Game",
    titleSlug: "elimination-game",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Recursion"],
    constaints:
      "<li>Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</li> <li>Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.</li> <li>Keep repeating the steps again, alternating left to right and right to left, until a single number remains.</li> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You have a list <code>arr</code> of all integers in the range <code>[1, n]</code> sorted in a strictly increasing order. Apply the following algorithm on <code>arr</code>:</p><p>Given the integer <code>n</code>, return <em>the last number that remains in</em> <code>arr</code>.</p>",
    examples: [
      { id: 1, inputText: "n = 9", outputText: "6", explanation: "arr = [" },
      { id: 2, inputText: "n = 1", outputText: "1", explanation: "" },
    ],
    tests: "[9, 1]",
    answer: "[6, 1]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar lastRemaining = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 391,
    title: "Perfect Rectangle",
    titleSlug: "perfect-rectangle",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Line Sweep"],
    constaints:
      "<li><code>1 &lt;= rectangles.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>rectangles[i].length == 4</code></li> <li><code>-10<sup>5</sup> &lt;= x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an array <code>rectangles</code> where <code>rectangles[i] = [x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub>]</code> represents an axis-aligned rectangle. The bottom-left point of the rectangle is <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and the top-right point of it is <code>(a<sub>i</sub>, b<sub>i</sub>)</code>.</p><p>Return <code>true</code> <em>if all the rectangles together form an exact cover of a rectangular region</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]",
        outputText: "true",
        explanation:
          "All 5 rectangles together form an exact cover of a rectangular region.",
      },
      {
        id: 2,
        inputText: "rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]",
        outputText: "false",
        explanation:
          "Because there is a gap between the two rectangular regions.",
      },
      {
        id: 3,
        inputText: "rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]",
        outputText: "false",
        explanation: "Because two of the rectangles overlap with each other.",
      },
    ],
    tests:
      "[[[1, 1, 3, 3], [3, 1, 4, 2], [3, 2, 4, 4], [1, 3, 2, 4], [2, 3, 3, 4]], [[1, 1, 2, 3], [1, 3, 2, 4], [3, 1, 4, 2], [3, 2, 4, 4]], [[1, 1, 3, 3], [3, 1, 4, 2], [1, 3, 2, 4], [2, 2, 4, 4]]]",
    answer: "[true, false, false]",
    code: "/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\nvar isRectangleCover = function(rectangles) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 392,
    title: "Is Subsequence",
    titleSlug: "is-subsequence",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String", "Dynamic Programming"],
    constaints:
      "<li><code>0 &lt;= s.length &lt;= 100</code></li> <li><code>0 &lt;= t.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li>",
    question:
      '<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>subsequence</strong> of </em><code>t</code><em>, or </em><code>false</code><em> otherwise</em>.</p><p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>"ace"</code> is a subsequence of <code>"<u>a</u>b<u>c</u>d<u>e</u>"</code> while <code>"aec"</code> is not).</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "abc", t = "ahbgdc"',
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "axc", t = "ahbgdc"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["abc", "axc"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function(s, t) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 394,
    title: "Decode String",
    titleSlug: "decode-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Recursion"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 30</code></li> <li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>'[]'</code>.</li> <li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li> <li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>",
    question:
      "<p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p><p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "3[a]2[bc]"',
        outputText: '"aaabcbc"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "3[a2[c]]"',
        outputText: '"accaccacc"',
        explanation: "",
      },
      {
        id: 3,
        inputText: 's = "2[abc]3[cd]ef"',
        outputText: '"abcabccdcdcdef"',
        explanation: "",
      },
    ],
    tests: '["3[a]2[bc]", "3[a2[c]]", "2[abc]3[cd]ef"]',
    answer: '["aaabcbc", "accaccacc", "abcabccdcdcdef"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 395,
    title: "Longest Substring with At Least K Repeating Characters",
    titleSlug: "longest-substring-with-at-least-k-repeating-characters",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Divide and Conquer", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>",
    question:
      '<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>such that the frequency of each character in this substring is greater than or equal to</em> <code>k</code>.</p><p data-pm-slice="1 1 []">if no such substring exists, return 0.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "aaabb", k = 3',
        outputText: "3",
        explanation:
          "The longest substring is \"aaa\", as 'a' is repeated 3 times.",
      },
      {
        id: 2,
        inputText: 's = "ababbc", k = 2',
        outputText: "5",
        explanation:
          "The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.",
      },
    ],
    tests: '["aaabb", "ababbc"]',
    answer: "[3, 5]",
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar longestSubstring = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 397,
    title: "Integer Replacement",
    titleSlug: "integer-replacement",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Dynamic Programming",
      "Greedy",
      "Bit Manipulation",
      "Memoization",
    ],
    constaints:
      "<li>If <code>n</code> is even, replace <code>n</code> with <code>n / 2</code>.</li> <li>If <code>n</code> is odd, replace <code>n</code> with either <code>n + 1</code> or <code>n - 1</code>.</li> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given a positive integer <code>n</code>,\u00a0you can apply one of the following\u00a0operations:</p><p>Return <em>the minimum number of operations needed for</em> <code>n</code> <em>to become</em> <code>1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 8",
        outputText: "3",
        explanation: "8 -> 4 -> 2 -> 1",
      },
      {
        id: 2,
        inputText: "n = 7",
        outputText: "4",
        explanation: "7 -> 8 -> 4 -> 2 -> 1\nor 7 -> 6 -> 3 -> 2 -> 1",
      },
      { id: 3, inputText: "n = 4", outputText: "2", explanation: "" },
    ],
    tests: "[8, 7, 4]",
    answer: "[3, 4, 2]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar integerReplacement = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 398,
    title: "Random Pick Index",
    titleSlug: "random-pick-index",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Math", "Reservoir Sampling", "Randomized"],
    constaints:
      "<li><code>Solution(int[] nums)</code> Initializes the object with the array <code>nums</code>.</li> <li><code>int pick(int target)</code> Picks a random index <code>i</code> from <code>nums</code> where <code>nums[i] == target</code>. If there are multiple valid i's, then each index should have an equal probability of returning.</li> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>target</code> is an integer from <code>nums</code>.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>pick</code>.</li>",
    question:
      "<p>Given an integer array <code>nums</code> with possible <strong>duplicates</strong>, randomly output the index of a given <code>target</code> number. You can assume that the given target number must exist in the array.</p><p>Implement the <code>Solution</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["Solution", "pick", "pick", "pick"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]',
        outputText: "[null, 4, 0, 2]",
        explanation:
          "Solution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.",
      },
    ],
    tests: '[["Solution", "pick", "pick", "pick"]]',
    answer: "[[null, 4, 0, 2]]",
    code: "/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n    \n};\n\n/** \n * @param {number} target\n * @return {number}\n */\nSolution.prototype.pick = function(target) {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 399,
    title: "Evaluate Division",
    titleSlug: "evaluate-division",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Shortest Path",
    ],
    constaints:
      "<li><code>1 &lt;= equations.length &lt;= 20</code></li> <li><code>equations[i].length == 2</code></li> <li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li> <li><code>values.length == equations.length</code></li> <li><code>0.0 &lt; values[i] &lt;= 20.0</code></li> <li><code>1 &lt;= queries.length &lt;= 20</code></li> <li><code>queries[i].length == 2</code></li> <li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li> <li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> consist of lower case English letters and digits.</li>",
    question:
      "<p>You are given an array of variable pairs <code>equations</code> and an array of real numbers <code>values</code>, where <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> and <code>values[i]</code> represent the equation <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code>. Each <code>A<sub>i</sub></code> or <code>B<sub>i</sub></code> is a string that represents a single variable.</p><p>You are also given some <code>queries</code>, where <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> represents the <code>j<sup>th</sup></code> query where you must find the answer for <code>C<sub>j</sub> / D<sub>j</sub> = ?</code>.</p><p>Return <em>the answers to all queries</em>. If a single answer cannot be determined, return <code>-1.0</code>.</p><p><strong>Note:</strong> The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.</p><p><strong>Note:\u00a0</strong>The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]',
        outputText: "[6.00000,0.50000,-1.00000,1.00000,-1.00000]",
        explanation: "Given:",
      },
      {
        id: 2,
        inputText:
          'equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]',
        outputText: "[3.75000,0.40000,5.00000,0.20000]",
        explanation: "",
      },
      {
        id: 3,
        inputText:
          'equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]',
        outputText: "[0.50000,2.00000,-1.00000,-1.00000]",
        explanation: "",
      },
    ],
    tests:
      '[[["a", "b"], ["b", "c"]], [["a", "b"], ["b", "c"], ["bc", "cd"]], [["a", "b"]]]',
    answer:
      "[[6.0, 0.5, -1.0, 1.0, -1.0], [3.75, 0.4, 5.0, 0.2], [0.5, 2.0, -1.0, -1.0]]",
    code: "/**\n * @param {string[][]} equations\n * @param {number[]} values\n * @param {string[][]} queries\n * @return {number[]}\n */\nvar calcEquation = function(equations, values, queries) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 400,
    title: "Nth Digit",
    titleSlug: "nth-digit",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Binary Search"],
    constaints: "<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer <code>n</code>, return the <code>n<sup>th</sup></code> digit of the infinite integer sequence <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]</code>.</p>",
    examples: [
      { id: 1, inputText: "n = 3", outputText: "3", explanation: "" },
      { id: 2, inputText: "n = 11", outputText: "0", explanation: "The 11" },
    ],
    tests: "[3, 11]",
    answer: "[3, 0]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar findNthDigit = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 401,
    title: "Binary Watch",
    titleSlug: "binary-watch",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Backtracking", "Bit Manipulation"],
    constaints:
      '<li>For example, the below binary watch reads <code>"4:51"</code>.</li> <li>For example, <code>"01:00"</code> is not valid. It should be <code>"1:00"</code>.</li> <li>For example, <code>"10:2"</code> is not valid. It should be <code>"10:02"</code>.</li> <li><code>0 &lt;= turnedOn &lt;= 10</code></li>',
    question:
      '<p>A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent\u00a0the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.</p><p><img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg" style="width: 500px; height: 500px;"/></p><p>Given an integer <code>turnedOn</code> which represents the number of LEDs that are currently on (ignoring the PM), return <em>all possible times the watch could represent</em>. You may return the answer in <strong>any order</strong>.</p><p>The hour must not contain a leading zero.</p><p>The minute must\u00a0consist of two digits and may contain a leading zero.</p>',
    examples: [
      {
        id: 1,
        inputText: "turnedOn = 1",
        outputText:
          '["0:01","0:02","0:04","0:08","0:16","0:32","1:00","2:00","4:00","8:00"]',
        explanation: "",
      },
      { id: 2, inputText: "turnedOn = 9", outputText: "[]", explanation: "" },
    ],
    tests: "[1, 9]",
    answer:
      '[["0:01", "0:02", "0:04", "0:08", "0:16", "0:32", "1:00", "2:00", "4:00", "8:00"], []]',
    code: "/**\n * @param {number} turnedOn\n * @return {string[]}\n */\nvar readBinaryWatch = function(turnedOn) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 402,
    title: "Remove K Digits",
    titleSlug: "remove-k-digits",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Greedy", "Monotonic Stack"],
    constaints:
      "<li><code>1 &lt;= k &lt;= num.length &lt;= 10<sup>5</sup></code></li> <li><code>num</code> consists of only digits.</li> <li><code>num</code> does not have any leading zeros except for the zero itself.</li>",
    question:
      "<p>Given string num representing a non-negative integer <code>num</code>, and an integer <code>k</code>, return <em>the smallest possible integer after removing</em> <code>k</code> <em>digits from</em> <code>num</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'num = "1432219", k = 3',
        outputText: '"1219"',
        explanation:
          "Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.",
      },
      {
        id: 2,
        inputText: 'num = "10200", k = 1',
        outputText: '"200"',
        explanation:
          "Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.",
      },
      {
        id: 3,
        inputText: 'num = "10", k = 2',
        outputText: '"0"',
        explanation:
          "Remove all the digits from the number and it is left with nothing which is 0.",
      },
    ],
    tests: '["1432219", "10200", "10"]',
    answer: '["1219", "200", "0"]',
    code: "/**\n * @param {string} num\n * @param {number} k\n * @return {string}\n */\nvar removeKdigits = function(num, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 403,
    title: "Frog Jump",
    titleSlug: "frog-jump",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>2 &lt;= stones.length &lt;= 2000</code></li> <li><code>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>stones[0] == 0</code></li> <li><code>stones</code>\u00a0is sorted in a strictly increasing order.</li>",
    question:
      "<p>A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p><p>Given a list of <code>stones</code>\u00a0positions (in units) in sorted <strong>ascending order</strong>, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be <code>1</code> unit.</p><p>If the frog's last jump was <code>k</code> units, its next jump must be either <code>k - 1</code>, <code>k</code>, or <code>k + 1</code> units. The frog can only jump in the forward direction.</p>",
    examples: [
      {
        id: 1,
        inputText: "stones = [0,1,3,5,6,8,12,17]",
        outputText: "true",
        explanation:
          "The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.",
      },
      {
        id: 2,
        inputText: "stones = [0,1,2,3,4,8,9,11]",
        outputText: "false",
        explanation:
          "There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.",
      },
    ],
    tests: "[[0, 1, 3, 5, 6, 8, 12, 17], [0, 1, 2, 3, 4, 8, 9, 11]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} stones\n * @return {boolean}\n */\nvar canCross = function(stones) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 404,
    title: "Sum of Left Leaves",
    titleSlug: "sum-of-left-leaves",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the sum of all left leaves.</em></p><p>A <strong>leaf</strong> is a node with no children. A <strong>left leaf</strong> is a leaf that is the left child of another node.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,9,20,null,null,15,7]",
        outputText: "24",
        explanation:
          "There are two left leaves in the binary tree, with values 9 and 15 respectively.",
      },
      { id: 2, inputText: "root = [1]", outputText: "0", explanation: "" },
    ],
    tests: "[[3, 9, 20, null, null, 15, 7], [1]]",
    answer: "[24, 0]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumOfLeftLeaves = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 405,
    title: "Convert a Number to Hexadecimal",
    titleSlug: "convert-a-number-to-hexadecimal",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation"],
    constaints:
      "<li><code>-2<sup>31</sup> &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      '<p>Given an integer <code>num</code>, return <em>a string representing its hexadecimal representation</em>. For negative integers, <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank">two\u2019s complement</a> method is used.</p><p>All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.</p><p><strong>Note:\u00a0</strong>You are not allowed to use any built-in library method to directly solve this problem.</p>',
    examples: [
      { id: 1, inputText: "num = 26", outputText: '"1a"', explanation: "" },
      {
        id: 2,
        inputText: "num = -1",
        outputText: '"ffffffff"',
        explanation: "",
      },
    ],
    tests: "[26, -1]",
    answer: '["1a", "ffffffff"]',
    code: "/**\n * @param {number} num\n * @return {string}\n */\nvar toHex = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 406,
    title: "Queue Reconstruction by Height",
    titleSlug: "queue-reconstruction-by-height",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Indexed Tree", "Segment Tree", "Sorting"],
    constaints:
      "<li><code>1 &lt;= people.length &lt;= 2000</code></li> <li><code>0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= k<sub>i</sub> &lt; people.length</code></li> <li>It is guaranteed that the queue can be reconstructed.</li>",
    question:
      "<p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> person of height <code>h<sub>i</sub></code> with <strong>exactly</strong> <code>k<sub>i</sub></code> other people in front who have a height greater than or equal to <code>h<sub>i</sub></code>.</p><p>Reconstruct and return <em>the queue that is represented by the input array </em><code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> is the attributes of the <code>j<sup>th</sup></code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p>",
    examples: [
      {
        id: 1,
        inputText: "people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
        outputText: "[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]",
        explanation:
          "Person 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.",
      },
      {
        id: 2,
        inputText: "people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]",
        outputText: "[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]",
        explanation: "",
      },
    ],
    tests:
      "[[[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]], [[6, 0], [5, 0], [4, 0], [3, 2], [2, 2], [1, 4]]]",
    answer:
      "[[[5, 0], [7, 0], [5, 2], [6, 1], [4, 4], [7, 1]], [[4, 0], [5, 0], [2, 2], [3, 2], [1, 4], [6, 0]]]",
    code: "/**\n * @param {number[][]} people\n * @return {number[][]}\n */\nvar reconstructQueue = function(people) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 407,
    title: "Trapping Rain Water II",
    titleSlug: "trapping-rain-water-ii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Breadth-First Search",
      "Heap (Priority Queue)",
      "Matrix",
    ],
    constaints:
      "<li><code>m == heightMap.length</code></li> <li><code>n == heightMap[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 10<sup>4</sup></code></li>",
    question:
      "<p>Given an <code>m x n</code> integer matrix <code>heightMap</code> representing the height of each unit cell in a 2D elevation map, return <em>the volume of water it can trap after raining</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]",
        outputText: "4",
        explanation:
          "After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.",
      },
      {
        id: 2,
        inputText:
          "heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]",
        outputText: "10",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1]], [[3, 3, 3, 3, 3], [3, 2, 2, 2, 3], [3, 2, 1, 2, 3], [3, 2, 2, 2, 3], [3, 3, 3, 3, 3]]]",
    answer: "[4, 10]",
    code: "/**\n * @param {number[][]} heightMap\n * @return {number}\n */\nvar trapRainWater = function(heightMap) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 409,
    title: "Longest Palindrome",
    titleSlug: "longest-palindrome",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Greedy"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> consists of lowercase <strong>and/or</strong> uppercase English\u00a0letters only.</li>",
    question:
      '<p>Given a string <code>s</code> which consists of lowercase or uppercase letters, return <em>the length of the <strong>longest palindrome</strong></em>\u00a0that can be built with those letters.</p><p>Letters are <strong>case sensitive</strong>, for example,\u00a0<code>"Aa"</code> is not considered a palindrome here.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "abccccdd"',
        outputText: "7",
        explanation:
          'One longest palindrome that can be built is "dccaccd", whose length is 7.',
      },
      {
        id: 2,
        inputText: 's = "a"',
        outputText: "1",
        explanation:
          'The longest palindrome that can be built is "a", whose length is 1.',
      },
    ],
    tests: '["abccccdd", "a"]',
    answer: "[7, 1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindrome = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 410,
    title: "Split Array Largest Sum",
    titleSlug: "split-array-largest-sum",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Prefix Sum",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li>",
    question:
      "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, split <code>nums</code> into <code>k</code> non-empty subarrays such that the largest sum of any subarray is <strong>minimized</strong>.</p><p>Return <em>the minimized largest sum of the split</em>.</p><p>A <strong>subarray</strong> is a contiguous part of the array.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [7,2,5,10,8], k = 2",
        outputText: "18",
        explanation:
          "There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4,5], k = 2",
        outputText: "9",
        explanation:
          "There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.",
      },
    ],
    tests: "[[7, 2, 5, 10, 8], [1, 2, 3, 4, 5]]",
    answer: "[18, 9]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar splitArray = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 412,
    title: "Fizz Buzz",
    titleSlug: "fizz-buzz",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "String", "Simulation"],
    constaints:
      '<li><code>answer[i] == "FizzBuzz"</code> if <code>i</code> is divisible by <code>3</code> and <code>5</code>.</li> <li><code>answer[i] == "Fizz"</code> if <code>i</code> is divisible by <code>3</code>.</li> <li><code>answer[i] == "Buzz"</code> if <code>i</code> is divisible by <code>5</code>.</li> <li><code>answer[i] == i</code> (as a string) if none of the above conditions are true.</li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>',
    question:
      "<p>Given an integer <code>n</code>, return <em>a string array </em><code>answer</code><em> (<strong>1-indexed</strong>) where</em>:</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText: '["1","2","Fizz"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: "n = 5",
        outputText: '["1","2","Fizz","4","Buzz"]',
        explanation: "",
      },
      {
        id: 3,
        inputText: "n = 15",
        outputText:
          '["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]',
        explanation: "",
      },
    ],
    tests: "[3, 5, 15]",
    answer:
      '[["1", "2", "Fizz"], ["1", "2", "Fizz", "4", "Buzz"], ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz"]]',
    code: "/**\n * @param {number} n\n * @return {string[]}\n */\nvar fizzBuzz = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 413,
    title: "Arithmetic Slices",
    titleSlug: "arithmetic-slices",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li>For example, <code>[1,3,5,7,9]</code>, <code>[7,7,7,7]</code>, and <code>[3,-1,-5,-9]</code> are arithmetic sequences.</li> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>An integer array is called arithmetic if it consists of <strong>at least three elements</strong> and if the difference between any two consecutive elements is the same.</p><p>Given an integer array <code>nums</code>, return <em>the number of arithmetic <strong>subarrays</strong> of</em> <code>nums</code>.</p><p>A <strong>subarray</strong> is a contiguous subsequence of the array.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4]",
        outputText: "3",
        explanation:
          "We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.",
      },
      { id: 2, inputText: "nums = [1]", outputText: "0", explanation: "" },
    ],
    tests: "[[1, 2, 3, 4], [1]]",
    answer: "[3, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numberOfArithmeticSlices = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 414,
    title: "Third Maximum Number",
    titleSlug: "third-maximum-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>the <strong>third distinct maximum</strong> number in this array. If the third maximum does not exist, return the <strong>maximum</strong> number</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,2,1]",
        outputText: "1",
        explanation:
          "The first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.",
      },
      {
        id: 2,
        inputText: "nums = [1,2]",
        outputText: "2",
        explanation:
          "The first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.",
      },
      {
        id: 3,
        inputText: "nums = [2,2,3,1]",
        outputText: "1",
        explanation:
          "The first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.",
      },
    ],
    tests: "[[3, 2, 1], [1, 2], [2, 2, 3, 1]]",
    answer: "[1, 2, 1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar thirdMax = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 415,
    title: "Add Strings",
    titleSlug: "add-strings",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "String", "Simulation"],
    constaints:
      "<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li> <li><code>num1</code> and <code>num2</code> consist of only digits.</li> <li><code>num1</code> and <code>num2</code> don't have any leading zeros except for the zero itself.</li>",
    question:
      "<p>Given two non-negative integers, <code>num1</code> and <code>num2</code> represented as string, return <em>the sum of</em> <code>num1</code> <em>and</em> <code>num2</code> <em>as a string</em>.</p><p>You must solve the problem without using any built-in library for handling large integers (such as <code>BigInteger</code>). You must also not convert the inputs to integers directly.</p>",
    examples: [
      {
        id: 1,
        inputText: 'num1 = "11", num2 = "123"',
        outputText: '"134"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'num1 = "456", num2 = "77"',
        outputText: '"533"',
        explanation: "",
      },
      {
        id: 3,
        inputText: 'num1 = "0", num2 = "0"',
        outputText: '"0"',
        explanation: "",
      },
    ],
    tests: '["11", "456", "0"]',
    answer: '["134", "533", "0"]',
    code: "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar addStrings = function(num1, num2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 416,
    title: "Partition Equal Subset Sum",
    titleSlug: "partition-equal-subset-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <code>true</code> <em>if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,5,11,5]",
        outputText: "true",
        explanation: "The array can be partitioned as [1, 5, 5] and [11].",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,5]",
        outputText: "false",
        explanation: "The array cannot be partitioned into equal sum subsets.",
      },
    ],
    tests: "[[1, 5, 11, 5], [1, 2, 3, 5]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 417,
    title: "Pacific Atlantic Water Flow",
    titleSlug: "pacific-atlantic-water-flow",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Depth-First Search", "Breadth-First Search", "Matrix"],
    constaints:
      "<li><code>m == heights.length</code></li> <li><code>n == heights[r].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= heights[r][c] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>There is an <code>m x n</code> rectangular island that borders both the <strong>Pacific Ocean</strong> and <strong>Atlantic Ocean</strong>. The <strong>Pacific Ocean</strong> touches the island's left and top edges, and the <strong>Atlantic Ocean</strong> touches the island's right and bottom edges.</p><p>The island is partitioned into a grid of square cells. You are given an <code>m x n</code> integer matrix <code>heights</code> where <code>heights[r][c]</code> represents the <strong>height above sea level</strong> of the cell at coordinate <code>(r, c)</code>.</p><p>The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is <strong>less than or equal to</strong> the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.</p><p>Return <em>a <strong>2D list</strong> of grid coordinates </em><code>result</code><em> where </em><code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code><em> denotes that rain water can flow from cell </em><code>(r<sub>i</sub>, c<sub>i</sub>)</code><em> to <strong>both</strong> the Pacific and Atlantic oceans</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
        outputText: "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]",
        explanation:
          "The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -> Pacific Ocean \n\u00a0      [0,4] -> Atlantic Ocean\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean \n\u00a0      [1,3] -> [1,4] -> Atlantic Ocean\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n\u00a0      [1,4] -> Atlantic Ocean\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n\u00a0      [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n[3,0]: [3,0] -> Pacific Ocean \n\u00a0      [3,0] -> [4,0] -> Atlantic Ocean\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean \n\u00a0      [3,1] -> [4,1] -> Atlantic Ocean\n[4,0]: [4,0] -> Pacific Ocean \n       [4,0] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.",
      },
      {
        id: 2,
        inputText: "heights = [[1]]",
        outputText: "[[0,0]]",
        explanation:
          "The water can flow from the only cell to the Pacific and Atlantic oceans.",
      },
    ],
    tests:
      "[[[1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4]], [[1]]]",
    answer:
      "[[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]], [[0, 0]]]",
    code: "/**\n * @param {number[][]} heights\n * @return {number[][]}\n */\nvar pacificAtlantic = function(heights) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 419,
    title: "Battleships in a Board",
    titleSlug: "battleships-in-a-board",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Depth-First Search", "Matrix"],
    constaints:
      "<li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>board[i][j]</code> is either <code>'.'</code> or <code>'X'</code>.</li>",
    question:
      "<p>Given an <code>m x n</code> matrix <code>board</code> where each cell is a battleship <code>'X'</code> or empty <code>'.'</code>, return <em>the number of the <strong>battleships</strong> on</em> <code>board</code>.</p><p><strong>Battleships</strong> can only be placed horizontally or vertically on <code>board</code>. In other words, they can only be made of the shape <code>1 x k</code> (<code>1</code> row, <code>k</code> columns) or <code>k x 1</code> (<code>k</code> rows, <code>1</code> column), where <code>k</code> can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).</p>",
    examples: [
      {
        id: 1,
        inputText:
          'board = [["X",".",".","X"],[".",".",".","X"],[".",".",".","X"]]',
        outputText: "2",
        explanation: "",
      },
      { id: 2, inputText: 'board = [["."]]', outputText: "0", explanation: "" },
    ],
    tests:
      '[[["X", ".", ".", "X"], [".", ".", ".", "X"], [".", ".", ".", "X"]], [["."]]]',
    answer: "[2, 0]",
    code: "/**\n * @param {character[][]} board\n * @return {number}\n */\nvar countBattleships = function(board) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 420,
    title: "Strong Password Checker",
    titleSlug: "strong-password-checker",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Greedy", "Heap (Priority Queue)"],
    constaints:
      "<li>It has at least <code>6</code> characters and at most <code>20</code> characters.</li> <li>It contains at least <strong>one lowercase</strong> letter, at least <strong>one uppercase</strong> letter, and at least <strong>one digit</strong>.</li> <li>It does not contain three repeating characters in a row (i.e., <code>\"B<u><strong>aaa</strong></u>bb0\"</code> is weak, but <code>\"B<strong><u>aa</u></strong>b<u><strong>a</strong></u>0\"</code> is strong).</li> <li>Insert one character to <code>password</code>,</li> <li>Delete one character from <code>password</code>, or</li> <li>Replace one character of <code>password</code> with another character.</li> <li><code>1 &lt;= password.length &lt;= 50</code></li> <li><code>password</code> consists of letters, digits, dot\u00a0<code>'.'</code> or exclamation mark <code>'!'</code>.</li>",
    question:
      "<p>A password is considered strong if the below conditions are all met:</p><p>Given a string <code>password</code>, return <em>the minimum number of steps required to make <code>password</code> strong. if <code>password</code> is already strong, return <code>0</code>.</em></p><p>In one step, you can:</p>",
    examples: [
      { id: 1, inputText: 'password = "a"', outputText: "5", explanation: "" },
      {
        id: 2,
        inputText: 'password = "aA1"',
        outputText: "3",
        explanation: "",
      },
      {
        id: 3,
        inputText: 'password = "1337C0d3"',
        outputText: "0",
        explanation: "",
      },
    ],
    tests: '["a", "aA1", "1337C0d3"]',
    answer: "[5, 3, 0]",
    code: "/**\n * @param {string} password\n * @return {number}\n */\nvar strongPasswordChecker = function(password) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 421,
    title: "Maximum XOR of Two Numbers in an Array",
    titleSlug: "maximum-xor-of-two-numbers-in-an-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Bit Manipulation", "Trie"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>the maximum result of </em><code>nums[i] XOR nums[j]</code>, where <code>0 &lt;= i &lt;= j &lt; n</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,10,5,25,2,8]",
        outputText: "28",
        explanation: "The maximum result is 5 XOR 25 = 28.",
      },
      {
        id: 2,
        inputText: "nums = [14,70,53,83,49,91,36,80,92,51,66,70]",
        outputText: "127",
        explanation: "",
      },
    ],
    tests:
      "[[3, 10, 5, 25, 2, 8], [14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]]",
    answer: "[28, 127]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaximumXOR = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 423,
    title: "Reconstruct Original Digits from English",
    titleSlug: "reconstruct-original-digits-from-english",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Math", "String"],
    constaints:
      '<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is one of the characters <code>["e","g","f","i","h","o","n","s","r","u","t","w","v","x","z"]</code>.</li> <li><code>s</code> is <strong>guaranteed</strong> to be valid.</li>',
    question:
      "<p>Given a string <code>s</code> containing an out-of-order English representation of digits <code>0-9</code>, return <em>the digits in <strong>ascending</strong> order</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "owoztneoer"',
        outputText: '"012"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "fviefuro"',
        outputText: '"45"',
        explanation: "",
      },
    ],
    tests: '["owoztneoer", "fviefuro"]',
    answer: '["012", "45"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar originalDigits = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 424,
    title: "Longest Repeating Character Replacement",
    titleSlug: "longest-repeating-character-replacement",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only uppercase English letters.</li> <li><code>0 &lt;= k &lt;= s.length</code></li>",
    question:
      "<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p><p>Return <em>the length of the longest substring containing the same letter you can get after performing the above operations</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "ABAB", k = 2',
        outputText: "4",
        explanation: "Replace the two 'A's with two 'B's or vice versa.",
      },
      {
        id: 2,
        inputText: 's = "AABABBA", k = 1',
        outputText: "4",
        explanation:
          "Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.",
      },
    ],
    tests: '["ABAB", "AABABBA"]',
    answer: "[4, 4]",
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar characterReplacement = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 432,
    title: "All O`one Data Structure",
    titleSlug: "all-oone-data-structure",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    constaints:
      '<li><code>AllOne()</code> Initializes the object of the data structure.</li> <li><code>inc(String key)</code> Increments the count of the string <code>key</code> by <code>1</code>. If <code>key</code> does not exist in the data structure, insert it with count <code>1</code>.</li> <li><code>dec(String key)</code> Decrements the count of the string <code>key</code> by <code>1</code>. If the count of <code>key</code> is <code>0</code> after the decrement, remove it from the data structure. It is guaranteed that <code>key</code> exists in the data structure before the decrement.</li> <li><code>getMaxKey()</code> Returns one of the keys with the maximal count. If no element exists, return an empty string <code>""</code>.</li> <li><code>getMinKey()</code> Returns one of the keys with the minimum count. If no element exists, return an empty string <code>""</code>.</li> <li><code>1 &lt;= key.length &lt;= 10</code></li> <li><code>key</code> consists of lowercase English letters.</li> <li>It is guaranteed that for each call to <code>dec</code>, <code>key</code> is existing in the data structure.</li> <li>At most <code>5 * 10<sup>4</sup></code>\u00a0calls will be made to <code>inc</code>, <code>dec</code>, <code>getMaxKey</code>, and <code>getMinKey</code>.</li>',
    question:
      "<p>Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.</p><p>Implement the <code>AllOne</code> class:</p><p><strong>Note</strong> that each function must run in <code>O(1)</code> average time complexity.</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["AllOne", "inc", "inc", "getMaxKey", "getMinKey", "inc", "getMaxKey", "getMinKey"]\n[[], ["hello"], ["hello"], [], [], ["leet"], [], []]',
        outputText:
          '[null, null, null, "hello", "hello", null, "hello", "leet"]',
        explanation:
          'AllOne allOne = new AllOne();\nallOne.inc("hello");\nallOne.inc("hello");\nallOne.getMaxKey(); // return "hello"\nallOne.getMinKey(); // return "hello"\nallOne.inc("leet");\nallOne.getMaxKey(); // return "hello"\nallOne.getMinKey(); // return "leet"',
      },
    ],
    tests:
      '[["AllOne", "inc", "inc", "getMaxKey", "getMinKey", "inc", "getMaxKey", "getMinKey"]]',
    answer: '[[null, null, null, "hello", "hello", null, "hello", "leet"]]',
    code: "\nvar AllOne = function() {\n    \n};\n\n/** \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.inc = function(key) {\n    \n};\n\n/** \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.dec = function(key) {\n    \n};\n\n/**\n * @return {string}\n */\nAllOne.prototype.getMaxKey = function() {\n    \n};\n\n/**\n * @return {string}\n */\nAllOne.prototype.getMinKey = function() {\n    \n};\n\n/** \n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 434,
    title: "Number of Segments in a String",
    titleSlug: "number-of-segments-in-a-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>0 &lt;= s.length &lt;= 300</code></li> <li><code>s</code> consists of lowercase and uppercase English letters, digits, or one of the following characters <code>\"!@#$%^&amp;*()_+-=',.:\"</code>.</li> <li>The only space character in <code>s</code> is <code>' '</code>.</li>",
    question:
      "<p>Given a string <code>s</code>, return <em>the number of segments in the string</em>.</p><p>A <strong>segment</strong> is defined to be a contiguous sequence of <strong>non-space characters</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "Hello, my name is John"',
        outputText: "5",
        explanation:
          'The five segments are ["Hello,", "my", "name", "is", "John"]',
      },
      { id: 2, inputText: 's = "Hello"', outputText: "1", explanation: "" },
    ],
    tests: '["Hello, my name is John", "Hello"]',
    answer: "[5, 1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar countSegments = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 435,
    title: "Non-overlapping Intervals",
    titleSlug: "non-overlapping-intervals",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Greedy", "Sorting"],
    constaints:
      "<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li>",
    question:
      "<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "intervals = [[1,2],[2,3],[3,4],[1,3]]",
        outputText: "1",
        explanation:
          "[1,3] can be removed and the rest of the intervals are non-overlapping.",
      },
      {
        id: 2,
        inputText: "intervals = [[1,2],[1,2],[1,2]]",
        outputText: "2",
        explanation:
          "You need to remove two [1,2] to make the rest of the intervals non-overlapping.",
      },
      {
        id: 3,
        inputText: "intervals = [[1,2],[2,3]]",
        outputText: "0",
        explanation:
          "You don't need to remove any of the intervals since they're already non-overlapping.",
      },
    ],
    tests:
      "[[[1, 2], [2, 3], [3, 4], [1, 3]], [[1, 2], [1, 2], [1, 2]], [[1, 2], [2, 3]]]",
    answer: "[1, 2, 0]",
    code: "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar eraseOverlapIntervals = function(intervals) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 436,
    title: "Find Right Interval",
    titleSlug: "find-right-interval",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= intervals.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>-10<sup>6</sup> &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>6</sup></code></li> <li>The start point of each interval is <strong>unique</strong>.</li>",
    question:
      "<p>You are given an array of <code>intervals</code>, where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and each <code>start<sub>i</sub></code> is <strong>unique</strong>.</p><p>The <strong>right interval</strong> for an interval <code>i</code> is an interval <code>j</code> such that <code>start<sub>j</sub> &gt;= end<sub>i</sub></code> and <code>start<sub>j</sub></code> is <strong>minimized</strong>. Note that <code>i</code> may equal <code>j</code>.</p><p>Return <em>an array of <strong>right interval</strong> indices for each interval <code>i</code></em>. If no <strong>right interval</strong> exists for interval <code>i</code>, then put <code>-1</code> at index <code>i</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "intervals = [[1,2]]",
        outputText: "[-1]",
        explanation:
          "There is only one interval in the collection, so it outputs -1.",
      },
      {
        id: 2,
        inputText: "intervals = [[3,4],[2,3],[1,2]]",
        outputText: "[-1,0,1]",
        explanation:
          "There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start",
      },
      {
        id: 3,
        inputText: "intervals = [[1,4],[2,3],[3,4]]",
        outputText: "[-1,2,-1]",
        explanation:
          "There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start",
      },
    ],
    tests: "[[[1, 2]], [[3, 4], [2, 3], [1, 2]], [[1, 4], [2, 3], [3, 4]]]",
    answer: "[[-1], [-1, 0, 1], [-1, 2, -1]]",
    code: "/**\n * @param {number[][]} intervals\n * @return {number[]}\n */\nvar findRightInterval = function(intervals) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 437,
    title: "Path Sum III",
    titleSlug: "path-sum-iii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 1000]</code>.</li> <li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li> <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <em>the number of paths where the sum of the values\u00a0along the path equals</em>\u00a0<code>targetSum</code>.</p><p>The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8",
        outputText: "3",
        explanation: "The paths that sum to 8 are shown.",
      },
      {
        id: 2,
        inputText:
          "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      "[[10, 5, -3, 3, 2, null, 11, 3, -2, null, 1], [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, 5, 1]]",
    answer: "[3, 3]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {number}\n */\nvar pathSum = function(root, targetSum) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 438,
    title: "Find All Anagrams in a String",
    titleSlug: "find-all-anagrams-in-a-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>s</code> and <code>p</code> consist of lowercase English letters.</li>",
    question:
      "<p>Given two strings <code>s</code> and <code>p</code>, return <em>an array of all the start indices of </em><code>p</code><em>'s anagrams in </em><code>s</code>. You may return the answer in <strong>any order</strong>.</p><p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "cbaebabacd", p = "abc"',
        outputText: "[0,6]",
        explanation:
          'The substring with start index = 0 is "cba", which is an anagram of "abc".\nThe substring with start index = 6 is "bac", which is an anagram of "abc".',
      },
      {
        id: 2,
        inputText: 's = "abab", p = "ab"',
        outputText: "[0,1,2]",
        explanation:
          'The substring with start index = 0 is "ab", which is an anagram of "ab".\nThe substring with start index = 1 is "ba", which is an anagram of "ab".\nThe substring with start index = 2 is "ab", which is an anagram of "ab".',
      },
    ],
    tests: '["cbaebabacd", "abab"]',
    answer: "[[0, 6], [0, 1, 2]]",
    code: "/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 440,
    title: "K-th Smallest in Lexicographical Order",
    titleSlug: "k-th-smallest-in-lexicographical-order",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Trie"],
    constaints: "<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given two integers <code>n</code> and <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>lexicographically smallest integer in the range</em> <code>[1, n]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 13, k = 2",
        outputText: "10",
        explanation:
          "The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.",
      },
      { id: 2, inputText: "n = 1, k = 1", outputText: "1", explanation: "" },
    ],
    tests: "[13, 1]",
    answer: "[10, 1]",
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar findKthNumber = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 442,
    title: "Find All Duplicates in an Array",
    titleSlug: "find-all-duplicates-in-an-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li> <li>Each element in <code>nums</code> appears <strong>once</strong> or <strong>twice</strong>.</li>",
    question:
      "<p>Given an integer array <code>nums</code> of length <code>n</code> where all the integers of <code>nums</code> are in the range <code>[1, n]</code> and each integer appears <strong>once</strong> or <strong>twice</strong>, return <em>an array of all the integers that appears <strong>twice</strong></em>.</p><p>You must write an algorithm that runs in\u00a0<code>O(n)\u00a0</code>time and uses only constant extra space.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,3,2,7,8,2,3,1]",
        outputText: "[2,3]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [1,1,2]",
        outputText: "[1]",
        explanation: "",
      },
      { id: 3, inputText: "nums = [1]", outputText: "[]", explanation: "" },
    ],
    tests: "[[4, 3, 2, 7, 8, 2, 3, 1], [1, 1, 2], [1]]",
    answer: "[[2, 3], [1], []]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findDuplicates = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 445,
    title: "Add Two Numbers II",
    titleSlug: "add-two-numbers-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Math", "Stack"],
    constaints:
      "<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>It is guaranteed that the list represents a number that does not have leading zeros.</li>",
    question:
      "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>",
    examples: [
      {
        id: 1,
        inputText: "l1 = [7,2,4,3], l2 = [5,6,4]",
        outputText: "[7,8,0,7]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "l1 = [2,4,3], l2 = [5,6,4]",
        outputText: "[8,0,7]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "l1 = [0], l2 = [0]",
        outputText: "[0]",
        explanation: "",
      },
    ],
    tests: "[[7, 2, 4, 3], [2, 4, 3], [0]]",
    answer: "[[7, 8, 0, 7], [8, 0, 7], [0]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 446,
    title: "Arithmetic Slices II - Subsequence",
    titleSlug: "arithmetic-slices-ii-subsequence",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li>For example, <code>[1, 3, 5, 7, 9]</code>, <code>[7, 7, 7, 7]</code>, and <code>[3, -1, -5, -9]</code> are arithmetic sequences.</li> <li>For example, <code>[1, 1, 2, 5, 7]</code> is not an arithmetic sequence.</li> <li>For example, <code>[2,5,10]</code> is a subsequence of <code>[1,2,1,<strong><u>2</u></strong>,4,1,<u><strong>5</strong></u>,<u><strong>10</strong></u>]</code>.</li> <li><code>1\u00a0 &lt;= nums.length &lt;= 1000</code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>the number of all the <strong>arithmetic subsequences</strong> of</em> <code>nums</code>.</p><p>A sequence of numbers is called arithmetic if it consists of <strong>at least three elements</strong> and if the difference between any two consecutive elements is the same.</p><p>A <strong>subsequence</strong> of an array is a sequence that can be formed by removing some elements (possibly none) of the array.</p><p>The test cases are generated so that the answer fits in <strong>32-bit</strong> integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,4,6,8,10]",
        outputText: "7",
        explanation:
          "All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]",
      },
      {
        id: 2,
        inputText: "nums = [7,7,7,7,7]",
        outputText: "16",
        explanation: "Any subsequence of this array is arithmetic.",
      },
    ],
    tests: "[[2, 4, 6, 8, 10], [7, 7, 7, 7, 7]]",
    answer: "[7, 16]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numberOfArithmeticSlices = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 447,
    title: "Number of Boomerangs",
    titleSlug: "number-of-boomerangs",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Math"],
    constaints:
      "<li><code>n == points.length</code></li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>points[i].length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>All the points are <strong>unique</strong>.</li>",
    question:
      "<p>You are given <code>n</code> <code>points</code> in the plane that are all <strong>distinct</strong>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. A <strong>boomerang</strong> is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> <strong>(the order of the tuple matters)</strong>.</p><p>Return <em>the number of boomerangs</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "points = [[0,0],[1,0],[2,0]]",
        outputText: "2",
        explanation:
          "The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].",
      },
      {
        id: 2,
        inputText: "points = [[1,1],[2,2],[3,3]]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 3,
        inputText: "points = [[1,1]]",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[[[0, 0], [1, 0], [2, 0]], [[1, 1], [2, 2], [3, 3]], [[1, 1]]]",
    answer: "[2, 2, 0]",
    code: "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfBoomerangs = function(points) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 448,
    title: "Find All Numbers Disappeared in an Array",
    titleSlug: "find-all-numbers-disappeared-in-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li>",
    question:
      "<p>Given an array <code>nums</code> of <code>n</code> integers where <code>nums[i]</code> is in the range <code>[1, n]</code>, return <em>an array of all the integers in the range</em> <code>[1, n]</code> <em>that do not appear in</em> <code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,3,2,7,8,2,3,1]",
        outputText: "[5,6]",
        explanation: "",
      },
      { id: 2, inputText: "nums = [1,1]", outputText: "[2]", explanation: "" },
    ],
    tests: "[[4, 3, 2, 7, 8, 2, 3, 1], [1, 1]]",
    answer: "[[5, 6], [2]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findDisappearedNumbers = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 449,
    title: "Serialize and Deserialize BST",
    titleSlug: "serialize-and-deserialize-bst",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li>",
    question:
      "<p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p><p><b>The encoded string should be as compact as possible.</b></p>",
    examples: [
      {
        id: 1,
        inputText: "root = [2,1,3]",
        outputText: "[2,1,3]",
        explanation: "",
      },
      { id: 2, inputText: "root = []", outputText: "[]", explanation: "" },
    ],
    tests: "[[2, 1, 3], []]",
    answer: "[[2, 1, 3], []]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 450,
    title: "Delete Node in a BST",
    titleSlug: "delete-node-in-a-bst",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>Search for a node to remove.</li> <li>If the node is found, delete the node.</li> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li>Each node has a <strong>unique</strong> value.</li> <li><code>root</code> is a valid binary search tree.</li> <li><code>-10<sup>5</sup> &lt;= key &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return <em>the <strong>root node reference</strong> (possibly updated) of the BST</em>.</p><p>Basically, the deletion can be divided into two stages:</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [5,3,6,2,4,null,7], key = 3",
        outputText: "[5,4,6,2,null,null,7]",
        explanation:
          "Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.",
      },
      {
        id: 2,
        inputText: "root = [5,3,6,2,4,null,7], key = 0",
        outputText: "[5,3,6,2,4,null,7]",
        explanation: "The tree does not contain a node with value = 0.",
      },
      {
        id: 3,
        inputText: "root = [], key = 0",
        outputText: "[]",
        explanation: "",
      },
    ],
    tests: "[[5, 3, 6, 2, 4, null, 7], [5, 3, 6, 2, 4, null, 7], []]",
    answer: "[[5, 4, 6, 2, null, null, 7], [5, 3, 6, 2, 4, null, 7], []]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} key\n * @return {TreeNode}\n */\nvar deleteNode = function(root, key) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 451,
    title: "Sort Characters By Frequency",
    titleSlug: "sort-characters-by-frequency",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
    ],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li> <li><code>s</code> consists of uppercase and lowercase English letters and digits.</li>",
    question:
      "<p>Given a string <code>s</code>, sort it in <strong>decreasing order</strong> based on the <strong>frequency</strong> of the characters. The <strong>frequency</strong> of a character is the number of times it appears in the string.</p><p>Return <em>the sorted string</em>. If there are multiple answers, return <em>any of them</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "tree"',
        outputText: '"eert"',
        explanation:
          "'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.",
      },
      {
        id: 2,
        inputText: 's = "cccaaa"',
        outputText: '"aaaccc"',
        explanation:
          'Both \'c\' and \'a\' appear three times, so both "cccaaa" and "aaaccc" are valid answers.\nNote that "cacaca" is incorrect, as the same characters must be together.',
      },
      {
        id: 3,
        inputText: 's = "Aabb"',
        outputText: '"bbAa"',
        explanation:
          "\"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.",
      },
    ],
    tests: '["tree", "cccaaa", "Aabb"]',
    answer: '["eert", "aaaccc", "bbAa"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar frequencySort = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 452,
    title: "Minimum Number of Arrows to Burst Balloons",
    titleSlug: "minimum-number-of-arrows-to-burst-balloons",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li> <li><code>points[i].length == 2</code></li> <li><code>-2<sup>31</sup> &lt;= x<sub>start</sub> &lt; x<sub>end</sub> &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array <code>points</code> where <code>points[i] = [x<sub>start</sub>, x<sub>end</sub>]</code> denotes a balloon whose <strong>horizontal diameter</strong> stretches between <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code>. You do not know the exact y-coordinates of the balloons.</p><p>Arrows can be shot up <strong>directly vertically</strong> (in the positive y-direction) from different points along the x-axis. A balloon with <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code> is <strong>burst</strong> by an arrow shot at <code>x</code> if <code>x<sub>start</sub> &lt;= x &lt;= x<sub>end</sub></code>. There is <strong>no limit</strong> to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.</p><p>Given the array <code>points</code>, return <em>the <strong>minimum</strong> number of arrows that must be shot to burst all balloons</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "points = [[10,16],[2,8],[1,6],[7,12]]",
        outputText: "2",
        explanation:
          "The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].",
      },
      {
        id: 2,
        inputText: "points = [[1,2],[3,4],[5,6],[7,8]]",
        outputText: "4",
        explanation:
          "One arrow needs to be shot for each balloon for a total of 4 arrows.",
      },
      {
        id: 3,
        inputText: "points = [[1,2],[2,3],[3,4],[4,5]]",
        outputText: "2",
        explanation:
          "The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].",
      },
    ],
    tests:
      "[[[10, 16], [2, 8], [1, 6], [7, 12]], [[1, 2], [3, 4], [5, 6], [7, 8]], [[1, 2], [2, 3], [3, 4], [4, 5]]]",
    answer: "[2, 4, 2]",
    code: "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar findMinArrowShots = function(points) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 453,
    title: "Minimum Moves to Equal Array Elements",
    titleSlug: "minimum-moves-to-equal-array-elements",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li>The answer is guaranteed to fit in a <strong>32-bit</strong> integer.</li>",
    question:
      "<p>Given an integer array <code>nums</code> of size <code>n</code>, return <em>the minimum number of moves required to make all array elements equal</em>.</p><p>In one move, you can increment <code>n - 1</code> elements of the array by <code>1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3]",
        outputText: "3",
        explanation:
          "Only three moves are needed (remember each move increments two elements):\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]",
      },
      { id: 2, inputText: "nums = [1,1,1]", outputText: "0", explanation: "" },
    ],
    tests: "[[1, 2, 3], [1, 1, 1]]",
    answer: "[3, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minMoves = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 454,
    title: "4Sum II",
    titleSlug: "4sum-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>0 &lt;= i, j, k, l &lt; n</code></li> <li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li> <li><code>n == nums1.length</code></li> <li><code>n == nums2.length</code></li> <li><code>n == nums3.length</code></li> <li><code>n == nums4.length</code></li> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>-2<sup>28</sup> &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2<sup>28</sup></code></li>",
    question:
      "<p>Given four integer arrays <code>nums1</code>, <code>nums2</code>, <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>, return the number of tuples <code>(i, j, k, l)</code> such that:</p>",
    examples: [
      {
        id: 1,
        inputText:
          "nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]",
        outputText: "2",
        explanation:
          "The two tuples are:\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0",
      },
      {
        id: 2,
        inputText: "nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[1, 2], [0]]",
    answer: "[2, 1]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number[]} nums3\n * @param {number[]} nums4\n * @return {number}\n */\nvar fourSumCount = function(nums1, nums2, nums3, nums4) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 456,
    title: "132 Pattern",
    titleSlug: "132-pattern",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Binary Search",
      "Stack",
      "Monotonic Stack",
      "Ordered Set",
    ],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an array of <code>n</code> integers <code>nums</code>, a <strong>132 pattern</strong> is a subsequence of three integers <code>nums[i]</code>, <code>nums[j]</code> and <code>nums[k]</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[k] &lt; nums[j]</code>.</p><p>Return <code>true</code><em> if there is a <strong>132 pattern</strong> in </em><code>nums</code><em>, otherwise, return </em><code>false</code><em>.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4]",
        outputText: "false",
        explanation: "There is no 132 pattern in the sequence.",
      },
      {
        id: 2,
        inputText: "nums = [3,1,4,2]",
        outputText: "true",
        explanation: "There is a 132 pattern in the sequence: [1, 4, 2].",
      },
      {
        id: 3,
        inputText: "nums = [-1,3,2,0]",
        outputText: "true",
        explanation:
          "There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].",
      },
    ],
    tests: "[[1, 2, 3, 4], [3, 1, 4, 2], [-1, 3, 2, 0]]",
    answer: "[false, true, true]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar find132pattern = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 457,
    title: "Circular Array Loop",
    titleSlug: "circular-array-loop",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Two Pointers"],
    constaints:
      "<li>If <code>nums[i]</code> is positive, move <code>nums[i]</code> steps <strong>forward</strong>, and</li> <li>If <code>nums[i]</code> is negative, move <code>nums[i]</code> steps <strong>backward</strong>.</li> <li>Following the movement rules above results in the repeating index sequence <code>seq[0] -&gt; seq[1] -&gt; ... -&gt; seq[k - 1] -&gt; seq[0] -&gt; ...</code></li> <li>Every <code>nums[seq[j]]</code> is either <strong>all positive</strong> or <strong>all negative</strong>.</li> <li><code>k &gt; 1</code></li> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>nums[i] != 0</code></li>",
    question:
      "<p>You are playing a game involving a <strong>circular</strong> array of non-zero integers <code>nums</code>. Each <code>nums[i]</code> denotes the number of indices forward/backward you must move if you are located at index <code>i</code>:</p><p>Since the array is <strong>circular</strong>, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.</p><p>A <strong>cycle</strong> in the array consists of a sequence of indices <code>seq</code> of length <code>k</code> where:</p><p>Return <code>true</code><em> if there is a <strong>cycle</strong> in </em><code>nums</code><em>, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,-1,1,2,2]",
        outputText: "true",
        explanation:
          "The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction).",
      },
      {
        id: 2,
        inputText: "nums = [-1,-2,-3,-4,-5,6]",
        outputText: "false",
        explanation:
          "The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nThe only cycle is of size 1, so we return false.",
      },
      {
        id: 3,
        inputText: "nums = [1,-1,5,1,4]",
        outputText: "true",
        explanation:
          "The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so",
      },
    ],
    tests: "[[2, -1, 1, 2, 2], [-1, -2, -3, -4, -5, 6], [1, -1, 5, 1, 4]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar circularArrayLoop = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 458,
    title: "Poor Pigs",
    titleSlug: "poor-pigs",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Combinatorics"],
    constaints:
      "<li>Choose some live pigs to feed.</li> <li>For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.</li> <li>Wait for <code>minutesToDie</code> minutes. You may <strong>not</strong> feed any other pigs during this time.</li> <li>After <code>minutesToDie</code> minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.</li> <li>Repeat this process until you run out of time.</li> <li><code>1 &lt;= buckets &lt;= 1000</code></li> <li><code>1 &lt;=\u00a0minutesToDie &lt;=\u00a0minutesToTest &lt;= 100</code></li>",
    question:
      "<p>There are <code>buckets</code> buckets of liquid, where <strong>exactly one</strong> of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have <code>minutesToTest</code> minutes to determine which bucket is poisonous.</p><p>You can feed the pigs according to these steps:</p><p>Given <code>buckets</code>, <code>minutesToDie</code>, and <code>minutesToTest</code>, return <em>the <strong>minimum</strong> number of pigs needed to figure out which bucket is poisonous within the allotted time</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "buckets = 4, minutesToDie = 15, minutesToTest = 15",
        outputText: "2",
        explanation:
          "We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous.",
      },
      {
        id: 2,
        inputText: "buckets = 4, minutesToDie = 15, minutesToTest = 30",
        outputText: "2",
        explanation:
          "We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.",
      },
    ],
    tests: "[4, 4]",
    answer: "[2, 2]",
    code: "/**\n * @param {number} buckets\n * @param {number} minutesToDie\n * @param {number} minutesToTest\n * @return {number}\n */\nvar poorPigs = function(buckets, minutesToDie, minutesToTest) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 460,
    title: "LFU Cache",
    titleSlug: "lfu-cache",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Hash Table", "Linked List", "Design", "Doubly-Linked List"],
    constaints:
      "<li><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</li> <li><code>int get(int key)</code> Gets the value of the <code>key</code> if the <code>key</code> exists in the cache. Otherwise, returns <code>-1</code>.</li> <li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if present, or inserts the <code>key</code> if not already present. When the cache reaches its <code>capacity</code>, it should invalidate and remove the <strong>least frequently used</strong> key before inserting a new item. For this problem, when there is a <strong>tie</strong> (i.e., two or more keys with the same frequency), the <strong>least recently used</strong> <code>key</code> would be invalidated.</li> <li><code>1 &lt;= capacity\u00a0&lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= key &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= value &lt;= 10<sup>9</sup></code></li> <li>At most <code>2 * 10<sup>5</sup></code>\u00a0calls will be made to <code>get</code> and <code>put</code>.</li>",
    question:
      '<p>Design and implement a data structure for a <a href="https://en.wikipedia.org/wiki/Least_frequently_used" target="_blank">Least Frequently Used (LFU)</a> cache.</p><p>Implement the <code>LFUCache</code> class:</p><p>To determine the least frequently used key, a <strong>use counter</strong> is maintained for each key in the cache. The key with the smallest <strong>use counter</strong> is the least frequently used key.</p><p>When a key is first inserted into the cache, its <strong>use counter</strong> is set to <code>1</code> (due to the <code>put</code> operation). The <strong>use counter</strong> for a key in the cache is incremented either a <code>get</code> or <code>put</code> operation is called on it.</p><p>The functions\u00a0<code data-stringify-type="code">get</code>\u00a0and\u00a0<code data-stringify-type="code">put</code>\u00a0must each run in <code>O(1)</code> average time complexity.</p>',
    examples: [
      {
        id: 1,
        inputText:
          '["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get", "get", "get"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]',
        outputText: "[null, null, null, 1, null, -1, 3, null, -1, 3, 4]",
        explanation:
          "// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n\u00a0                // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3",
      },
    ],
    tests:
      '[["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get", "get", "get"]]',
    answer: "[[null, null, null, 1, null, -1, 3, null, -1, 3, 4]]",
    code: "/**\n * @param {number} capacity\n */\nvar LFUCache = function(capacity) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLFUCache.prototype.get = function(key) {\n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLFUCache.prototype.put = function(key, value) {\n    \n};\n\n/** \n * Your LFUCache object will be instantiated and called as such:\n * var obj = new LFUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 461,
    title: "Hamming Distance",
    titleSlug: "hamming-distance",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Bit Manipulation"],
    constaints:
      "<li><code>0 &lt;=\u00a0x, y &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      '<p>The <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers <code>x</code> and <code>y</code>, return <em>the <strong>Hamming distance</strong> between them</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "x = 1, y = 4",
        outputText: "2",
        explanation:
          "1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\nThe above arrows point to positions where the corresponding bits are different.",
      },
      { id: 2, inputText: "x = 3, y = 1", outputText: "1", explanation: "" },
    ],
    tests: "[1, 3]",
    answer: "[2, 1]",
    code: "/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 462,
    title: "Minimum Moves to Equal Array Elements II",
    titleSlug: "minimum-moves-to-equal-array-elements-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Sorting"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code> of size <code>n</code>, return <em>the minimum number of moves required to make all array elements equal</em>.</p><p>In one move, you can increment or decrement an element of the array by <code>1</code>.</p><p>Test cases are designed so that the answer will fit in a <strong>32-bit</strong> integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3]",
        outputText: "2",
        explanation:
          "Only two moves are needed (remember each move increments or decrements one element):\n[",
      },
      {
        id: 2,
        inputText: "nums = [1,10,2,9]",
        outputText: "16",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3], [1, 10, 2, 9]]",
    answer: "[2, 16]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minMoves2 = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 463,
    title: "Island Perimeter",
    titleSlug: "island-perimeter",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Depth-First Search", "Breadth-First Search", "Matrix"],
    constaints:
      "<li><code>row == grid.length</code></li> <li><code>col == grid[i].length</code></li> <li><code>1 &lt;= row, col &lt;= 100</code></li> <li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li> <li>There is exactly one island in <code>grid</code>.</li>",
    question:
      "<p>You are given <code>row x col</code> <code>grid</code> representing a map where <code>grid[i][j] = 1</code> represents\u00a0land and <code>grid[i][j] = 0</code> represents water.</p><p>Grid cells are connected <strong>horizontally/vertically</strong> (not diagonally). The <code>grid</code> is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p><p>The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]",
        outputText: "16",
        explanation:
          "The perimeter is the 16 yellow stripes in the image above.",
      },
      { id: 2, inputText: "grid = [[1]]", outputText: "4", explanation: "" },
      { id: 3, inputText: "grid = [[1,0]]", outputText: "4", explanation: "" },
    ],
    tests:
      "[[[0, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 0, 0]], [[1]], [[1, 0]]]",
    answer: "[16, 4, 4]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar islandPerimeter = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 464,
    title: "Can I Win",
    titleSlug: "can-i-win",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Game Theory",
      "Bitmask",
    ],
    constaints:
      "<li><code>1 &lt;= maxChoosableInteger &lt;= 20</code></li> <li><code>0 &lt;= desiredTotal &lt;= 300</code></li>",
    question:
      '<p>In the "100 game" two players take turns adding, to a running total, any integer from <code>1</code> to <code>10</code>. The player who first causes the running total to <strong>reach or exceed</strong> 100 wins.</p><p>What if we change the game so that players <strong>cannot</strong> re-use integers?</p><p>For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total &gt;= 100.</p><p>Given two integers <code>maxChoosableInteger</code> and <code>desiredTotal</code>, return <code>true</code> if the first player to move can force a win, otherwise, return <code>false</code>. Assume both players play <strong>optimally</strong>.</p>',
    examples: [
      {
        id: 1,
        inputText: "maxChoosableInteger = 10, desiredTotal = 11",
        outputText: "false",
        explanation:
          "No matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.",
      },
      {
        id: 2,
        inputText: "maxChoosableInteger = 10, desiredTotal = 0",
        outputText: "true",
        explanation: "",
      },
      {
        id: 3,
        inputText: "maxChoosableInteger = 10, desiredTotal = 1",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[10, 10, 10]",
    answer: "[false, true, true]",
    code: "/**\n * @param {number} maxChoosableInteger\n * @param {number} desiredTotal\n * @return {boolean}\n */\nvar canIWin = function(maxChoosableInteger, desiredTotal) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 466,
    title: "Count The Repetitions",
    titleSlug: "count-the-repetitions",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      '<li>For example, <code>str == ["abc", 3] =="abcabcabc"</code>.</li> <li>For example, <code>s1 = "abc"</code> can be obtained from <code>s2 = "ab<strong><u>dbe</u></strong>c"</code> based on our definition by removing the bolded underlined characters.</li> <li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> <li><code>1 &lt;= n1, n2 &lt;= 10<sup>6</sup></code></li>',
    question:
      "<p>We define <code>str = [s, n]</code> as the string <code>str</code> which consists of the string <code>s</code> concatenated <code>n</code> times.</p><p>We define that string <code>s1</code> can be obtained from string <code>s2</code> if we can remove some characters from <code>s2</code> such that it becomes <code>s1</code>.</p><p>You are given two strings <code>s1</code> and <code>s2</code> and two integers <code>n1</code> and <code>n2</code>. You have the two strings <code>str1 = [s1, n1]</code> and <code>str2 = [s2, n2]</code>.</p><p>Return <em>the maximum integer </em><code>m</code><em> such that </em><code>str = [str2, m]</code><em> can be obtained from </em><code>str1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's1 = "acb", n1 = 4, s2 = "ab", n2 = 2',
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: 's1 = "acb", n1 = 1, s2 = "acb", n2 = 1',
        outputText: "1",
        explanation: "",
      },
    ],
    tests: '["acb", "acb"]',
    answer: "[2, 1]",
    code: "/**\n * @param {string} s1\n * @param {number} n1\n * @param {string} s2\n * @param {number} n2\n * @return {number}\n */\nvar getMaxRepetitions = function(s1, n1, s2, n2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 467,
    title: "Unique Substrings in Wraparound String",
    titleSlug: "unique-substrings-in-wraparound-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      '<li><code>"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd...."</code>.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li>',
    question:
      '<p>We define the string <code>base</code> to be the infinite wraparound string of <code>"abcdefghijklmnopqrstuvwxyz"</code>, so <code>base</code> will look like this:</p><p>Given a string <code>s</code>, return <em>the number of <strong>unique non-empty substrings</strong> of </em><code>s</code><em> are present in </em><code>base</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "a"',
        outputText: "1",
        explanation: 'Only the substring "a" of s is in base.',
      },
      {
        id: 2,
        inputText: 's = "cac"',
        outputText: "2",
        explanation: 'There are two substrings ("a", "c") of s in base.',
      },
      {
        id: 3,
        inputText: 's = "zab"',
        outputText: "6",
        explanation:
          'There are six substrings ("z", "a", "b", "za", "ab", and "zab") of s in base.',
      },
    ],
    tests: '["a", "cac", "zab"]',
    answer: "[1, 2, 6]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar findSubstringInWraproundString = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 468,
    title: "Validate IP Address",
    titleSlug: "validate-ip-address",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= x<sub>i</sub>.length &lt;= 4</code></li> <li><code>x<sub>i</sub></code> is a <strong>hexadecimal string</strong> which may contain digits, lowercase English letter (<code>'a'</code> to <code>'f'</code>) and upper-case English letters (<code>'A'</code> to <code>'F'</code>).</li> <li>Leading zeros are allowed in <code>x<sub>i</sub></code>.</li> <li><code>queryIP</code> consists only of English letters, digits and the characters <code>'.'</code> and <code>':'</code>.</li>",
    question:
      '<p>Given a string <code>queryIP</code>, return <code>"IPv4"</code> if IP is a valid IPv4 address, <code>"IPv6"</code> if IP is a valid IPv6 address or <code>"Neither"</code> if IP is not a correct IP of any type.</p><p><strong>A valid IPv4</strong> address is an IP in the form <code>"x<sub>1</sub>.x<sub>2</sub>.x<sub>3</sub>.x<sub>4</sub>"</code> where <code>0 &lt;= x<sub>i</sub> &lt;= 255</code> and <code>x<sub>i</sub></code> <strong>cannot contain</strong> leading zeros. For example, <code>"192.168.1.1"</code> and <code>"192.168.1.0"</code> are valid IPv4 addresses while <code>"192.168.01.1"</code>, <code>"192.168.1.00"</code>, and <code>"192.168@1.1"</code> are invalid IPv4 addresses.</p><p><strong>A valid IPv6</strong> address is an IP in the form <code>"x<sub>1</sub>:x<sub>2</sub>:x<sub>3</sub>:x<sub>4</sub>:x<sub>5</sub>:x<sub>6</sub>:x<sub>7</sub>:x<sub>8</sub>"</code> where:</p><p>For example, "<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> and "<code>2001:db8:85a3:0:0:8A2E:0370:7334"</code> are valid IPv6 addresses, while "<code>2001:0db8:85a3::8A2E:037j:7334"</code> and "<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> are invalid IPv6 addresses.</p>',
    examples: [
      {
        id: 1,
        inputText: 'queryIP = "172.16.254.1"',
        outputText: '"IPv4"',
        explanation: 'This is a valid IPv4 address, return "IPv4".',
      },
      {
        id: 2,
        inputText: 'queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334"',
        outputText: '"IPv6"',
        explanation: 'This is a valid IPv6 address, return "IPv6".',
      },
      {
        id: 3,
        inputText: 'queryIP = "256.256.256.256"',
        outputText: '"Neither"',
        explanation: "This is neither a IPv4 address nor a IPv6 address.",
      },
    ],
    tests:
      '["172.16.254.1", "2001:0db8:85a3:0:0:8A2E:0370:7334", "256.256.256.256"]',
    answer: '["IPv4", "IPv6", "Neither"]',
    code: "/**\n * @param {string} queryIP\n * @return {string}\n */\nvar validIPAddress = function(queryIP) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 472,
    title: "Concatenated Words",
    titleSlug: "concatenated-words",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "String",
      "Dynamic Programming",
      "Depth-First Search",
      "Trie",
    ],
    constaints:
      "<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= words[i].length &lt;= 30</code></li> <li><code>words[i]</code> consists of only lowercase English letters.</li> <li>All the strings of <code>words</code> are <strong>unique</strong>.</li> <li><code>1 &lt;= sum(words[i].length) &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an array of strings <code>words</code> (<strong>without duplicates</strong>), return <em>all the <strong>concatenated words</strong> in the given list of</em> <code>words</code>.</p><p>A <strong>concatenated word</strong> is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct)\u00a0in the given array.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]',
        outputText: '["catsdogcats","dogcatsdog","ratcatdogcat"]',
        explanation:
          '"catsdogcats" can be concatenated by "cats", "dog" and "cats"; \n"dogcatsdog" can be concatenated by "dog", "cats" and "dog"; \n"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".',
      },
      {
        id: 2,
        inputText: 'words = ["cat","dog","catdog"]',
        outputText: '["catdog"]',
        explanation: "",
      },
    ],
    tests:
      '[["cat", "cats", "catsdogcats", "dog", "dogcatsdog", "hippopotamuses", "rat", "ratcatdogcat"], ["cat", "dog", "catdog"]]',
    answer: '[["catsdogcats", "dogcatsdog", "ratcatdogcat"], ["catdog"]]',
    code: "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findAllConcatenatedWordsInADict = function(words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 473,
    title: "Matchsticks to Square",
    titleSlug: "matchsticks-to-square",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask",
    ],
    constaints:
      "<li><code>1 &lt;= matchsticks.length &lt;= 15</code></li> <li><code>1 &lt;= matchsticks[i] &lt;= 10<sup>8</sup></code></li>",
    question:
      "<p>You are given an integer array <code>matchsticks</code> where <code>matchsticks[i]</code> is the length of the <code>i<sup>th</sup></code> matchstick. You want to use <strong>all the matchsticks</strong> to make one square. You <strong>should not break</strong> any stick, but you can link them up, and each matchstick must be used <strong>exactly one time</strong>.</p><p>Return <code>true</code> if you can make this square and <code>false</code> otherwise.</p>",
    examples: [
      {
        id: 1,
        inputText: "matchsticks = [1,1,2,2,2]",
        outputText: "true",
        explanation:
          "You can form a square with length 2, one side of the square came two sticks with length 1.",
      },
      {
        id: 2,
        inputText: "matchsticks = [3,3,3,3,4]",
        outputText: "false",
        explanation:
          "You cannot find a way to form a square with all the matchsticks.",
      },
    ],
    tests: "[[1, 1, 2, 2, 2], [3, 3, 3, 3, 4]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} matchsticks\n * @return {boolean}\n */\nvar makesquare = function(matchsticks) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 474,
    title: "Ones and Zeroes",
    titleSlug: "ones-and-zeroes",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "String", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= strs.length &lt;= 600</code></li> <li><code>1 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i]</code> consists only of digits <code>'0'</code> and <code>'1'</code>.</li> <li><code>1 &lt;= m, n &lt;= 100</code></li>",
    question:
      "<p>You are given an array of binary strings <code>strs</code> and two integers <code>m</code> and <code>n</code>.</p><p>Return <em>the size of the largest subset of <code>strs</code> such that there are <strong>at most</strong> </em><code>m</code><em> </em><code>0</code><em>'s and </em><code>n</code><em> </em><code>1</code><em>'s in the subset</em>.</p><p>A set <code>x</code> is a <strong>subset</strong> of a set <code>y</code> if all elements of <code>x</code> are also elements of <code>y</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'strs = ["10","0001","111001","1","0"], m = 5, n = 3',
        outputText: "4",
        explanation:
          'The largest subset with at most 5 0\'s and 3 1\'s is {"10", "0001", "1", "0"}, so the answer is 4.\nOther valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.\n{"111001"} is an invalid subset because it contains 4 1\'s, greater than the maximum of 3.',
      },
      {
        id: 2,
        inputText: 'strs = ["10","0","1"], m = 1, n = 1',
        outputText: "2",
        explanation: 'The largest subset is {"0", "1"}, so the answer is 2.',
      },
    ],
    tests: '[["10", "0001", "111001", "1", "0"], ["10", "0", "1"]]',
    answer: "[4, 2]",
    code: "/**\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar findMaxForm = function(strs, m, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 475,
    title: "Heaters",
    titleSlug: "heaters",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= houses.length, heaters.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= houses[i], heaters[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.</p><p>Every house can be warmed, as long as the house is within the heater's warm radius range.\u00a0</p><p>Given the positions of <code>houses</code> and <code>heaters</code> on a horizontal line, return <em>the minimum radius standard of heaters\u00a0so that those heaters could cover all houses.</em></p><p><strong>Notice</strong> that\u00a0all the <code>heaters</code> follow your radius standard, and the warm radius will the same.</p>",
    examples: [
      {
        id: 1,
        inputText: "houses = [1,2,3], heaters = [2]",
        outputText: "1",
        explanation:
          "The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.",
      },
      {
        id: 2,
        inputText: "houses = [1,2,3,4], heaters = [1,4]",
        outputText: "1",
        explanation:
          "The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed.",
      },
      {
        id: 3,
        inputText: "houses = [1,5], heaters = [2]",
        outputText: "3",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3], [1, 2, 3, 4], [1, 5]]",
    answer: "[1, 1, 3]",
    code: "/**\n * @param {number[]} houses\n * @param {number[]} heaters\n * @return {number}\n */\nvar findRadius = function(houses, heaters) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 476,
    title: "Number Complement",
    titleSlug: "number-complement",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Bit Manipulation"],
    constaints:
      '<li>For example, The integer <code>5</code> is <code>"101"</code> in binary and its <strong>complement</strong> is <code>"010"</code> which is the integer <code>2</code>.</li> <li><code>1 &lt;= num &lt; 2<sup>31</sup></code></li>',
    question:
      "<p>The <strong>complement</strong> of an integer is the integer you get when you flip all the <code>0</code>'s to <code>1</code>'s and all the <code>1</code>'s to <code>0</code>'s in its binary representation.</p><p>Given an integer <code>num</code>, return <em>its complement</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 5",
        outputText: "2",
        explanation:
          "The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.",
      },
      {
        id: 2,
        inputText: "num = 1",
        outputText: "0",
        explanation:
          "The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.",
      },
    ],
    tests: "[5, 1]",
    answer: "[2, 0]",
    code: "/**\n * @param {number} num\n * @return {number}\n */\nvar findComplement = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 477,
    title: "Total Hamming Distance",
    titleSlug: "total-hamming-distance",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li>The answer for the given input will fit in a <strong>32-bit</strong> integer.</li>",
    question:
      '<p>The <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p><p>Given an integer array <code>nums</code>, return <em>the sum of <strong>Hamming distances</strong> between all the pairs of the integers in</em> <code>nums</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: "nums = [4,14,2]",
        outputText: "6",
        explanation:
          "In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.",
      },
      { id: 2, inputText: "nums = [4,14,4]", outputText: "4", explanation: "" },
    ],
    tests: "[[4, 14, 2], [4, 14, 4]]",
    answer: "[6, 4]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar totalHammingDistance = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 480,
    title: "Sliding Window Median",
    titleSlug: "sliding-window-median",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sliding Window", "Heap (Priority Queue)"],
    constaints:
      "<li>For examples, if <code>arr = [2,<u>3</u>,4]</code>, the median is <code>3</code>.</li> <li>For examples, if <code>arr = [1,<u>2,3</u>,4]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.</p><p>You are given an integer array <code>nums</code> and an integer <code>k</code>. There is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p><p>Return <em>the median array for each window in the original array</em>. Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        outputText: "[1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]",
        explanation:
          "Window position                Median\n---------------                -----\n[",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4,2,3,1,4,2], k = 3",
        outputText: "[2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]",
        explanation: "",
      },
    ],
    tests: "[[1, 3, -1, -3, 5, 3, 6, 7], [1, 2, 3, 4, 2, 3, 1, 4, 2]]",
    answer:
      "[[1.0, -1.0, -1.0, 3.0, 5.0, 6.0], [2.0, 3.0, 3.0, 3.0, 2.0, 3.0, 2.0]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar medianSlidingWindow = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 481,
    title: "Magical String",
    titleSlug: "magical-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li>The string s is magical because concatenating the number of contiguous occurrences of characters <code>'1'</code> and <code>'2'</code> generates the string <code>s</code> itself.</li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>A magical string <code>s</code> consists of only <code>'1'</code> and <code>'2'</code> and obeys the following rules:</p><p>The first few elements of <code>s</code> is <code>s = \"1221121221221121122\u2026\u2026\"</code>. If we group the consecutive <code>1</code>'s and <code>2</code>'s in <code>s</code>, it will be <code>\"1 22 11 2 1 22 1 22 11 2 11 22 ......\"</code> and the occurrences of <code>1</code>'s or <code>2</code>'s in each group are <code>\"1 2 2 1 1 2 1 2 2 1 2 2 ......\"</code>. You can see that the occurrence sequence is <code>s</code> itself.</p><p>Given an integer <code>n</code>, return the number of <code>1</code>'s in the first <code>n</code> number in the magical string <code>s</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 6",
        outputText: "3",
        explanation:
          'The first 6 elements of magical string s is "122112" and it contains three 1\'s, so return 3.',
      },
      { id: 2, inputText: "n = 1", outputText: "1", explanation: "" },
    ],
    tests: "[6, 1]",
    answer: "[3, 1]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar magicalString = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 482,
    title: "License Key Formatting",
    titleSlug: "license-key-formatting",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of English letters, digits, and dashes <code>'-'</code>.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given a license key represented as a string <code>s</code> that consists of only alphanumeric characters and dashes. The string is separated into <code>n + 1</code> groups by <code>n</code> dashes. You are also given an integer <code>k</code>.</p><p>We want to reformat the string <code>s</code> such that each group contains exactly <code>k</code> characters, except for the first group, which could be shorter than <code>k</code> but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.</p><p>Return <em>the reformatted license key</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "5F3Z-2e-9-w", k = 4',
        outputText: '"5F3Z-2E9W"',
        explanation:
          "The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.",
      },
      {
        id: 2,
        inputText: 's = "2-5g-3-J", k = 2',
        outputText: '"2-5G-3J"',
        explanation:
          "The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.",
      },
    ],
    tests: '["5F3Z-2e-9-w", "2-5g-3-J"]',
    answer: '["5F3Z-2E9W", "2-5G-3J"]',
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar licenseKeyFormatting = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 483,
    title: "Smallest Good Base",
    titleSlug: "smallest-good-base",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Math", "Binary Search"],
    constaints:
      "<li><code>n</code> is an integer in the range <code>[3, 10<sup>18</sup>]</code>.</li> <li><code>n</code> does not contain any leading zeros.</li>",
    question:
      "<p>Given an integer <code>n</code> represented as a string, return <em>the smallest <strong>good base</strong> of</em> <code>n</code>.</p><p>We call <code>k &gt;= 2</code> a <strong>good base</strong> of <code>n</code>, if all digits of <code>n</code> base <code>k</code> are <code>1</code>'s.</p>",
    examples: [
      {
        id: 1,
        inputText: 'n = "13"',
        outputText: '"3"',
        explanation: "13 base 3 is 111.",
      },
      {
        id: 2,
        inputText: 'n = "4681"',
        outputText: '"8"',
        explanation: "4681 base 8 is 11111.",
      },
      {
        id: 3,
        inputText: 'n = "1000000000000000000"',
        outputText: '"999999999999999999"',
        explanation: "1000000000000000000 base 999999999999999999 is 11.",
      },
    ],
    tests: '["13", "4681", "1000000000000000000"]',
    answer: '["3", "8", "999999999999999999"]',
    code: "/**\n * @param {string} n\n * @return {string}\n */\nvar smallestGoodBase = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 485,
    title: "Max Consecutive Ones",
    titleSlug: "max-consecutive-ones",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>Given a binary array <code>nums</code>, return <em>the maximum number of consecutive </em><code>1</code><em>'s in the array</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,0,1,1,1]",
        outputText: "3",
        explanation:
          "The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.",
      },
      {
        id: 2,
        inputText: "nums = [1,0,1,1,0,1]",
        outputText: "2",
        explanation: "",
      },
    ],
    tests: "[[1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1]]",
    answer: "[3, 2]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxConsecutiveOnes = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 486,
    title: "Predict the Winner",
    titleSlug: "predict-the-winner",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Math",
      "Dynamic Programming",
      "Recursion",
      "Game Theory",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 20</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code>. Two players are playing a game with this array: player 1 and player 2.</p><p>Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of <code>0</code>. At each turn, the player takes one of the numbers from either end of the array (i.e., <code>nums[0]</code> or <code>nums[nums.length - 1]</code>) which reduces the size of the array by <code>1</code>. The player adds the chosen number to their score. The game ends when there are no more elements in the array.</p><p>Return <code>true</code> if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return <code>true</code>. You may assume that both players are playing optimally.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,5,2]",
        outputText: "false",
        explanation:
          "Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false.",
      },
      {
        id: 2,
        inputText: "nums = [1,5,233,7]",
        outputText: "true",
        explanation:
          "Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.",
      },
    ],
    tests: "[[1, 5, 2], [1, 5, 233, 7]]",
    answer: "[false, true]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar predictTheWinner = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 488,
    title: "Zuma Game",
    titleSlug: "zuma-game",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "String",
      "Dynamic Programming",
      "Stack",
      "Breadth-First Search",
      "Memoization",
    ],
    constaints:
      "<li>Pick <strong>any</strong> ball from your hand and insert it in between two balls in the row or on either end of the row.</li> <li>If there is a group of <strong>three or more consecutive balls</strong> of the <strong>same color</strong>, remove the group of balls from the board.\n\t<ul>\n<li>If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.</li>\n</ul>\n</li> <li>If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.</li> <li>If there are no more balls on the board, then you win the game.</li> <li>Repeat this process until you either win or do not have any more balls in your hand.</li> <li><code>1 &lt;= board.length &lt;= 16</code></li> <li><code>1 &lt;= hand.length &lt;= 5</code></li> <li><code>board</code> and <code>hand</code> consist of the characters <code>'R'</code>, <code>'Y'</code>, <code>'B'</code>, <code>'G'</code>, and <code>'W'</code>.</li> <li>The initial row of balls on the board will <strong>not</strong> have any groups of three or more consecutive balls of the same color.</li>",
    question:
      "<p>You are playing a variation of the game Zuma.</p><p>In this variation of Zuma, there is a <strong>single row</strong> of colored balls on a board, where each ball can be colored red <code>'R'</code>, yellow <code>'Y'</code>, blue <code>'B'</code>, green <code>'G'</code>, or white <code>'W'</code>. You also have several colored balls in your hand.</p><p>Your goal is to <strong>clear all</strong> of the balls from the board. On each turn:</p><p>Given a string <code>board</code>, representing the row of balls on the board, and a string <code>hand</code>, representing the balls in your hand, return <em>the <strong>minimum</strong> number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return </em><code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'board = "WRRBBW", hand = "RB"',
        outputText: "-1",
        explanation:
          "It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRR",
      },
      {
        id: 2,
        inputText: 'board = "WWRRBBWW", hand = "WRBRW"',
        outputText: "2",
        explanation:
          "To make the board empty:\n- Insert 'R' so the board becomes WWRR",
      },
      {
        id: 3,
        inputText: 'board = "G", hand = "GGGGG"',
        outputText: "2",
        explanation:
          "To make the board empty:\n- Insert 'G' so the board becomes G",
      },
    ],
    tests: '["WRRBBW", "WWRRBBWW", "G"]',
    answer: "[-1, 2, 2]",
    code: "/**\n * @param {string} board\n * @param {string} hand\n * @return {number}\n */\nvar findMinStep = function(board, hand) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 491,
    title: "Non-decreasing Subsequences",
    titleSlug: "non-decreasing-subsequences",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Backtracking", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 15</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>all the different possible non-decreasing subsequences of the given array with at least two elements</em>. You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,6,7,7]",
        outputText:
          "[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [4,4,3,2,1]",
        outputText: "[[4,4]]",
        explanation: "",
      },
    ],
    tests: "[[4, 6, 7, 7], [4, 4, 3, 2, 1]]",
    answer:
      "[[[4, 6], [4, 6, 7], [4, 6, 7, 7], [4, 7], [4, 7, 7], [6, 7], [6, 7, 7], [7, 7]], [[4, 4]]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar findSubsequences = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 492,
    title: "Construct the Rectangle",
    titleSlug: "construct-the-rectangle",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li>The area of the rectangular web page you designed must equal to the given target area.</li> <li>The width <code>W</code> should not be larger than the length <code>L</code>, which means <code>L &gt;= W</code>.</li> <li>The difference between length <code>L</code> and width <code>W</code> should be as small as possible.</li> <li><code>1 &lt;= area &lt;= 10<sup>7</sup></code></li>",
    question:
      "<p>A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p><p>Return <em>an array <code>[L, W]</code> where <code>L</code> and <code>W</code> are the length and width of the\u00a0web page you designed in sequence.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "area = 4",
        outputText: "[2,2]",
        explanation:
          "The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.",
      },
      { id: 2, inputText: "area = 37", outputText: "[37,1]", explanation: "" },
      {
        id: 3,
        inputText: "area = 122122",
        outputText: "[427,286]",
        explanation: "",
      },
    ],
    tests: "[4, 37, 122122]",
    answer: "[[2, 2], [37, 1], [427, 286]]",
    code: "/**\n * @param {number} area\n * @return {number[]}\n */\nvar constructRectangle = function(area) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 493,
    title: "Reverse Pairs",
    titleSlug: "reverse-pairs",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set",
    ],
    constaints:
      "<li><code>0 &lt;= i &lt; j &lt; nums.length</code> and</li> <li><code>nums[i] &gt; 2 * nums[j]</code>.</li> <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>the number of <strong>reverse pairs</strong> in the array</em>.</p><p>A <strong>reverse pair</strong> is a pair <code>(i, j)</code> where:</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3,2,3,1]",
        outputText: "2",
        explanation:
          "The reverse pairs are:\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1",
      },
      {
        id: 2,
        inputText: "nums = [2,4,3,5,1]",
        outputText: "3",
        explanation:
          "The reverse pairs are:\n(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1",
      },
    ],
    tests: "[[1, 3, 2, 3, 1], [2, 4, 3, 5, 1]]",
    answer: "[2, 3]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar reversePairs = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 494,
    title: "Target Sum",
    titleSlug: "target-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Backtracking"],
    constaints:
      "<li>For example, if <code>nums = [2, 1]</code>, you can add a <code>'+'</code> before <code>2</code> and a <code>'-'</code> before <code>1</code> and concatenate them to build the expression <code>\"+2-1\"</code>.</li> <li><code>1 &lt;= nums.length &lt;= 20</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li> <li><code>-1000 &lt;= target &lt;= 1000</code></li>",
    question:
      "<p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p><p>You want to build an <strong>expression</strong> out of nums by adding one of the symbols <code>'+'</code> and <code>'-'</code> before each integer in nums and then concatenate all the integers.</p><p>Return the number of different <strong>expressions</strong> that you can build, which evaluates to <code>target</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,1,1,1], target = 3",
        outputText: "5",
        explanation:
          "There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3",
      },
      {
        id: 2,
        inputText: "nums = [1], target = 1",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[1, 1, 1, 1, 1], [1]]",
    answer: "[5, 1]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar findTargetSumWays = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 495,
    title: "Teemo Attacking",
    titleSlug: "teemo-attacking",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Simulation"],
    constaints:
      "<li><code>1 &lt;= timeSeries.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= timeSeries[i], duration &lt;= 10<sup>7</sup></code></li> <li><code>timeSeries</code> is sorted in <strong>non-decreasing</strong> order.</li>",
    question:
      "<p>Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly <code>duration</code> seconds. More formally, an attack at second <code>t</code> will mean Ashe is poisoned during the <strong>inclusive</strong> time interval <code>[t, t + duration - 1]</code>. If Teemo attacks again <strong>before</strong> the poison effect ends, the timer for it is <strong>reset</strong>, and the poison effect will end <code>duration</code> seconds after the new attack.</p><p>You are given a <strong>non-decreasing</strong> integer array <code>timeSeries</code>, where <code>timeSeries[i]</code> denotes that Teemo attacks Ashe at second <code>timeSeries[i]</code>, and an integer <code>duration</code>.</p><p>Return <em>the <strong>total</strong> number of seconds that Ashe is poisoned</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "timeSeries = [1,4], duration = 2",
        outputText: "4",
        explanation:
          "Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.",
      },
      {
        id: 2,
        inputText: "timeSeries = [1,2], duration = 2",
        outputText: "3",
        explanation:
          "Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.",
      },
    ],
    tests: "[[1, 4], [1, 2]]",
    answer: "[4, 3]",
    code: "/**\n * @param {number[]} timeSeries\n * @param {number} duration\n * @return {number}\n */\nvar findPoisonedDuration = function(timeSeries, duration) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 498,
    title: "Diagonal Traverse",
    titleSlug: "diagonal-traverse",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints:
      "<li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an <code>m x n</code> matrix <code>mat</code>, return <em>an array of all the elements of the array in a diagonal order</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "mat = [[1,2,3],[4,5,6],[7,8,9]]",
        outputText: "[1,2,4,7,5,3,6,8,9]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "mat = [[1,2],[3,4]]",
        outputText: "[1,2,3,4]",
        explanation: "",
      },
    ],
    tests: "[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2], [3, 4]]]",
    answer: "[[1, 2, 4, 7, 5, 3, 6, 8, 9], [1, 2, 3, 4]]",
    code: "/**\n * @param {number[][]} mat\n * @return {number[]}\n */\nvar findDiagonalOrder = function(mat) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 500,
    title: "Keyboard Row",
    titleSlug: "keyboard-row",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      '<li>the first row consists of the characters <code>"qwertyuiop"</code>,</li> <li>the second row consists of the characters <code>"asdfghjkl"</code>, and</li> <li>the third row consists of the characters <code>"zxcvbnm"</code>.</li> <li><code>1 &lt;= words.length &lt;= 20</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>words[i]</code> consists of English letters (both lowercase and uppercase).\u00a0</li>',
    question:
      "<p>Given an array of strings <code>words</code>, return <em>the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below</em>.</p><p>In the <strong>American keyboard</strong>:</p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["Hello","Alaska","Dad","Peace"]',
        outputText: '["Alaska","Dad"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'words = ["omk"]',
        outputText: "[]",
        explanation: "",
      },
      {
        id: 3,
        inputText: 'words = ["adsdf","sfd"]',
        outputText: '["adsdf","sfd"]',
        explanation: "",
      },
    ],
    tests: '[["Hello", "Alaska", "Dad", "Peace"], ["omk"], ["adsdf", "sfd"]]',
    answer: '[["Alaska", "Dad"], [], ["adsdf", "sfd"]]',
    code: "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 502,
    title: "IPO",
    titleSlug: "ipo",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"],
    constaints:
      "<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= w &lt;= 10<sup>9</sup></code></li> <li><code>n == profits.length</code></li> <li><code>n == capital.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= profits[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= capital[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Suppose LeetCode will start its <strong>IPO</strong> soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the <strong>IPO</strong>. Since it has limited resources, it can only finish at most <code>k</code> distinct projects before the <strong>IPO</strong>. Help LeetCode design the best way to maximize its total capital after finishing at most <code>k</code> distinct projects.</p><p>You are given <code>n</code> projects where the <code>i<sup>th</sup></code> project has a pure profit <code>profits[i]</code> and a minimum capital of <code>capital[i]</code> is needed to start it.</p><p>Initially, you have <code>w</code> capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.</p><p>Pick a list of <strong>at most</strong> <code>k</code> distinct projects from given projects to <strong>maximize your final capital</strong>, and return <em>the final maximized capital</em>.</p><p>The answer is guaranteed to fit in a 32-bit signed integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]",
        outputText: "4",
        explanation:
          "Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.",
      },
      {
        id: 2,
        inputText: "k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]",
        outputText: "6",
        explanation: "",
      },
    ],
    tests: "[2, 3]",
    answer: "[4, 6]",
    code: "/**\n * @param {number} k\n * @param {number} w\n * @param {number[]} profits\n * @param {number[]} capital\n * @return {number}\n */\nvar findMaximizedCapital = function(k, w, profits, capital) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 504,
    title: "Base 7",
    titleSlug: "base-7",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li><code>-10<sup>7</sup> &lt;= num &lt;= 10<sup>7</sup></code></li>",
    question:
      "<p>Given an integer <code>num</code>, return <em>a string of its <strong>base 7</strong> representation</em>.</p>",
    examples: [
      { id: 1, inputText: "num = 100", outputText: '"202"', explanation: "" },
      { id: 2, inputText: "num = -7", outputText: '"-10"', explanation: "" },
    ],
    tests: "[100, -7]",
    answer: '["202", "-10"]',
    code: "/**\n * @param {number} num\n * @return {string}\n */\nvar convertToBase7 = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 506,
    title: "Relative Ranks",
    titleSlug: "relative-ranks",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting", "Heap (Priority Queue)"],
    constaints:
      '<li>The <code>1<sup>st</sup></code> place athlete\'s rank is <code>"Gold Medal"</code>.</li> <li>The <code>2<sup>nd</sup></code> place athlete\'s rank is <code>"Silver Medal"</code>.</li> <li>The <code>3<sup>rd</sup></code> place athlete\'s rank is <code>"Bronze Medal"</code>.</li> <li>For the <code>4<sup>th</sup></code> place to the <code>n<sup>th</sup></code> place athlete, their rank is their placement number (i.e., the <code>x<sup>th</sup></code> place athlete\'s rank is <code>"x"</code>).</li> <li><code>n == score.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= score[i] &lt;= 10<sup>6</sup></code></li> <li>All the values in <code>score</code> are <strong>unique</strong>.</li>',
    question:
      "<p>You are given an integer array <code>score</code> of size <code>n</code>, where <code>score[i]</code> is the score of the <code>i<sup>th</sup></code> athlete in a competition. All the scores are guaranteed to be <strong>unique</strong>.</p><p>The athletes are <strong>placed</strong> based on their scores, where the <code>1<sup>st</sup></code> place athlete has the highest score, the <code>2<sup>nd</sup></code> place athlete has the <code>2<sup>nd</sup></code> highest score, and so on. The placement of each athlete determines their rank:</p><p>Return an array <code>answer</code> of size <code>n</code> where <code>answer[i]</code> is the <strong>rank</strong> of the <code>i<sup>th</sup></code> athlete.</p>",
    examples: [
      {
        id: 1,
        inputText: "score = [5,4,3,2,1]",
        outputText: '["Gold Medal","Silver Medal","Bronze Medal","4","5"]',
        explanation: "The placements are [1",
      },
      {
        id: 2,
        inputText: "score = [10,3,8,9,4]",
        outputText: '["Gold Medal","5","Bronze Medal","Silver Medal","4"]',
        explanation: "The placements are [1",
      },
    ],
    tests: "[[5, 4, 3, 2, 1], [10, 3, 8, 9, 4]]",
    answer:
      '[["Gold Medal", "Silver Medal", "Bronze Medal", "4", "5"], ["Gold Medal", "5", "Bronze Medal", "Silver Medal", "4"]]',
    code: "/**\n * @param {number[]} score\n * @return {string[]}\n */\nvar findRelativeRanks = function(score) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 507,
    title: "Perfect Number",
    titleSlug: "perfect-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints: "<li><code>1 &lt;= num &lt;= 10<sup>8</sup></code></li>",
    question:
      '<p>A <a href="https://en.wikipedia.org/wiki/Perfect_number" target="_blank"><strong>perfect number</strong></a> is a <strong>positive integer</strong> that is equal to the sum of its <strong>positive divisors</strong>, excluding the number itself. A <strong>divisor</strong> of an integer <code>x</code> is an integer that can divide <code>x</code> evenly.</p><p>Given an integer <code>n</code>, return <code>true</code><em> if </em><code>n</code><em> is a perfect number, otherwise return </em><code>false</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: "num = 28",
        outputText: "true",
        explanation:
          "28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.",
      },
      { id: 2, inputText: "num = 7", outputText: "false", explanation: "" },
    ],
    tests: "[28, 7]",
    answer: "[true, false]",
    code: "/**\n * @param {number} num\n * @return {boolean}\n */\nvar checkPerfectNumber = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 513,
    title: "Find Bottom Left Tree Value",
    titleSlug: "find-bottom-left-tree-value",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return the leftmost value in the last row of the tree.</p>",
    examples: [
      { id: 1, inputText: "root = [2,1,3]", outputText: "1", explanation: "" },
      {
        id: 2,
        inputText: "root = [1,2,3,4,null,5,6,null,null,7]",
        outputText: "7",
        explanation: "",
      },
    ],
    tests: "[[2, 1, 3], [1, 2, 3, 4, null, 5, 6, null, null, 7]]",
    answer: "[1, 7]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findBottomLeftValue = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 514,
    title: "Freedom Trail",
    titleSlug: "freedom-trail",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "String",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
    ],
    constaints:
      '<li>You can rotate the ring clockwise or anticlockwise by one place, which counts as <strong>one step</strong>. The final purpose of the rotation is to align one of <code>ring</code>\'s characters at the <code>"12:00"</code> direction, where this character must equal <code>key[i]</code>.</li> <li>If the character <code>key[i]</code> has been aligned at the <code>"12:00"</code> direction, press the center button to spell, which also counts as <strong>one step</strong>. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.</li> <li><code>1 &lt;= ring.length, key.length &lt;= 100</code></li> <li><code>ring</code> and <code>key</code> consist of only lower case English letters.</li> <li>It is guaranteed that <code>key</code> could always be spelled by rotating <code>ring</code>.</li>',
    question:
      '<p>In the video game Fallout 4, the quest <strong>"Road to Freedom"</strong> requires players to reach a metal dial called the <strong>"Freedom Trail Ring"</strong> and use the dial to spell a specific keyword to open the door.</p><p>Given a string <code>ring</code> that represents the code engraved on the outer ring and another string <code>key</code> that represents the keyword that needs to be spelled, return <em>the minimum number of steps to spell all the characters in the keyword</em>.</p><p>Initially, the first character of the ring is aligned at the <code>"12:00"</code> direction. You should spell all the characters in <code>key</code> one by one by rotating <code>ring</code> clockwise or anticlockwise to make each character of the string key aligned at the <code>"12:00"</code> direction and then by pressing the center button.</p><p>At the stage of rotating the ring to spell the key character <code>key[i]</code>:</p>',
    examples: [
      {
        id: 1,
        inputText: 'ring = "godding", key = "gd"',
        outputText: "4",
        explanation:
          "For the first key character 'g', since it is already in place, we just need 1 step to spell this character. \nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\nAlso, we need 1 more step for spelling.\nSo the final output is 4.",
      },
      {
        id: 2,
        inputText: 'ring = "godding", key = "godding"',
        outputText: "13",
        explanation: "",
      },
    ],
    tests: '["godding", "godding"]',
    answer: "[4, 13]",
    code: "/**\n * @param {string} ring\n * @param {string} key\n * @return {number}\n */\nvar findRotateSteps = function(ring, key) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 515,
    title: "Find Largest Value in Each Tree Row",
    titleSlug: "find-largest-value-in-each-tree-row",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree will be in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>an array of the largest value in each row</em> of the tree <strong>(0-indexed)</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,3,2,5,3,null,9]",
        outputText: "[1,3,9]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [1,2,3]",
        outputText: "[1,3]",
        explanation: "",
      },
    ],
    tests: "[[1, 3, 2, 5, 3, null, 9], [1, 2, 3]]",
    answer: "[[1, 3, 9], [1, 3]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar largestValues = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 516,
    title: "Longest Palindromic Subsequence",
    titleSlug: "longest-palindromic-subsequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists only of lowercase English letters.</li>",
    question:
      "<p>Given a string <code>s</code>, find <em>the longest palindromic <strong>subsequence</strong>'s length in</em> <code>s</code>.</p><p>A <strong>subsequence</strong> is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "bbbab"',
        outputText: "4",
        explanation: 'One possible longest palindromic subsequence is "bbbb".',
      },
      {
        id: 2,
        inputText: 's = "cbbd"',
        outputText: "2",
        explanation: 'One possible longest palindromic subsequence is "bb".',
      },
    ],
    tests: '["bbbab", "cbbd"]',
    answer: "[4, 2]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindromeSubseq = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 517,
    title: "Super Washing Machines",
    titleSlug: "super-washing-machines",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Greedy"],
    constaints:
      "<li><code>n == machines.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= machines[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You have <code>n</code> super washing machines on a line. Initially, each washing machine has some dresses or is empty.</p><p>For each move, you could choose any <code>m</code> (<code>1 &lt;= m &lt;= n</code>) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.</p><p>Given an integer array <code>machines</code> representing the number of dresses in each washing machine from left to right on the line, return <em>the minimum number of moves to make all the washing machines have the same number of dresses</em>. If it is not possible to do it, return <code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "machines = [1,0,5]",
        outputText: "3",
        explanation:
          "1st move:    1     0 <-- 5    =>    1     1     4\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\n3rd move:    2     1 <-- 3    =>    2     2     2",
      },
      {
        id: 2,
        inputText: "machines = [0,3,0]",
        outputText: "2",
        explanation:
          "1st move:    0 <-- 3     0    =>    1     2     0\n2nd move:    1     2 --> 0    =>    1     1     1",
      },
      {
        id: 3,
        inputText: "machines = [0,2,0]",
        outputText: "-1",
        explanation:
          "It's impossible to make all three washing machines have the same number of dresses.",
      },
    ],
    tests: "[[1, 0, 5], [0, 3, 0], [0, 2, 0]]",
    answer: "[3, 2, -1]",
    code: "/**\n * @param {number[]} machines\n * @return {number}\n */\nvar findMinMoves = function(machines) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 518,
    title: "Coin Change II",
    titleSlug: "coin-change-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= coins.length &lt;= 300</code></li> <li><code>1 &lt;= coins[i] &lt;= 5000</code></li> <li>All the values of <code>coins</code> are <strong>unique</strong>.</li> <li><code>0 &lt;= amount &lt;= 5000</code></li>",
    question:
      "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return <em>the number of combinations that make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>0</code>.</p><p>You may assume that you have an infinite number of each kind of coin.</p><p>The answer is <strong>guaranteed</strong> to fit into a signed <strong>32-bit</strong> integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "amount = 5, coins = [1,2,5]",
        outputText: "4",
        explanation:
          "there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1",
      },
      {
        id: 2,
        inputText: "amount = 3, coins = [2]",
        outputText: "0",
        explanation: "the amount of 3 cannot be made up just with coins of 2.",
      },
      {
        id: 3,
        inputText: "amount = 10, coins = [10]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[5, 3, 10]",
    answer: "[4, 0, 1]",
    code: "/**\n * @param {number} amount\n * @param {number[]} coins\n * @return {number}\n */\nvar change = function(amount, coins) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 520,
    title: "Detect Capital",
    titleSlug: "detect-capital",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      '<li>All letters in this word are capitals, like <code>"USA"</code>.</li> <li>All letters in this word are not capitals, like <code>"leetcode"</code>.</li> <li>Only the first letter in this word is capital, like <code>"Google"</code>.</li> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>word</code> consists of lowercase and uppercase English letters.</li>',
    question:
      "<p>We define the usage of capitals in a word to be right when one of the following cases holds:</p><p>Given a string <code>word</code>, return <code>true</code> if the usage of capitals in it is right.</p>",
    examples: [
      { id: 1, inputText: 'word = "USA"', outputText: "true", explanation: "" },
      {
        id: 2,
        inputText: 'word = "FlaG"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["USA", "FlaG"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} word\n * @return {boolean}\n */\nvar detectCapitalUse = function(word) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 521,
    title: "Longest Uncommon Subsequence I",
    titleSlug: "longest-uncommon-subsequence-i",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= a.length, b.length &lt;= 100</code></li> <li><code>a</code> and <code>b</code> consist of lower-case English letters.</li>",
    question:
      '<p>Given two strings <code>a</code> and <code>b</code>, return <em>the length of the <strong>longest uncommon subsequence</strong> between </em><code>a</code> <em>and</em> <code>b</code>. <em>If no such uncommon subsequence exists, return</em> <code>-1</code><em>.</em></p><p>An <strong>uncommon subsequence</strong> between two strings is a string that is a <strong><span data-keyword="subsequence-string">subsequence</span> of exactly one of them</strong>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'a = "aba", b = "cdc"',
        outputText: "3",
        explanation:
          'One longest uncommon subsequence is "aba" because "aba" is a subsequence of "aba" but not "cdc".\nNote that "cdc" is also a longest uncommon subsequence.',
      },
      {
        id: 2,
        inputText: 'a = "aaa", b = "bbb"',
        outputText: "3",
        explanation: 'The longest uncommon subsequences are "aaa" and "bbb".',
      },
      {
        id: 3,
        inputText: 'a = "aaa", b = "aaa"',
        outputText: "-1",
        explanation:
          "Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a. So the answer would be",
      },
    ],
    tests: '["aba", "aaa", "aaa"]',
    answer: "[3, 3, -1]",
    code: "/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nvar findLUSlength = function(a, b) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 522,
    title: "Longest Uncommon Subsequence II",
    titleSlug: "longest-uncommon-subsequence-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Two Pointers", "String", "Sorting"],
    constaints:
      '<li>For example, <code>"abc"</code> is a subsequence of <code>"aebdc"</code> because you can delete the underlined characters in <code>"a<u>e</u>b<u>d</u>c"</code> to get <code>"abc"</code>. Other subsequences of <code>"aebdc"</code> include <code>"aebdc"</code>, <code>"aeb"</code>, and <code>""</code> (empty string).</li> <li><code>2 &lt;= strs.length &lt;= 50</code></li> <li><code>1 &lt;= strs[i].length &lt;= 10</code></li> <li><code>strs[i]</code> consists of lowercase English letters.</li>',
    question:
      "<p>Given an array of strings <code>strs</code>, return <em>the length of the <strong>longest uncommon subsequence</strong> between them</em>. If the longest uncommon subsequence does not exist, return <code>-1</code>.</p><p>An <strong>uncommon subsequence</strong> between an array of strings is a string that is a <strong>subsequence of one string but not the others</strong>.</p><p>A <strong>subsequence</strong> of a string <code>s</code> is a string that can be obtained after deleting any number of characters from <code>s</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'strs = ["aba","cdc","eae"]',
        outputText: "3",
        explanation: "",
      },
      {
        id: 2,
        inputText: 'strs = ["aaa","aaa","aa"]',
        outputText: "-1",
        explanation: "",
      },
    ],
    tests: '[["aba", "cdc", "eae"], ["aaa", "aaa", "aa"]]',
    answer: "[3, -1]",
    code: "/**\n * @param {string[]} strs\n * @return {number}\n */\nvar findLUSlength = function(strs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 524,
    title: "Longest Word in Dictionary through Deleting",
    titleSlug: "longest-word-in-dictionary-through-deleting",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "String", "Sorting"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>1 &lt;= dictionary.length &lt;= 1000</code></li> <li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li> <li><code>s</code> and <code>dictionary[i]</code> consist of lowercase English letters.</li>",
    question:
      "<p>Given a string <code>s</code> and a string array <code>dictionary</code>, return <em>the longest string in the dictionary that can be formed by deleting some of the given string characters</em>. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</p>",
    examples: [
      {
        id: 1,
        inputText:
          's = "abpcplea", dictionary = ["ale","apple","monkey","plea"]',
        outputText: '"apple"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "abpcplea", dictionary = ["a","b","c"]',
        outputText: '"a"',
        explanation: "",
      },
    ],
    tests: '["abpcplea", "abpcplea"]',
    answer: '["apple", "a"]',
    code: "/**\n * @param {string} s\n * @param {string[]} dictionary\n * @return {string}\n */\nvar findLongestWord = function(s, dictionary) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 525,
    title: "Contiguous Array",
    titleSlug: "contiguous-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>Given a binary array <code>nums</code>, return <em>the maximum length of a contiguous subarray with an equal number of </em><code>0</code><em> and </em><code>1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,1]",
        outputText: "2",
        explanation:
          "[0, 1] is the longest contiguous subarray with an equal number of 0 and 1.",
      },
      {
        id: 2,
        inputText: "nums = [0,1,0]",
        outputText: "2",
        explanation:
          "[0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.",
      },
    ],
    tests: "[[0, 1], [0, 1, 0]]",
    answer: "[2, 2]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 526,
    title: "Beautiful Arrangement",
    titleSlug: "beautiful-arrangement",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask",
    ],
    constaints:
      "<li><code>perm[i]</code> is divisible by <code>i</code>.</li> <li><code>i</code> is divisible by <code>perm[i]</code>.</li> <li><code>1 &lt;= n &lt;= 15</code></li>",
    question:
      "<p>Suppose you have <code>n</code> integers labeled <code>1</code> through <code>n</code>. A permutation of those <code>n</code> integers <code>perm</code> (<strong>1-indexed</strong>) is considered a <strong>beautiful arrangement</strong> if for every <code>i</code> (<code>1 &lt;= i &lt;= n</code>), <strong>either</strong> of the following is true:</p><p>Given an integer <code>n</code>, return <em>the <strong>number</strong> of the <strong>beautiful arrangements</strong> that you can construct</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "2",
        explanation:
          "The first beautiful arrangement is [1,2]:\n    - perm[1] = 1 is divisible by i = 1\n    - perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n    - perm[1] = 2 is divisible by i = 1\n    - i = 2 is divisible by perm[2] = 1",
      },
      { id: 2, inputText: "n = 1", outputText: "1", explanation: "" },
    ],
    tests: "[2, 1]",
    answer: "[2, 1]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar countArrangement = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 528,
    title: "Swapping Nodes in a Linked List",
    titleSlug: "swapping-nodes-in-a-linked-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers"],
    constaints:
      "<li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>You are given the <code>head</code> of a linked list, and an integer <code>k</code>.</p><p>Return <em>the head of the linked list after <strong>swapping</strong> the values of the </em><code>k<sup>th</sup></code> <em>node from the beginning and the </em><code>k<sup>th</sup></code> <em>node from the end (the list is <strong>1-indexed</strong>).</em></p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4,5], k = 2",
        outputText: "[1,4,3,2,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [7,9,6,6,7,8,3,0,9,5], k = 5",
        outputText: "[7,9,6,6,8,7,3,0,9,5]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [7, 9, 6, 6, 7, 8, 3, 0, 9, 5]]",
    answer: "[[1, 4, 3, 2, 5], [7, 9, 6, 6, 8, 7, 3, 0, 9, 5]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar swapNodes = function(head, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 529,
    title: "Minesweeper",
    titleSlug: "minesweeper",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Depth-First Search", "Breadth-First Search", "Matrix"],
    constaints:
      "<li><code>'M'</code> represents an unrevealed mine,</li> <li><code>'E'</code> represents an unrevealed empty square,</li> <li><code>'B'</code> represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),</li> <li>digit (<code>'1'</code> to <code>'8'</code>) represents how many mines are adjacent to this revealed square, and</li> <li><code>'X'</code> represents a revealed mine.</li> <li>If a mine <code>'M'</code> is revealed, then the game is over. You should change it to <code>'X'</code>.</li> <li>If an empty square <code>'E'</code> with no adjacent mines is revealed, then change it to a revealed blank <code>'B'</code> and all of its adjacent unrevealed squares should be revealed recursively.</li> <li>If an empty square <code>'E'</code> with at least one adjacent mine is revealed, then change it to a digit (<code>'1'</code> to <code>'8'</code>) representing the number of adjacent mines.</li> <li>Return the board when no more squares will be revealed.</li> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>board[i][j]</code> is either <code>'M'</code>, <code>'E'</code>, <code>'B'</code>, or a digit from <code>'1'</code> to <code>'8'</code>.</li> <li><code>click.length == 2</code></li> <li><code>0 &lt;= click<sub>r</sub> &lt; m</code></li> <li><code>0 &lt;= click<sub>c</sub> &lt; n</code></li> <li><code>board[click<sub>r</sub>][click<sub>c</sub>]</code> is either <code>'M'</code> or <code>'E'</code>.</li>",
    question:
      '<p>Let\'s play the minesweeper game (<a href="https://en.wikipedia.org/wiki/Minesweeper_(video_game)" target="_blank">Wikipedia</a>, <a href="http://minesweeperonline.com" target="_blank">online game</a>)!</p><p>You are given an <code>m x n</code> char matrix <code>board</code> representing the game board where:</p><p>You are also given an integer array <code>click</code> where <code>click = [click<sub>r</sub>, click<sub>c</sub>]</code> represents the next click position among all the unrevealed squares (<code>\'M\'</code> or <code>\'E\'</code>).</p><p>Return <em>the board after revealing this position according to the following rules</em>:</p>',
    examples: [
      {
        id: 1,
        inputText:
          'board = [["E","E","E","E","E"],["E","E","M","E","E"],["E","E","E","E","E"],["E","E","E","E","E"]], click = [3,0]',
        outputText:
          '[["B","1","E","1","B"],["B","1","M","1","B"],["B","1","1","1","B"],["B","B","B","B","B"]]',
        explanation: "",
      },
      {
        id: 2,
        inputText:
          'board = [["B","1","E","1","B"],["B","1","M","1","B"],["B","1","1","1","B"],["B","B","B","B","B"]], click = [1,2]',
        outputText:
          '[["B","1","E","1","B"],["B","1","X","1","B"],["B","1","1","1","B"],["B","B","B","B","B"]]',
        explanation: "",
      },
    ],
    tests:
      '[[["E", "E", "E", "E", "E"], ["E", "E", "M", "E", "E"], ["E", "E", "E", "E", "E"], ["E", "E", "E", "E", "E"]], [["B", "1", "E", "1", "B"], ["B", "1", "M", "1", "B"], ["B", "1", "1", "1", "B"], ["B", "B", "B", "B", "B"]]]',
    answer:
      '[[["B", "1", "E", "1", "B"], ["B", "1", "M", "1", "B"], ["B", "1", "1", "1", "B"], ["B", "B", "B", "B", "B"]], [["B", "1", "E", "1", "B"], ["B", "1", "X", "1", "B"], ["B", "1", "1", "1", "B"], ["B", "B", "B", "B", "B"]]]',
    code: "/**\n * @param {character[][]} board\n * @param {number[]} click\n * @return {character[][]}\n */\nvar updateBoard = function(board, click) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 530,
    title: "Minimum Absolute Difference in BST",
    titleSlug: "minimum-absolute-difference-in-bst",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[2, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a Binary Search Tree (BST), return <em>the minimum absolute difference between the values of any two different nodes in the tree</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [4,2,6,1,3]",
        outputText: "1",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [1,0,48,null,null,12,49]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[4, 2, 6, 1, 3], [1, 0, 48, null, null, 12, 49]]",
    answer: "[1, 1]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar getMinimumDifference = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 532,
    title: "K-diff Pairs in an Array",
    titleSlug: "k-diff-pairs-in-an-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Two Pointers", "Binary Search", "Sorting"],
    constaints:
      "<li><code>0 &lt;= i, j &lt; nums.length</code></li> <li><code>i != j</code></li> <li><code>|nums[i] - nums[j]| == k</code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>7</sup></code></li>",
    question:
      "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the number of <b>unique</b> k-diff pairs in the array</em>.</p><p>A <strong>k-diff</strong> pair is an integer pair <code>(nums[i], nums[j])</code>, where the following are true:</p><p><strong>Notice</strong> that <code>|val|</code> denotes the absolute value of <code>val</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,1,4,1,5], k = 2",
        outputText: "2",
        explanation:
          "There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4,5], k = 1",
        outputText: "4",
        explanation:
          "There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).",
      },
      {
        id: 3,
        inputText: "nums = [1,3,1,5,4], k = 0",
        outputText: "1",
        explanation: "There is one 0-diff pair in the array, (1, 1).",
      },
    ],
    tests: "[[3, 1, 4, 1, 5], [1, 2, 3, 4, 5], [1, 3, 1, 5, 4]]",
    answer: "[2, 4, 1]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findPairs = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 535,
    title: "Encode and Decode TinyURL",
    titleSlug: "encode-and-decode-tinyurl",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Design", "Hash Function"],
    constaints:
      "<li><code>Solution()</code> Initializes the object of the system.</li> <li><code>String encode(String longUrl)</code> Returns a tiny URL for the given <code>longUrl</code>.</li> <li><code>String decode(String shortUrl)</code> Returns the original long URL for the given <code>shortUrl</code>. It is guaranteed that the given <code>shortUrl</code> was encoded by the same object.</li> <li><code>1 &lt;= url.length &lt;= 10<sup>4</sup></code></li> <li><code>url</code> is guranteed to be a valid URL.</li>",
    question:
      "<p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>. Design a class to encode a URL and decode a tiny URL.</p><p>There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p><p>Implement the <code>Solution</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText: 'url = "https://leetcode.com/problems/design-tinyurl"',
        outputText: '"https://leetcode.com/problems/design-tinyurl"',
        explanation:
          "Solution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it.",
      },
    ],
    tests: '["https://leetcode.com/problems/design-tinyurl"]',
    answer: '["https://leetcode.com/problems/design-tinyurl"]',
    code: "/**\n * Encodes a URL to a shortened URL.\n *\n * @param {string} longUrl\n * @return {string}\n */\nvar encode = function(longUrl) {\n    \n};\n\n/**\n * Decodes a shortened URL to its original URL.\n *\n * @param {string} shortUrl\n * @return {string}\n */\nvar decode = function(shortUrl) {\n    \n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(url));\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 537,
    title: "Complex Number Multiplication",
    titleSlug: "complex-number-multiplication",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String", "Simulation"],
    constaints:
      "<li><code>real</code> is the real part and is an integer in the range <code>[-100, 100]</code>.</li> <li><code>imaginary</code> is the imaginary part and is an integer in the range <code>[-100, 100]</code>.</li> <li><code>i<sup>2</sup> == -1</code>.</li> <li><code>num1</code> and <code>num2</code> are valid complex numbers.</li>",
    question:
      '<p>A <a href="https://en.wikipedia.org/wiki/Complex_number" target="_blank">complex number</a> can be represented as a string on the form <code>"<strong>real</strong>+<strong>imaginary</strong>i"</code> where:</p><p>Given two complex numbers <code>num1</code> and <code>num2</code> as strings, return <em>a string of the complex number that represents their multiplications</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'num1 = "1+1i", num2 = "1+1i"',
        outputText: '"0+2i"',
        explanation:
          "(1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.",
      },
      {
        id: 2,
        inputText: 'num1 = "1+-1i", num2 = "1+-1i"',
        outputText: '"0+-2i"',
        explanation:
          "(1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.",
      },
    ],
    tests: '["1+1i", "1+-1i"]',
    answer: '["0+2i", "0+-2i"]',
    code: "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar complexNumberMultiply = function(num1, num2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 538,
    title: "Convert BST to Greater Tree",
    titleSlug: "convert-bst-to-greater-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li> <li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>All the values in the tree are <strong>unique</strong>.</li> <li><code>root</code> is guaranteed to be a valid binary search tree.</li>",
    question:
      "<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p><p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
        outputText: "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [0,null,1]",
        outputText: "[1,null,1]",
        explanation: "",
      },
    ],
    tests:
      "[[4, 1, 6, 0, 2, 5, 7, null, null, null, 3, null, null, null, 8], [0, null, 1]]",
    answer:
      "[[30, 36, 21, 36, 35, 26, 15, null, null, null, 33, null, null, null, 8], [1, null, 1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar convertBST = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 539,
    title: "Minimum Time Difference",
    titleSlug: "minimum-time-difference",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "String", "Sorting"],
    constaints:
      '<li><code>2 &lt;= timePoints.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>timePoints[i]</code> is in the format <strong>"HH:MM"</strong>.</li>',
    question: "",
    examples: [
      {
        id: 1,
        inputText: 'timePoints = ["23:59","00:00"]',
        outputText: "1",
        explanation: "",
      },
      {
        id: 2,
        inputText: 'timePoints = ["00:00","23:59","00:00"]',
        outputText: "0",
        explanation: "",
      },
    ],
    tests: '[["23:59", "00:00"], ["00:00", "23:59", "00:00"]]',
    answer: "[1, 0]",
    code: "/**\n * @param {string[]} timePoints\n * @return {number}\n */\nvar findMinDifference = function(timePoints) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 540,
    title: "Single Element in a Sorted Array",
    titleSlug: "single-element-in-a-sorted-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.</p><p>Return <em>the single element that appears only once</em>.</p><p>Your solution must run in <code>O(log n)</code> time and <code>O(1)</code> space.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,2,3,3,4,4,8,8]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [3,3,7,7,10,11,11]",
        outputText: "10",
        explanation: "",
      },
    ],
    tests: "[[1, 1, 2, 3, 3, 4, 4, 8, 8], [3, 3, 7, 7, 10, 11, 11]]",
    answer: "[2, 10]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNonDuplicate = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 541,
    title: "Reverse String II",
    titleSlug: "reverse-string-ii",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given a string <code>s</code> and an integer <code>k</code>, reverse the first <code>k</code> characters for every <code>2k</code> characters counting from the start of the string.</p><p>If there are fewer than <code>k</code> characters left, reverse all of them. If there are less than <code>2k</code> but greater than or equal to <code>k</code> characters, then reverse the first <code>k</code> characters and leave the other as original.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abcdefg", k = 2',
        outputText: '"bacdfeg"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "abcd", k = 2',
        outputText: '"bacd"',
        explanation: "",
      },
    ],
    tests: '["abcdefg", "abcd"]',
    answer: '["bacdfeg", "bacd"]',
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar reverseStr = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 542,
    title: "01 Matrix",
    titleSlug: "01-matrix",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Breadth-First Search", "Matrix"],
    constaints:
      "<li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li> <li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li>There is at least one <code>0</code> in <code>mat</code>.</li>",
    question:
      "<p>Given an <code>m x n</code> binary matrix <code>mat</code>, return <em>the distance of the nearest </em><code>0</code><em> for each cell</em>.</p><p>The distance between two adjacent cells is <code>1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "mat = [[0,0,0],[0,1,0],[0,0,0]]",
        outputText: "[[0,0,0],[0,1,0],[0,0,0]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "mat = [[0,0,0],[0,1,0],[1,1,1]]",
        outputText: "[[0,0,0],[0,1,0],[1,2,1]]",
        explanation: "",
      },
    ],
    tests:
      "[[[0, 0, 0], [0, 1, 0], [0, 0, 0]], [[0, 0, 0], [0, 1, 0], [1, 1, 1]]]",
    answer:
      "[[[0, 0, 0], [0, 1, 0], [0, 0, 0]], [[0, 0, 0], [0, 1, 0], [1, 2, 1]]]",
    code: "/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar updateMatrix = function(mat) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 543,
    title: "Diameter of Binary Tree",
    titleSlug: "diameter-of-binary-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the length of the <strong>diameter</strong> of the tree</em>.</p><p>The <strong>diameter</strong> of a binary tree is the <strong>length</strong> of the longest path between any two nodes in a tree. This path may or may not pass through the <code>root</code>.</p><p>The <strong>length</strong> of a path between two nodes is represented by the number of edges between them.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,4,5]",
        outputText: "3",
        explanation: "3 is the length of the path [4,2,1,3] or [5,2,1,3].",
      },
      { id: 2, inputText: "root = [1,2]", outputText: "1", explanation: "" },
    ],
    tests: "[[1, 2, 3, 4, 5], [1, 2]]",
    answer: "[3, 1]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar diameterOfBinaryTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 546,
    title: "Remove Boxes",
    titleSlug: "remove-boxes",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Memoization"],
    constaints:
      "<li><code>1 &lt;= boxes.length &lt;= 100</code></li> <li><code>1 &lt;= boxes[i]\u00a0&lt;= 100</code></li>",
    question:
      "<p>You are given several <code>boxes</code> with different colors represented by different positive numbers.</p><p>You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of <code>k</code> boxes, <code>k &gt;= 1</code>), remove them and get <code>k * k</code> points.</p><p>Return <em>the maximum points you can get</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "boxes = [1,3,2,2,2,3,4,3,1]",
        outputText: "23",
        explanation:
          "[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----> [1, 3, 3, 3, 1] (1*1=1 points) \n----> [1, 1] (3*3=9 points) \n----> [] (2*2=4 points)",
      },
      { id: 2, inputText: "boxes = [1,1,1]", outputText: "9", explanation: "" },
      { id: 3, inputText: "boxes = [1]", outputText: "1", explanation: "" },
    ],
    tests: "[[1, 3, 2, 2, 2, 3, 4, 3, 1], [1, 1, 1], [1]]",
    answer: "[23, 9, 1]",
    code: "/**\n * @param {number[]} boxes\n * @return {number}\n */\nvar removeBoxes = function(boxes) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 547,
    title: "Number of Provinces",
    titleSlug: "number-of-provinces",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
    ],
    constaints:
      "<li><code>1 &lt;= n &lt;= 200</code></li> <li><code>n == isConnected.length</code></li> <li><code>n == isConnected[i].length</code></li> <li><code>isConnected[i][j]</code> is <code>1</code> or <code>0</code>.</li> <li><code>isConnected[i][i] == 1</code></li> <li><code>isConnected[i][j] == isConnected[j][i]</code></li>",
    question:
      "<p>There are <code>n</code> cities. Some of them are connected, while some are not. If city <code>a</code> is connected directly with city <code>b</code>, and city <code>b</code> is connected directly with city <code>c</code>, then city <code>a</code> is connected indirectly with city <code>c</code>.</p><p>A <strong>province</strong> is a group of directly or indirectly connected cities and no other cities outside of the group.</p><p>You are given an <code>n x n</code> matrix <code>isConnected</code> where <code>isConnected[i][j] = 1</code> if the <code>i<sup>th</sup></code> city and the <code>j<sup>th</sup></code> city are directly connected, and <code>isConnected[i][j] = 0</code> otherwise.</p><p>Return <em>the total number of <strong>provinces</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "isConnected = [[1,1,0],[1,1,0],[0,0,1]]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "isConnected = [[1,0,0],[0,1,0],[0,0,1]]",
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 1, 0], [1, 1, 0], [0, 0, 1]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]]]",
    answer: "[2, 3]",
    code: "/**\n * @param {number[][]} isConnected\n * @return {number}\n */\nvar findCircleNum = function(isConnected) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 551,
    title: "Student Attendance Record I",
    titleSlug: "student-attendance-record-i",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>'A'</code>: Absent.</li> <li><code>'L'</code>: Late.</li> <li><code>'P'</code>: Present.</li> <li>The student was absent (<code>'A'</code>) for <strong>strictly</strong> fewer than 2 days <strong>total</strong>.</li> <li>The student was <strong>never</strong> late (<code>'L'</code>) for 3 or more <strong>consecutive</strong> days.</li> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'A'</code>, <code>'L'</code>, or <code>'P'</code>.</li>",
    question:
      "<p>You are given a string <code>s</code> representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p><p>The student is eligible for an attendance award if they meet <strong>both</strong> of the following criteria:</p><p>Return <code>true</code><em> if the student is eligible for an attendance award, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "PPALLP"',
        outputText: "true",
        explanation:
          "The student has fewer than 2 absences and was never late 3 or more consecutive days.",
      },
      {
        id: 2,
        inputText: 's = "PPALLL"',
        outputText: "false",
        explanation:
          "The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.",
      },
    ],
    tests: '["PPALLP", "PPALLL"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkRecord = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 552,
    title: "Student Attendance Record II",
    titleSlug: "student-attendance-record-ii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Dynamic Programming"],
    constaints:
      "<li><code>'A'</code>: Absent.</li> <li><code>'L'</code>: Late.</li> <li><code>'P'</code>: Present.</li> <li>The student was absent (<code>'A'</code>) for <strong>strictly</strong> fewer than 2 days <strong>total</strong>.</li> <li>The student was <strong>never</strong> late (<code>'L'</code>) for 3 or more <strong>consecutive</strong> days.</li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p><p>Any student is eligible for an attendance award if they meet <strong>both</strong> of the following criteria:</p><p>Given an integer <code>n</code>, return <em>the <strong>number</strong> of possible attendance records of length</em> <code>n</code><em> that make a student eligible for an attendance award. The answer may be very large, so return it <strong>modulo</strong> </em><code>10<sup>9</sup> + 7</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "8",
        explanation:
          'There are 8 records with length 2 that are eligible for an award:\n"PP", "AP", "PA", "LP", "PL", "AL", "LA", "LL"\nOnly "AA" is not eligible because there are 2 absences (there need to be fewer than 2).',
      },
      { id: 2, inputText: "n = 1", outputText: "3", explanation: "" },
      {
        id: 3,
        inputText: "n = 10101",
        outputText: "183236316",
        explanation: "",
      },
    ],
    tests: "[2, 1, 10101]",
    answer: "[8, 3, 183236316]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar checkRecord = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 553,
    title: "Optimal Division",
    titleSlug: "optimal-division",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Dynamic Programming"],
    constaints:
      '<li>For example, for <code>nums = [2,3,4]</code>, we will evaluate the expression <code>"2/3/4"</code>.</li> <li><code>1 &lt;= nums.length &lt;= 10</code></li> <li><code>2 &lt;= nums[i] &lt;= 1000</code></li> <li>There is only one optimal division for the given input.</li>',
    question:
      "<p>You are given an integer array <code>nums</code>. The adjacent integers in <code>nums</code> will perform the float division.</p><p>However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.</p><p>Return <em>the corresponding expression that has the maximum value in string format</em>.</p><p><strong>Note:</strong> your expression should not contain redundant parenthesis.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1000,100,10,2]",
        outputText: '"1000/(100/10/2)"',
        explanation:
          '1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in "1000/(',
      },
      {
        id: 2,
        inputText: "nums = [2,3,4]",
        outputText: '"2/(3/4)"',
        explanation:
          "(2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667",
      },
    ],
    tests: "[[1000, 100, 10, 2], [2, 3, 4]]",
    answer: '["1000/(100/10/2)", "2/(3/4)"]',
    code: "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar optimalDivision = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 554,
    title: "Brick Wall",
    titleSlug: "brick-wall",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>n == wall.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= wall[i].length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= sum(wall[i].length) &lt;= 2 * 10<sup>4</sup></code></li> <li><code>sum(wall[i])</code> is the same for each row <code>i</code>.</li> <li><code>1 &lt;= wall[i][j] &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>There is a rectangular brick wall in front of you with <code>n</code> rows of bricks. The <code>i<sup>th</sup></code> row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.</p><p>Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.</p><p>Given the 2D array <code>wall</code> that contains the information about the wall, return <em>the minimum number of crossed bricks after drawing such a vertical line</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "wall = [[1],[1],[1]]",
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2, 2, 1], [3, 1, 2], [1, 3, 2], [2, 4], [3, 1, 2], [1, 3, 1, 1]], [[1], [1], [1]]]",
    answer: "[2, 3]",
    code: "/**\n * @param {number[][]} wall\n * @return {number}\n */\nvar leastBricks = function(wall) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 557,
    title: "Reverse Words in a String III",
    titleSlug: "reverse-words-in-a-string-iii",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> contains printable <strong>ASCII</strong> characters.</li> <li><code>s</code> does not contain any leading or trailing spaces.</li> <li>There is <strong>at least one</strong> word in <code>s</code>.</li> <li>All the words in <code>s</code> are separated by a single space.</li>",
    question:
      "<p>Given a string <code>s</code>, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "Let\'s take LeetCode contest"',
        outputText: '"s\'teL ekat edoCteeL tsetnoc"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "Mr Ding"',
        outputText: '"rM gniD"',
        explanation: "",
      },
    ],
    tests: '["Let\'s take LeetCode contest", "Mr Ding"]',
    answer: '["s\'teL ekat edoCteeL tsetnoc", "rM gniD"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 563,
    title: "Binary Tree Tilt",
    titleSlug: "binary-tree-tilt",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the sum of every tree node's <strong>tilt</strong>.</em></p><p>The <strong>tilt</strong> of a tree node is the <strong>absolute difference</strong> between the sum of all left subtree node <strong>values</strong> and all right subtree node <strong>values</strong>. If a node does not have a left child, then the sum of the left subtree node <strong>values</strong> is treated as <code>0</code>. The rule is similar if the node does not have a right child.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3]",
        outputText: "1",
        explanation:
          "Tilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1",
      },
      {
        id: 2,
        inputText: "root = [4,2,9,3,5,null,7]",
        outputText: "15",
        explanation:
          "Tilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15",
      },
      {
        id: 3,
        inputText: "root = [21,7,14,1,1,2,2,3,3]",
        outputText: "9",
        explanation: "",
      },
    ],
    tests:
      "[[1, 2, 3], [4, 2, 9, 3, 5, null, 7], [21, 7, 14, 1, 1, 2, 2, 3, 3]]",
    answer: "[1, 15, 9]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findTilt = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 565,
    title: "Array Nesting",
    titleSlug: "array-nesting",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Depth-First Search"],
    constaints:
      "<li>The first element in <code>s[k]</code> starts with the selection of the element <code>nums[k]</code> of <code>index = k</code>.</li> <li>The next element in <code>s[k]</code> should be <code>nums[nums[k]]</code>, and then <code>nums[nums[nums[k]]]</code>, and so on.</li> <li>We stop adding right before a duplicate element occurs in <code>s[k]</code>.</li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt; nums.length</code></li> <li>All the values of <code>nums</code> are <strong>unique</strong>.</li>",
    question:
      "<p>You are given an integer array <code>nums</code> of length <code>n</code> where <code>nums</code> is a permutation of the numbers in the range <code>[0, n - 1]</code>.</p><p>You should build a set <code>s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }</code> subjected to the following rule:</p><p>Return <em>the longest length of a set</em> <code>s[k]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [5,4,0,3,1,6,2]",
        outputText: "4",
        explanation:
          "nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}",
      },
      { id: 2, inputText: "nums = [0,1,2]", outputText: "1", explanation: "" },
    ],
    tests: "[[5, 4, 0, 3, 1, 6, 2], [0, 1, 2]]",
    answer: "[4, 1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar arrayNesting = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 566,
    title: "Reshape the Matrix",
    titleSlug: "reshape-the-matrix",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints:
      "<li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li> <li><code>1 &lt;= r, c &lt;= 300</code></li>",
    question:
      "<p>In MATLAB, there is a handy function called <code>reshape</code> which can reshape an <code>m x n</code> matrix into a new one with a different size <code>r x c</code> keeping its original data.</p><p>You are given an <code>m x n</code> matrix <code>mat</code> and two integers <code>r</code> and <code>c</code> representing the number of rows and the number of columns of the wanted reshaped matrix.</p><p>The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.</p><p>If the <code>reshape</code> operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.</p>",
    examples: [
      {
        id: 1,
        inputText: "mat = [[1,2],[3,4]], r = 1, c = 4",
        outputText: "[[1,2,3,4]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "mat = [[1,2],[3,4]], r = 2, c = 4",
        outputText: "[[1,2],[3,4]]",
        explanation: "",
      },
    ],
    tests: "[[[1, 2], [3, 4]], [[1, 2], [3, 4]]]",
    answer: "[[[1, 2, 3, 4]], [[1, 2], [3, 4]]]",
    code: "/**\n * @param {number[][]} mat\n * @param {number} r\n * @param {number} c\n * @return {number[][]}\n */\nvar matrixReshape = function(mat, r, c) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 567,
    title: "Permutation in String",
    titleSlug: "permutation-in-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Two Pointers", "String", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup></code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>",
    question:
      "<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code><em> if </em><code>s2</code><em> contains a permutation of </em><code>s1</code><em>, or </em><code>false</code><em> otherwise</em>.</p><p>In other words, return <code>true</code> if one of <code>s1</code>'s permutations is the substring of <code>s2</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's1 = "ab", s2 = "eidbaooo"',
        outputText: "true",
        explanation: 's2 contains one permutation of s1 ("ba").',
      },
      {
        id: 2,
        inputText: 's1 = "ab", s2 = "eidboaoo"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["ab", "ab"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkInclusion = function(s1, s2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 572,
    title: "Subtree of Another Tree",
    titleSlug: "subtree-of-another-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "String Matching",
      "Binary Tree",
      "Hash Function",
    ],
    constaints:
      "<li>The number of nodes in the <code>root</code> tree is in the range <code>[1, 2000]</code>.</li> <li>The number of nodes in the <code>subRoot</code> tree is in the range <code>[1, 1000]</code>.</li> <li><code>-10<sup>4</sup> &lt;= root.val &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= subRoot.val &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given the roots of two binary trees <code>root</code> and <code>subRoot</code>, return <code>true</code> if there is a subtree of <code>root</code> with the same structure and node values of<code> subRoot</code> and <code>false</code> otherwise.</p><p>A subtree of a binary tree <code>tree</code> is a tree that consists of a node in <code>tree</code> and all of this node's descendants. The tree <code>tree</code> could also be considered as a subtree of itself.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,4,5,1,2], subRoot = [4,1,2]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[3, 4, 5, 1, 2], [3, 4, 5, 1, 2, null, null, null, null, 0]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} subRoot\n * @return {boolean}\n */\nvar isSubtree = function(root, subRoot) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 575,
    title: "Distribute Candies",
    titleSlug: "distribute-candies",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>n == candyType.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>n</code>\u00a0is even.</li> <li><code>-10<sup>5</sup> &lt;= candyType[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Alice has <code>n</code> candies, where the <code>i<sup>th</sup></code> candy is of type <code>candyType[i]</code>. Alice noticed that she started to gain weight, so she visited a doctor.</p><p>The doctor advised Alice to only eat <code>n / 2</code> of the candies she has (<code>n</code> is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.</p><p>Given the integer array <code>candyType</code> of length <code>n</code>, return <em>the <strong>maximum</strong> number of different types of candies she can eat if she only eats </em><code>n / 2</code><em> of them</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "candyType = [1,1,2,2,3,3]",
        outputText: "3",
        explanation:
          "Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.",
      },
      {
        id: 2,
        inputText: "candyType = [1,1,2,3]",
        outputText: "2",
        explanation:
          "Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.",
      },
      {
        id: 3,
        inputText: "candyType = [6,6,6,6]",
        outputText: "1",
        explanation:
          "Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.",
      },
    ],
    tests: "[[1, 1, 2, 2, 3, 3], [1, 1, 2, 3], [6, 6, 6, 6]]",
    answer: "[3, 2, 1]",
    code: "/**\n * @param {number[]} candyType\n * @return {number}\n */\nvar distributeCandies = function(candyType) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 576,
    title: "Out of Boundary Paths",
    titleSlug: "out-of-boundary-paths",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>0 &lt;= maxMove &lt;= 50</code></li> <li><code>0 &lt;= startRow &lt; m</code></li> <li><code>0 &lt;= startColumn &lt; n</code></li>",
    question:
      "<p>There is an <code>m x n</code> grid with a ball. The ball is initially at the position <code>[startRow, startColumn]</code>. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply <strong>at most</strong> <code>maxMove</code> moves to the ball.</p><p>Given the five integers <code>m</code>, <code>n</code>, <code>maxMove</code>, <code>startRow</code>, <code>startColumn</code>, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0",
        outputText: "6",
        explanation: "",
      },
      {
        id: 2,
        inputText: "m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1",
        outputText: "12",
        explanation: "",
      },
    ],
    tests: "[2, 1]",
    answer: "[6, 12]",
    code: "/**\n * @param {number} m\n * @param {number} n\n * @param {number} maxMove\n * @param {number} startRow\n * @param {number} startColumn\n * @return {number}\n */\nvar findPaths = function(m, n, maxMove, startRow, startColumn) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 581,
    title: "Shortest Unsorted Continuous Subarray",
    titleSlug: "shortest-unsorted-continuous-subarray",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Two Pointers",
      "Stack",
      "Greedy",
      "Sorting",
      "Monotonic Stack",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, you need to find one <b>continuous subarray</b> such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.</p><p>Return <em>the shortest such subarray and output its length</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,6,4,8,10,9,15]",
        outputText: "5",
        explanation:
          "You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4]",
        outputText: "0",
        explanation: "",
      },
      { id: 3, inputText: "nums = [1]", outputText: "0", explanation: "" },
    ],
    tests: "[[2, 6, 4, 8, 10, 9, 15], [1, 2, 3, 4], [1]]",
    answer: "[5, 0, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUnsortedSubarray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 583,
    title: "Delete Operation for Two Strings",
    titleSlug: "delete-operation-for-two-strings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li> <li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li>",
    question:
      "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of <strong>steps</strong> required to make</em> <code>word1</code> <em>and</em> <code>word2</code> <em>the same</em>.</p><p>In one <strong>step</strong>, you can delete exactly one character in either string.</p>",
    examples: [
      {
        id: 1,
        inputText: 'word1 = "sea", word2 = "eat"',
        outputText: "2",
        explanation:
          'You need one step to make "sea" to "ea" and another step to make "eat" to "ea".',
      },
      {
        id: 2,
        inputText: 'word1 = "leetcode", word2 = "etco"',
        outputText: "4",
        explanation: "",
      },
    ],
    tests: '["sea", "leetcode"]',
    answer: "[2, 4]",
    code: "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar minDistance = function(word1, word2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 587,
    title: "Erect the Fence",
    titleSlug: "erect-the-fence",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry"],
    constaints:
      "<li><code>1 &lt;= trees.length &lt;= 3000</code></li> <li><code>trees[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li> <li>All the given positions are <strong>unique</strong>.</li>",
    question:
      "<p>You are given an array <code>trees</code> where <code>trees[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the location of a tree in the garden.</p><p>Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if <strong>all the trees are enclosed</strong>.</p><p>Return <em>the coordinates of trees that are exactly located on the fence perimeter</em>. You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]",
        outputText: "[[1,1],[2,0],[4,2],[3,3],[2,4]]",
        explanation:
          "All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.",
      },
      {
        id: 2,
        inputText: "trees = [[1,2],[2,2],[4,2]]",
        outputText: "[[4,2],[2,2],[1,2]]",
        explanation:
          "The fence forms a line that passes through all the trees.",
      },
    ],
    tests:
      "[[[1, 1], [2, 2], [2, 0], [2, 4], [3, 3], [4, 2]], [[1, 2], [2, 2], [4, 2]]]",
    answer:
      "[[[1, 1], [2, 0], [4, 2], [3, 3], [2, 4]], [[4, 2], [2, 2], [1, 2]]]",
    code: "/**\n * @param {number[][]} trees\n * @return {number[][]}\n */\nvar outerTrees = function(trees) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 591,
    title: "Tag Validator",
    titleSlug: "tag-validator",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li>The code must be wrapped in a <b>valid closed tag</b>. Otherwise, the code is invalid.</li> <li>A <b>closed tag</b> (not necessarily valid) has exactly the following format : <code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>. Among them, <code>&lt;TAG_NAME&gt;</code> is the start tag, and <code>&lt;/TAG_NAME&gt;</code> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is <b>valid</b> if and only if the TAG_NAME and TAG_CONTENT are valid.</li> <li>A <b>valid</b> <code>TAG_NAME</code> only contain <b>upper-case letters</b>, and has length in range [1,9]. Otherwise, the <code>TAG_NAME</code> is <b>invalid</b>.</li> <li>A <b>valid</b> <code>TAG_CONTENT</code> may contain other <b>valid closed tags</b>, <b>cdata</b> and any characters (see note1) <b>EXCEPT</b> unmatched <code>&lt;</code>, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the <code>TAG_CONTENT</code> is <b>invalid</b>.</li> <li>A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.</li> <li>A <code>&lt;</code> is unmatched if you cannot find a subsequent <code>&gt;</code>. And when you find a <code>&lt;</code> or <code>&lt;/</code>, all the subsequent characters until the next <code>&gt;</code> should be parsed as TAG_NAME (not necessarily valid).</li> <li>The cdata has the following format : <code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>. The range of <code>CDATA_CONTENT</code> is defined as the characters between <code>&lt;![CDATA[</code> and the <b>first subsequent</b> <code>]]&gt;</code>.</li> <li><code>CDATA_CONTENT</code> may contain <b>any characters</b>. The function of cdata is to forbid the validator to parse <code>CDATA_CONTENT</code>, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as <b>regular characters</b>.</li> <li><code>1 &lt;= code.length &lt;= 500</code></li> <li><code>code</code> consists of English letters, digits, <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'/'</code>, <code>'!'</code>, <code>'['</code>, <code>']'</code>, <code>'.'</code>, and <code>' '</code>.</li>",
    question:
      "<p>Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.</p><p>A code snippet is valid if all the following rules hold:</p>",
    examples: [
      {
        id: 1,
        inputText:
          'code = "<DIV>This is the first line <![CDATA[<div>]]></DIV>"',
        outputText: "true",
        explanation:
          "The code is wrapped in a closed tag : <DIV> and </DIV>. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.",
      },
      {
        id: 2,
        inputText:
          'code = "<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>"',
        outputText: "true",
        explanation:
          "We first separate the code into : start_tag|tag_content|end_tag.\nstart_tag ->",
      },
      {
        id: 3,
        inputText: 'code = "<A>  <B> </A>   </B>"',
        outputText: "false",
        explanation:
          'Unbalanced. If "<A>" is closed, then "<B>" must be unmatched, and vice versa.',
      },
    ],
    tests:
      '["<DIV>This is the first line <![CDATA[<div>]]></DIV>", "<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>", "<A>  <B> </A>   </B>"]',
    answer: "[true, true, false]",
    code: "/**\n * @param {string} code\n * @return {boolean}\n */\nvar isValid = function(code) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 592,
    title: "Fraction Addition and Subtraction",
    titleSlug: "fraction-addition-and-subtraction",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String", "Simulation"],
    constaints:
      "<li>The input string only contains <code>'0'</code> to <code>'9'</code>, <code>'/'</code>, <code>'+'</code> and <code>'-'</code>. So does the output.</li> <li>Each fraction (input and output) has the format <code>\u00b1numerator/denominator</code>. If the first input fraction or the output is positive, then <code>'+'</code> will be omitted.</li> <li>The input only contains valid <strong>irreducible fractions</strong>, where the <strong>numerator</strong> and <strong>denominator</strong> of each fraction will always be in the range <code>[1, 10]</code>. If the denominator is <code>1</code>, it means this fraction is actually an integer in a fraction format defined above.</li> <li>The number of given fractions will be in the range <code>[1, 10]</code>.</li> <li>The numerator and denominator of the <strong>final result</strong> are guaranteed to be valid and in the range of <strong>32-bit</strong> int.</li>",
    question:
      '<p>Given a string <code>expression</code> representing an expression of fraction addition and subtraction, return the calculation result in string format.</p><p>The final result should be an <a href="https://en.wikipedia.org/wiki/Irreducible_fraction" target="_blank">irreducible fraction</a>. If your final result is an integer, change it to the format of a fraction that has a denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'expression = "-1/2+1/2"',
        outputText: '"0/1"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'expression = "-1/2+1/2+1/3"',
        outputText: '"1/3"',
        explanation: "",
      },
      {
        id: 3,
        inputText: 'expression = "1/3-1/2"',
        outputText: '"-1/6"',
        explanation: "",
      },
    ],
    tests: '["-1/2+1/2", "-1/2+1/2+1/3", "1/3-1/2"]',
    answer: '["0/1", "1/3", "-1/6"]',
    code: "/**\n * @param {string} expression\n * @return {string}\n */\nvar fractionAddition = function(expression) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 593,
    title: "Valid Square",
    titleSlug: "valid-square",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Geometry"],
    constaints:
      "<li><code>p1.length == p2.length == p3.length == p4.length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given the coordinates of four points in 2D space <code>p1</code>, <code>p2</code>, <code>p3</code> and <code>p4</code>, return <code>true</code> <em>if the four points construct a square</em>.</p><p>The coordinate of a point <code>p<sub>i</sub></code> is represented as <code>[x<sub>i</sub>, y<sub>i</sub>]</code>. The input is <strong>not</strong> given in any order.</p><p>A <strong>valid square</strong> has four equal sides with positive length and four equal angles (90-degree angles).</p>",
    examples: [
      {
        id: 1,
        inputText: "p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[[0, 0], [0, 0], [1, 0]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} p1\n * @param {number[]} p2\n * @param {number[]} p3\n * @param {number[]} p4\n * @return {boolean}\n */\nvar validSquare = function(p1, p2, p3, p4) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 594,
    title: "Longest Harmonious Subsequence",
    titleSlug: "longest-harmonious-subsequence",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sliding Window", "Sorting", "Counting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>We define a harmonious array as an array where the difference between its maximum value and its minimum value is <b>exactly</b> <code>1</code>.</p><p>Given an integer array <code>nums</code>, return <em>the length of its longest harmonious subsequence among all its possible subsequences</em>.</p><p>A <strong>subsequence</strong> of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3,2,2,5,2,3,7]",
        outputText: "5",
        explanation: "The longest harmonious subsequence is [3,2,2,2,3].",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [1,1,1,1]",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[[1, 3, 2, 2, 5, 2, 3, 7], [1, 2, 3, 4], [1, 1, 1, 1]]",
    answer: "[5, 2, 0]",
    code: "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findLHS = function(nums) {\r\n    \r\n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 598,
    title: "Range Addition II",
    titleSlug: "range-addition-ii",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li><code>1 &lt;= m, n &lt;= 4 * 10<sup>4</sup></code></li> <li><code>0 &lt;= ops.length &lt;= 10<sup>4</sup></code></li> <li><code>ops[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub> &lt;= m</code></li> <li><code>1 &lt;= b<sub>i</sub> &lt;= n</code></li>",
    question:
      "<p>You are given an <code>m x n</code> matrix <code>M</code> initialized with all <code>0</code>'s and an array of operations <code>ops</code>, where <code>ops[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means <code>M[x][y]</code> should be incremented by one for all <code>0 &lt;= x &lt; a<sub>i</sub></code> and <code>0 &lt;= y &lt; b<sub>i</sub></code>.</p><p>Count and return <em>the number of maximum integers in the matrix after performing all the operations</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "m = 3, n = 3, ops = [[2,2],[3,3]]",
        outputText: "4",
        explanation:
          "The maximum integer in M is 2, and there are four of it in M. So return 4.",
      },
      {
        id: 2,
        inputText:
          "m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]",
        outputText: "4",
        explanation: "",
      },
      {
        id: 3,
        inputText: "m = 3, n = 3, ops = []",
        outputText: "9",
        explanation: "",
      },
    ],
    tests: "[3, 3, 3]",
    answer: "[4, 4, 9]",
    code: "/**\n * @param {number} m\n * @param {number} n\n * @param {number[][]} ops\n * @return {number}\n */\nvar maxCount = function(m, n, ops) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 599,
    title: "Minimum Index Sum of Two Lists",
    titleSlug: "minimum-index-sum-of-two-lists",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= list1.length, list2.length &lt;= 1000</code></li> <li><code>1 &lt;= list1[i].length, list2[i].length &lt;= 30</code></li> <li><code>list1[i]</code> and <code>list2[i]</code> consist of spaces <code>' '</code> and English letters.</li> <li>All the strings of <code>list1</code> are <strong>unique</strong>.</li> <li>All the strings of <code>list2</code> are <strong>unique</strong>.</li> <li>There is at least a common string between <code>list1</code> and <code>list2</code>.</li>",
    question:
      "<p>Given two arrays of strings <code>list1</code> and <code>list2</code>, find the <strong>common strings with the least index sum</strong>.</p><p>A <strong>common string</strong> is a string that appeared in both <code>list1</code> and <code>list2</code>.</p><p>A <strong>common string with the least index sum</strong> is a common string such that if it appeared at <code>list1[i]</code> and <code>list2[j]</code> then <code>i + j</code> should be the minimum value among all the other <strong>common strings</strong>.</p><p>Return <em>all the <strong>common strings with the least index sum</strong></em>. Return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'list1 = ["Shogun","Tapioca Express","Burger King","KFC"], list2 = ["Piatti","The Grill at Torrey Pines","Hungry Hunter Steakhouse","Shogun"]',
        outputText: '["Shogun"]',
        explanation: 'The only common string is "Shogun".',
      },
      {
        id: 2,
        inputText:
          'list1 = ["Shogun","Tapioca Express","Burger King","KFC"], list2 = ["KFC","Shogun","Burger King"]',
        outputText: '["Shogun"]',
        explanation:
          'The common string with the least index sum is "Shogun" with index sum = (0 + 1) = 1.',
      },
      {
        id: 3,
        inputText:
          'list1 = ["happy","sad","good"], list2 = ["sad","happy","good"]',
        outputText: '["sad","happy"]',
        explanation:
          'There are three common strings:\n"happy" with index sum = (0 + 1) = 1.\n"sad" with index sum = (1 + 0) = 1.\n"good" with index sum = (2 + 2) = 4.\nThe strings with the least index sum are "sad" and "happy".',
      },
    ],
    tests:
      '[["Shogun", "Tapioca Express", "Burger King", "KFC"], ["Shogun", "Tapioca Express", "Burger King", "KFC"], ["happy", "sad", "good"]]',
    answer: '[["Shogun"], ["Shogun"], ["sad", "happy"]]',
    code: "/**\n * @param {string[]} list1\n * @param {string[]} list2\n * @return {string[]}\n */\nvar findRestaurant = function(list1, list2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 600,
    title: "Non-negative Integers without Consecutive Ones",
    titleSlug: "non-negative-integers-without-consecutive-ones",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Dynamic Programming"],
    constaints: "<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given a positive integer <code>n</code>, return the number of the integers in the range <code>[0, n]</code> whose binary representations <strong>do not</strong> contain consecutive ones.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5",
        outputText: "5",
        explanation:
          "Here are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule.",
      },
      { id: 2, inputText: "n = 1", outputText: "2", explanation: "" },
      { id: 3, inputText: "n = 2", outputText: "3", explanation: "" },
    ],
    tests: "[5, 1, 2]",
    answer: "[5, 2, 3]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar findIntegers = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 605,
    title: "Can Place Flowers",
    titleSlug: "can-place-flowers",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy"],
    constaints:
      "<li><code>1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>flowerbed[i]</code> is <code>0</code> or <code>1</code>.</li> <li>There are no two adjacent flowers in <code>flowerbed</code>.</li> <li><code>0 &lt;= n &lt;= flowerbed.length</code></li>",
    question:
      "<p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in <strong>adjacent</strong> plots.</p><p>Given an integer array <code>flowerbed</code> containing <code>0</code>'s and <code>1</code>'s, where <code>0</code> means empty and <code>1</code> means not empty, and an integer <code>n</code>, return <code>true</code>\u00a0<em>if</em> <code>n</code> <em>new flowers can be planted in the</em> <code>flowerbed</code> <em>without violating the no-adjacent-flowers rule and</em> <code>false</code> <em>otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "flowerbed = [1,0,0,0,1], n = 1",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "flowerbed = [1,0,0,0,1], n = 2",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 0, 0, 0, 1], [1, 0, 0, 0, 1]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} flowerbed\n * @param {number} n\n * @return {boolean}\n */\nvar canPlaceFlowers = function(flowerbed, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 606,
    title: "Construct String from Binary Tree",
    titleSlug: "construct-string-from-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>\n<p><strong>Node Representation</strong>: Each node in the tree should be represented by its integer value.</p>\n</li> <li>\n<p><strong>Parentheses for Children</strong>: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically:</p>\n<ul>\n<li>If a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node's value.</li>\n<li>If a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child.</li>\n</ul>\n</li> <li>If a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node's value.</li> <li>If a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child.</li> <li>\n<p><strong>Omitting Empty Parentheses</strong>: Any empty parentheses pairs (i.e., <code>()</code>) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained.</p>\n<p>In summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree's structure accurately.</p>\n</li> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines:</p><p><strong>Node Representation</strong>: Each node in the tree should be represented by its integer value.</p><p><strong>Parentheses for Children</strong>: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically:</p><p><strong>Omitting Empty Parentheses</strong>: Any empty parentheses pairs (i.e., <code>()</code>) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained.</p><p>In summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree's structure accurately.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,4]",
        outputText: '"1(2(4))(3)"',
        explanation:
          'Originally, it needs to be "1(2(4)())(3()())", but you need to omit all the empty parenthesis pairs. And it will be "1(2(4))(3)".',
      },
      {
        id: 2,
        inputText: "root = [1,2,3,null,4]",
        outputText: '"1(2()(4))(3)"',
        explanation: "Almost the same as the first example, except the",
      },
    ],
    tests: "[[1, 2, 3, 4], [1, 2, 3, null, 4]]",
    answer: '["1(2(4))(3)", "1(2()(4))(3)"]',
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string}\n */\nvar tree2str = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 609,
    title: "Find Duplicate File in System",
    titleSlug: "find-duplicate-file-in-system",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      "<li><code>\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"</code></li> <li><code>\"directory_path/file_name.txt\"</code></li> <li><code>1 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= paths[i].length &lt;= 3000</code></li> <li><code>1 &lt;= sum(paths[i].length) &lt;= 5 * 10<sup>5</sup></code></li> <li><code>paths[i]</code> consist of English letters, digits, <code>'/'</code>, <code>'.'</code>, <code>'('</code>, <code>')'</code>, and <code>' '</code>.</li> <li>You may assume no files or directories share the same name in the same directory.</li> <li>You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.</li> <li>Imagine you are given a real file system, how will you search files? DFS or BFS?</li> <li>If the file content is very large (GB level), how will you modify your solution?</li> <li>If you can only read the file by 1kb each time, how will you modify your solution?</li> <li>What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?</li> <li>How to make sure the duplicated files you find are not false positive?</li>",
    question:
      '<p>Given a list <code>paths</code> of directory info, including the directory path, and all the files with contents in this directory, return <em>all the duplicate files in the file system in terms of their paths</em>. You may return the answer in <strong>any order</strong>.</p><p>A group of duplicate files consists of at least two files that have the same content.</p><p>A single directory info string in the input list has the following format:</p><p>It means there are <code>n</code> files <code>(f1.txt, f2.txt ... fn.txt)</code> with content <code>(f1_content, f2_content ... fn_content)</code> respectively in the directory "<code>root/d1/d2/.../dm"</code>. Note that <code>n &gt;= 1</code> and <code>m &gt;= 0</code>. If <code>m = 0</code>, it means the directory is just the root directory.</p><p>The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:</p>',
    examples: [
      {
        id: 1,
        inputText:
          'paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)","root 4.txt(efgh)"]',
        outputText:
          '[["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]',
        explanation: "",
      },
      {
        id: 2,
        inputText:
          'paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)"]',
        outputText:
          '[["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]]',
        explanation: "",
      },
    ],
    tests:
      '[["root/a 1.txt(abcd) 2.txt(efgh)", "root/c 3.txt(abcd)", "root/c/d 4.txt(efgh)", "root 4.txt(efgh)"], ["root/a 1.txt(abcd) 2.txt(efgh)", "root/c 3.txt(abcd)", "root/c/d 4.txt(efgh)"]]',
    answer:
      '[[["root/a/2.txt", "root/c/d/4.txt", "root/4.txt"], ["root/a/1.txt", "root/c/3.txt"]], [["root/a/2.txt", "root/c/d/4.txt"], ["root/a/1.txt", "root/c/3.txt"]]]',
    code: "/**\n * @param {string[]} paths\n * @return {string[][]}\n */\nvar findDuplicate = function(paths) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 611,
    title: "Valid Triangle Number",
    titleSlug: "valid-triangle-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Binary Search", "Greedy", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,2,3,4]",
        outputText: "3",
        explanation:
          "Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3",
      },
      {
        id: 2,
        inputText: "nums = [4,2,3,4]",
        outputText: "4",
        explanation: "",
      },
    ],
    tests: "[[2, 2, 3, 4], [4, 2, 3, 4]]",
    answer: "[3, 4]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar triangleNumber = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 617,
    title: "Merge Two Binary Trees",
    titleSlug: "merge-two-binary-trees",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in both trees is in the range <code>[0, 2000]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given two binary trees <code>root1</code> and <code>root2</code>.</p><p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p><p>Return <em>the merged tree</em>.</p><p><strong>Note:</strong> The merging process must start from the root nodes of both trees.</p>",
    examples: [
      {
        id: 1,
        inputText: "root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]",
        outputText: "[3,4,5,5,4,null,7]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root1 = [1], root2 = [1,2]",
        outputText: "[2,2]",
        explanation: "",
      },
    ],
    tests: "[[1, 3, 2, 5], [1]]",
    answer: "[[3, 4, 5, 5, 4, null, 7], [2, 2]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {TreeNode}\n */\nvar mergeTrees = function(root1, root2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 621,
    title: "Task Scheduler",
    titleSlug: "task-scheduler",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Counting",
    ],
    constaints:
      "<li><code>1 &lt;= tasks.length &lt;= 10<sup>4</sup></code></li> <li><code>tasks[i]</code> is an uppercase English letter.</li> <li><code>0 &lt;= n &lt;= 100</code></li>",
    question:
      "<p>You are given an array of CPU <code>tasks</code>, each represented by letters\u00a0A\u00a0to Z, and a cooling time, <code>n</code>. Each cycle or interval allows the completion of one task. Tasks can be completed in any order, but there's a constraint: <strong>identical</strong> tasks must be separated by at least <code>n</code> intervals due to cooling time.</p><p>\u200bReturn the <em>minimum number of intervals</em> required to complete all tasks.</p>",
    examples: [],
    tests:
      '[["A", "A", "A", "B", "B", "B"], ["A", "C", "A", "B", "D", "B"], ["A", "A", "A", "B", "B", "B"]]',
    answer: "[]",
    code: "/**\n * @param {character[]} tasks\n * @param {number} n\n * @return {number}\n */\nvar leastInterval = function(tasks, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 623,
    title: "Add One Row to Tree",
    titleSlug: "add-one-row-to-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>Given the integer <code>depth</code>, for each not null tree node <code>cur</code> at the depth <code>depth - 1</code>, create two tree nodes with value <code>val</code> as <code>cur</code>'s left subtree root and right subtree root.</li> <li><code>cur</code>'s original left subtree should be the left subtree of the new left subtree root.</li> <li><code>cur</code>'s original right subtree should be the right subtree of the new right subtree root.</li> <li>If <code>depth == 1</code> that means there is no depth <code>depth - 1</code> at all, then create a tree node with value <code>val</code> as the new root of the whole original tree, and the original tree is the new root's left subtree.</li> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li>The depth of the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>-10<sup>5</sup> &lt;= val &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= depth &lt;= the depth of tree + 1</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree and two integers <code>val</code> and <code>depth</code>, add a row of nodes with value <code>val</code> at the given depth <code>depth</code>.</p><p>Note that the <code>root</code> node is at depth <code>1</code>.</p><p>The adding rule is:</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [4,2,6,3,1,5], val = 1, depth = 2",
        outputText: "[4,1,1,2,null,null,6,3,1,5]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [4,2,null,3,1], val = 1, depth = 3",
        outputText: "[4,2,null,1,1,3,null,null,1]",
        explanation: "",
      },
    ],
    tests: "[[4, 2, 6, 3, 1, 5], [4, 2, null, 3, 1]]",
    answer:
      "[[4, 1, 1, 2, null, null, 6, 3, 1, 5], [4, 2, null, 1, 1, 3, null, null, 1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} val\n * @param {number} depth\n * @return {TreeNode}\n */\nvar addOneRow = function(root, val, depth) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 629,
    title: "K Inverse Pairs Array",
    titleSlug: "k-inverse-pairs-array",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= k &lt;= 1000</code></li>",
    question:
      "<p>For an integer array <code>nums</code>, an <strong>inverse pair</strong> is a pair of integers <code>[i, j]</code> where <code>0 &lt;= i &lt; j &lt; nums.length</code> and <code>nums[i] &gt; nums[j]</code>.</p><p>Given two integers n and k, return the number of different arrays consisting of numbers from <code>1</code> to <code>n</code> such that there are exactly <code>k</code> <strong>inverse pairs</strong>. Since the answer can be huge, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3, k = 0",
        outputText: "1",
        explanation:
          "Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.",
      },
      {
        id: 2,
        inputText: "n = 3, k = 1",
        outputText: "2",
        explanation:
          "The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.",
      },
    ],
    tests: "[3, 3]",
    answer: "[1, 2]",
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar kInversePairs = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 633,
    title: "Sum of Square Numbers",
    titleSlug: "sum-of-square-numbers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Two Pointers", "Binary Search"],
    constaints: "<li><code>0 &lt;= c &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given a non-negative integer <code>c</code>, decide whether there're two integers <code>a</code> and <code>b</code> such that <code>a<sup>2</sup> + b<sup>2</sup> = c</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "c = 5",
        outputText: "true",
        explanation: "1 * 1 + 2 * 2 = 5",
      },
      { id: 2, inputText: "c = 3", outputText: "false", explanation: "" },
    ],
    tests: "[5, 3]",
    answer: "[true, false]",
    code: "/**\n * @param {number} c\n * @return {boolean}\n */\nvar judgeSquareSum = function(c) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 636,
    title: "Exclusive Time of Functions",
    titleSlug: "exclusive-time-of-functions",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Stack"],
    constaints:
      '<li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= logs.length &lt;= 500</code></li> <li><code>0 &lt;= function_id &lt; n</code></li> <li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li> <li>No two start events will happen at the same timestamp.</li> <li>No two end events will happen at the same timestamp.</li> <li>Each function has an <code>"end"</code> log for each <code>"start"</code> log.</li>',
    question:
      '<p>On a <strong>single-threaded</strong> CPU, we execute a program containing <code>n</code> functions. Each function has a unique ID between <code>0</code> and <code>n-1</code>.</p><p>Function calls are <strong>stored in a <a href="https://en.wikipedia.org/wiki/Call_stack">call stack</a></strong>: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is <strong>the current function being executed</strong>. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.</p><p>You are given a list <code>logs</code>, where <code>logs[i]</code> represents the <code>i<sup>th</sup></code> log message formatted as a string <code>"{function_id}:{"start" | "end"}:{timestamp}"</code>. For example, <code>"0:start:3"</code> means a function call with function ID <code>0</code> <strong>started at the beginning</strong> of timestamp <code>3</code>, and <code>"1:end:2"</code> means a function call with function ID <code>1</code> <strong>ended at the end</strong> of timestamp <code>2</code>. Note that a function can be called <b>multiple times, possibly recursively</b>.</p><p>A function\'s <strong>exclusive time</strong> is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for <code>2</code> time units and another call executing for <code>1</code> time unit, the <strong>exclusive time</strong> is <code>2 + 1 = 3</code>.</p><p>Return <em>the <strong>exclusive time</strong> of each function in an array, where the value at the </em><code>i<sup>th</sup></code><em> index represents the exclusive time for the function with ID </em><code>i</code>.</p>',
    examples: [
      {
        id: 1,
        inputText:
          'n = 2, logs = ["0:start:0","1:start:2","1:end:5","0:end:6"]',
        outputText: "[3,4]",
        explanation:
          "Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.",
      },
      {
        id: 2,
        inputText:
          'n = 1, logs = ["0:start:0","0:start:2","0:end:5","0:start:6","0:end:6","0:end:7"]',
        outputText: "[8]",
        explanation:
          "Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.",
      },
      {
        id: 3,
        inputText:
          'n = 2, logs = ["0:start:0","0:start:2","0:end:5","1:start:6","1:end:6","0:end:7"]',
        outputText: "[7,1]",
        explanation:
          "Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.",
      },
    ],
    tests: "[2, 1, 2]",
    answer: "[[3, 4], [8], [7, 1]]",
    code: "/**\n * @param {number} n\n * @param {string[]} logs\n * @return {number[]}\n */\nvar exclusiveTime = function(n, logs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 640,
    title: "Solve the Equation",
    titleSlug: "solve-the-equation",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String", "Simulation"],
    constaints:
      "<li><code>3 &lt;= equation.length &lt;= 1000</code></li> <li><code>equation</code> has exactly one <code>'='</code>.</li> <li><code>equation</code> consists of integers with an absolute value in the range <code>[0, 100]</code> without any leading zeros, and the variable <code>'x'</code>.</li>",
    question:
      "<p>Solve a given equation and return the value of <code>'x'</code> in the form of a string <code>\"x=#value\"</code>. The equation contains only <code>'+'</code>, <code>'-'</code> operation, the variable <code>'x'</code> and its coefficient. You should return <code>\"No solution\"</code> if there is no solution for the equation, or <code>\"Infinite solutions\"</code> if there are infinite solutions for the equation.</p><p>If there is exactly one solution for the equation, we ensure that the value of <code>'x'</code> is an integer.</p>",
    examples: [
      {
        id: 1,
        inputText: 'equation = "x+5-3+x=6+x-2"',
        outputText: '"x=2"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'equation = "x=x"',
        outputText: '"Infinite solutions"',
        explanation: "",
      },
      {
        id: 3,
        inputText: 'equation = "2x=x"',
        outputText: '"x=0"',
        explanation: "",
      },
    ],
    tests: '["x+5-3+x=6+x-2", "x=x", "2x=x"]',
    answer: '["x=2", "Infinite solutions", "x=0"]',
    code: "/**\n * @param {string} equation\n * @return {string}\n */\nvar solveEquation = function(equation) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 643,
    title: "Maximum Average Subarray I",
    titleSlug: "maximum-average-subarray-i",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sliding Window"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code> consisting of <code>n</code> elements, and an integer <code>k</code>.</p><p>Find a contiguous subarray whose <strong>length is equal to</strong> <code>k</code> that has the maximum average value and return <em>this value</em>. Any answer with a calculation error less than <code>10<sup>-5</sup></code> will be accepted.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,12,-5,-6,50,3], k = 4",
        outputText: "12.75000",
        explanation:
          "Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75",
      },
      {
        id: 2,
        inputText: "nums = [5], k = 1",
        outputText: "5.00000",
        explanation: "",
      },
    ],
    tests: "[[1, 12, -5, -6, 50, 3], [5]]",
    answer: "[12.75, 5.0]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findMaxAverage = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 646,
    title: "Maximum Length of Pair Chain",
    titleSlug: "maximum-length-of-pair-chain",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Greedy", "Sorting"],
    constaints:
      "<li><code>n == pairs.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>-1000 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 1000</code></li>",
    question:
      "<p>You are given an array of <code>n</code> pairs <code>pairs</code> where <code>pairs[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> and <code>left<sub>i</sub> &lt; right<sub>i</sub></code>.</p><p>A pair <code>p2 = [c, d]</code> <strong>follows</strong> a pair <code>p1 = [a, b]</code> if <code>b &lt; c</code>. A <strong>chain</strong> of pairs can be formed in this fashion.</p><p>Return <em>the length longest chain which can be formed</em>.</p><p>You do not need to use up all the given intervals. You can select pairs in any order.</p>",
    examples: [
      {
        id: 1,
        inputText: "pairs = [[1,2],[2,3],[3,4]]",
        outputText: "2",
        explanation: "The longest chain is [1,2] -> [3,4].",
      },
      {
        id: 2,
        inputText: "pairs = [[1,2],[7,8],[4,5]]",
        outputText: "3",
        explanation: "The longest chain is [1,2] -> [4,5] -> [7,8].",
      },
    ],
    tests: "[[[1, 2], [2, 3], [3, 4]], [[1, 2], [7, 8], [4, 5]]]",
    answer: "[2, 3]",
    code: "/**\n * @param {number[][]} pairs\n * @return {number}\n */\nvar findLongestChain = function(pairs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 648,
    title: "Replace Words",
    titleSlug: "replace-words",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Trie"],
    constaints:
      "<li><code>1 &lt;= dictionary.length &lt;= 1000</code></li> <li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li> <li><code>dictionary[i]</code> consists of only lower-case letters.</li> <li><code>1 &lt;= sentence.length &lt;= 10<sup>6</sup></code></li> <li><code>sentence</code> consists of only lower-case letters and spaces.</li> <li>The number of words in <code>sentence</code> is in the range <code>[1, 1000]</code></li> <li>The length of each word in <code>sentence</code> is in the range <code>[1, 1000]</code></li> <li>Every two consecutive words in <code>sentence</code> will be separated by exactly one space.</li> <li><code>sentence</code> does not have leading or trailing spaces.</li>",
    question:
      '<p>In English, we have a concept called <strong>root</strong>, which can be followed by some other word to form another longer word - let\'s call this word <strong>successor</strong>. For example, when the <strong>root</strong> <code>"an"</code> is followed by the <strong>successor</strong> word <code>"other"</code>, we can form a new word <code>"another"</code>.</p><p>Given a <code>dictionary</code> consisting of many <strong>roots</strong> and a <code>sentence</code> consisting of words separated by spaces, replace all the <strong>successors</strong> in the sentence with the <strong>root</strong> forming it. If a <strong>successor</strong> can be replaced by more than one <strong>root</strong>, replace it with the <strong>root</strong> that has <strong>the shortest length</strong>.</p><p>Return <em>the <code>sentence</code></em> after the replacement.</p>',
    examples: [
      {
        id: 1,
        inputText:
          'dictionary = ["cat","bat","rat"], sentence = "the cattle was rattled by the battery"',
        outputText: '"the cat was rat by the bat"',
        explanation: "",
      },
      {
        id: 2,
        inputText:
          'dictionary = ["a","b","c"], sentence = "aadsfasf absbs bbab cadsfafs"',
        outputText: '"a a b c"',
        explanation: "",
      },
    ],
    tests: '[["cat", "bat", "rat"], ["a", "b", "c"]]',
    answer: '["the cat was rat by the bat", "a a b c"]',
    code: "/**\n * @param {string[]} dictionary\n * @param {string} sentence\n * @return {string}\n */\nvar replaceWords = function(dictionary, sentence) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 649,
    title: "Dota2 Senate",
    titleSlug: "dota2-senate",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Greedy", "Queue"],
    constaints:
      "<li><strong>Ban one senator's right:</strong> A senator can make another senator lose all his rights in this and all the following rounds.</li> <li><strong>Announce the victory:</strong> If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.</li> <li><code>n == senate.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>senate[i]</code> is either <code>'R'</code> or <code>'D'</code>.</li>",
    question:
      "<p>In the world of Dota2, there are two parties: the Radiant and the Dire.</p><p>The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <strong>one</strong> of the two rights:</p><p>Given a string <code>senate</code> representing each senator's party belonging. The character <code>'R'</code> and <code>'D'</code> represent the Radiant party and the Dire party. Then if there are <code>n</code> senators, the size of the given string will be <code>n</code>.</p><p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p><p>Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be <code>\"Radiant\"</code> or <code>\"Dire\"</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'senate = "RD"',
        outputText: '"Radiant"',
        explanation:
          "The first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.",
      },
      {
        id: 2,
        inputText: 'senate = "RDD"',
        outputText: '"Dire"',
        explanation:
          "The first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.",
      },
    ],
    tests: '["RD", "RDD"]',
    answer: '["Radiant", "Dire"]',
    code: "/**\n * @param {string} senate\n * @return {string}\n */\nvar predictPartyVictory = function(senate) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 650,
    title: "2 Keys Keyboard",
    titleSlug: "2-keys-keyboard",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming"],
    constaints:
      "<li>Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).</li> <li>Paste: You can paste the characters which are copied last time.</li> <li><code>1 &lt;= n &lt;= 1000</code></li>",
    question:
      "<p>There is only one character <code>'A'</code> on the screen of a notepad. You can perform one of two operations on this notepad for each step:</p><p>Given an integer <code>n</code>, return <em>the minimum number of operations to get the character</em> <code>'A'</code> <em>exactly</em> <code>n</code> <em>times on the screen</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText: "3",
        explanation:
          "Initially, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.",
      },
      { id: 2, inputText: "n = 1", outputText: "0", explanation: "" },
    ],
    tests: "[3, 1]",
    answer: "[3, 0]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar minSteps = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 652,
    title: "Find Duplicate Subtrees",
    titleSlug: "find-duplicate-subtrees",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of the nodes in the tree will be in the range <code>[1, 5000]</code></li> <li><code>-200 &lt;= Node.val &lt;= 200</code></li>",
    question:
      "<p>Given the <code>root</code>\u00a0of a binary tree, return all <strong>duplicate subtrees</strong>.</p><p>For each kind of duplicate subtrees, you only need to return the root node of any <b>one</b> of them.</p><p>Two trees are <strong>duplicate</strong> if they have the <strong>same structure</strong> with the <strong>same node values</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,4,null,2,4,null,null,4]",
        outputText: "[[2,4],[4]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [2,1,1]",
        outputText: "[[1]]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "root = [2,2,2,3,null,3,null]",
        outputText: "[[2,3],[3]]",
        explanation: "",
      },
    ],
    tests:
      "[[1, 2, 3, 4, null, 2, 4, null, null, 4], [2, 1, 1], [2, 2, 2, 3, null, 3, null]]",
    answer: "[[[2, 4], [4]], [[1]], [[2, 3], [3]]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode[]}\n */\nvar findDuplicateSubtrees = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 653,
    title: "Two Sum IV - Input is a BST",
    titleSlug: "two-sum-iv-input-is-a-bst",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "Two Pointers",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li><code>root</code> is guaranteed to be a <strong>valid</strong> binary search tree.</li> <li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a binary search tree and an integer <code>k</code>, return <code>true</code> <em>if there exist two elements in the BST such that their sum is equal to</em> <code>k</code>, <em>or</em> <code>false</code> <em>otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [5,3,6,2,4,null,7], k = 9",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [5,3,6,2,4,null,7], k = 28",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[5, 3, 6, 2, 4, null, 7], [5, 3, 6, 2, 4, null, 7]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {boolean}\n */\nvar findTarget = function(root, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 654,
    title: "Maximum Binary Tree",
    titleSlug: "maximum-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Divide and Conquer",
      "Stack",
      "Tree",
      "Monotonic Stack",
      "Binary Tree",
    ],
    constaints:
      "<li>Create a root node whose value is the maximum value in <code>nums</code>.</li> <li>Recursively build the left subtree on the <strong>subarray prefix</strong> to the <strong>left</strong> of the maximum value.</li> <li>Recursively build the right subtree on the <strong>subarray suffix</strong> to the <strong>right</strong> of the maximum value.</li> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li>All integers in <code>nums</code> are <strong>unique</strong>.</li>",
    question:
      "<p>You are given an integer array <code>nums</code> with no duplicates. A <strong>maximum binary tree</strong> can be built recursively from <code>nums</code> using the following algorithm:</p><p>Return <em>the <strong>maximum binary tree</strong> built from </em><code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,2,1,6,0,5]",
        outputText: "[6,3,5,null,2,0,null,null,1]",
        explanation:
          "The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child.",
      },
      {
        id: 2,
        inputText: "nums = [3,2,1]",
        outputText: "[3,null,2,null,1]",
        explanation: "",
      },
    ],
    tests: "[[3, 2, 1, 6, 0, 5], [3, 2, 1]]",
    answer: "[[6, 3, 5, null, 2, 0, null, null, 1], [3, null, 2, null, 1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar constructMaximumBinaryTree = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 658,
    title: "Find K Closest Elements",
    titleSlug: "find-k-closest-elements",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sliding Window",
      "Sorting",
      "Heap (Priority Queue)",
    ],
    constaints:
      "<li><code>|a - x| &lt; |b - x|</code>, or</li> <li><code>|a - x| == |b - x|</code> and <code>a &lt; b</code></li> <li><code>1 &lt;= k &lt;= arr.length</code></li> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>arr</code> is sorted in <strong>ascending</strong> order.</li> <li><code>-10<sup>4</sup> &lt;= arr[i], x &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given a <strong>sorted</strong> integer array <code>arr</code>, two integers <code>k</code> and <code>x</code>, return the <code>k</code> closest integers to <code>x</code> in the array. The result should also be sorted in ascending order.</p><p>An integer <code>a</code> is closer to <code>x</code> than an integer <code>b</code> if:</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,2,3,4,5], k = 4, x = 3",
        outputText: "[1,2,3,4]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "arr = [1,2,3,4,5], k = 4, x = -1",
        outputText: "[1,2,3,4]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]",
    answer: "[[1, 2, 3, 4], [1, 2, 3, 4]]",
    code: "/**\n * @param {number[]} arr\n * @param {number} k\n * @param {number} x\n * @return {number[]}\n */\nvar findClosestElements = function(arr, k, x) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 661,
    title: "Image Smoother",
    titleSlug: "image-smoother",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix"],
    constaints:
      "<li><code>m == img.length</code></li> <li><code>n == img[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= img[i][j] &lt;= 255</code></li>",
    question:
      "<p>An <strong>image smoother</strong> is a filter of the size <code>3 x 3</code> that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).</p><p>Given an <code>m x n</code> integer matrix <code>img</code> representing the grayscale of an image, return <em>the image after applying the smoother on each cell of it</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "img = [[1,1,1],[1,0,1],[1,1,1]]",
        outputText: "[[0,0,0],[0,0,0],[0,0,0]]",
        explanation:
          "For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0",
      },
      {
        id: 2,
        inputText: "img = [[100,200,100],[200,50,200],[100,200,100]]",
        outputText: "[[137,141,137],[141,138,141],[137,141,137]]",
        explanation:
          "For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138",
      },
    ],
    tests:
      "[[[1, 1, 1], [1, 0, 1], [1, 1, 1]], [[100, 200, 100], [200, 50, 200], [100, 200, 100]]]",
    answer:
      "[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[137, 141, 137], [141, 138, 141], [137, 141, 137]]]",
    code: "/**\n * @param {number[][]} img\n * @return {number[][]}\n */\nvar imageSmoother = function(img) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 662,
    title: "Maximum Width of Binary Tree",
    titleSlug: "maximum-width-of-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the <strong>maximum width</strong> of the given tree</em>.</p><p>The <strong>maximum width</strong> of a tree is the maximum <strong>width</strong> among all levels.</p><p>The <strong>width</strong> of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.</p><p>It is <strong>guaranteed</strong> that the answer will in the range of a <strong>32-bit</strong> signed integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,3,2,5,3,null,9]",
        outputText: "4",
        explanation:
          "The maximum width exists in the third level with length 4 (5,3,null,9).",
      },
      {
        id: 2,
        inputText: "root = [1,3,2,5,null,null,9,6,null,7]",
        outputText: "7",
        explanation:
          "The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).",
      },
      {
        id: 3,
        inputText: "root = [1,3,2,5]",
        outputText: "2",
        explanation:
          "The maximum width exists in the second level with length 2 (3,2).",
      },
    ],
    tests:
      "[[1, 3, 2, 5, 3, null, 9], [1, 3, 2, 5, null, null, 9, 6, null, 7], [1, 3, 2, 5]]",
    answer: "[4, 7, 2]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar widthOfBinaryTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 664,
    title: "Strange Printer",
    titleSlug: "strange-printer",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li>The printer can only print a sequence of <strong>the same character</strong> each time.</li> <li>At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.</li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters.</li>",
    question:
      "<p>There is a strange printer with the following two special properties:</p><p>Given a string <code>s</code>, return <em>the minimum number of turns the printer needed to print it</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aaabbb"',
        outputText: "2",
        explanation: 'Print "aaa" first and then print "bbb".',
      },
      {
        id: 2,
        inputText: 's = "aba"',
        outputText: "2",
        explanation:
          'Print "aaa" first and then print "b" from the second place of the string, which will cover the existing character \'a\'.',
      },
    ],
    tests: '["aaabbb", "aba"]',
    answer: "[2, 2]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar strangePrinter = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 665,
    title: "Non-decreasing Array",
    titleSlug: "non-decreasing-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an array <code>nums</code> with <code>n</code> integers, your task is to check if it could become non-decreasing by modifying <strong>at most one element</strong>.</p><p>We define an array is non-decreasing if <code>nums[i] &lt;= nums[i + 1]</code> holds for every <code>i</code> (<strong>0-based</strong>) such that (<code>0 &lt;= i &lt;= n - 2</code>).</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,2,3]",
        outputText: "true",
        explanation:
          "You could modify the first 4 to 1 to get a non-decreasing array.",
      },
      {
        id: 2,
        inputText: "nums = [4,2,1]",
        outputText: "false",
        explanation:
          "You cannot get a non-decreasing array by modifying at most one element.",
      },
    ],
    tests: "[[4, 2, 3], [4, 2, 1]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar checkPossibility = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 668,
    title: "Kth Smallest Number in Multiplication Table",
    titleSlug: "kth-smallest-number-in-multiplication-table",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Math", "Binary Search"],
    constaints:
      "<li><code>1 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= m * n</code></li>",
    question:
      '<p>Nearly everyone has used the <a href="https://en.wikipedia.org/wiki/Multiplication_table" target="_blank">Multiplication Table</a>. The multiplication table of size <code>m x n</code> is an integer matrix <code>mat</code> where <code>mat[i][j] == i * j</code> (<strong>1-indexed</strong>).</p><p>Given three integers <code>m</code>, <code>n</code>, and <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> smallest element in the </em><code>m x n</code><em> multiplication table</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "m = 3, n = 3, k = 5",
        outputText: "3",
        explanation: "The 5",
      },
      {
        id: 2,
        inputText: "m = 2, n = 3, k = 6",
        outputText: "6",
        explanation: "The 6",
      },
    ],
    tests: "[3, 2]",
    answer: "[3, 6]",
    code: "/**\n * @param {number} m\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar findKthNumber = function(m, n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 669,
    title: "Trim a Binary Search Tree",
    titleSlug: "trim-a-binary-search-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>The value of each node in the tree is <strong>unique</strong>.</li> <li><code>root</code> is guaranteed to be a valid binary search tree.</li> <li><code>0 &lt;= low &lt;= high &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a binary search tree and the lowest and highest boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should <strong>not</strong> change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a <strong>unique answer</strong>.</p><p>Return <em>the root of the trimmed binary search tree</em>. Note that the root may change depending on the given bounds.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,0,2], low = 1, high = 2",
        outputText: "[1,null,2]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [3,0,4,null,2,null,null,1], low = 1, high = 3",
        outputText: "[3,2,null,1]",
        explanation: "",
      },
    ],
    tests: "[[1, 0, 2], [3, 0, 4, null, 2, null, null, 1]]",
    answer: "[[1, null, 2], [3, 2, null, 1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} low\n * @param {number} high\n * @return {TreeNode}\n */\nvar trimBST = function(root, low, high) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 670,
    title: "Maximum Swap",
    titleSlug: "maximum-swap",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Greedy"],
    constaints: "<li><code>0 &lt;= num &lt;= 10<sup>8</sup></code></li>",
    question:
      "<p>You are given an integer <code>num</code>. You can swap two digits at most once to get the maximum valued number.</p><p>Return <em>the maximum valued number you can get</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 2736",
        outputText: "7236",
        explanation: "Swap the number 2 and the number 7.",
      },
      {
        id: 2,
        inputText: "num = 9973",
        outputText: "9973",
        explanation: "No swap.",
      },
    ],
    tests: "[2736, 9973]",
    answer: "[7236, 9973]",
    code: "/**\n * @param {number} num\n * @return {number}\n */\nvar maximumSwap = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 672,
    title: "Bulb Switcher II",
    titleSlug: "bulb-switcher-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Math",
      "Bit Manipulation",
      "Depth-First Search",
      "Breadth-First Search",
    ],
    constaints:
      "<li><strong>Button 1:</strong> Flips the status of all the bulbs.</li> <li><strong>Button 2:</strong> Flips the status of all the bulbs with even labels (i.e., <code>2, 4, ...</code>).</li> <li><strong>Button 3:</strong> Flips the status of all the bulbs with odd labels (i.e., <code>1, 3, ...</code>).</li> <li><strong>Button 4:</strong> Flips the status of all the bulbs with a label <code>j = 3k + 1</code> where <code>k = 0, 1, 2, ...</code> (i.e., <code>1, 4, 7, 10, ...</code>).</li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= presses &lt;= 1000</code></li>",
    question:
      "<p>There is a room with <code>n</code> bulbs labeled from <code>1</code> to <code>n</code> that all are turned on initially, and <strong>four buttons</strong> on the wall. Each of the four buttons has a different functionality where:</p><p>You must make <strong>exactly</strong> <code>presses</code> button presses in total. For each press, you may pick <strong>any</strong> of the four buttons to press.</p><p>Given the two integers <code>n</code> and <code>presses</code>, return <em>the number of <strong>different possible statuses</strong> after performing all </em><code>presses</code><em> button presses</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 1, presses = 1",
        outputText: "2",
        explanation:
          "Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2",
      },
      {
        id: 2,
        inputText: "n = 2, presses = 1",
        outputText: "3",
        explanation:
          "Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3",
      },
      {
        id: 3,
        inputText: "n = 3, presses = 1",
        outputText: "4",
        explanation:
          "Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4",
      },
    ],
    tests: "[1, 2, 3]",
    answer: "[2, 3, 4]",
    code: "/**\n * @param {number} n\n * @param {number} presses\n * @return {number}\n */\nvar flipLights = function(n, presses) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 673,
    title: "Number of Longest Increasing Subsequence",
    titleSlug: "number-of-longest-increasing-subsequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 2000</code></li> <li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given an integer array\u00a0<code>nums</code>, return <em>the number of longest increasing subsequences.</em></p><p><strong>Notice</strong> that the sequence has to be <strong>strictly</strong> increasing.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3,5,4,7]",
        outputText: "2",
        explanation:
          "The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].",
      },
      {
        id: 2,
        inputText: "nums = [2,2,2,2,2]",
        outputText: "5",
        explanation:
          "The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.",
      },
    ],
    tests: "[[1, 3, 5, 4, 7], [2, 2, 2, 2, 2]]",
    answer: "[2, 5]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumberOfLIS = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 674,
    title: "Longest Continuous Increasing Subsequence",
    titleSlug: "longest-continuous-increasing-subsequence",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest <strong>continuous increasing subsequence</strong> (i.e. subarray)</em>. The subsequence must be <strong>strictly</strong> increasing.</p><p>A <strong>continuous increasing subsequence</strong> is defined by two indices <code>l</code> and <code>r</code> (<code>l &lt; r</code>) such that it is <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> and for each <code>l &lt;= i &lt; r</code>, <code>nums[i] &lt; nums[i + 1]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3,5,4,7]",
        outputText: "3",
        explanation:
          "The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.",
      },
      {
        id: 2,
        inputText: "nums = [2,2,2,2,2]",
        outputText: "1",
        explanation:
          "The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing.",
      },
    ],
    tests: "[[1, 3, 5, 4, 7], [2, 2, 2, 2, 2]]",
    answer: "[3, 1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLengthOfLCIS = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 675,
    title: "Cut Off Trees for Golf Event",
    titleSlug: "cut-off-trees-for-golf-event",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Breadth-First Search",
      "Heap (Priority Queue)",
      "Matrix",
    ],
    constaints:
      "<li><code>0</code> means the cell cannot be walked through.</li> <li><code>1</code> represents an empty cell that can be walked through.</li> <li>A number greater than <code>1</code> represents a tree in a cell that can be walked through, and this number is the tree's height.</li> <li><code>m == forest.length</code></li> <li><code>n == forest[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>0 &lt;= forest[i][j] &lt;= 10<sup>9</sup></code></li> <li>Heights of all trees are <strong>distinct</strong>.</li>",
    question:
      "<p>You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an <code>m x n</code> matrix. In this matrix:</p><p>In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.</p><p>You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes <code>1</code> (an empty cell).</p><p>Starting from the point <code>(0, 0)</code>, return <em>the minimum steps you need to walk to cut off all the trees</em>. If you cannot cut off all the trees, return <code>-1</code>.</p><p><strong>Note:</strong> The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.</p>",
    examples: [
      {
        id: 1,
        inputText: "forest = [[1,2,3],[0,0,4],[7,6,5]]",
        outputText: "6",
        explanation:
          "Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.",
      },
      {
        id: 2,
        inputText: "forest = [[1,2,3],[0,0,0],[7,6,5]]",
        outputText: "-1",
        explanation:
          "The trees in the bottom row cannot be accessed as the middle row is blocked.",
      },
      {
        id: 3,
        inputText: "forest = [[2,3,4],[0,0,5],[8,7,6]]",
        outputText: "6",
        explanation:
          "You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.",
      },
    ],
    tests:
      "[[[1, 2, 3], [0, 0, 4], [7, 6, 5]], [[1, 2, 3], [0, 0, 0], [7, 6, 5]], [[2, 3, 4], [0, 0, 5], [8, 7, 6]]]",
    answer: "[6, -1, 6]",
    code: "/**\n * @param {number[][]} forest\n * @return {number}\n */\nvar cutOffTree = function(forest) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 676,
    title: "Implement Magic Dictionary",
    titleSlug: "implement-magic-dictionary",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Depth-First Search", "Design", "Trie"],
    constaints:
      "<li><code>MagicDictionary()</code>\u00a0Initializes the object.</li> <li><code>void buildDict(String[]\u00a0dictionary)</code>\u00a0Sets the data structure\u00a0with an array of distinct strings <code>dictionary</code>.</li> <li><code>bool search(String searchWord)</code> Returns <code>true</code> if you can change <strong>exactly one character</strong> in <code>searchWord</code> to match any string in the data structure, otherwise returns <code>false</code>.</li> <li><code>1 &lt;=\u00a0dictionary.length &lt;= 100</code></li> <li><code>1 &lt;=\u00a0dictionary[i].length &lt;= 100</code></li> <li><code>dictionary[i]</code> consists of only lower-case English letters.</li> <li>All the strings in\u00a0<code>dictionary</code>\u00a0are <strong>distinct</strong>.</li> <li><code>1 &lt;=\u00a0searchWord.length &lt;= 100</code></li> <li><code>searchWord</code>\u00a0consists of only lower-case English letters.</li> <li><code>buildDict</code>\u00a0will be called only once before <code>search</code>.</li> <li>At most <code>100</code> calls will be made to <code>search</code>.</li>",
    question:
      "<p>Design a data structure that is initialized with a list of <strong>different</strong> words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.</p><p>Implement the\u00a0<code>MagicDictionary</code>\u00a0class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MagicDictionary", "buildDict", "search", "search", "search", "search"]\n[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]',
        outputText: "[null, null, false, true, false, false]",
        explanation:
          'MagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict(["hello", "leetcode"]);\nmagicDictionary.search("hello"); // return False\nmagicDictionary.search("hhllo"); // We can change the second \'h\' to \'e\' to match "hello" so we return True\nmagicDictionary.search("hell"); // return False\nmagicDictionary.search("leetcoded"); // return False',
      },
    ],
    tests:
      '[["MagicDictionary", "buildDict", "search", "search", "search", "search"]]',
    answer: "[[null, null, false, true, false, false]]",
    code: "\nvar MagicDictionary = function() {\n    \n};\n\n/** \n * @param {string[]} dictionary\n * @return {void}\n */\nMagicDictionary.prototype.buildDict = function(dictionary) {\n    \n};\n\n/** \n * @param {string} searchWord\n * @return {boolean}\n */\nMagicDictionary.prototype.search = function(searchWord) {\n    \n};\n\n/** \n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = new MagicDictionary()\n * obj.buildDict(dictionary)\n * var param_2 = obj.search(searchWord)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 677,
    title: "Map Sum Pairs",
    titleSlug: "map-sum-pairs",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Design", "Trie"],
    constaints:
      "<li>Maps a string key to a given value.</li> <li>Returns the sum of the values that have a key with a prefix equal to a given string.</li> <li><code>MapSum()</code> Initializes the <code>MapSum</code> object.</li> <li><code>void insert(String key, int val)</code> Inserts the <code>key-val</code> pair into the map. If the <code>key</code> already existed, the original <code>key-value</code> pair will be overridden to the new one.</li> <li><code>int sum(string prefix)</code> Returns the sum of all the pairs' value whose <code>key</code> starts with the <code>prefix</code>.</li> <li><code>1 &lt;= key.length, prefix.length &lt;= 50</code></li> <li><code>key</code> and <code>prefix</code> consist of only lowercase English letters.</li> <li><code>1 &lt;= val &lt;= 1000</code></li> <li>At most <code>50</code> calls will be made to <code>insert</code> and <code>sum</code>.</li>",
    question:
      "<p>Design a map that allows you to do the following:</p><p>Implement the <code>MapSum</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MapSum", "insert", "sum", "insert", "sum"]\n[[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]',
        outputText: "[null, null, 3, null, 5]",
        explanation:
          'MapSum mapSum = new MapSum();\nmapSum.insert("apple", 3);  \nmapSum.sum("ap");           // return 3 (',
      },
    ],
    tests: '[["MapSum", "insert", "sum", "insert", "sum"]]',
    answer: "[[null, null, 3, null, 5]]",
    code: "\nvar MapSum = function() {\n    \n};\n\n/** \n * @param {string} key \n * @param {number} val\n * @return {void}\n */\nMapSum.prototype.insert = function(key, val) {\n    \n};\n\n/** \n * @param {string} prefix\n * @return {number}\n */\nMapSum.prototype.sum = function(prefix) {\n    \n};\n\n/** \n * Your MapSum object will be instantiated and called as such:\n * var obj = new MapSum()\n * obj.insert(key,val)\n * var param_2 = obj.sum(prefix)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 679,
    title: "24 Game",
    titleSlug: "24-game",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Math", "Backtracking"],
    constaints:
      '<li>The division operator <code>\'/\'</code> represents real division, not integer division.\n\n\t<ul>\n<li>For example, <code>4 / (1 - 2 / 3) = 4 / (1 / 3) = 12</code>.</li>\n</ul>\n</li> <li>For example, <code>4 / (1 - 2 / 3) = 4 / (1 / 3) = 12</code>.</li> <li>Every operation done is between two numbers. In particular, we cannot use <code>\'-\'</code> as a unary operator.\n\t<ul>\n<li>For example, if <code>cards = [1, 1, 1, 1]</code>, the expression <code>"-1 - 1 - 1 - 1"</code> is <strong>not allowed</strong>.</li>\n</ul>\n</li> <li>For example, if <code>cards = [1, 1, 1, 1]</code>, the expression <code>"-1 - 1 - 1 - 1"</code> is <strong>not allowed</strong>.</li> <li>You cannot concatenate numbers together\n\t<ul>\n<li>For example, if <code>cards = [1, 2, 1, 2]</code>, the expression <code>"12 + 12"</code> is not valid.</li>\n</ul>\n</li> <li>For example, if <code>cards = [1, 2, 1, 2]</code>, the expression <code>"12 + 12"</code> is not valid.</li> <li><code>cards.length == 4</code></li> <li><code>1 &lt;= cards[i] &lt;= 9</code></li>',
    question:
      "<p>You are given an integer array <code>cards</code> of length <code>4</code>. You have four cards, each containing a number in the range <code>[1, 9]</code>. You should arrange the numbers on these cards in a mathematical expression using the operators <code>['+', '-', '*', '/']</code> and the parentheses <code>'('</code> and <code>')'</code> to get the value 24.</p><p>You are restricted with the following rules:</p><p>Return <code>true</code> if you can get such expression that evaluates to <code>24</code>, and <code>false</code> otherwise.</p>",
    examples: [
      {
        id: 1,
        inputText: "cards = [4,1,8,7]",
        outputText: "true",
        explanation: "(8-4) * (7-1) = 24",
      },
      {
        id: 2,
        inputText: "cards = [1,2,1,2]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[4, 1, 8, 7], [1, 2, 1, 2]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} cards\n * @return {boolean}\n */\nvar judgePoint24 = function(cards) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 682,
    title: "Baseball Game",
    titleSlug: "baseball-game",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Stack", "Simulation"],
    constaints:
      '<li>An integer <code>x</code>.\n\n\t<ul>\n<li>Record a new score of <code>x</code>.</li>\n</ul>\n</li> <li>Record a new score of <code>x</code>.</li> <li><code>\'+\'</code>.\n\t<ul>\n<li>Record a new score that is the sum of the previous two scores.</li>\n</ul>\n</li> <li>Record a new score that is the sum of the previous two scores.</li> <li><code>\'D\'</code>.\n\t<ul>\n<li>Record a new score that is the double of the previous score.</li>\n</ul>\n</li> <li>Record a new score that is the double of the previous score.</li> <li><code>\'C\'</code>.\n\t<ul>\n<li>Invalidate the previous score, removing it from the record.</li>\n</ul>\n</li> <li>Invalidate the previous score, removing it from the record.</li> <li><code>1 &lt;= operations.length &lt;= 1000</code></li> <li><code>operations[i]</code> is <code>"C"</code>, <code>"D"</code>, <code>"+"</code>, or a string representing an integer in the range <code>[-3 * 10<sup>4</sup>, 3 * 10<sup>4</sup>]</code>.</li> <li>For operation <code>"+"</code>, there will always be at least two previous scores on the record.</li> <li>For operations <code>"C"</code> and <code>"D"</code>, there will always be at least one previous score on the record.</li>',
    question:
      "<p>You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.</p><p>You are given a list of strings <code>operations</code>, where <code>operations[i]</code> is the <code>i<sup>th</sup></code> operation you must apply to the record and is one of the following:</p><p>Return <em>the sum of all the scores on the record after applying all the operations</em>.</p><p>The test cases are generated such that the answer and all intermediate calculations fit in a <strong>32-bit</strong> integer and that all operations are valid.</p>",
    examples: [
      {
        id: 1,
        inputText: 'ops = ["5","2","C","D","+"]',
        outputText: "30",
        explanation:
          '"5" - Add 5 to the record, record is now [5].\n"2" - Add 2 to the record, record is now [5, 2].\n"C" - Invalidate and remove the previous score, record is now [5].\n"D" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n"+" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.',
      },
      {
        id: 2,
        inputText: 'ops = ["5","-2","4","C","D","9","+","+"]',
        outputText: "27",
        explanation:
          '"5" - Add 5 to the record, record is now [5].\n"-2" - Add -2 to the record, record is now [5, -2].\n"4" - Add 4 to the record, record is now [5, -2, 4].\n"C" - Invalidate and remove the previous score, record is now [5, -2].\n"D" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n"9" - Add 9 to the record, record is now [5, -2, -4, 9].\n"+" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n"+" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.',
      },
      {
        id: 3,
        inputText: 'ops = ["1","C"]',
        outputText: "0",
        explanation:
          '"1" - Add 1 to the record, record is now [1].\n"C" - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0.',
      },
    ],
    tests:
      '[["5", "2", "C", "D", "+"], ["5", "-2", "4", "C", "D", "9", "+", "+"], ["1", "C"]]',
    answer: "[30, 27, 0]",
    code: "/**\n * @param {string[]} operations\n * @return {number}\n */\nvar calPoints = function(operations) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 685,
    title: "Redundant Connection II",
    titleSlug: "redundant-connection-ii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
    ],
    constaints:
      "<li><code>n == edges.length</code></li> <li><code>3 &lt;= n &lt;= 1000</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li>",
    question:
      "<p>In this problem, a rooted tree is a <b>directed</b> graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.</p><p>The given input is a directed graph that started as a rooted tree with <code>n</code> nodes (with distinct values from <code>1</code> to <code>n</code>), with one additional directed edge added. The added edge has two different vertices chosen from <code>1</code> to <code>n</code>, and was not an edge that already existed.</p><p>The resulting graph is given as a 2D-array of <code>edges</code>. Each element of <code>edges</code> is a pair <code>[u<sub>i</sub>, v<sub>i</sub>]</code> that represents a <b>directed</b> edge connecting nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>, where <code>u<sub>i</sub></code> is a parent of child <code>v<sub>i</sub></code>.</p><p>Return <em>an edge that can be removed so that the resulting graph is a rooted tree of</em> <code>n</code> <em>nodes</em>. If there are multiple answers, return the answer that occurs last in the given 2D-array.</p>",
    examples: [
      {
        id: 1,
        inputText: "edges = [[1,2],[1,3],[2,3]]",
        outputText: "[2,3]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]",
        outputText: "[4,1]",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2], [1, 3], [2, 3]], [[1, 2], [2, 3], [3, 4], [4, 1], [1, 5]]]",
    answer: "[[2, 3], [4, 1]]",
    code: "/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findRedundantDirectedConnection = function(edges) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 686,
    title: "Repeated String Match",
    titleSlug: "repeated-string-match",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "String Matching"],
    constaints:
      "<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li> <li><code>a</code> and <code>b</code> consist of lowercase English letters.</li>",
    question:
      '<p>Given two strings <code>a</code> and <code>b</code>, return <em>the minimum number of times you should repeat string </em><code>a</code><em> so that string</em> <code>b</code> <em>is a substring of it</em>. If it is impossible for <code>b</code>\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of <code>a</code> after repeating it, return <code>-1</code>.</p><p><strong>Notice:</strong> string <code>"abc"</code> repeated 0 times is <code>""</code>, repeated 1 time is <code>"abc"</code> and repeated 2 times is <code>"abcabc"</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'a = "abcd", b = "cdabcdab"',
        outputText: "3",
        explanation: 'We return 3 because by repeating a three times "ab',
      },
      {
        id: 2,
        inputText: 'a = "a", b = "aa"',
        outputText: "2",
        explanation: "",
      },
    ],
    tests: '["abcd", "a"]',
    answer: "[3, 2]",
    code: "/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nvar repeatedStringMatch = function(a, b) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 687,
    title: "Longest Univalue Path",
    titleSlug: "longest-univalue-path",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li>The depth of the tree will not exceed <code>1000</code>.</li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the length of the longest path, where each node in the path has the same value</em>. This path may or may not pass through the root.</p><p><strong>The length of the path</strong> between two nodes is represented by the number of edges between them.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [5,4,5,1,1,null,5]",
        outputText: "2",
        explanation:
          "The shown image shows that the longest path of the same value (i.e. 5).",
      },
      {
        id: 2,
        inputText: "root = [1,4,5,4,4,null,5]",
        outputText: "2",
        explanation:
          "The shown image shows that the longest path of the same value (i.e. 4).",
      },
    ],
    tests: "[[5, 4, 5, 1, 1, null, 5], [1, 4, 5, 4, 4, null, 5]]",
    answer: "[2, 2]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar longestUnivaluePath = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 688,
    title: "Knight Probability in Chessboard",
    titleSlug: "knight-probability-in-chessboard",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 25</code></li> <li><code>0 &lt;= k &lt;= 100</code></li> <li><code>0 &lt;= row, column &lt;= n - 1</code></li>",
    question:
      "<p>On an <code>n x n</code> chessboard, a knight starts at the cell <code>(row, column)</code> and attempts to make exactly <code>k</code> moves. The rows and columns are <strong>0-indexed</strong>, so the top-left cell is <code>(0, 0)</code>, and the bottom-right cell is <code>(n - 1, n - 1)</code>.</p><p>A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.</p><p>Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.</p><p>The knight continues moving until it has made exactly <code>k</code> moves or has moved off the chessboard.</p><p>Return <em>the probability that the knight remains on the board after it has stopped moving</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3, k = 2, row = 0, column = 0",
        outputText: "0.06250",
        explanation:
          "There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.",
      },
      {
        id: 2,
        inputText: "n = 1, k = 0, row = 0, column = 0",
        outputText: "1.00000",
        explanation: "",
      },
    ],
    tests: "[3, 1]",
    answer: "[0.0625, 1.0]",
    code: "/**\n * @param {number} n\n * @param {number} k\n * @param {number} row\n * @param {number} column\n * @return {number}\n */\nvar knightProbability = function(n, k, row, column) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 690,
    title: "Employee Importance",
    titleSlug: "employee-importance",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
    ],
    constaints:
      "<li><code>employees[i].id</code> is the ID of the <code>i<sup>th</sup></code> employee.</li> <li><code>employees[i].importance</code> is the importance value of the <code>i<sup>th</sup></code> employee.</li> <li><code>employees[i].subordinates</code> is a list of the IDs of the direct subordinates of the <code>i<sup>th</sup></code> employee.</li> <li><code>1 &lt;= employees.length &lt;= 2000</code></li> <li><code>1 &lt;= employees[i].id &lt;= 2000</code></li> <li>All <code>employees[i].id</code> are <strong>unique</strong>.</li> <li><code>-100 &lt;= employees[i].importance &lt;= 100</code></li> <li>One employee has at most one direct leader and may have several subordinates.</li> <li>The IDs in <code>employees[i].subordinates</code> are valid IDs.</li>",
    question:
      "<p>You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.</p><p>You are given an array of employees <code>employees</code> where:</p><p>Given an integer <code>id</code> that represents an employee's ID, return <em>the <strong>total</strong> importance value of this employee and all their direct and indirect subordinates</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1",
        outputText: "11",
        explanation:
          "Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.",
      },
      {
        id: 2,
        inputText: "employees = [[1,2,[5]],[5,-3,[]]], id = 5",
        outputText: "-3",
        explanation:
          "Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3.",
      },
    ],
    tests:
      "[[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], [[1, 2, [5]], [5, -3, []]]]",
    answer: "[11, -3]",
    code: "/**\n * Definition for Employee.\n * class Employee {\n *     id: number\n *     importance: number\n *     subordinates: number[]\n *     constructor(id: number, importance: number, subordinates: number[]) {\n *         this.id = (id === undefined) ? 0 : id;\n *         this.importance = (importance === undefined) ? 0 : importance;\n *         this.subordinates = (subordinates === undefined) ? [] : subordinates;\n *     }\n * }\n */\n\nfunction getImportance(employees: Employee[], id: number): number {\n\t\n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 692,
    title: "Top K Frequent Words",
    titleSlug: "top-k-frequent-words",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "String",
      "Trie",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
    ],
    constaints:
      "<li><code>1 &lt;= words.length &lt;= 500</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> <li><code>k</code> is in the range <code>[1, The number of <strong>unique</strong> words[i]]</code></li>",
    question:
      "<p>Given an array of strings <code>words</code> and an integer <code>k</code>, return <em>the </em><code>k</code><em> most frequent strings</em>.</p><p>Return the answer <strong>sorted</strong> by <strong>the frequency</strong> from highest to lowest. Sort the words with the same frequency by their <strong>lexicographical order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["i","love","leetcode","i","love","coding"], k = 2',
        outputText: '["i","love"]',
        explanation:
          '"i" and "love" are the two most frequent words.\nNote that "i" comes before "love" due to a lower alphabetical order.',
      },
      {
        id: 2,
        inputText:
          'words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4',
        outputText: '["the","is","sunny","day"]',
        explanation:
          '"the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.',
      },
    ],
    tests:
      '[["i", "love", "leetcode", "i", "love", "coding"], ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"]]',
    answer: '[["i", "love"], ["the", "is", "sunny", "day"]]',
    code: "/**\n * @param {string[]} words\n * @param {number} k\n * @return {string[]}\n */\nvar topKFrequent = function(words, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 693,
    title: "Binary Number with Alternating Bits",
    titleSlug: "binary-number-with-alternating-bits",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Bit Manipulation"],
    constaints: "<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5",
        outputText: "true",
        explanation: "The binary representation of 5 is: 101",
      },
      {
        id: 2,
        inputText: "n = 7",
        outputText: "false",
        explanation: "The binary representation of 7 is: 111.",
      },
      {
        id: 3,
        inputText: "n = 11",
        outputText: "false",
        explanation: "The binary representation of 11 is: 1011.",
      },
    ],
    tests: "[5, 7, 11]",
    answer: "[true, false, false]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar hasAlternatingBits = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 695,
    title: "Max Area of Island",
    titleSlug: "max-area-of-island",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix",
    ],
    constaints:
      "<li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>You are given an <code>m x n</code> binary matrix <code>grid</code>. An island is a group of <code>1</code>'s (representing land) connected <strong>4-directionally</strong> (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p><p>The <strong>area</strong> of an island is the number of cells with a value <code>1</code> in the island.</p><p>Return <em>the maximum <strong>area</strong> of an island in </em><code>grid</code>. If there is no island, return <code>0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]",
        outputText: "6",
        explanation:
          "The answer is not 11, because the island must be connected 4-directionally.",
      },
      {
        id: 2,
        inputText: "grid = [[0,0,0,0,0,0,0,0]]",
        outputText: "0",
        explanation: "",
      },
    ],
    tests:
      "[[[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0]]]",
    answer: "[6, 0]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 696,
    title: "Count Binary Substrings",
    titleSlug: "count-binary-substrings",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li>",
    question:
      "<p>Given a binary string <code>s</code>, return the number of non-empty substrings that have the same number of <code>0</code>'s and <code>1</code>'s, and all the <code>0</code>'s and all the <code>1</code>'s in these substrings are grouped consecutively.</p><p>Substrings that occur multiple times are counted the number of times they occur.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "00110011"',
        outputText: "6",
        explanation:
          'There are 6 substrings that have equal number of consecutive 1\'s and 0\'s: "0011", "01", "1100", "10", "0011", and "01".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, "00110011" is not a valid substring because all the 0\'s (and 1\'s) are not grouped together.',
      },
      {
        id: 2,
        inputText: 's = "10101"',
        outputText: "4",
        explanation:
          'There are 4 substrings: "10", "01", "10", "01" that have equal number of consecutive 1\'s and 0\'s.',
      },
    ],
    tests: '["00110011", "10101"]',
    answer: "[6, 4]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar countBinarySubstrings = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 697,
    title: "Degree of an Array",
    titleSlug: "degree-of-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>nums.length</code> will be between 1 and 50,000.</li> <li><code>nums[i]</code> will be an integer between 0 and 49,999.</li>",
    question:
      "<p>Given a non-empty array of non-negative integers <code>nums</code>, the <b>degree</b> of this array is defined as the maximum frequency of any one of its elements.</p><p>Your task is to find the smallest possible length of a (contiguous) subarray of <code>nums</code>, that has the same degree as <code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,2,3,1]",
        outputText: "2",
        explanation:
          "The input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,2,3,1,4,2]",
        outputText: "6",
        explanation:
          "The degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.",
      },
    ],
    tests: "[[1, 2, 2, 3, 1], [1, 2, 2, 3, 1, 4, 2]]",
    answer: "[2, 6]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findShortestSubArray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 698,
    title: "Partition to K Equal Sum Subsets",
    titleSlug: "partition-to-k-equal-sum-subsets",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Memoization",
      "Bitmask",
    ],
    constaints:
      "<li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li>The frequency of each element is in the range <code>[1, 4]</code>.</li>",
    question:
      "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> if it is possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,3,2,3,5,2,1], k = 4",
        outputText: "true",
        explanation:
          "It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4], k = 3",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[4, 3, 2, 3, 5, 2, 1], [1, 2, 3, 4]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar canPartitionKSubsets = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 699,
    title: "Falling Squares",
    titleSlug: "falling-squares",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Segment Tree", "Ordered Set"],
    constaints:
      "<li><code>1 &lt;= positions.length &lt;= 1000</code></li> <li><code>1 &lt;= left<sub>i</sub> &lt;= 10<sup>8</sup></code></li> <li><code>1 &lt;= sideLength<sub>i</sub> &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>There are several squares being dropped onto the X-axis of a 2D plane.</p><p>You are given a 2D integer array <code>positions</code> where <code>positions[i] = [left<sub>i</sub>, sideLength<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> square with a side length of <code>sideLength<sub>i</sub></code> that is dropped with its left edge aligned with X-coordinate <code>left<sub>i</sub></code>.</p><p>Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands <strong>on the top side of another square</strong> or <strong>on the X-axis</strong>. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.</p><p>After each square is dropped, you must record the <strong>height of the current tallest stack of squares</strong>.</p><p>Return <em>an integer array </em><code>ans</code><em> where </em><code>ans[i]</code><em> represents the height described above after dropping the </em><code>i<sup>th</sup></code><em> square</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "positions = [[1,2],[2,3],[6,1]]",
        outputText: "[2,5,5]",
        explanation:
          "After the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5].",
      },
      {
        id: 2,
        inputText: "positions = [[100,100],[200,100]]",
        outputText: "[100,100]",
        explanation:
          "After the first drop, the tallest stack is square 1 with a height of 100.\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\nThus, we return an answer of [100, 100].\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.",
      },
    ],
    tests: "[[[1, 2], [2, 3], [6, 1]], [[100, 100], [200, 100]]]",
    answer: "[[2, 5, 5], [100, 100]]",
    code: "/**\n * @param {number[][]} positions\n * @return {number[]}\n */\nvar fallingSquares = function(positions) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 712,
    title: "Minimum ASCII Delete Sum for Two Strings",
    titleSlug: "minimum-ascii-delete-sum-for-two-strings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>",
    question:
      "<p>Given two strings <code>s1</code> and\u00a0<code>s2</code>, return <em>the lowest <strong>ASCII</strong> sum of deleted characters to make two strings equal</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's1 = "sea", s2 = "eat"',
        outputText: "231",
        explanation:
          'Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.\nDeleting "t" from "eat" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.',
      },
      {
        id: 2,
        inputText: 's1 = "delete", s2 = "leet"',
        outputText: "403",
        explanation:
          'Deleting "dee" from "delete" to turn the string into "let",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting "e" from "leet" adds 101[e] to the sum.\nAt the end, both strings are equal to "let", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into "lee" or "eet", we would get answers of 433 or 417, which are higher.',
      },
    ],
    tests: '["sea", "delete"]',
    answer: "[231, 403]",
    code: "/**\n * @param {string} s1\n * @param {string} s2\n * @return {number}\n */\nvar minimumDeleteSum = function(s1, s2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 713,
    title: "Subarray Product Less Than K",
    titleSlug: "subarray-product-less-than-k",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li><code>0 &lt;= k &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than </em><code>k</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [10,5,2,6], k = 100",
        outputText: "8",
        explanation:
          "The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3], k = 0",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[[10, 5, 2, 6], [1, 2, 3]]",
    answer: "[8, 0]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar numSubarrayProductLessThanK = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 717,
    title: "1-bit and 2-bit Characters",
    titleSlug: "1-bit-and-2-bit-characters",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li>The first character can be represented by one bit <code>0</code>.</li> <li>The second character can be represented by two bits (<code>10</code> or <code>11</code>).</li> <li><code>1 &lt;= bits.length &lt;= 1000</code></li> <li><code>bits[i]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>We have two special characters:</p><p>Given a binary array <code>bits</code> that ends with <code>0</code>, return <code>true</code> if the last character must be a one-bit character.</p>",
    examples: [
      {
        id: 1,
        inputText: "bits = [1,0,0]",
        outputText: "true",
        explanation:
          "The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.",
      },
      {
        id: 2,
        inputText: "bits = [1,1,1,0]",
        outputText: "false",
        explanation:
          "The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.",
      },
    ],
    tests: "[[1, 0, 0], [1, 1, 1, 0]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} bits\n * @return {boolean}\n */\nvar isOneBitCharacter = function(bits) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 718,
    title: "Maximum Length of Repeated Subarray",
    titleSlug: "maximum-length-of-repeated-subarray",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function",
    ],
    constaints:
      "<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 100</code></li>",
    question:
      "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>the maximum length of a subarray that appears in <strong>both</strong> arrays</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]",
        outputText: "3",
        explanation: "The repeated subarray with maximum length is [3,2,1].",
      },
      {
        id: 2,
        inputText: "nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]",
        outputText: "5",
        explanation:
          "The repeated subarray with maximum length is [0,0,0,0,0].",
      },
    ],
    tests: "[[1, 2, 3, 2, 1], [0, 0, 0, 0, 0]]",
    answer: "[3, 5]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findLength = function(nums1, nums2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 720,
    title: "Longest Word in Dictionary",
    titleSlug: "longest-word-in-dictionary",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Trie", "Sorting"],
    constaints:
      "<li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 30</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li>",
    question:
      "<p>Given an array of strings <code>words</code> representing an English Dictionary, return <em>the longest word in</em> <code>words</code> <em>that can be built one character at a time by other words in</em> <code>words</code>.</p><p>If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.</p><p>Note that the word should be built from left to right with each additional character being added to the end of a previous word.\u00a0</p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["w","wo","wor","worl","world"]',
        outputText: '"world"',
        explanation:
          'The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".',
      },
      {
        id: 2,
        inputText: 'words = ["a","banana","app","appl","ap","apply","apple"]',
        outputText: '"apple"',
        explanation:
          'Both "apply" and "apple" can be built from other words in the dictionary. However, "apple" is lexicographically smaller than "apply".',
      },
    ],
    tests:
      '[["w", "wo", "wor", "worl", "world"], ["a", "banana", "app", "appl", "ap", "apply", "apple"]]',
    answer: '["world", "apple"]',
    code: "/**\n * @param {string[]} words\n * @return {string}\n */\nvar longestWord = function(words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 721,
    title: "Accounts Merge",
    titleSlug: "accounts-merge",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Sorting",
    ],
    constaints:
      "<li><code>1 &lt;= accounts.length &lt;= 1000</code></li> <li><code>2 &lt;= accounts[i].length &lt;= 10</code></li> <li><code>1 &lt;= accounts[i][j].length &lt;= 30</code></li> <li><code>accounts[i][0]</code> consists of English letters.</li> <li><code>accounts[i][j] (for j &gt; 0)</code> is a valid email.</li>",
    question:
      "<p>Given a list of <code>accounts</code> where each element <code>accounts[i]</code> is a list of strings, where the first element <code>accounts[i][0]</code> is a name, and the rest of the elements are <strong>emails</strong> representing emails of the account.</p><p>Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p><p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails <strong>in sorted order</strong>. The accounts themselves can be returned in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'accounts = [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]',
        outputText:
          '[["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]',
        explanation:
          "The first and second John's are the same person as they have the common email \"johnsmith@mail.com\".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.",
      },
      {
        id: 2,
        inputText:
          'accounts = [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]',
        outputText:
          '[["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"],["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]',
        explanation: "",
      },
    ],
    tests:
      '[[["John", "johnsmith@mail.com", "john_newyork@mail.com"], ["John", "johnsmith@mail.com", "john00@mail.com"], ["Mary", "mary@mail.com"], ["John", "johnnybravo@mail.com"]], [["Gabe", "Gabe0@m.co", "Gabe3@m.co", "Gabe1@m.co"], ["Kevin", "Kevin3@m.co", "Kevin5@m.co", "Kevin0@m.co"], ["Ethan", "Ethan5@m.co", "Ethan4@m.co", "Ethan0@m.co"], ["Hanzo", "Hanzo3@m.co", "Hanzo1@m.co", "Hanzo0@m.co"], ["Fern", "Fern5@m.co", "Fern1@m.co", "Fern0@m.co"]]]',
    answer:
      '[[["John", "john00@mail.com", "john_newyork@mail.com", "johnsmith@mail.com"], ["Mary", "mary@mail.com"], ["John", "johnnybravo@mail.com"]], [["Ethan", "Ethan0@m.co", "Ethan4@m.co", "Ethan5@m.co"], ["Gabe", "Gabe0@m.co", "Gabe1@m.co", "Gabe3@m.co"], ["Hanzo", "Hanzo0@m.co", "Hanzo1@m.co", "Hanzo3@m.co"], ["Kevin", "Kevin0@m.co", "Kevin3@m.co", "Kevin5@m.co"], ["Fern", "Fern0@m.co", "Fern1@m.co", "Fern5@m.co"]]]',
    code: "/**\n * @param {string[][]} accounts\n * @return {string[][]}\n */\nvar accountsMerge = function(accounts) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 724,
    title: "Find Pivot Index",
    titleSlug: "find-pivot-index",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>Given an array of integers <code>nums</code>, calculate the <strong>pivot index</strong> of this array.</p><p>The <strong>pivot index</strong> is the index where the sum of all the numbers <strong>strictly</strong> to the left of the index is equal to the sum of all the numbers <strong>strictly</strong> to the index's right.</p><p>If the index is on the left edge of the array, then the left sum is <code>0</code> because there are no elements to the left. This also applies to the right edge of the array.</p><p>Return <em>the <strong>leftmost pivot index</strong></em>. If no such index exists, return <code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,7,3,6,5,6]",
        outputText: "3",
        explanation:
          "The pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3]",
        outputText: "-1",
        explanation:
          "There is no index that satisfies the conditions in the problem statement.",
      },
      {
        id: 3,
        inputText: "nums = [2,1,-1]",
        outputText: "0",
        explanation:
          "The pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0",
      },
    ],
    tests: "[[1, 7, 3, 6, 5, 6], [1, 2, 3], [2, 1, -1]]",
    answer: "[3, -1, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar pivotIndex = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 725,
    title: "Split Linked List in Parts",
    titleSlug: "split-linked-list-in-parts",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[0, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> <li><code>1 &lt;= k &lt;= 50</code></li>",
    question:
      "<p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, split the linked list into <code>k</code> consecutive linked list parts.</p><p>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.</p><p>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</p><p>Return <em>an array of the </em><code>k</code><em> parts</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3], k = 5",
        outputText: "[[1],[2],[3],[],[]]",
        explanation:
          "The first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].",
      },
      {
        id: 2,
        inputText: "head = [1,2,3,4,5,6,7,8,9,10], k = 3",
        outputText: "[[1,2,3,4],[5,6,7],[8,9,10]]",
        explanation:
          "The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.",
      },
    ],
    tests: "[[1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]",
    answer: "[[[1], [2], [3], [], []], [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode[]}\n */\nvar splitListToParts = function(head, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 728,
    title: "Self Dividing Numbers",
    titleSlug: "self-dividing-numbers",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li>For example, <code>128</code> is <strong>a self-dividing number</strong> because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.</li> <li><code>1 &lt;= left &lt;= right &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>A <strong>self-dividing number</strong> is a number that is divisible by every digit it contains.</p><p>A <strong>self-dividing number</strong> is not allowed to contain the digit zero.</p><p>Given two integers <code>left</code> and <code>right</code>, return <em>a list of all the <strong>self-dividing numbers</strong> in the range</em> <code>[left, right]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "left = 1, right = 22",
        outputText: "[1,2,3,4,5,6,7,8,9,11,12,15,22]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "left = 47, right = 85",
        outputText: "[48,55,66,77]",
        explanation: "",
      },
    ],
    tests: "[1, 47]",
    answer: "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], [48, 55, 66, 77]]",
    code: "/**\n * @param {number} left\n * @param {number} right\n * @return {number[]}\n */\nvar selfDividingNumbers = function(left, right) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 729,
    title: "My Calendar I",
    titleSlug: "my-calendar-i",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Binary Search", "Design", "Segment Tree", "Ordered Set"],
    constaints:
      "<li><code>MyCalendar()</code> Initializes the calendar object.</li> <li><code>boolean book(int start, int end)</code> Returns <code>true</code> if the event can be added to the calendar successfully without causing a <strong>double booking</strong>. Otherwise, return <code>false</code> and do not add the event to the calendar.</li> <li><code>0 &lt;= start &lt; end &lt;= 10<sup>9</sup></code></li> <li>At most <code>1000</code> calls will be made to <code>book</code>.</li>",
    question:
      "<p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a <strong>double booking</strong>.</p><p>A <strong>double booking</strong> happens when two events have some non-empty intersection (i.e., some moment is common to both events.).</p><p>The event can be represented as a pair of integers <code>start</code> and <code>end</code> that represents a booking on the half-open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p><p>Implement the <code>MyCalendar</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MyCalendar", "book", "book", "book"]\n[[], [10, 20], [15, 25], [20, 30]]',
        outputText: "[null, true, false, true]",
        explanation:
          "MyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.",
      },
    ],
    tests: '[["MyCalendar", "book", "book", "book"]]',
    answer: "[[null, true, false, true]]",
    code: "\nvar MyCalendar = function() {\n    \n};\n\n/** \n * @param {number} start \n * @param {number} end\n * @return {boolean}\n */\nMyCalendar.prototype.book = function(start, end) {\n    \n};\n\n/** \n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 735,
    title: "Asteroid Collision",
    titleSlug: "asteroid-collision",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Stack", "Simulation"],
    constaints:
      "<li><code>2 &lt;= asteroids.length &lt;= 10<sup>4</sup></code></li> <li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li> <li><code>asteroids[i] != 0</code></li>",
    question:
      "<p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p><p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p><p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>",
    examples: [
      {
        id: 1,
        inputText: "asteroids = [5,10,-5]",
        outputText: "[5,10]",
        explanation:
          "The 10 and -5 collide resulting in 10. The 5 and 10 never collide.",
      },
      {
        id: 2,
        inputText: "asteroids = [8,-8]",
        outputText: "[]",
        explanation: "The 8 and -8 collide exploding each other.",
      },
      {
        id: 3,
        inputText: "asteroids = [10,2,-5]",
        outputText: "[10]",
        explanation:
          "The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.",
      },
    ],
    tests: "[[5, 10, -5], [8, -8], [10, 2, -5]]",
    answer: "[[5, 10], [], [10]]",
    code: "/**\n * @param {number[]} asteroids\n * @return {number[]}\n */\nvar asteroidCollision = function(asteroids) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 738,
    title: "Monotone Increasing Digits",
    titleSlug: "monotone-increasing-digits",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Greedy"],
    constaints: "<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>An integer has <strong>monotone increasing digits</strong> if and only if each pair of adjacent digits <code>x</code> and <code>y</code> satisfy <code>x &lt;= y</code>.</p><p>Given an integer <code>n</code>, return <em>the largest number that is less than or equal to </em><code>n</code><em> with <strong>monotone increasing digits</strong></em>.</p>",
    examples: [
      { id: 1, inputText: "n = 10", outputText: "9", explanation: "" },
      { id: 2, inputText: "n = 1234", outputText: "1234", explanation: "" },
      { id: 3, inputText: "n = 332", outputText: "299", explanation: "" },
    ],
    tests: "[10, 1234, 332]",
    answer: "[9, 1234, 299]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar monotoneIncreasingDigits = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 739,
    title: "Daily Temperatures",
    titleSlug: "daily-temperatures",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Stack", "Monotonic Stack"],
    constaints:
      "<li><code>1 &lt;=\u00a0temperatures.length &lt;= 10<sup>5</sup></code></li> <li><code>30 &lt;=\u00a0temperatures[i] &lt;= 100</code></li>",
    question:
      "<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>",
    examples: [
      {
        id: 1,
        inputText: "temperatures = [73,74,75,71,69,72,76,73]",
        outputText: "[1,1,4,2,1,1,0,0]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "temperatures = [30,40,50,60]",
        outputText: "[1,1,1,0]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "temperatures = [30,60,90]",
        outputText: "[1,1,0]",
        explanation: "",
      },
    ],
    tests: "[[73, 74, 75, 71, 69, 72, 76, 73], [30, 40, 50, 60], [30, 60, 90]]",
    answer: "[[1, 1, 4, 2, 1, 1, 0, 0], [1, 1, 1, 0], [1, 1, 0]]",
    code: "/**\n * @param {number[]} temperatures\n * @return {number[]}\n */\nvar dailyTemperatures = function(temperatures) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 740,
    title: "Delete and Earn",
    titleSlug: "delete-and-earn",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Dynamic Programming"],
    constaints:
      "<li>Pick any <code>nums[i]</code> and delete it to earn <code>nums[i]</code> points. Afterwards, you must delete <b>every</b> element equal to <code>nums[i] - 1</code> and <strong>every</strong> element equal to <code>nums[i] + 1</code>.</li> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code>. You want to maximize the number of points you get by performing the following operation any number of times:</p><p>Return <em>the <strong>maximum number of points</strong> you can earn by applying the above operation some number of times</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,4,2]",
        outputText: "6",
        explanation:
          "You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points.",
      },
      {
        id: 2,
        inputText: "nums = [2,2,3,3,3,4]",
        outputText: "9",
        explanation:
          "You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points.",
      },
    ],
    tests: "[[3, 4, 2], [2, 2, 3, 3, 3, 4]]",
    answer: "[6, 9]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar deleteAndEarn = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 742,
    title: "To Lower Case",
    titleSlug: "to-lower-case",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of printable ASCII characters.</li>",
    question:
      "<p>Given a string <code>s</code>, return <em>the string after replacing every uppercase letter with the same lowercase letter</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "Hello"',
        outputText: '"hello"',
        explanation: "",
      },
      { id: 2, inputText: 's = "here"', outputText: '"here"', explanation: "" },
      {
        id: 3,
        inputText: 's = "LOVELY"',
        outputText: '"lovely"',
        explanation: "",
      },
    ],
    tests: '["Hello", "here", "LOVELY"]',
    answer: '["hello", "here", "lovely"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar toLowerCase = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 744,
    title: "Network Delay Time",
    titleSlug: "network-delay-time",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path",
    ],
    constaints:
      "<li><code>1 &lt;= k &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= times.length &lt;= 6000</code></li> <li><code>times[i].length == 3</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li><code>0 &lt;= w<sub>i</sub> &lt;= 100</code></li> <li>All the pairs <code>(u<sub>i</sub>, v<sub>i</sub>)</code> are <strong>unique</strong>. (i.e., no multiple edges.)</li>",
    question:
      "<p>You are given a network of <code>n</code> nodes, labeled from <code>1</code> to <code>n</code>. You are also given <code>times</code>, a list of travel times as directed edges <code>times[i] = (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>)</code>, where <code>u<sub>i</sub></code> is the source node, <code>v<sub>i</sub></code> is the target node, and <code>w<sub>i</sub></code> is the time it takes for a signal to travel from source to target.</p><p>We will send a signal from a given node <code>k</code>. Return <em>the <strong>minimum</strong> time it takes for all the</em> <code>n</code> <em>nodes to receive the signal</em>. If it is impossible for all the <code>n</code> nodes to receive the signal, return <code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "times = [[1,2,1]], n = 2, k = 1",
        outputText: "1",
        explanation: "",
      },
      {
        id: 3,
        inputText: "times = [[1,2,1]], n = 2, k = 2",
        outputText: "-1",
        explanation: "",
      },
    ],
    tests: "[[[2, 1, 1], [2, 3, 1], [3, 4, 1]], [[1, 2, 1]], [[1, 2, 1]]]",
    answer: "[2, 1, -1]",
    code: "/**\n * @param {number[][]} times\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar networkDelayTime = function(times, n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 745,
    title: "Find Smallest Letter Greater Than Target",
    titleSlug: "find-smallest-letter-greater-than-target",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>2 &lt;= letters.length &lt;= 10<sup>4</sup></code></li> <li><code>letters[i]</code> is a lowercase English letter.</li> <li><code>letters</code> is sorted in <strong>non-decreasing</strong> order.</li> <li><code>letters</code> contains at least two different characters.</li> <li><code>target</code> is a lowercase English letter.</li>",
    question:
      "<p>You are given an array of characters <code>letters</code> that is sorted in <strong>non-decreasing order</strong>, and a character <code>target</code>. There are <strong>at least two different</strong> characters in <code>letters</code>.</p><p>Return <em>the smallest character in </em><code>letters</code><em> that is lexicographically greater than </em><code>target</code>. If such a character does not exist, return the first character in <code>letters</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'letters = ["c","f","j"], target = "a"',
        outputText: '"c"',
        explanation:
          "The smallest character that is lexicographically greater than 'a' in letters is 'c'.",
      },
      {
        id: 2,
        inputText: 'letters = ["c","f","j"], target = "c"',
        outputText: '"f"',
        explanation:
          "The smallest character that is lexicographically greater than 'c' in letters is 'f'.",
      },
      {
        id: 3,
        inputText: 'letters = ["x","x","y","y"], target = "z"',
        outputText: '"x"',
        explanation:
          "There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].",
      },
    ],
    tests: '[["c", "f", "j"], ["c", "f", "j"], ["x", "x", "y", "y"]]',
    answer: '["c", "f", "x"]',
    code: "/**\n * @param {character[]} letters\n * @param {character} target\n * @return {character}\n */\nvar nextGreatestLetter = function(letters, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 749,
    title: "Shortest Completing Word",
    titleSlug: "shortest-completing-word",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= licensePlate.length &lt;= 7</code></li> <li><code>licensePlate</code> contains digits, letters (uppercase or lowercase), or space <code>' '</code>.</li> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 15</code></li> <li><code>words[i]</code> consists of lower case English letters.</li>",
    question:
      '<p>Given a string <code>licensePlate</code> and an array of strings <code>words</code>, find the <strong>shortest completing</strong> word in <code>words</code>.</p><p>A <strong>completing</strong> word is a word that <strong>contains all the letters</strong> in <code>licensePlate</code>. <strong>Ignore numbers and spaces</strong> in <code>licensePlate</code>, and treat letters as <strong>case insensitive</strong>. If a letter appears more than once in <code>licensePlate</code>, then it must appear in the word the same number of times or more.</p><p>For example, if <code>licensePlate</code><code> = "aBc 12c"</code>, then it contains letters <code>\'a\'</code>, <code>\'b\'</code> (ignoring case), and <code>\'c\'</code> twice. Possible <strong>completing</strong> words are <code>"abccdef"</code>, <code>"caaacab"</code>, and <code>"cbca"</code>.</p><p>Return <em>the shortest <strong>completing</strong> word in </em><code>words</code><em>.</em> It is guaranteed an answer exists. If there are multiple shortest <strong>completing</strong> words, return the <strong>first</strong> one that occurs in <code>words</code>.</p>',
    examples: [
      {
        id: 1,
        inputText:
          'licensePlate = "1s3 PSt", words = ["step","steps","stripe","stepple"]',
        outputText: '"steps"',
        explanation:
          "licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\"steps\" contains 't', 'p', and both 's' characters.\n\"stripe\" is missing an 's'.\n\"stepple\" is missing an 's'.\nSince \"steps\" is the only word containing all the letters, that is the answer.",
      },
      {
        id: 2,
        inputText:
          'licensePlate = "1s3 456", words = ["looks","pest","stew","show"]',
        outputText: '"pest"',
        explanation:
          'licensePlate only contains the letter \'s\'. All the words contain \'s\', but among these "pest", "stew", and "show" are shortest. The answer is "pest" because it is the word that appears earliest of the 3.',
      },
    ],
    tests: '["1s3 PSt", "1s3 456"]',
    answer: '["steps", "pest"]',
    code: "/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */\nvar shortestCompletingWord = function(licensePlate, words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 755,
    title: "Reach a Number",
    titleSlug: "reach-a-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Binary Search"],
    constaints:
      "<li>On each move, you can either go left or right.</li> <li>During the <code>i<sup>th</sup></code> move (starting from <code>i == 1</code> to <code>i == numMoves</code>), you take <code>i</code> steps in the chosen direction.</li> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> <li><code>target != 0</code></li>",
    question:
      "<p>You are standing at position <code>0</code> on an infinite number line. There is a destination at position <code>target</code>.</p><p>You can make some number of moves <code>numMoves</code> so that:</p><p>Given the integer <code>target</code>, return <em>the <strong>minimum</strong> number of moves required (i.e., the minimum </em><code>numMoves</code><em>) to reach the destination</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "target = 2",
        outputText: "3",
        explanation: "On the 1",
      },
      {
        id: 2,
        inputText: "target = 3",
        outputText: "2",
        explanation: "On the 1",
      },
    ],
    tests: "[2, 3]",
    answer: "[3, 2]",
    code: "/**\n * @param {number} target\n * @return {number}\n */\nvar reachNumber = function(target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 757,
    title: "Pyramid Transition Matrix",
    titleSlug: "pyramid-transition-matrix",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Bit Manipulation", "Depth-First Search", "Breadth-First Search"],
    constaints:
      "<li>For example, <code>\"ABC\"</code> represents a triangular pattern with a <code>'C'</code> block stacked on top of an <code>'A'</code> (left) and <code>'B'</code> (right) block. Note that this is different from <code>\"BAC\"</code> where <code>'B'</code> is on the left bottom and <code>'A'</code> is on the right bottom.</li> <li><code>2 &lt;= bottom.length &lt;= 6</code></li> <li><code>0 &lt;= allowed.length &lt;= 216</code></li> <li><code>allowed[i].length == 3</code></li> <li>The letters in all input strings are from the set <code>{'A', 'B', 'C', 'D', 'E', 'F'}</code>.</li> <li>All the values of <code>allowed</code> are <strong>unique</strong>.</li>",
    question:
      "<p>You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains <strong>one less block</strong> than the row beneath it and is centered on top.</p><p>To make the pyramid aesthetically pleasing, there are only specific <strong>triangular patterns</strong> that are allowed. A triangular pattern consists of a <strong>single block</strong> stacked on top of <strong>two blocks</strong>. The patterns are given\u00a0as a list of\u00a0three-letter strings <code>allowed</code>, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.</p><p>You start with a bottom row of blocks <code>bottom</code>, given as a single string, that you <strong>must</strong> use as the base of the pyramid.</p><p>Given <code>bottom</code> and <code>allowed</code>, return <code>true</code><em> if you can build the pyramid all the way to the top such that <strong>every triangular pattern</strong> in the pyramid is in </em><code>allowed</code><em>, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'bottom = "BCD", allowed = ["BCC","CDE","CEA","FFF"]',
        outputText: "true",
        explanation:
          'The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build "CE" on level 2 and then build "A" on level 1.\nThere are three triangular patterns in the pyramid, which are "BCC", "CDE", and "CEA". All are allowed.',
      },
      {
        id: 2,
        inputText: 'bottom = "AAAA", allowed = ["AAB","AAC","BCD","BBE","DEF"]',
        outputText: "false",
        explanation:
          "The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.",
      },
    ],
    tests: '["BCD", "AAAA"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} bottom\n * @param {string[]} allowed\n * @return {boolean}\n */\nvar pyramidTransition = function(bottom, allowed) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 759,
    title: "Set Intersection Size At Least Two",
    titleSlug: "set-intersection-size-at-least-two",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li>For example, if <code>intervals = [[1,3], [3,7], [8,9]]</code>, then <code>[1,2,4,7,8,9]</code> and <code>[2,3,4,8,9]</code> are <strong>containing sets</strong>.</li> <li><code>1 &lt;= intervals.length &lt;= 3000</code></li> <li><code>intervals[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>8</sup></code></li>",
    question:
      "<p>You are given a 2D integer array <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represents all the integers from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> inclusively.</p><p>A <strong>containing set</strong> is an array <code>nums</code> where each interval from <code>intervals</code> has <strong>at least two</strong> integers in <code>nums</code>.</p><p>Return <em>the minimum possible size of a containing set</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "intervals = [[1,3],[3,7],[8,9]]",
        outputText: "5",
        explanation:
          "let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4.",
      },
      {
        id: 2,
        inputText: "intervals = [[1,3],[1,4],[2,5],[3,5]]",
        outputText: "3",
        explanation:
          "let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2.",
      },
      {
        id: 3,
        inputText: "intervals = [[1,2],[2,3],[2,4],[4,5]]",
        outputText: "5",
        explanation:
          "let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4.",
      },
    ],
    tests:
      "[[[1, 3], [3, 7], [8, 9]], [[1, 3], [1, 4], [2, 5], [3, 5]], [[1, 2], [2, 3], [2, 4], [4, 5]]]",
    answer: "[5, 3, 5]",
    code: "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar intersectionSizeTwo = function(intervals) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 764,
    title: "N-ary Tree Level Order Traversal",
    titleSlug: "n-ary-tree-level-order-traversal",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Breadth-First Search"],
    constaints:
      "<li>The height of the n-ary tree is less than or equal to <code>1000</code></li> <li>The total number of nodes is between <code>[0, 10<sup>4</sup>]</code></li>",
    question:
      "<p>Given an n-ary tree, return the <em>level order</em> traversal of its nodes' values.</p><p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,3,2,4,null,5,6]",
        outputText: "[[1],[3,2,4],[5,6]]",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        outputText: "[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]",
        explanation: "",
      },
    ],
    tests:
      "[[1, null, 3, 2, 4, null, 5, 6], [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]]",
    answer:
      "[[[1], [3, 2, 4], [5, 6]], [[1], [2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [14]]]",
    code: "/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node|null} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 767,
    title: "Prime Number of Set Bits in Binary Representation",
    titleSlug: "prime-number-of-set-bits-in-binary-representation",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation"],
    constaints:
      "<li>For example, <code>21</code> written in binary is <code>10101</code>, which has <code>3</code> set bits.</li> <li><code>1 &lt;= left &lt;= right &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= right - left &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given two integers <code>left</code> and <code>right</code>, return <em>the <strong>count</strong> of numbers in the <strong>inclusive</strong> range </em><code>[left, right]</code><em> having a <strong>prime number of set bits</strong> in their binary representation</em>.</p><p>Recall that the <strong>number of set bits</strong> an integer has is the number of <code>1</code>'s present when written in binary.</p>",
    examples: [
      {
        id: 1,
        inputText: "left = 6, right = 10",
        outputText: "4",
        explanation:
          "6  -> 110 (2 set bits, 2 is prime)\n7  -> 111 (3 set bits, 3 is prime)\n8  -> 1000 (1 set bit, 1 is not prime)\n9  -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.",
      },
      {
        id: 2,
        inputText: "left = 10, right = 15",
        outputText: "5",
        explanation:
          "10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.",
      },
    ],
    tests: "[6, 10]",
    answer: "[4, 5]",
    code: "/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar countPrimeSetBits = function(left, right) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 768,
    title: "Partition Labels",
    titleSlug: "partition-labels",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Two Pointers", "String", "Greedy"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of lowercase English letters.</li>",
    question:
      "<p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part.</p><p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p><p>Return <em>a list of integers representing the size of these parts</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "ababcbacadefegdehijhklij"',
        outputText: "[9,7,8]",
        explanation:
          'The partition is "ababcbaca", "defegde", "hijhklij".\nThis is a partition so that each letter appears in at most one part.\nA partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.',
      },
      {
        id: 2,
        inputText: 's = "eccbbbbdec"',
        outputText: "[10]",
        explanation: "",
      },
    ],
    tests: '["ababcbacadefegdehijhklij", "eccbbbbdec"]',
    answer: "[[9, 7, 8], [10]]",
    code: "/**\n * @param {string} s\n * @return {number[]}\n */\nvar partitionLabels = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 769,
    title: "Largest Plus Sign",
    titleSlug: "largest-plus-sign",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 500</code></li> <li><code>1 &lt;= mines.length &lt;= 5000</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt; n</code></li> <li>All the pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are <strong>unique</strong>.</li>",
    question:
      "<p>You are given an integer <code>n</code>. You have an <code>n x n</code> binary grid <code>grid</code> with all values initially <code>1</code>'s except for some indices given in the array <code>mines</code>. The <code>i<sup>th</sup></code> element of the array <code>mines</code> is defined as <code>mines[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> where <code>grid[x<sub>i</sub>][y<sub>i</sub>] == 0</code>.</p><p>Return <em>the order of the largest <strong>axis-aligned</strong> plus sign of </em>1<em>'s contained in </em><code>grid</code>. If there is none, return <code>0</code>.</p><p>An <strong>axis-aligned plus sign</strong> of <code>1</code>'s of order <code>k</code> has some center <code>grid[r][c] == 1</code> along with four arms of length <code>k - 1</code> going up, down, left, and right, and made of <code>1</code>'s. Note that there could be <code>0</code>'s or <code>1</code>'s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for <code>1</code>'s.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5, mines = [[4,2]]",
        outputText: "2",
        explanation:
          "In the above grid, the largest plus sign can only be of order 2. One of them is shown.",
      },
      {
        id: 2,
        inputText: "n = 1, mines = [[0,0]]",
        outputText: "0",
        explanation: "There is no plus sign, so return 0.",
      },
    ],
    tests: "[5, 1]",
    answer: "[2, 0]",
    code: "/**\n * @param {number} n\n * @param {number[][]} mines\n * @return {number}\n */\nvar orderOfLargestPlusSign = function(n, mines) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 770,
    title: "Couples Holding Hands",
    titleSlug: "couples-holding-hands",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Greedy",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
    ],
    constaints:
      "<li><code>2n == row.length</code></li> <li><code>2 &lt;= n &lt;= 30</code></li> <li><code>n</code> is even.</li> <li><code>0 &lt;= row[i] &lt; 2n</code></li> <li>All the elements of <code>row</code> are <strong>unique</strong>.</li>",
    question:
      "<p>There are <code>n</code> couples sitting in <code>2n</code> seats arranged in a row and want to hold hands.</p><p>The people and seats are represented by an integer array <code>row</code> where <code>row[i]</code> is the ID of the person sitting in the <code>i<sup>th</sup></code> seat. The couples are numbered in order, the first couple being <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so on with the last couple being <code>(2n - 2, 2n - 1)</code>.</p><p>Return <em>the minimum number of swaps so that every couple is sitting side by side</em>. A swap consists of choosing any two people, then they stand up and switch seats.</p>",
    examples: [
      {
        id: 1,
        inputText: "row = [0,2,1,3]",
        outputText: "1",
        explanation:
          "We only need to swap the second (row[1]) and third (row[2]) person.",
      },
      {
        id: 2,
        inputText: "row = [3,2,0,1]",
        outputText: "0",
        explanation: "All couples are already seated side by side.",
      },
    ],
    tests: "[[0, 2, 1, 3], [3, 2, 0, 1]]",
    answer: "[1, 0]",
    code: "/**\n * @param {number[]} row\n * @return {number}\n */\nvar minSwapsCouples = function(row) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 774,
    title: "Maximum Depth of N-ary Tree",
    titleSlug: "maximum-depth-of-n-ary-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Breadth-First Search"],
    constaints:
      "<li>The total number of nodes is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li>",
    question:
      "<p>Given a n-ary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,3,2,4,null,5,6]",
        outputText: "3",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        outputText: "5",
        explanation: "",
      },
    ],
    tests:
      "[[1, null, 3, 2, 4, null, 5, 6], [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]]",
    answer: "[3, 5]",
    code: "/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node|null} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 775,
    title: "N-ary Tree Preorder Traversal",
    titleSlug: "n-ary-tree-preorder-traversal",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Stack", "Tree", "Depth-First Search"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>The height of the n-ary tree is less than or equal to <code>1000</code>.</li>",
    question:
      "<p>Given the <code>root</code> of an n-ary tree, return <em>the preorder traversal of its nodes' values</em>.</p><p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,3,2,4,null,5,6]",
        outputText: "[1,3,5,6,2,4]",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        outputText: "[1,2,3,6,7,11,14,4,8,12,5,9,13,10]",
        explanation: "",
      },
    ],
    tests:
      "[[1, null, 3, 2, 4, null, 5, 6], [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]]",
    answer:
      "[[1, 3, 5, 6, 2, 4], [1, 2, 3, 6, 7, 11, 14, 4, 8, 12, 5, 9, 13, 10]]",
    code: "/**\n * // Definition for a Node.\n * function Node(val, children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node|null} root\n * @return {number[]}\n */\nvar preorder = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 776,
    title: "N-ary Tree Postorder Traversal",
    titleSlug: "n-ary-tree-postorder-traversal",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Stack", "Tree", "Depth-First Search"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>The height of the n-ary tree is less than or equal to <code>1000</code>.</li>",
    question:
      "<p>Given the <code>root</code> of an n-ary tree, return <em>the postorder traversal of its nodes' values</em>.</p><p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,3,2,4,null,5,6]",
        outputText: "[5,6,3,2,4,1]",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        outputText: "[2,6,14,11,7,3,12,8,4,13,9,10,5,1]",
        explanation: "",
      },
    ],
    tests:
      "[[1, null, 3, 2, 4, null, 5, 6], [1, null, 2, 3, 4, 5, null, null, 6, 7, null, 8, null, 9, 10, null, null, 11, null, 12, null, 13, null, null, 14]]",
    answer:
      "[[5, 6, 3, 2, 4, 1], [2, 6, 14, 11, 7, 3, 12, 8, 4, 13, 9, 10, 5, 1]]",
    code: "/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node|null} root\n * @return {number[]}\n */\nvar postorder = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 777,
    title: "Toeplitz Matrix",
    titleSlug: "toeplitz-matrix",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix"],
    constaints:
      "<li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 20</code></li> <li><code>0 &lt;= matrix[i][j] &lt;= 99</code></li> <li>What if the <code>matrix</code> is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?</li> <li>What if the <code>matrix</code> is so large that you can only load up a partial row into the memory at once?</li>",
    question:
      "<p>Given an <code>m x n</code> <code>matrix</code>, return\u00a0<em><code>true</code>\u00a0if the matrix is Toeplitz. Otherwise, return <code>false</code>.</em></p><p>A matrix is <strong>Toeplitz</strong> if every diagonal from top-left to bottom-right has the same elements.</p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]",
        outputText: "true",
        explanation:
          'In the above grid, the\u00a0diagonals are:\n"[9]", "[5, 5]", "[1, 1, 1]", "[2, 2, 2]", "[3, 3]", "[4]".\nIn each diagonal all elements are the same, so the answer is True.',
      },
      {
        id: 2,
        inputText: "matrix = [[1,2],[2,2]]",
        outputText: "false",
        explanation: 'The diagonal "[1, 2]" has different elements.',
      },
    ],
    tests: "[[[1, 2, 3, 4], [5, 1, 2, 3], [9, 5, 1, 2]], [[1, 2], [2, 2]]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[][]} matrix\n * @return {boolean}\n */\nvar isToeplitzMatrix = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 778,
    title: "Reorganize String",
    titleSlug: "reorganize-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "String",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Counting",
    ],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of lowercase English letters.</li>",
    question:
      '<p>Given a string <code>s</code>, rearrange the characters of <code>s</code> so that any two adjacent characters are not the same.</p><p>Return <em>any possible rearrangement of</em> <code>s</code> <em>or return</em> <code>""</code> <em>if not possible</em>.</p>',
    examples: [
      { id: 1, inputText: 's = "aab"', outputText: '"aba"', explanation: "" },
      { id: 2, inputText: 's = "aaab"', outputText: '""', explanation: "" },
    ],
    tests: '["aab", "aaab"]',
    answer: '["aba", ""]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar reorganizeString = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 780,
    title: "Max Chunks To Make Sorted",
    titleSlug: "max-chunks-to-make-sorted",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"],
    constaints:
      "<li><code>n == arr.length</code></li> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>0 &lt;= arr[i] &lt; n</code></li> <li>All the elements of <code>arr</code> are <strong>unique</strong>.</li>",
    question:
      "<p>You are given an integer array <code>arr</code> of length <code>n</code> that represents a permutation of the integers in the range <code>[0, n - 1]</code>.</p><p>We split <code>arr</code> into some number of <strong>chunks</strong> (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.</p><p>Return <em>the largest number of chunks we can make to sort the array</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [4,3,2,1,0]",
        outputText: "1",
        explanation:
          "Splitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.",
      },
      {
        id: 2,
        inputText: "arr = [1,0,2,3,4]",
        outputText: "4",
        explanation:
          "We can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.",
      },
    ],
    tests: "[[4, 3, 2, 1, 0], [1, 0, 2, 3, 4]]",
    answer: "[1, 4]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maxChunksToSorted = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 782,
    title: "Jewels and Stones",
    titleSlug: "jewels-and-stones",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;=\u00a0jewels.length, stones.length &lt;= 50</code></li> <li><code>jewels</code> and <code>stones</code> consist of only English letters.</li> <li>All the characters of\u00a0<code>jewels</code> are <strong>unique</strong>.</li>",
    question:
      '<p>You\'re given strings <code>jewels</code> representing the types of stones that are jewels, and <code>stones</code> representing the stones you have. Each character in <code>stones</code> is a type of stone you have. You want to know how many of the stones you have are also jewels.</p><p>Letters are case sensitive, so <code>"a"</code> is considered a different type of stone from <code>"A"</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'jewels = "aA", stones = "aAAbbbb"',
        outputText: "3",
        explanation: "",
      },
      {
        id: 2,
        inputText: 'jewels = "z", stones = "ZZ"',
        outputText: "0",
        explanation: "",
      },
    ],
    tests: '["aA", "z"]',
    answer: "[3, 0]",
    code: "/**\n * @param {string} jewels\n * @param {string} stones\n * @return {number}\n */\nvar numJewelsInStones = function(jewels, stones) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 784,
    title: "Insert into a Binary Search Tree",
    titleSlug: "insert-into-a-binary-search-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The number of nodes in\u00a0the tree will be in the range <code>[0,\u00a010<sup>4</sup>]</code>.</li> <li><code>-10<sup>8</sup> &lt;= Node.val &lt;= 10<sup>8</sup></code></li> <li>All the values <code>Node.val</code> are <strong>unique</strong>.</li> <li><code>-10<sup>8</sup> &lt;= val &lt;= 10<sup>8</sup></code></li> <li>It's <strong>guaranteed</strong> that <code>val</code> does not exist in the original BST.</li>",
    question:
      "<p>You are given the <code>root</code> node of a binary search tree (BST) and a <code>value</code> to insert into the tree. Return <em>the root node of the BST after the insertion</em>. It is <strong>guaranteed</strong> that the new value does not exist in the original BST.</p><p><strong>Notice</strong>\u00a0that there may exist\u00a0multiple valid ways for the\u00a0insertion, as long as the tree remains a BST after insertion. You can return <strong>any of them</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [4,2,7,1,3], val = 5",
        outputText: "[4,2,7,1,3,5]",
        explanation: "Another accepted tree is:",
      },
      {
        id: 2,
        inputText: "root = [40,20,60,10,30,50,70], val = 25",
        outputText: "[40,20,60,10,30,50,70,null,null,25]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "root = [4,2,7,1,3,null,null,null,null,null,null], val = 5",
        outputText: "[4,2,7,1,3,5]",
        explanation: "",
      },
    ],
    tests:
      "[[4, 2, 7, 1, 3], [40, 20, 60, 10, 30, 50, 70], [4, 2, 7, 1, 3, null, null, null, null, null, null]]",
    answer:
      "[[4, 2, 7, 1, 3, 5], [40, 20, 60, 10, 30, 50, 70, null, null, 25], [4, 2, 7, 1, 3, 5]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} val\n * @return {TreeNode}\n */\nvar insertIntoBST = function(root, val) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 789,
    title: "Kth Largest Element in a Stream",
    titleSlug: "kth-largest-element-in-a-stream",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Design",
      "Binary Search Tree",
      "Heap (Priority Queue)",
      "Binary Tree",
      "Data Stream",
    ],
    constaints:
      "<li><code>KthLargest(int k, int[] nums)</code> Initializes the object with the integer <code>k</code> and the stream of integers <code>nums</code>.</li> <li><code>int add(int val)</code> Appends the integer <code>val</code> to the stream and returns the element representing the <code>k<sup>th</sup></code> largest element in the stream.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= val &lt;= 10<sup>4</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code>.</li> <li>It is guaranteed that there will be at least <code>k</code> elements in the array when you search for the <code>k<sup>th</sup></code> element.</li>",
    question:
      "<p>Design a class to find the <code>k<sup>th</sup></code> largest element in a stream. Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p><p>Implement <code>KthLargest</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["KthLargest", "add", "add", "add", "add", "add"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]',
        outputText: "[null, 4, 5, 5, 8, 8]",
        explanation:
          "KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8",
      },
    ],
    tests: '[["KthLargest", "add", "add", "add", "add", "add"]]',
    answer: "[[null, 4, 5, 5, 8, 8]]",
    code: "/**\n * @param {number} k\n * @param {number[]} nums\n */\nvar KthLargest = function(k, nums) {\n    \n};\n\n/** \n * @param {number} val\n * @return {number}\n */\nKthLargest.prototype.add = function(val) {\n    \n};\n\n/** \n * Your KthLargest object will be instantiated and called as such:\n * var obj = new KthLargest(k, nums)\n * var param_1 = obj.add(val)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 790,
    title: "Global and Local Inversions",
    titleSlug: "global-and-local-inversions",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li><code>0 &lt;= i &lt; j &lt; n</code></li> <li><code>nums[i] &gt; nums[j]</code></li> <li><code>0 &lt;= i &lt; n - 1</code></li> <li><code>nums[i] &gt; nums[i + 1]</code></li> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt; n</code></li> <li>All the integers of <code>nums</code> are <strong>unique</strong>.</li> <li><code>nums</code> is a permutation of all the numbers in the range <code>[0, n - 1]</code>.</li>",
    question:
      "<p>You are given an integer array <code>nums</code> of length <code>n</code> which represents a permutation of all the integers in the range <code>[0, n - 1]</code>.</p><p>The number of <strong>global inversions</strong> is the number of the different pairs <code>(i, j)</code> where:</p><p>The number of <strong>local inversions</strong> is the number of indices <code>i</code> where:</p><p>Return <code>true</code> <em>if the number of <strong>global inversions</strong> is equal to the number of <strong>local inversions</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,0,2]",
        outputText: "true",
        explanation: "There is 1 global inversion and 1 local inversion.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,0]",
        outputText: "false",
        explanation: "There are 2 global inversions and 1 local inversion.",
      },
    ],
    tests: "[[1, 0, 2], [1, 2, 0]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isIdealPermutation = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 792,
    title: "Binary Search",
    titleSlug: "binary-search",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt; nums[i], target &lt; 10<sup>4</sup></code></li> <li>All the integers in <code>nums</code> are <strong>unique</strong>.</li> <li><code>nums</code> is sorted in ascending order.</li>",
    question:
      "<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p><p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [-1,0,3,5,9,12], target = 9",
        outputText: "4",
        explanation: "9 exists in nums and its index is 4",
      },
      {
        id: 2,
        inputText: "nums = [-1,0,3,5,9,12], target = 2",
        outputText: "-1",
        explanation: "2 does not exist in nums so return -1",
      },
    ],
    tests: "[[-1, 0, 3, 5, 9, 12], [-1, 0, 3, 5, 9, 12]]",
    answer: "[4, -1]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 795,
    title: "K-th Symbol in Grammar",
    titleSlug: "k-th-symbol-in-grammar",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation", "Recursion"],
    constaints:
      "<li>For example, for <code>n = 3</code>, the <code>1<sup>st</sup></code> row is <code>0</code>, the <code>2<sup>nd</sup></code> row is <code>01</code>, and the <code>3<sup>rd</sup></code> row is <code>0110</code>.</li> <li><code>1 &lt;= n &lt;= 30</code></li> <li><code>1 &lt;= k &lt;= 2<sup>n - 1</sup></code></li>",
    question:
      "<p>We build a table of <code>n</code> rows (<strong>1-indexed</strong>). We start by writing <code>0</code> in the <code>1<sup>st</sup></code> row. Now in every subsequent row, we look at the previous row and replace each occurrence of <code>0</code> with <code>01</code>, and each occurrence of <code>1</code> with <code>10</code>.</p><p>Given two integer <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> (<strong>1-indexed</strong>) symbol in the <code>n<sup>th</sup></code> row of a table of <code>n</code> rows.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 1, k = 1",
        outputText: "0",
        explanation: "row 1:",
      },
      {
        id: 2,
        inputText: "n = 2, k = 1",
        outputText: "0",
        explanation: "row 1: 0\nrow 2:",
      },
      {
        id: 3,
        inputText: "n = 2, k = 2",
        outputText: "1",
        explanation: "row 1: 0\nrow 2: 0",
      },
    ],
    tests: "[1, 2, 2]",
    answer: "[0, 0, 1]",
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar kthGrammar = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 797,
    title: "Rabbits in Forest",
    titleSlug: "rabbits-in-forest",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Math", "Greedy"],
    constaints:
      "<li><code>1 &lt;= answers.length &lt;= 1000</code></li> <li><code>0 &lt;= answers[i] &lt; 1000</code></li>",
    question:
      '<p>There is a forest with an unknown number of rabbits. We asked n rabbits <strong>"How many rabbits have the same color as you?"</strong> and collected the answers in an integer array <code>answers</code> where <code>answers[i]</code> is the answer of the <code>i<sup>th</sup></code> rabbit.</p><p>Given the array <code>answers</code>, return <em>the minimum number of rabbits that could be in the forest</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "answers = [1,1,2]",
        outputText: "5",
        explanation:
          'The two rabbits that answered "1" could both be the same color, say red.\nThe rabbit that answered "2" can\'t be red or the answers would be inconsistent.\nSay the rabbit that answered "2" was blue.\nThen there should be 2 other blue rabbits in the forest that didn\'t answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn\'t.',
      },
      {
        id: 2,
        inputText: "answers = [10,10,10]",
        outputText: "11",
        explanation: "",
      },
    ],
    tests: "[[1, 1, 2], [10, 10, 10]]",
    answer: "[5, 11]",
    code: "/**\n * @param {number[]} answers\n * @return {number}\n */\nvar numRabbits = function(answers) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 799,
    title: "Minimum Distance Between BST Nodes",
    titleSlug: "minimum-distance-between-bst-nodes",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[2, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a Binary Search Tree (BST), return <em>the minimum difference between the values of any two different nodes in the tree</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [4,2,6,1,3]",
        outputText: "1",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [1,0,48,null,null,12,49]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[4, 2, 6, 1, 3], [1, 0, 48, null, null, 12, 49]]",
    answer: "[1, 1]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDiffInBST = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 800,
    title: "Letter Case Permutation",
    titleSlug: "letter-case-permutation",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Backtracking", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 12</code></li> <li><code>s</code> consists of lowercase English letters, uppercase English letters, and digits.</li>",
    question:
      "<p>Given a string <code>s</code>, you\u00a0can transform every letter individually to be lowercase or uppercase to create another string.</p><p>Return <em>a list of all possible strings we could create</em>. Return the output in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "a1b2"',
        outputText: '["a1b2","a1B2","A1b2","A1B2"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "3z4"',
        outputText: '["3z4","3Z4"]',
        explanation: "",
      },
    ],
    tests: '["a1b2", "3z4"]',
    answer: '[["a1b2", "a1B2", "A1b2", "A1B2"], ["3z4", "3Z4"]]',
    code: "/**\n * @param {string} s\n * @return {string[]}\n */\nvar letterCasePermutation = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 804,
    title: "Rotated Digits",
    titleSlug: "rotated-digits",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming"],
    constaints:
      "<li><code>0</code>, <code>1</code>, and <code>8</code> rotate to themselves,</li> <li><code>2</code> and <code>5</code> rotate to each other (in this case they are rotated in a different direction, in other words, <code>2</code> or <code>5</code> gets mirrored),</li> <li><code>6</code> and <code>9</code> rotate to each other, and</li> <li>the rest of the numbers do not rotate to any other number and become invalid.</li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>An integer <code>x</code> is a <strong>good</strong> if after rotating each digit individually by 180 degrees, we get a valid number that is different from <code>x</code>. Each digit must be rotated - we cannot choose to leave it alone.</p><p>A number is valid if each digit remains a digit after rotation. For example:</p><p>Given an integer <code>n</code>, return <em>the number of <strong>good</strong> integers in the range </em><code>[1, n]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 10",
        outputText: "4",
        explanation:
          "There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.",
      },
      { id: 2, inputText: "n = 1", outputText: "0", explanation: "" },
      { id: 3, inputText: "n = 2", outputText: "1", explanation: "" },
    ],
    tests: "[10, 1, 2]",
    answer: "[4, 0, 1]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar rotatedDigits = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 805,
    title: "Escape The Ghosts",
    titleSlug: "escape-the-ghosts",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li><code>1 &lt;= ghosts.length &lt;= 100</code></li> <li><code>ghosts[i].length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>There can be <strong>multiple ghosts</strong> in the same location.</li> <li><code>target.length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>target</sub>, y<sub>target</sub> &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point <code>[0, 0]</code>, and you are given a destination point <code>target = [x<sub>target</sub>, y<sub>target</sub>]</code> that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array <code>ghosts</code>, where <code>ghosts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the starting position of the <code>i<sup>th</sup></code> ghost. All inputs are <strong>integral coordinates</strong>.</p><p>Each turn, you and all the ghosts may independently choose to either <strong>move 1 unit</strong> in any of the four cardinal directions: north, east, south, or west, or <strong>stay still</strong>. All actions happen <strong>simultaneously</strong>.</p><p>You escape if and only if you can reach the target <strong>before</strong> any ghost reaches you. If you reach any square (including the target) at the <strong>same time</strong> as a ghost, it <strong>does not</strong> count as an escape.</p><p>Return <code>true</code><em> if it is possible to escape regardless of how the ghosts move, otherwise return </em><code>false</code><em>.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "ghosts = [[1,0],[0,3]], target = [0,1]",
        outputText: "true",
        explanation:
          "You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.",
      },
      {
        id: 2,
        inputText: "ghosts = [[1,0]], target = [2,0]",
        outputText: "false",
        explanation:
          "You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.",
      },
      {
        id: 3,
        inputText: "ghosts = [[2,0]], target = [1,0]",
        outputText: "false",
        explanation: "The ghost can reach the target at the same time as you.",
      },
    ],
    tests: "[[[1, 0], [0, 3]], [[1, 0]], [[2, 0]]]",
    answer: "[true, false, false]",
    code: "/**\n * @param {number[][]} ghosts\n * @param {number[]} target\n * @return {boolean}\n */\nvar escapeGhosts = function(ghosts, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 807,
    title: "Custom Sort String",
    titleSlug: "custom-sort-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sorting"],
    constaints:
      "<li><code>1 &lt;= order.length &lt;= 26</code></li> <li><code>1 &lt;= s.length &lt;= 200</code></li> <li><code>order</code> and <code>s</code> consist of lowercase English letters.</li> <li>All the characters of <code>order</code> are <strong>unique</strong>.</li>",
    question:
      "<p>You are given two strings order and s. All the characters of <code>order</code> are <strong>unique</strong> and were sorted in some custom order previously.</p><p>Permute the characters of <code>s</code> so that they match the order that <code>order</code> was sorted. More specifically, if a character <code>x</code> occurs before a character <code>y</code> in <code>order</code>, then <code>x</code> should occur before <code>y</code> in the permuted string.</p><p>Return <em>any permutation of </em><code>s</code><em> that satisfies this property</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'order = "cba", s = "abcd"',
        outputText: '"cbad"',
        explanation:
          '"a", "b", "c" appear in order, so the order of "a", "b", "c" should be "c", "b", and "a". \nSince "d" does not appear in order, it can be at any position in the returned string. "dcba", "cdba", "cbda" are also valid outputs.',
      },
      {
        id: 2,
        inputText: 'order = "cbafg", s = "abcd"',
        outputText: '"cbad"',
        explanation: "",
      },
    ],
    tests: '["cba", "cbafg"]',
    answer: '["cbad", "cbad"]',
    code: "/**\n * @param {string} order\n * @param {string} s\n * @return {string}\n */\nvar customSortString = function(order, s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 808,
    title: "Number of Matching Subsequences",
    titleSlug: "number-of-matching-subsequences",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Trie",
      "Sorting",
    ],
    constaints:
      '<li>For example, <code>"ace"</code> is a subsequence of <code>"abcde"</code>.</li> <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= words.length &lt;= 5000</code></li> <li><code>1 &lt;= words[i].length &lt;= 50</code></li> <li><code>s</code> and <code>words[i]</code> consist of only lowercase English letters.</li>',
    question:
      "<p>Given a string <code>s</code> and an array of strings <code>words</code>, return <em>the number of</em> <code>words[i]</code> <em>that is a subsequence of</em> <code>s</code>.</p><p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abcde", words = ["a","bb","acd","ace"]',
        outputText: "3",
        explanation:
          'There are three strings in words that are a subsequence of s: "a", "acd", "ace".',
      },
      {
        id: 2,
        inputText:
          's = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]',
        outputText: "2",
        explanation: "",
      },
    ],
    tests: '["abcde", "dsahjpjauf"]',
    answer: "[3, 2]",
    code: "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number}\n */\nvar numMatchingSubseq = function(s, words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 812,
    title: "Rotate String",
    titleSlug: "rotate-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "String Matching"],
    constaints:
      '<li>For example, if <code>s = "abcde"</code>, then it will be <code>"bcdea"</code> after one shift.</li> <li><code>1 &lt;= s.length, goal.length &lt;= 100</code></li> <li><code>s</code> and <code>goal</code> consist of lowercase English letters.</li>',
    question:
      "<p>Given two strings <code>s</code> and <code>goal</code>, return <code>true</code> <em>if and only if</em> <code>s</code> <em>can become</em> <code>goal</code> <em>after some number of <strong>shifts</strong> on</em> <code>s</code>.</p><p>A <strong>shift</strong> on <code>s</code> consists of moving the leftmost character of <code>s</code> to the rightmost position.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abcde", goal = "cdeab"',
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "abcde", goal = "abced"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["abcde", "abcde"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s\n * @param {string} goal\n * @return {boolean}\n */\nvar rotateString = function(s, goal) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 815,
    title: "Champagne Tower",
    titleSlug: "champagne-tower",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Dynamic Programming"],
    constaints:
      "<li><code>0 &lt;=\u00a0poured &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= query_glass &lt;= query_row\u00a0&lt; 100</code></li>",
    question:
      '<p>We stack glasses in a pyramid, where the <strong>first</strong> row has <code>1</code> glass, the <strong>second</strong> row has <code>2</code> glasses, and so on until the 100<sup>th</sup> row.\u00a0 Each glass holds one cup\u00a0of champagne.</p><p>Then, some champagne is poured into the first glass at the top.\u00a0 When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\u00a0 When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\u00a0 (A glass at the bottom row has its excess champagne fall on the floor.)</p><p>For example, after one cup of champagne is poured, the top most glass is full.\u00a0 After two cups of champagne are poured, the two glasses on the second row are half full.\u00a0 After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\u00a0 After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</p><p><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png" style="height: 241px; width: 350px;"/></p><p>Now after pouring some non-negative integer cups of champagne, return how full the <code>j<sup>th</sup></code> glass in the <code>i<sup>th</sup></code> row is (both <code>i</code> and <code>j</code> are 0-indexed.)</p>',
    examples: [
      {
        id: 1,
        inputText: "poured = 1, query_row = 1, query_glass = 1",
        outputText: "0.00000",
        explanation:
          "We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.",
      },
      {
        id: 2,
        inputText: "poured = 2, query_row = 1, query_glass = 1",
        outputText: "0.50000",
        explanation:
          "We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.",
      },
      {
        id: 3,
        inputText: "poured = 100000009, query_row = 33, query_glass = 17",
        outputText: "1.00000",
        explanation: "",
      },
    ],
    tests: "[1, 2, 100000009]",
    answer: "[0.0, 0.5, 1.0]",
    code: "/**\n * @param {number} poured\n * @param {number} query_row\n * @param {number} query_glass\n * @return {number}\n */\nvar champagneTower = function(poured, query_row, query_glass) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 816,
    title: "Design HashSet",
    titleSlug: "design-hashset",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Linked List", "Design", "Hash Function"],
    constaints:
      "<li><code>void add(key)</code> Inserts the value <code>key</code> into the HashSet.</li> <li><code>bool contains(key)</code> Returns whether the value <code>key</code> exists in the HashSet or not.</li> <li><code>void remove(key)</code> Removes the value <code>key</code> in the HashSet. If <code>key</code> does not exist in the HashSet, do nothing.</li> <li><code>0 &lt;= key &lt;= 10<sup>6</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code>, <code>remove</code>, and <code>contains</code>.</li>",
    question:
      "<p>Design a HashSet without using any built-in hash table libraries.</p><p>Implement <code>MyHashSet</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]',
        outputText: "[null, null, null, true, false, null, true, null, false]",
        explanation:
          "MyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)",
      },
    ],
    tests:
      '[["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]]',
    answer: "[[null, null, null, true, false, null, true, null, false]]",
    code: "\nvar MyHashSet = function() {\n    \n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n    \n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n    \n};\n\n/** \n * @param {number} key\n * @return {boolean}\n */\nMyHashSet.prototype.contains = function(key) {\n    \n};\n\n/** \n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 817,
    title: "Design HashMap",
    titleSlug: "design-hashmap",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Linked List", "Design", "Hash Function"],
    constaints:
      "<li><code>MyHashMap()</code> initializes the object with an empty map.</li> <li><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the <code>key</code> already exists in the map, update the corresponding <code>value</code>.</li> <li><code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</li> <li><code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.</li> <li><code>0 &lt;= key, value &lt;= 10<sup>6</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li>",
    question:
      "<p>Design a HashMap without using any built-in hash table libraries.</p><p>Implement the <code>MyHashMap</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]',
        outputText: "[null, null, null, 1, -1, null, 1, null, -1]",
        explanation:
          "MyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]",
      },
    ],
    tests:
      '[["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]]',
    answer: "[[null, null, null, 1, -1, null, 1, null, -1]]",
    code: "\nvar MyHashMap = function() {\n    \n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nMyHashMap.prototype.put = function(key, value) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nMyHashMap.prototype.get = function(key) {\n    \n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashMap.prototype.remove = function(key) {\n    \n};\n\n/** \n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 824,
    title: "Number of Lines To Write String",
    titleSlug: "number-of-lines-to-write-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "String"],
    constaints:
      "<li><code>result[0]</code><em> is the total number of lines.</em></li> <li><code>result[1]</code><em> is the width of the last line in pixels.</em></li> <li><code>widths.length == 26</code></li> <li><code>2 &lt;= widths[i] &lt;= 10</code></li> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> contains only lowercase English letters.</li>",
    question:
      "<p>You are given a string <code>s</code> of lowercase English letters and an array <code>widths</code> denoting <strong>how many pixels wide</strong> each lowercase English letter is. Specifically, <code>widths[0]</code> is the width of <code>'a'</code>, <code>widths[1]</code> is the width of <code>'b'</code>, and so on.</p><p>You are trying to write <code>s</code> across several lines, where <strong>each line is no longer than </strong><code>100</code><strong> pixels</strong>. Starting at the beginning of <code>s</code>, write as many letters on the first line such that the total width does not exceed <code>100</code> pixels. Then, from where you stopped in <code>s</code>, continue writing as many letters as you can on the second line. Continue this process until you have written all of <code>s</code>.</p><p>Return <em>an array </em><code>result</code><em> of length 2 where:</em></p>",
    examples: [
      {
        id: 1,
        inputText:
          'widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = "abcdefghijklmnopqrstuvwxyz"',
        outputText: "[3,60]",
        explanation:
          "You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.",
      },
      {
        id: 2,
        inputText:
          'widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = "bbbcccdddaaa"',
        outputText: "[2,4]",
        explanation:
          "You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.",
      },
    ],
    tests:
      "[[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]",
    answer: "[[3, 60], [2, 4]]",
    code: "/**\n * @param {number[]} widths\n * @param {string} s\n * @return {number[]}\n */\nvar numberOfLines = function(widths, s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 825,
    title: "Max Increase to Keep City Skyline",
    titleSlug: "max-increase-to-keep-city-skyline",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Matrix"],
    constaints:
      "<li><code>n == grid.length</code></li> <li><code>n == grid[r].length</code></li> <li><code>2 &lt;= n &lt;= 50</code></li> <li><code>0 &lt;= grid[r][c] &lt;= 100</code></li>",
    question:
      "<p>There is a city composed of <code>n x n</code> blocks, where each block contains a single building shaped like a vertical square prism. You are given a <strong>0-indexed</strong> <code>n x n</code> integer matrix <code>grid</code> where <code>grid[r][c]</code> represents the <strong>height</strong> of the building located in the block at row <code>r</code> and column <code>c</code>.</p><p>A city's <strong>skyline</strong> is the\u00a0outer contour formed by all the building when viewing the side of the city from a distance. The <strong>skyline</strong> from each cardinal direction north, east, south, and west may be different.</p><p>We are allowed to increase the height of <strong>any number of buildings by any amount</strong> (the amount can be different per building). The height of a <code>0</code>-height building can also be increased. However, increasing the height of a building should <strong>not</strong> affect the city's <strong>skyline</strong> from any cardinal direction.</p><p>Return <em>the <strong>maximum total sum</strong> that the height of the buildings can be increased by <strong>without</strong> changing the city's <strong>skyline</strong> from any cardinal direction</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]",
        outputText: "35",
        explanation:
          "The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]",
      },
      {
        id: 2,
        inputText: "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        outputText: "0",
        explanation:
          "Increasing the height of any building will result in the skyline changing.",
      },
    ],
    tests:
      "[[[3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]",
    answer: "[35, 0]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxIncreaseKeepingSkyline = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 827,
    title: "Expressive Words",
    titleSlug: "expressive-words",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "String"],
    constaints:
      '<li><code>"hello" -&gt; "heeellooo"</code></li> <li><code>"hi" -&gt; "hiiii"</code></li> <li>For example, starting with <code>"hello"</code>, we could do an extension on the group <code>"o"</code> to get <code>"hellooo"</code>, but we cannot get <code>"helloo"</code> since the group <code>"oo"</code> has a size less than three. Also, we could do another extension like <code>"ll" -&gt; "lllll"</code> to get <code>"helllllooo"</code>. If <code>s = "helllllooo"</code>, then the query word <code>"hello"</code> would be <strong>stretchy</strong> because of these two extension operations: <code>query = "hello" -&gt; "hellooo" -&gt; "helllllooo" = s</code>.</li> <li><code>1 &lt;= s.length, words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>s</code> and <code>words[i]</code> consist of lowercase letters.</li>',
    question:
      '<p>Sometimes people repeat letters to represent extra feeling. For example:</p><p>In these strings like <code>"heeellooo"</code>, we have groups of adjacent letters that are all the same: <code>"h"</code>, <code>"eee"</code>, <code>"ll"</code>, <code>"ooo"</code>.</p><p>You are given a string <code>s</code> and an array of query strings <code>words</code>. A query word is <strong>stretchy</strong> if it can be made to be equal to <code>s</code> by any number of applications of the following extension operation: choose a group consisting of characters <code>c</code>, and add some number of characters <code>c</code> to the group so that the size of the group is <strong>three or more</strong>.</p><p>Return <em>the number of query strings that are <strong>stretchy</strong></em>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "heeellooo", words = ["hello", "hi", "helo"]',
        outputText: "1",
        explanation:
          'We can extend "e" and "o" in the word "hello" to get "heeellooo".\nWe can\'t extend "helo" to get "heeellooo" because the group "ll" is not size 3 or more.',
      },
      {
        id: 2,
        inputText: 's = "zzzzzyyyyy", words = ["zzyy","zy","zyy"]',
        outputText: "3",
        explanation: "",
      },
    ],
    tests: '["heeellooo", "zzzzzyyyyy"]',
    answer: "[1, 3]",
    code: "/**\n * @param {string} s\n * @param {string[]} words\n * @return {number}\n */\nvar expressiveWords = function(s, words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 829,
    title: "Subdomain Visit Count",
    titleSlug: "subdomain-visit-count",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Counting"],
    constaints:
      '<li>For example, <code>"9001 discuss.leetcode.com"</code> is a <strong>count-paired domain</strong> that indicates that <code>discuss.leetcode.com</code> was visited <code>9001</code> times.</li> <li><code>1 &lt;= cpdomain.length &lt;= 100</code></li> <li><code>1 &lt;= cpdomain[i].length &lt;= 100</code></li> <li><code>cpdomain[i]</code> follows either the <code>"rep<sub>i</sub> d1<sub>i</sub>.d2<sub>i</sub>.d3<sub>i</sub>"</code> format or the <code>"rep<sub>i</sub> d1<sub>i</sub>.d2<sub>i</sub>"</code> format.</li> <li><code>rep<sub>i</sub></code> is an integer in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>d1<sub>i</sub></code>, <code>d2<sub>i</sub></code>, and <code>d3<sub>i</sub></code> consist of lowercase English letters.</li>',
    question:
      '<p>A website domain <code>"discuss.leetcode.com"</code> consists of various subdomains. At the top level, we have <code>"com"</code>, at the next level, we have <code>"leetcode.com"</code>\u00a0and at the lowest level, <code>"discuss.leetcode.com"</code>. When we visit a domain like <code>"discuss.leetcode.com"</code>, we will also visit the parent domains <code>"leetcode.com"</code> and <code>"com"</code> implicitly.</p><p>A <strong>count-paired domain</strong> is a domain that has one of the two formats <code>"rep d1.d2.d3"</code> or <code>"rep d1.d2"</code> where <code>rep</code> is the number of visits to the domain and <code>d1.d2.d3</code> is the domain itself.</p><p>Given an array of <strong>count-paired domains</strong> <code>cpdomains</code>, return <em>an array of the <strong>count-paired domains</strong> of each subdomain in the input</em>. You may return the answer in <strong>any order</strong>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'cpdomains = ["9001 discuss.leetcode.com"]',
        outputText:
          '["9001 leetcode.com","9001 discuss.leetcode.com","9001 com"]',
        explanation:
          'We only have one website domain: "discuss.leetcode.com".\nAs discussed above, the subdomain "leetcode.com" and "com" will also be visited. So they will all be visited 9001 times.',
      },
      {
        id: 2,
        inputText:
          'cpdomains = ["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]',
        outputText:
          '["901 mail.com","50 yahoo.com","900 google.mail.com","5 wiki.org","5 org","1 intel.mail.com","951 com"]',
        explanation:
          'We will visit "google.mail.com" 900 times, "yahoo.com" 50 times, "intel.mail.com" once and "wiki.org" 5 times.\nFor the subdomains, we will visit "mail.com" 900 + 1 = 901 times, "com" 900 + 50 + 1 = 951 times, and "org" 5 times.',
      },
    ],
    tests:
      '[["9001 discuss.leetcode.com"], ["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]]',
    answer:
      '[["9001 leetcode.com", "9001 discuss.leetcode.com", "9001 com"], ["901 mail.com", "50 yahoo.com", "900 google.mail.com", "5 wiki.org", "5 org", "1 intel.mail.com", "951 com"]]',
    code: "/**\n * @param {string[]} cpdomains\n * @return {string[]}\n */\nvar subdomainVisits = function(cpdomains) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 830,
    title: "Largest Triangle Area",
    titleSlug: "largest-triangle-area",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry"],
    constaints:
      "<li><code>3 &lt;= points.length &lt;= 50</code></li> <li><code>-50 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 50</code></li> <li>All the given points are <strong>unique</strong>.</li>",
    question:
      "<p>Given an array of points on the <strong>X-Y</strong> plane <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, return <em>the area of the largest triangle that can be formed by any three different points</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>",
    examples: [
      {
        id: 1,
        inputText: "points = [[0,0],[0,1],[1,0],[0,2],[2,0]]",
        outputText: "2.00000",
        explanation:
          "The five points are shown in the above figure. The red triangle is the largest.",
      },
      {
        id: 2,
        inputText: "points = [[1,0],[0,0],[0,1]]",
        outputText: "0.50000",
        explanation: "",
      },
    ],
    tests:
      "[[[0, 0], [0, 1], [1, 0], [0, 2], [2, 0]], [[1, 0], [0, 0], [0, 1]]]",
    answer: "[2.0, 0.5]",
    code: "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar largestTriangleArea = function(points) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 832,
    title: "Binary Tree Pruning",
    titleSlug: "binary-tree-pruning",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 200]</code>.</li> <li><code>Node.val</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the same tree where every subtree (of the given tree) not containing a </em><code>1</code><em> has been removed</em>.</p><p>A subtree of a node <code>node</code> is <code>node</code> plus every node that is a descendant of <code>node</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,0,0,1]",
        outputText: "[1,null,0,null,1]",
        explanation:
          'Only the red nodes satisfy the property "every subtree not containing a 1".\nThe diagram on the right represents the answer.',
      },
      {
        id: 2,
        inputText: "root = [1,0,1,0,0,0,1]",
        outputText: "[1,null,1,null,1]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "root = [1,1,0,1,1,0,1,0]",
        outputText: "[1,1,0,1,1,null,1]",
        explanation: "",
      },
    ],
    tests:
      "[[1, null, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0]]",
    answer:
      "[[1, null, 0, null, 1], [1, null, 1, null, 1], [1, 1, 0, 1, 1, null, 1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar pruneTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 837,
    title: "Most Common Word",
    titleSlug: "most-common-word",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Counting"],
    constaints:
      "<li><code>1 &lt;= paragraph.length &lt;= 1000</code></li> <li>paragraph consists of English letters, space <code>' '</code>, or one of the symbols: <code>\"!?',;.\"</code>.</li> <li><code>0 &lt;= banned.length &lt;= 100</code></li> <li><code>1 &lt;= banned[i].length &lt;= 10</code></li> <li><code>banned[i]</code> consists of only lowercase English letters.</li>",
    question:
      "<p>Given a string <code>paragraph</code> and a string array of the banned words <code>banned</code>, return <em>the most frequent word that is not banned</em>. It is <strong>guaranteed</strong> there is <strong>at least one word</strong> that is not banned, and that the answer is <strong>unique</strong>.</p><p>The words in <code>paragraph</code> are <strong>case-insensitive</strong> and the answer should be returned in <strong>lowercase</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.", banned = ["hit"]',
        outputText: '"ball"',
        explanation:
          '"hit" occurs 3 times, but it is a banned word.\n"ball" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as "ball,"), \nand that "hit" isn\'t the answer even though it occurs more because it is banned.',
      },
      {
        id: 2,
        inputText: 'paragraph = "a.", banned = []',
        outputText: '"a"',
        explanation: "",
      },
    ],
    tests: '["Bob hit a ball, the hit BALL flew far after it was hit.", "a."]',
    answer: '["ball", "a"]',
    code: "/**\n * @param {string} paragraph\n * @param {string[]} banned\n * @return {string}\n */\nvar mostCommonWord = function(paragraph, banned) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 839,
    title: "Short Encoding of Words",
    titleSlug: "short-encoding-of-words",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Trie"],
    constaints:
      "<li><code>words.length == indices.length</code></li> <li>The reference string <code>s</code> ends with the <code>'#'</code> character.</li> <li>For each index <code>indices[i]</code>, the <strong>substring</strong> of <code>s</code> starting from <code>indices[i]</code> and up to (but not including) the next <code>'#'</code> character is equal to <code>words[i]</code>.</li> <li><code>1 &lt;= words.length &lt;= 2000</code></li> <li><code>1 &lt;= words[i].length &lt;= 7</code></li> <li><code>words[i]</code> consists of only lowercase letters.</li>",
    question:
      "<p>A <strong>valid encoding</strong> of an array of <code>words</code> is any reference string <code>s</code> and array of indices <code>indices</code> such that:</p><p>Given an array of <code>words</code>, return <em>the <strong>length of the shortest reference string</strong> </em><code>s</code><em> possible of any <strong>valid encoding</strong> of </em><code>words</code><em>.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["time", "me", "bell"]',
        outputText: "10",
        explanation: "A valid encoding would be s =",
      },
      {
        id: 2,
        inputText: 'words = ["t"]',
        outputText: "2",
        explanation: 'A valid encoding would be s = "t#" and indices = [0].',
      },
    ],
    tests: '[["time", "me", "bell"], ["t"]]',
    answer: "[10, 2]",
    code: "/**\n * @param {string[]} words\n * @return {number}\n */\nvar minimumLengthEncoding = function(words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 841,
    title: "Shortest Distance to a Character",
    titleSlug: "shortest-distance-to-a-character",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s[i]</code> and <code>c</code> are lowercase English letters.</li> <li>It is guaranteed that <code>c</code> occurs at least once in <code>s</code>.</li>",
    question:
      "<p>Given a string <code>s</code> and a character <code>c</code> that occurs in <code>s</code>, return <em>an array of integers </em><code>answer</code><em> where </em><code>answer.length == s.length</code><em> and </em><code>answer[i]</code><em> is the <strong>distance</strong> from index </em><code>i</code><em> to the <strong>closest</strong> occurrence of character </em><code>c</code><em> in </em><code>s</code>.</p><p>The <strong>distance</strong> between two indices <code>i</code> and <code>j</code> is <code>abs(i - j)</code>, where <code>abs</code> is the absolute value function.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "loveleetcode", c = "e"',
        outputText: "[3,2,1,0,1,0,0,1,2,2,1,0]",
        explanation:
          "The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.",
      },
      {
        id: 2,
        inputText: 's = "aaab", c = "b"',
        outputText: "[3,2,1,0]",
        explanation: "",
      },
    ],
    tests: '["loveleetcode", "aaab"]',
    answer: "[[3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0], [3, 2, 1, 0]]",
    code: "/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 843,
    title: "Binary Trees With Factors",
    titleSlug: "binary-trees-with-factors",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Dynamic Programming", "Sorting"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 1000</code></li> <li><code>2 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> <li>All the values of <code>arr</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given an array of unique integers, <code>arr</code>, where each integer <code>arr[i]</code> is strictly greater than <code>1</code>.</p><p>We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.</p><p>Return <em>the number of binary trees we can make</em>. The answer may be too large so return the answer <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [2,4]",
        outputText: "3",
        explanation: "We can make these trees:",
      },
      {
        id: 2,
        inputText: "arr = [2,4,5,10]",
        outputText: "7",
        explanation: "We can make these trees:",
      },
    ],
    tests: "[[2, 4], [2, 4, 5, 10]]",
    answer: "[3, 7]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar numFactoredBinaryTrees = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 851,
    title: "Goat Latin",
    titleSlug: "goat-latin",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      '<li>If a word begins with a vowel (<code>\'a\'</code>, <code>\'e\'</code>, <code>\'i\'</code>, <code>\'o\'</code>, or <code>\'u\'</code>), append <code>"ma"</code> to the end of the word.\n\n\t<ul>\n<li>For example, the word <code>"apple"</code> becomes <code>"applema"</code>.</li>\n</ul>\n</li> <li>For example, the word <code>"apple"</code> becomes <code>"applema"</code>.</li> <li>If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add <code>"ma"</code>.\n\t<ul>\n<li>For example, the word <code>"goat"</code> becomes <code>"oatgma"</code>.</li>\n</ul>\n</li> <li>For example, the word <code>"goat"</code> becomes <code>"oatgma"</code>.</li> <li>Add one letter <code>\'a\'</code> to the end of each word per its word index in the sentence, starting with <code>1</code>.\n\t<ul>\n<li>For example, the first word gets <code>"a"</code> added to the end, the second word gets <code>"aa"</code> added to the end, and so on.</li>\n</ul>\n</li> <li>For example, the first word gets <code>"a"</code> added to the end, the second word gets <code>"aa"</code> added to the end, and so on.</li> <li><code>1 &lt;= sentence.length &lt;= 150</code></li> <li><code>sentence</code> consists of English letters and spaces.</li> <li><code>sentence</code> has no leading or trailing spaces.</li> <li>All the words in <code>sentence</code> are separated by a single space.</li>',
    question:
      '<p>You are given a string <code>sentence</code> that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.</p><p>We would like to convert the sentence to "Goat Latin" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:</p><p>Return<em> the final sentence representing the conversion from sentence to Goat Latin</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'sentence = "I speak Goat Latin"',
        outputText: '"Imaa peaksmaaa oatGmaaaa atinLmaaaaa"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'sentence = "The quick brown fox jumped over the lazy dog"',
        outputText:
          '"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"',
        explanation: "",
      },
    ],
    tests:
      '["I speak Goat Latin", "The quick brown fox jumped over the lazy dog"]',
    answer:
      '["Imaa peaksmaaa oatGmaaaa atinLmaaaaa", "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"]',
    code: "/**\n * @param {string} sentence\n * @return {string}\n */\nvar toGoatLatin = function(sentence) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 857,
    title: "Positions of Large Groups",
    titleSlug: "positions-of-large-groups",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> contains lowercase English letters only.</li>",
    question:
      '<p>In a string <code><font face="monospace">s</font></code>\u00a0of lowercase letters, these letters form consecutive groups of the same character.</p><p>For example, a string like <code>s = "abbxxxxzyy"</code> has the groups <code>"a"</code>, <code>"bb"</code>, <code>"xxxx"</code>, <code>"z"</code>, and\u00a0<code>"yy"</code>.</p><p>A group is identified by an interval\u00a0<code>[start, end]</code>, where\u00a0<code>start</code>\u00a0and\u00a0<code>end</code>\u00a0denote the start and end\u00a0indices (inclusive) of the group. In the above example,\u00a0<code>"xxxx"</code>\u00a0has the interval\u00a0<code>[3,6]</code>.</p><p>A group is considered\u00a0<strong>large</strong>\u00a0if it has 3 or more characters.</p><p>Return\u00a0<em>the intervals of every <strong>large</strong> group sorted in\u00a0<strong>increasing order by start index</strong></em>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "abbxxxxzzy"',
        outputText: "[[3,6]]",
        explanation: '"xxxx" is the only',
      },
      {
        id: 2,
        inputText: 's = "abc"',
        outputText: "[]",
        explanation:
          'We have groups "a", "b", and "c", none of which are large groups.',
      },
      {
        id: 3,
        inputText: 's = "abcdddeeeeaabbbcd"',
        outputText: "[[3,5],[6,9],[12,14]]",
        explanation: 'The large groups are "ddd", "eeee", and "bbb".',
      },
    ],
    tests: '["abbxxxxzzy", "abc", "abcdddeeeeaabbbcd"]',
    answer: "[[[3, 6]], [], [[3, 5], [6, 9], [12, 14]]]",
    code: "/**\n * @param {string} s\n * @return {number[][]}\n */\nvar largeGroupPositions = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 860,
    title: "Design Circular Queue",
    titleSlug: "design-circular-queue",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Linked List", "Design", "Queue"],
    constaints:
      "<li><code>MyCircularQueue(k)</code> Initializes the object with the size of the queue to be <code>k</code>.</li> <li><code>int Front()</code> Gets the front item from the queue. If the queue is empty, return <code>-1</code>.</li> <li><code>int Rear()</code> Gets the last item from the queue. If the queue is empty, return <code>-1</code>.</li> <li><code>boolean enQueue(int value)</code> Inserts an element into the circular queue. Return <code>true</code> if the operation is successful.</li> <li><code>boolean deQueue()</code> Deletes an element from the circular queue. Return <code>true</code> if the operation is successful.</li> <li><code>boolean isEmpty()</code> Checks whether the circular queue is empty or not.</li> <li><code>boolean isFull()</code> Checks whether the circular queue is full or not.</li> <li><code>1 &lt;= k &lt;= 1000</code></li> <li><code>0 &lt;= value &lt;= 1000</code></li> <li>At most <code>3000</code> calls will be made to\u00a0<code>enQueue</code>, <code>deQueue</code>,\u00a0<code>Front</code>,\u00a0<code>Rear</code>,\u00a0<code>isEmpty</code>, and\u00a0<code>isFull</code>.</li>",
    question:
      '<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".</p><p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p><p>Implement the <code>MyCircularQueue</code> class:</p><p>You must solve the problem without using the built-in queue data structure in your programming language.\u00a0</p>',
    examples: [
      {
        id: 1,
        inputText:
          '["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]',
        outputText: "[null, true, true, true, false, 3, true, true, true, 4]",
        explanation:
          "MyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4",
      },
    ],
    tests:
      '[["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]]',
    answer: "[[null, true, true, true, false, 3, true, true, true, 4]]",
    code: "/**\n * @param {number} k\n */\nvar MyCircularQueue = function(k) {\n    \n};\n\n/** \n * @param {number} value\n * @return {boolean}\n */\nMyCircularQueue.prototype.enQueue = function(value) {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.deQueue = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyCircularQueue.prototype.Front = function() {\n    \n};\n\n/**\n * @return {number}\n */\nMyCircularQueue.prototype.Rear = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.isEmpty = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nMyCircularQueue.prototype.isFull = function() {\n    \n};\n\n/** \n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = new MyCircularQueue(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 861,
    title: "Flipping an Image",
    titleSlug: "flipping-an-image",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Array",
      "Two Pointers",
      "Bit Manipulation",
      "Matrix",
      "Simulation",
    ],
    constaints:
      "<li>For example, flipping <code>[1,1,0]</code> horizontally results in <code>[0,1,1]</code>.</li> <li>For example, inverting <code>[0,1,1]</code> results in <code>[1,0,0]</code>.</li> <li><code>n == image.length</code></li> <li><code>n == image[i].length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>images[i][j]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>Given an <code>n x n</code> binary matrix <code>image</code>, flip the image <strong>horizontally</strong>, then invert it, and return <em>the resulting image</em>.</p><p>To flip an image horizontally means that each row of the image is reversed.</p><p>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "image = [[1,1,0],[1,0,1],[0,0,0]]",
        outputText: "[[1,0,0],[0,1,0],[1,1,1]]",
        explanation:
          "First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]",
      },
      {
        id: 2,
        inputText: "image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]",
        outputText: "[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]",
        explanation:
          "First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]",
      },
    ],
    tests:
      "[[[1, 1, 0], [1, 0, 1], [0, 0, 0]], [[1, 1, 0, 0], [1, 0, 0, 1], [0, 1, 1, 1], [1, 0, 1, 0]]]",
    answer:
      "[[[1, 0, 0], [0, 1, 0], [1, 1, 1]], [[1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 1], [1, 0, 1, 0]]]",
    code: "/**\n * @param {number[][]} image\n * @return {number[][]}\n */\nvar flipAndInvertImage = function(image) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 866,
    title: "Rectangle Overlap",
    titleSlug: "rectangle-overlap",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Geometry"],
    constaints:
      "<li><code>rec1.length == 4</code></li> <li><code>rec2.length == 4</code></li> <li><code>-10<sup>9</sup> &lt;= rec1[i], rec2[i] &lt;= 10<sup>9</sup></code></li> <li><code>rec1</code> and <code>rec2</code> represent a valid rectangle with a non-zero area.</li>",
    question:
      "<p>An axis-aligned rectangle is represented as a list <code>[x1, y1, x2, y2]</code>, where <code>(x1, y1)</code> is the coordinate of its bottom-left corner, and <code>(x2, y2)</code> is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.</p><p>Two rectangles overlap if the area of their intersection is <strong>positive</strong>. To be clear, two rectangles that only touch at the corner or edges do not overlap.</p><p>Given two axis-aligned rectangles <code>rec1</code> and <code>rec2</code>, return <code>true</code><em> if they overlap, otherwise return </em><code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "rec1 = [0,0,2,2], rec2 = [1,1,3,3]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "rec1 = [0,0,1,1], rec2 = [1,0,2,1]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "rec1 = [0,0,1,1], rec2 = [2,2,3,3]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[0, 0, 2, 2], [0, 0, 1, 1], [0, 0, 1, 1]]",
    answer: "[true, false, false]",
    code: "/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */\nvar isRectangleOverlap = function(rec1, rec2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 868,
    title: "Push Dominoes",
    titleSlug: "push-dominoes",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Two Pointers", "String", "Dynamic Programming"],
    constaints:
      "<li><code>dominoes[i] = 'L'</code>, if the <code>i<sup>th</sup></code> domino has been pushed to the left,</li> <li><code>dominoes[i] = 'R'</code>, if the <code>i<sup>th</sup></code> domino has been pushed to the right, and</li> <li><code>dominoes[i] = '.'</code>, if the <code>i<sup>th</sup></code> domino has not been pushed.</li> <li><code>n == dominoes.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>dominoes[i]</code> is either <code>'L'</code>, <code>'R'</code>, or <code>'.'</code>.</li>",
    question:
      "<p>There are <code>n</code> dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.</p><p>After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.</p><p>When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.</p><p>For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.</p><p>You are given a string <code>dominoes</code> representing the initial state where:</p><p>Return <em>a string representing the final state</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'dominoes = "RR.L"',
        outputText: '"RR.L"',
        explanation:
          "The first domino expends no additional force on the second domino.",
      },
      {
        id: 2,
        inputText: 'dominoes = ".L.R...LR..L.."',
        outputText: '"LL.RR.LLRRLL.."',
        explanation: "",
      },
    ],
    tests: '["RR.L", ".L.R...LR..L.."]',
    answer: '["RR.L", "LL.RR.LLRRLL.."]',
    code: "/**\n * @param {string} dominoes\n * @return {string}\n */\nvar pushDominoes = function(dominoes) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 870,
    title: "Magic Squares In Grid",
    titleSlug: "magic-squares-in-grid",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Matrix"],
    constaints:
      "<li><code>row == grid.length</code></li> <li><code>col == grid[i].length</code></li> <li><code>1 &lt;= row, col &lt;= 10</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 15</code></li>",
    question:
      '<p>A <code>3 x 3</code> magic square is a <code>3 x 3</code> grid filled with distinct numbers <strong>from </strong><code>1</code><strong> to </strong><code>9</code> such that each row, column, and both diagonals all have the same sum.</p><p>Given a <code>row x col</code>\u00a0<code>grid</code>\u00a0of integers, how many <code>3 x 3</code> "magic square" subgrids are there?\u00a0 (Each subgrid is contiguous).</p>',
    examples: [
      {
        id: 1,
        inputText: "grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]",
        outputText: "1",
        explanation: "The following subgrid is a 3 x 3 magic square:",
      },
      { id: 2, inputText: "grid = [[8]]", outputText: "0", explanation: "" },
    ],
    tests: "[[[4, 3, 8, 4], [9, 5, 1, 9], [2, 7, 6, 2]], [[8]]]",
    answer: "[1, 0]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar numMagicSquaresInside = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 871,
    title: "Keys and Rooms",
    titleSlug: "keys-and-rooms",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Depth-First Search", "Breadth-First Search", "Graph"],
    constaints:
      "<li><code>n == rooms.length</code></li> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li> <li><code>1 &lt;= sum(rooms[i].length) &lt;= 3000</code></li> <li><code>0 &lt;= rooms[i][j] &lt; n</code></li> <li>All the values of <code>rooms[i]</code> are <strong>unique</strong>.</li>",
    question:
      "<p>There are <code>n</code> rooms labeled from <code>0</code> to <code>n - 1</code>\u00a0and all the rooms are locked except for room <code>0</code>. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.</p><p>When you visit a room, you may find a set of <strong>distinct keys</strong> in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.</p><p>Given an array <code>rooms</code> where <code>rooms[i]</code> is the set of keys that you can obtain if you visited room <code>i</code>, return <code>true</code> <em>if you can visit <strong>all</strong> the rooms, or</em> <code>false</code> <em>otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "rooms = [[1],[2],[3],[]]",
        outputText: "true",
        explanation:
          "We visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.",
      },
      {
        id: 2,
        inputText: "rooms = [[1,3],[3,0,1],[2],[0]]",
        outputText: "false",
        explanation:
          "We can not enter room number 2 since the only key that unlocks it is in that room.",
      },
    ],
    tests: "[[[1], [2], [3], []], [[1, 3], [3, 0, 1], [2], [0]]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[][]} rooms\n * @return {boolean}\n */\nvar canVisitAllRooms = function(rooms) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 874,
    title: "Backspace String Compare",
    titleSlug: "backspace-string-compare",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String", "Stack", "Simulation"],
    constaints:
      "<li><code><span>1 &lt;= s.length, t.length &lt;= 200</span></code></li> <li><span><code>s</code> and <code>t</code> only contain lowercase letters and <code>'#'</code> characters.</span></li>",
    question:
      "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if they are equal when both are typed into empty text editors</em>. <code>'#'</code> means a backspace character.</p><p>Note that after backspacing an empty text, the text will continue empty.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "ab#c", t = "ad#c"',
        outputText: "true",
        explanation: 'Both s and t become "ac".',
      },
      {
        id: 2,
        inputText: 's = "ab##", t = "c#d#"',
        outputText: "true",
        explanation: 'Both s and t become "".',
      },
      {
        id: 3,
        inputText: 's = "a#c", t = "b"',
        outputText: "false",
        explanation: 's becomes "c" while t becomes "b".',
      },
    ],
    tests: '["ab#c", "ab##", "a#c"]',
    answer: "[true, true, false]",
    code: "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar backspaceCompare = function(s, t) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 878,
    title: "Shifting Letters",
    titleSlug: "shifting-letters",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "String", "Prefix Sum"],
    constaints:
      "<li>For example, <code>shift('a') = 'b'</code>, <code>shift('t') = 'u'</code>, and <code>shift('z') = 'a'</code>.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>shifts.length == s.length</code></li> <li><code>0 &lt;= shifts[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given a string <code>s</code> of lowercase English letters and an integer array <code>shifts</code> of the same length.</p><p>Call the <code>shift()</code> of a letter, the next letter in the alphabet, (wrapping around so that <code>'z'</code> becomes <code>'a'</code>).</p><p>Now for each <code>shifts[i] = x</code>, we want to shift the first <code>i + 1</code> letters of <code>s</code>, <code>x</code> times.</p><p>Return <em>the final string after all such shifts to s are applied</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abc", shifts = [3,5,9]',
        outputText: '"rpl"',
        explanation:
          'We start with "abc".\nAfter shifting the first 1 letters of s by 3, we have "dbc".\nAfter shifting the first 2 letters of s by 5, we have "igc".\nAfter shifting the first 3 letters of s by 9, we have "rpl", the answer.',
      },
      {
        id: 2,
        inputText: 's = "aaa", shifts = [1,2,3]',
        outputText: '"gfd"',
        explanation: "",
      },
    ],
    tests: '["abc", "aaa"]',
    answer: '["rpl", "gfd"]',
    code: "/**\n * @param {string} s\n * @param {number[]} shifts\n * @return {string}\n */\nvar shiftingLetters = function(s, shifts) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 879,
    title: "Maximize Distance to Closest Person",
    titleSlug: "maximize-distance-to-closest-person",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>2 &lt;= seats.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>seats[i]</code>\u00a0is <code>0</code> or\u00a0<code>1</code>.</li> <li>At least one seat is <strong>empty</strong>.</li> <li>At least one seat is <strong>occupied</strong>.</li>",
    question:
      "<p>You are given an array representing a row of <code>seats</code> where <code>seats[i] = 1</code> represents a person sitting in the <code>i<sup>th</sup></code> seat, and <code>seats[i] = 0</code> represents that the <code>i<sup>th</sup></code> seat is empty <strong>(0-indexed)</strong>.</p><p>There is at least one empty seat, and at least one person sitting.</p><p>Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\u00a0</p><p>Return <em>that maximum distance to the closest person</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "seats = [1,0,0,0,1,0,1]",
        outputText: "2",
        explanation:
          "If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.",
      },
      {
        id: 2,
        inputText: "seats = [1,0,0,0]",
        outputText: "3",
        explanation:
          "If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.",
      },
      { id: 3, inputText: "seats = [0,1]", outputText: "1", explanation: "" },
    ],
    tests: "[[1, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0], [0, 1]]",
    answer: "[2, 3, 1]",
    code: "/**\n * @param {number[]} seats\n * @return {number}\n */\nvar maxDistToClosest = function(seats) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 882,
    title: "Peak Index in a Mountain Array",
    titleSlug: "peak-index-in-a-mountain-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>arr.length &gt;= 3</code></li> <li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li>\n<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n</ul>\n</li> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> <li><code>3 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> <li><code>arr</code> is <strong>guaranteed</strong> to be a mountain array.</li>",
    question:
      "<p>An array <code>arr</code> is a <strong>mountain</strong> if the following properties hold:</p><p>Given a mountain array <code>arr</code>, return the index <code>i</code> such that <code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code>.</p><p>You must solve it in <code>O(log(arr.length))</code> time complexity.</p>",
    examples: [
      { id: 1, inputText: "arr = [0,1,0]", outputText: "1", explanation: "" },
      { id: 2, inputText: "arr = [0,2,1,0]", outputText: "1", explanation: "" },
      {
        id: 3,
        inputText: "arr = [0,10,5,2]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[0, 1, 0], [0, 2, 1, 0], [0, 10, 5, 2]]",
    answer: "[1, 1, 1]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar peakIndexInMountainArray = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 886,
    title: "Score of Parentheses",
    titleSlug: "score-of-parentheses",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li><code>\"()\"</code> has score <code>1</code>.</li> <li><code>AB</code> has score <code>A + B</code>, where <code>A</code> and <code>B</code> are balanced parentheses strings.</li> <li><code>(A)</code> has score <code>2 * A</code>, where <code>A</code> is a balanced parentheses string.</li> <li><code>2 &lt;= s.length &lt;= 50</code></li> <li><code>s</code> consists of only <code>'('</code> and <code>')'</code>.</li> <li><code>s</code> is a balanced parentheses string.</li>",
    question:
      "<p>Given a balanced parentheses string <code>s</code>, return <em>the <strong>score</strong> of the string</em>.</p><p>The <strong>score</strong> of a balanced parentheses string is based on the following rule:</p>",
    examples: [
      { id: 1, inputText: 's = "()"', outputText: "1", explanation: "" },
      { id: 2, inputText: 's = "(())"', outputText: "2", explanation: "" },
      { id: 3, inputText: 's = "()()"', outputText: "2", explanation: "" },
    ],
    tests: '["()", "(())", "()()"]',
    answer: "[1, 2, 2]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar scoreOfParentheses = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 890,
    title: "Lemonade Change",
    titleSlug: "lemonade-change",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy"],
    constaints:
      "<li><code>1 &lt;= bills.length &lt;= 10<sup>5</sup></code></li> <li><code>bills[i]</code> is either <code>5</code>, <code>10</code>, or <code>20</code>.</li>",
    question:
      "<p>At a lemonade stand, each lemonade costs <code>$5</code>. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a <code>$5</code>, <code>$10</code>, or <code>$20</code> bill. You must provide the correct change to each customer so that the net transaction is that the customer pays <code>$5</code>.</p><p>Note that you do not have any change in hand at first.</p><p>Given an integer array <code>bills</code> where <code>bills[i]</code> is the bill the <code>i<sup>th</sup></code> customer pays, return <code>true</code> <em>if you can provide every customer with the correct change, or</em> <code>false</code> <em>otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "bills = [5,5,5,10,20]",
        outputText: "true",
        explanation:
          "From the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.",
      },
      {
        id: 2,
        inputText: "bills = [5,5,10,10,20]",
        outputText: "false",
        explanation:
          "From the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false.",
      },
    ],
    tests: "[[5, 5, 5, 10, 20], [5, 5, 10, 10, 20]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} bills\n * @return {boolean}\n */\nvar lemonadeChange = function(bills) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 891,
    title: "Score After Flipping Matrix",
    titleSlug: "score-after-flipping-matrix",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Bit Manipulation", "Matrix"],
    constaints:
      "<li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 20</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>You are given an <code>m x n</code> binary matrix <code>grid</code>.</p><p>A <strong>move</strong> consists of choosing any row or column and toggling each value in that row or column (i.e., changing all <code>0</code>'s to <code>1</code>'s, and all <code>1</code>'s to <code>0</code>'s).</p><p>Every row of the matrix is interpreted as a binary number, and the <strong>score</strong> of the matrix is the sum of these numbers.</p><p>Return <em>the highest possible <strong>score</strong> after making any number of <strong>moves</strong> (including zero moves)</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]",
        outputText: "39",
        explanation: "0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39",
      },
      { id: 2, inputText: "grid = [[0]]", outputText: "1", explanation: "" },
    ],
    tests: "[[[0, 0, 1, 1], [1, 0, 1, 0], [1, 1, 0, 0]], [[0]]]",
    answer: "[39, 1]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar matrixScore = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 898,
    title: "Transpose Matrix",
    titleSlug: "transpose-matrix",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints:
      "<li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>",
    question:
      '<p>Given a 2D integer array <code>matrix</code>, return <em>the <strong>transpose</strong> of</em> <code>matrix</code>.</p><p>The <strong>transpose</strong> of a matrix is the matrix flipped over its main diagonal, switching the matrix\'s row and column indices.</p><p><img alt="" src="https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png" style="width: 600px; height: 197px;"/></p>',
    examples: [
      {
        id: 1,
        inputText: "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        outputText: "[[1,4,7],[2,5,8],[3,6,9]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "matrix = [[1,2,3],[4,5,6]]",
        outputText: "[[1,4],[2,5],[3,6]]",
        explanation: "",
      },
    ],
    tests: "[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6]]]",
    answer: "[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], [[1, 4], [2, 5], [3, 6]]]",
    code: "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar transpose = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 899,
    title: "Binary Gap",
    titleSlug: "binary-gap",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Bit Manipulation"],
    constaints: "<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given a positive integer <code>n</code>, find and return <em>the <strong>longest distance</strong> between any two <strong>adjacent</strong> </em><code>1</code><em>'s in the binary representation of </em><code>n</code><em>. If there are no two adjacent </em><code>1</code><em>'s, return </em><code>0</code><em>.</em></p><p>Two <code>1</code>'s are <strong>adjacent</strong> if there are only <code>0</code>'s separating them (possibly no <code>0</code>'s). The <b>distance</b> between two <code>1</code>'s is the absolute difference between their bit positions. For example, the two <code>1</code>'s in <code>\"1001\"</code> have a distance of 3.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 22",
        outputText: "2",
        explanation:
          '22 in binary is "10110".\nThe first adjacent pair of 1\'s is "',
      },
      {
        id: 2,
        inputText: "n = 8",
        outputText: "0",
        explanation:
          '8 in binary is "1000".\nThere are not any adjacent pairs of 1\'s in the binary representation of 8, so we return 0.',
      },
      {
        id: 3,
        inputText: "n = 5",
        outputText: "2",
        explanation: '5 in binary is "101".',
      },
    ],
    tests: "[22, 8, 5]",
    answer: "[2, 0, 2]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar binaryGap = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 901,
    title: "Advantage Shuffle",
    titleSlug: "advantage-shuffle",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Greedy", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li> <li><code>nums2.length == nums1.length</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> both of the same length. The <strong>advantage</strong> of <code>nums1</code> with respect to <code>nums2</code> is the number of indices <code>i</code> for which <code>nums1[i] &gt; nums2[i]</code>.</p><p>Return <em>any permutation of </em><code>nums1</code><em> that maximizes its <strong>advantage</strong> with respect to </em><code>nums2</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [2,7,11,15], nums2 = [1,10,4,11]",
        outputText: "[2,11,7,15]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums1 = [12,24,8,32], nums2 = [13,25,32,11]",
        outputText: "[24,32,8,12]",
        explanation: "",
      },
    ],
    tests: "[[2, 7, 11, 15], [12, 24, 8, 32]]",
    answer: "[[2, 11, 7, 15], [24, 32, 8, 12]]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar advantageCount = function(nums1, nums2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 904,
    title: "Leaf-Similar Trees",
    titleSlug: "leaf-similar-trees",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in each tree will be in the range <code>[1, 200]</code>.</li> <li>Both of the given trees will have values in the range <code>[0, 200]</code>.</li>",
    question:
      '<p>Consider all the leaves of a binary tree, from\u00a0left to right order, the values of those\u00a0leaves form a <strong>leaf value sequence</strong><em>.</em></p><p><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png" style="width: 400px; height: 336px;"/></p><p>For example, in the given tree above, the leaf value sequence is <code>(6, 7, 4, 9, 8)</code>.</p><p>Two binary trees are considered <em>leaf-similar</em>\u00a0if their leaf value sequence is the same.</p><p>Return <code>true</code> if and only if the two given trees with head nodes <code>root1</code> and <code>root2</code> are leaf-similar.</p>',
    examples: [
      {
        id: 1,
        inputText:
          "root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root1 = [1,2,3], root2 = [1,3,2]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[3, 5, 1, 6, 2, 9, 8, null, null, 7, 4], [1, 2, 3]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {boolean}\n */\nvar leafSimilar = function(root1, root2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 908,
    title: "Middle of the Linked List",
    titleSlug: "middle-of-the-linked-list",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>head</code> of a singly linked list, return <em>the middle node of the linked list</em>.</p><p>If there are two middle nodes, return <strong>the second middle</strong> node.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,3,4,5]",
        outputText: "[3,4,5]",
        explanation: "The middle node of the list is node 3.",
      },
      {
        id: 2,
        inputText: "head = [1,2,3,4,5,6]",
        outputText: "[4,5,6]",
        explanation:
          "Since the list has two middle nodes with values 3 and 4, we return the second one.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]",
    answer: "[[3, 4, 5], [4, 5, 6]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 909,
    title: "Stone Game",
    titleSlug: "stone-game",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Dynamic Programming", "Game Theory"],
    constaints:
      "<li><code>2 &lt;= piles.length &lt;= 500</code></li> <li><code>piles.length</code> is <strong>even</strong>.</li> <li><code>1 &lt;= piles[i] &lt;= 500</code></li> <li><code>sum(piles[i])</code> is <strong>odd</strong>.</li>",
    question:
      "<p>Alice and Bob play a game with piles of stones. There are an <strong>even</strong> number of piles arranged in a row, and each pile has a <strong>positive</strong> integer number of stones <code>piles[i]</code>.</p><p>The objective of the game is to end with the most stones. The <strong>total</strong> number of stones across all the piles is <strong>odd</strong>, so there are no ties.</p><p>Alice and Bob take turns, with <strong>Alice starting first</strong>. Each turn, a player takes the entire pile of stones either from the <strong>beginning</strong> or from the <strong>end</strong> of the row. This continues until there are no more piles left, at which point the person with the <strong>most stones wins</strong>.</p><p>Assuming Alice and Bob play optimally, return <code>true</code><em> if Alice wins the game, or </em><code>false</code><em> if Bob wins</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "piles = [5,3,4,5]",
        outputText: "true",
        explanation:
          "Alice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.",
      },
      {
        id: 2,
        inputText: "piles = [3,7,2,3]",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[[5, 3, 4, 5], [3, 7, 2, 3]]",
    answer: "[true, true]",
    code: "/**\n * @param {number[]} piles\n * @return {boolean}\n */\nvar stoneGame = function(piles) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 912,
    title: "Random Pick with Weight",
    titleSlug: "random-pick-with-weight",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Binary Search", "Prefix Sum", "Randomized"],
    constaints:
      "<li>For example, if <code>w = [1, 3]</code>, the probability of picking index <code>0</code> is <code>1 / (1 + 3) = 0.25</code> (i.e., <code>25%</code>), and the probability of picking index <code>1</code> is <code>3 / (1 + 3) = 0.75</code> (i.e., <code>75%</code>).</li> <li><code>1 &lt;= w.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= w[i] &lt;= 10<sup>5</sup></code></li> <li><code>pickIndex</code> will be called at most <code>10<sup>4</sup></code> times.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> array of positive integers <code>w</code> where <code>w[i]</code> describes the <strong>weight</strong> of the <code>i<sup>th</sup></code> index.</p><p>You need to implement the function <code>pickIndex()</code>, which <strong>randomly</strong> picks an index in the range <code>[0, w.length - 1]</code> (<strong>inclusive</strong>) and returns it. The <strong>probability</strong> of picking an index <code>i</code> is <code>w[i] / sum(w)</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: '["Solution","pickIndex"]\n[[[1]],[]]',
        outputText: "[null,0]",
        explanation:
          "Solution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.",
      },
      {
        id: 2,
        inputText:
          '["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]\n[[[1,3]],[],[],[],[],[]]',
        outputText: "[null,1,1,1,1,0]",
        explanation:
          "Solution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.",
      },
    ],
    tests:
      '[["Solution", "pickIndex"], ["Solution", "pickIndex", "pickIndex", "pickIndex", "pickIndex", "pickIndex"]]',
    answer: "[[null, 0], [null, 1, 1, 1, 1, 0]]",
    code: "/**\n * @param {number[]} w\n */\nvar Solution = function(w) {\n    \n};\n\n/**\n * @return {number}\n */\nSolution.prototype.pickIndex = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(w)\n * var param_1 = obj.pickIndex()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 915,
    title: "Generate Random Point in a Circle",
    titleSlug: "generate-random-point-in-a-circle",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Geometry", "Rejection Sampling", "Randomized"],
    constaints:
      "<li><code>Solution(double radius, double x_center, double y_center)</code> initializes the object with the radius of the circle <code>radius</code> and the position of the center <code>(x_center, y_center)</code>.</li> <li><code>randPoint()</code> returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array <code>[x, y]</code>.</li> <li><code>0 &lt;\u00a0radius &lt;= 10<sup>8</sup></code></li> <li><code>-10<sup>7</sup> &lt;= x_center, y_center &lt;= 10<sup>7</sup></code></li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>randPoint</code>.</li>",
    question:
      "<p>Given the radius and the position of the center of a circle, implement the function <code>randPoint</code> which generates a uniform random point inside the circle.</p><p>Implement the <code>Solution</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["Solution", "randPoint", "randPoint", "randPoint"]\n[[1.0, 0.0, 0.0], [], [], []]',
        outputText:
          "[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]",
        explanation:
          "Solution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]",
      },
    ],
    tests: '[["Solution", "randPoint", "randPoint", "randPoint"]]',
    answer:
      "[[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]]",
    code: "/**\n * @param {number} radius\n * @param {number} x_center\n * @param {number} y_center\n */\nvar Solution = function(radius, x_center, y_center) {\n    \n};\n\n/**\n * @return {number[]}\n */\nSolution.prototype.randPoint = function() {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(radius, x_center, y_center)\n * var param_1 = obj.randPoint()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 916,
    title: "Decoded String at Index",
    titleSlug: "decoded-string-at-index",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li>If the character read is a letter, that letter is written onto the tape.</li> <li>If the character read is a digit <code>d</code>, the entire current tape is repeatedly written <code>d - 1</code> more times in total.</li> <li><code>2 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters and digits <code>2</code> through <code>9</code>.</li> <li><code>s</code> starts with a letter.</li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> <li>It is guaranteed that <code>k</code> is less than or equal to the length of the decoded string.</li> <li>The decoded string is guaranteed to have less than <code>2<sup>63</sup></code> letters.</li>",
    question:
      "<p>You are given an encoded string <code>s</code>. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:</p><p>Given an integer <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> letter (<strong>1-indexed)</strong> in the decoded string</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "leet2code3", k = 10',
        outputText: '"o"',
        explanation:
          'The decoded string is "leetleetcodeleetleetcodeleetleetcode".\nThe 10',
      },
      {
        id: 2,
        inputText: 's = "ha22", k = 5',
        outputText: '"h"',
        explanation: 'The decoded string is "hahahaha".\nThe 5',
      },
      {
        id: 3,
        inputText: 's = "a2345678999999999999999", k = 1',
        outputText: '"a"',
        explanation:
          'The decoded string is "a" repeated 8301530446056247680 times.\nThe 1',
      },
    ],
    tests: '["leet2code3", "ha22", "a2345678999999999999999"]',
    answer: '["o", "h", "a"]',
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar decodeAtIndex = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 917,
    title: "Boats to Save People",
    titleSlug: "boats-to-save-people",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Greedy", "Sorting"],
    constaints:
      "<li><code>1 &lt;= people.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= people[i] &lt;= limit &lt;= 3 * 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an array <code>people</code> where <code>people[i]</code> is the weight of the <code>i<sup>th</sup></code> person, and an <strong>infinite number of boats</strong> where each boat can carry a maximum weight of <code>limit</code>. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most <code>limit</code>.</p><p>Return <em>the minimum number of boats to carry every given person</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "people = [1,2], limit = 3",
        outputText: "1",
        explanation: "1 boat (1, 2)",
      },
      {
        id: 2,
        inputText: "people = [3,2,2,1], limit = 3",
        outputText: "3",
        explanation: "3 boats (1, 2), (2) and (3)",
      },
      {
        id: 3,
        inputText: "people = [3,5,3,4], limit = 5",
        outputText: "4",
        explanation: "4 boats (3), (3), (4), (5)",
      },
    ],
    tests: "[[1, 2], [3, 2, 2, 1], [3, 5, 3, 4]]",
    answer: "[1, 3, 4]",
    code: "/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 919,
    title: "Projection Area of 3D Shapes",
    titleSlug: "projection-area-of-3d-shapes",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry", "Matrix"],
    constaints:
      "<li><code>n == grid.length == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>",
    question:
      '<p>You are given an <code>n x n</code> <code>grid</code> where we place some <code>1 x 1 x 1</code> cubes that are axis-aligned with the <code>x</code>, <code>y</code>, and <code>z</code> axes.</p><p>Each value <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes placed on top of the cell <code>(i, j)</code>.</p><p>We view the projection of these cubes onto the <code>xy</code>, <code>yz</code>, and <code>zx</code> planes.</p><p>A <strong>projection</strong> is like a shadow, that maps our <strong>3-dimensional</strong> figure to a <strong>2-dimensional</strong> plane. We are viewing the "shadow" when looking at the cubes from the top, the front, and the side.</p><p>Return <em>the total area of all three projections</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "grid = [[1,2],[3,4]]",
        outputText: "17",
        explanation:
          'Here are the three projections ("shadows") of the shape made with each axis-aligned plane.',
      },
      { id: 2, inputText: "grid = [[2]]", outputText: "5", explanation: "" },
      {
        id: 3,
        inputText: "grid = [[1,0],[0,2]]",
        outputText: "8",
        explanation: "",
      },
    ],
    tests: "[[[1, 2], [3, 4]], [[2]], [[1, 0], [0, 2]]]",
    answer: "[17, 5, 8]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar projectionArea = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 920,
    title: "Uncommon Words from Two Sentences",
    titleSlug: "uncommon-words-from-two-sentences",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= s1.length, s2.length &lt;= 200</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters and spaces.</li> <li><code>s1</code> and <code>s2</code> do not have leading or trailing spaces.</li> <li>All the words in <code>s1</code> and <code>s2</code> are separated by a single space.</li>",
    question:
      "<p>A <strong>sentence</strong> is a string of single-space separated words where each word consists only of lowercase letters.</p><p>A word is <strong>uncommon</strong> if it appears exactly once in one of the sentences, and <strong>does not appear</strong> in the other sentence.</p><p>Given two <strong>sentences</strong> <code>s1</code> and <code>s2</code>, return <em>a list of all the <strong>uncommon words</strong></em>. You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's1 = "this apple is sweet", s2 = "this apple is sour"',
        outputText: '["sweet","sour"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's1 = "apple apple", s2 = "banana"',
        outputText: '["banana"]',
        explanation: "",
      },
    ],
    tests: '["this apple is sweet", "apple apple"]',
    answer: '[["sweet", "sour"], ["banana"]]',
    code: "/**\n * @param {string} s1\n * @param {string} s2\n * @return {string[]}\n */\nvar uncommonFromSentences = function(s1, s2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 921,
    title: "Spiral Matrix III",
    titleSlug: "spiral-matrix-iii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints:
      "<li><code>1 &lt;= rows, cols &lt;= 100</code></li> <li><code>0 &lt;= rStart &lt; rows</code></li> <li><code>0 &lt;= cStart &lt; cols</code></li>",
    question:
      "<p>You start at the cell <code>(rStart, cStart)</code> of an <code>rows x cols</code> grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.</p><p>You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all <code>rows * cols</code> spaces of the grid.</p><p>Return <em>an array of coordinates representing the positions of the grid in the order you visited them</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "rows = 1, cols = 4, rStart = 0, cStart = 0",
        outputText: "[[0,0],[0,1],[0,2],[0,3]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "rows = 5, cols = 6, rStart = 1, cStart = 4",
        outputText:
          "[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]",
        explanation: "",
      },
    ],
    tests: "[1, 5]",
    answer:
      "[[[0, 0], [0, 1], [0, 2], [0, 3]], [[1, 4], [1, 5], [2, 5], [2, 4], [2, 3], [1, 3], [0, 3], [0, 4], [0, 5], [3, 5], [3, 4], [3, 3], [3, 2], [2, 2], [1, 2], [0, 2], [4, 5], [4, 4], [4, 3], [4, 2], [4, 1], [3, 1], [2, 1], [1, 1], [0, 1], [4, 0], [3, 0], [2, 0], [1, 0], [0, 0]]]",
    code: "/**\n * @param {number} rows\n * @param {number} cols\n * @param {number} rStart\n * @param {number} cStart\n * @return {number[][]}\n */\nvar spiralMatrixIII = function(rows, cols, rStart, cStart) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 924,
    title: "Fair Candy Swap",
    titleSlug: "fair-candy-swap",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= aliceSizes.length, bobSizes.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= aliceSizes[i], bobSizes[j] &lt;= 10<sup>5</sup></code></li> <li>Alice and Bob have a different total number of candies.</li> <li>There will be at least one valid answer for the given input.</li>",
    question:
      "<p>Alice and Bob have a different total number of candies. You are given two integer arrays <code>aliceSizes</code> and <code>bobSizes</code> where <code>aliceSizes[i]</code> is the number of candies of the <code>i<sup>th</sup></code> box of candy that Alice has and <code>bobSizes[j]</code> is the number of candies of the <code>j<sup>th</sup></code> box of candy that Bob has.</p><p>Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.</p><p>Return a<em>n integer array </em><code>answer</code><em> where </em><code>answer[0]</code><em> is the number of candies in the box that Alice must exchange, and </em><code>answer[1]</code><em> is the number of candies in the box that Bob must exchange</em>. If there are multiple answers, you may <strong>return any</strong> one of them. It is guaranteed that at least one answer exists.</p>",
    examples: [
      {
        id: 1,
        inputText: "aliceSizes = [1,1], bobSizes = [2,2]",
        outputText: "[1,2]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "aliceSizes = [1,2], bobSizes = [2,3]",
        outputText: "[1,2]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "aliceSizes = [2], bobSizes = [1,3]",
        outputText: "[2,3]",
        explanation: "",
      },
    ],
    tests: "[[1, 1], [1, 2], [2]]",
    answer: "[[1, 2], [1, 2], [2, 3]]",
    code: "/**\n * @param {number[]} aliceSizes\n * @param {number[]} bobSizes\n * @return {number[]}\n */\nvar fairCandySwap = function(aliceSizes, bobSizes) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 926,
    title: "Find and Replace Pattern",
    titleSlug: "find-and-replace-pattern",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= pattern.length &lt;= 20</code></li> <li><code>1 &lt;= words.length &lt;= 50</code></li> <li><code>words[i].length == pattern.length</code></li> <li><code>pattern</code> and <code>words[i]</code> are lowercase English letters.</li>",
    question:
      "<p>Given a list of strings <code>words</code> and a string <code>pattern</code>, return <em>a list of</em> <code>words[i]</code> <em>that match</em> <code>pattern</code>. You may return the answer in <strong>any order</strong>.</p><p>A word matches the pattern if there exists a permutation of letters <code>p</code> so that after replacing every letter <code>x</code> in the pattern with <code>p(x)</code>, we get the desired word.</p><p>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"',
        outputText: '["mee","aqq"]',
        explanation:
          '"mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.',
      },
      {
        id: 2,
        inputText: 'words = ["a","b","c"], pattern = "a"',
        outputText: '["a","b","c"]',
        explanation: "",
      },
    ],
    tests: '[["abc", "deq", "mee", "aqq", "dkd", "ccc"], ["a", "b", "c"]]',
    answer: '[["mee", "aqq"], ["a", "b", "c"]]',
    code: "/**\n * @param {string[]} words\n * @param {string} pattern\n * @return {string[]}\n */\nvar findAndReplacePattern = function(words, pattern) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 928,
    title: "Surface Area of 3D Shapes",
    titleSlug: "surface-area-of-3d-shapes",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry", "Matrix"],
    constaints:
      "<li><code>n == grid.length == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>",
    question:
      "<p>You are given an <code>n x n</code> <code>grid</code> where you have placed some <code>1 x 1 x 1</code> cubes. Each value <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes placed on top of cell <code>(i, j)</code>.</p><p>After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.</p><p>Return <em>the total surface area of the resulting shapes</em>.</p><p><strong>Note:</strong> The bottom face of each shape counts toward its surface area.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[1,2],[3,4]]",
        outputText: "34",
        explanation: "",
      },
      {
        id: 2,
        inputText: "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        outputText: "32",
        explanation: "",
      },
      {
        id: 3,
        inputText: "grid = [[2,2,2],[2,1,2],[2,2,2]]",
        outputText: "46",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2], [3, 4]], [[1, 1, 1], [1, 0, 1], [1, 1, 1]], [[2, 2, 2], [2, 1, 2], [2, 2, 2]]]",
    answer: "[34, 32, 46]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar surfaceArea = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 929,
    title: "Groups of Special-Equivalent Strings",
    titleSlug: "groups-of-special-equivalent-strings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Sorting"],
    constaints:
      '<li>For example, <code>words[i] = "zzxy"</code> and <code>words[j] = "xyzz"</code> are <strong>special-equivalent</strong> because we may make the moves <code>"zzxy" -&gt; "xzzy" -&gt; "xyzz"</code>.</li> <li>Every pair of strings in the group are special equivalent, and</li> <li>The group is the largest size possible (i.e., there is not a string <code>words[i]</code> not in the group such that <code>words[i]</code> is special-equivalent to every string in the group).</li> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li><code>words[i]</code> consist of lowercase English letters.</li> <li>All the strings are of the same length.</li>',
    question:
      "<p>You are given an array of strings of the same length <code>words</code>.</p><p>In one <strong>move</strong>, you can swap any two even indexed characters or any two odd indexed characters of a string <code>words[i]</code>.</p><p>Two strings <code>words[i]</code> and <code>words[j]</code> are <strong>special-equivalent</strong> if after any number of moves, <code>words[i] == words[j]</code>.</p><p>A <strong>group of special-equivalent strings</strong> from <code>words</code> is a non-empty subset of words such that:</p><p>Return <em>the number of <strong>groups of special-equivalent strings</strong> from </em><code>words</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["abcd","cdab","cbad","xyzz","zzxy","zzyx"]',
        outputText: "3",
        explanation:
          'One group is ["abcd", "cdab", "cbad"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are ["xyzz", "zzxy"] and ["zzyx"].\nNote that in particular, "zzxy" is not special equivalent to "zzyx".',
      },
      {
        id: 2,
        inputText: 'words = ["abc","acb","bac","bca","cab","cba"]',
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      '[["abcd", "cdab", "cbad", "xyzz", "zzxy", "zzyx"], ["abc", "acb", "bac", "bca", "cab", "cba"]]',
    answer: "[3, 3]",
    code: "/**\n * @param {string[]} words\n * @return {number}\n */\nvar numSpecialEquivGroups = function(words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 931,
    title: "Maximum Frequency Stack",
    titleSlug: "maximum-frequency-stack",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Hash Table", "Stack", "Design", "Ordered Set"],
    constaints:
      "<li><code>FreqStack()</code> constructs an empty frequency stack.</li> <li><code>void push(int val)</code> pushes an integer <code>val</code> onto the top of the stack.</li> <li><code>int pop()</code> removes and returns the most frequent element in the stack.\n\t<ul>\n<li>If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.</li>\n</ul>\n</li> <li>If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.</li> <li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li> <li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>push</code> and <code>pop</code>.</li> <li>It is guaranteed that there will be at least one element in the stack before calling <code>pop</code>.</li>",
    question:
      "<p>Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.</p><p>Implement the <code>FreqStack</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["FreqStack", "push", "push", "push", "push", "push", "push", "pop", "pop", "pop", "pop"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]',
        outputText: "[null, null, null, null, null, null, null, 5, 7, 5, 4]",
        explanation:
          "FreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].",
      },
    ],
    tests:
      '[["FreqStack", "push", "push", "push", "push", "push", "push", "pop", "pop", "pop", "pop"]]',
    answer: "[[null, null, null, null, null, null, null, 5, 7, 5, 4]]",
    code: "\nvar FreqStack = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFreqStack.prototype.push = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nFreqStack.prototype.pop = function() {\n    \n};\n\n/** \n * Your FreqStack object will be instantiated and called as such:\n * var obj = new FreqStack()\n * obj.push(val)\n * var param_2 = obj.pop()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 932,
    title: "Monotonic Array",
    titleSlug: "monotonic-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>An array is <strong>monotonic</strong> if it is either monotone increasing or monotone decreasing.</p><p>An array <code>nums</code> is monotone increasing if for all <code>i &lt;= j</code>, <code>nums[i] &lt;= nums[j]</code>. An array <code>nums</code> is monotone decreasing if for all <code>i &lt;= j</code>, <code>nums[i] &gt;= nums[j]</code>.</p><p>Given an integer array <code>nums</code>, return <code>true</code><em> if the given array is monotonic, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,2,3]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [6,5,4,4]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [1,3,2]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 2, 3], [6, 5, 4, 4], [1, 3, 2]]",
    answer: "[true, true, false]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isMonotonic = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 933,
    title: "Increasing Order Search Tree",
    titleSlug: "increasing-order-search-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the given tree will be in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary search tree, rearrange the tree in <strong>in-order</strong> so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [5,3,6,2,4,null,8,1,null,null,null,7,9]",
        outputText:
          "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [5,1,7]",
        outputText: "[1,null,5,null,7]",
        explanation: "",
      },
    ],
    tests: "[[5, 3, 6, 2, 4, null, 8, 1, null, null, null, 7, 9], [5, 1, 7]]",
    answer:
      "[[1, null, 2, null, 3, null, 4, null, 5, null, 6, null, 7, null, 8, null, 9], [1, null, 5, null, 7]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar increasingBST = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 936,
    title: "RLE Iterator",
    titleSlug: "rle-iterator",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Design", "Counting", "Iterator"],
    constaints:
      "<li>For example, the sequence <code>arr = [8,8,8,5,5]</code> can be encoded to be <code>encoding = [3,8,2,5]</code>. <code>encoding = [3,8,0,9,2,5]</code> and <code>encoding = [2,8,1,8,2,5]</code> are also valid <strong>RLE</strong> of <code>arr</code>.</li> <li><code>RLEIterator(int[] encoded)</code> Initializes the object with the encoded array <code>encoded</code>.</li> <li><code>int next(int n)</code> Exhausts the next <code>n</code> elements and returns the last element exhausted in this way. If there is no element left to exhaust, return <code>-1</code> instead.</li> <li><code>2 &lt;= encoding.length &lt;= 1000</code></li> <li><code>encoding.length</code> is even.</li> <li><code>0 &lt;= encoding[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> <li>At most <code>1000</code> calls will be made to <code>next</code>.</li>",
    question:
      "<p>We can use run-length encoding (i.e., <strong>RLE</strong>) to encode a sequence of integers. In a run-length encoded array of even length <code>encoding</code> (<strong>0-indexed</strong>), for all even <code>i</code>, <code>encoding[i]</code> tells us the number of times that the non-negative integer value <code>encoding[i + 1]</code> is repeated in the sequence.</p><p>Given a run-length encoded array, design an iterator that iterates through it.</p><p>Implement the <code>RLEIterator</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["RLEIterator", "next", "next", "next", "next"]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]',
        outputText: "[null, 8, 8, 5, -1]",
        explanation:
          "RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1.",
      },
    ],
    tests: '[["RLEIterator", "next", "next", "next", "next"]]',
    answer: "[[null, 8, 8, 5, -1]]",
    code: "/**\n * @param {number[]} encoding\n */\nvar RLEIterator = function(encoding) {\n    \n};\n\n/** \n * @param {number} n\n * @return {number}\n */\nRLEIterator.prototype.next = function(n) {\n    \n};\n\n/** \n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(encoding)\n * var param_1 = obj.next(n)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 937,
    title: "Online Stock Span",
    titleSlug: "online-stock-span",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Stack", "Design", "Monotonic Stack", "Data Stream"],
    constaints:
      "<li>For example, if the prices of the stock in the last four days is <code>[7,2,1,2]</code> and the price of the stock today is <code>2</code>, then the span of today is <code>4</code> because starting from today, the price of the stock was less than or equal <code>2</code> for <code>4</code> consecutive days.</li> <li>Also, if the prices of the stock in the last four days is <code>[7,34,1,2]</code> and the price of the stock today is <code>8</code>, then the span of today is <code>3</code> because starting from today, the price of the stock was less than or equal <code>8</code> for <code>3</code> consecutive days.</li> <li><code>StockSpanner()</code> Initializes the object of the class.</li> <li><code>int next(int price)</code> Returns the <strong>span</strong> of the stock's price given that today's price is <code>price</code>.</li> <li><code>1 &lt;= price &lt;= 10<sup>5</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>next</code>.</li>",
    question:
      "<p>Design an algorithm that collects daily price quotes for some stock and returns <strong>the span</strong> of that stock's price for the current day.</p><p>The <strong>span</strong> of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.</p><p>Implement the <code>StockSpanner</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]\n[[], [100], [80], [60], [70], [60], [75], [85]]',
        outputText: "[null, 1, 1, 1, 2, 1, 4, 6]",
        explanation:
          "StockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80);  // return 1\nstockSpanner.next(60);  // return 1\nstockSpanner.next(70);  // return 2\nstockSpanner.next(60);  // return 1\nstockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\nstockSpanner.next(85);  // return 6",
      },
    ],
    tests:
      '[["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]]',
    answer: "[[null, 1, 1, 1, 2, 1, 4, 6]]",
    code: "\nvar StockSpanner = function() {\n    \n};\n\n/** \n * @param {number} price\n * @return {number}\n */\nStockSpanner.prototype.next = function(price) {\n    \n};\n\n/** \n * Your StockSpanner object will be instantiated and called as such:\n * var obj = new StockSpanner()\n * var param_1 = obj.next(price)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 944,
    title: "Smallest Range I",
    titleSlug: "smallest-range-i",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p><p>In one operation, you can choose any index <code>i</code> where <code>0 &lt;= i &lt; nums.length</code> and change <code>nums[i]</code> to <code>nums[i] + x</code> where <code>x</code> is an integer from the range <code>[-k, k]</code>. You can apply this operation <strong>at most once</strong> for each index <code>i</code>.</p><p>The <strong>score</strong> of <code>nums</code> is the difference between the maximum and minimum elements in <code>nums</code>.</p><p>Return <em>the minimum <strong>score</strong> of </em><code>nums</code><em> after applying the mentioned operation at most once for each index in it</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1], k = 0",
        outputText: "0",
        explanation: "The score is max(nums) - min(nums) = 1 - 1 = 0.",
      },
      {
        id: 2,
        inputText: "nums = [0,10], k = 2",
        outputText: "6",
        explanation:
          "Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.",
      },
      {
        id: 3,
        inputText: "nums = [1,3,6], k = 3",
        outputText: "0",
        explanation:
          "Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.",
      },
    ],
    tests: "[[1], [0, 10], [1, 3, 6]]",
    answer: "[0, 6, 0]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar smallestRangeI = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 948,
    title: "Sort an Array",
    titleSlug: "sort-an-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Merge Sort",
      "Bucket Sort",
      "Radix Sort",
      "Counting Sort",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-5 * 10<sup>4</sup> &lt;= nums[i] &lt;= 5 * 10<sup>4</sup></code></li>",
    question:
      "<p>Given an array of integers <code>nums</code>, sort the array in ascending order and return it.</p><p>You must solve the problem <strong>without using any built-in</strong> functions in <code>O(nlog(n))</code> time complexity and with the smallest space complexity possible.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [5,2,3,1]",
        outputText: "[1,2,3,5]",
        explanation:
          "After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).",
      },
      {
        id: 2,
        inputText: "nums = [5,1,1,2,0,0]",
        outputText: "[0,0,1,1,2,5]",
        explanation: "Note that the values of nums are not necessairly unique.",
      },
    ],
    tests: "[[5, 2, 3, 1], [5, 1, 1, 2, 0, 0]]",
    answer: "[[1, 2, 3, 5], [0, 0, 1, 1, 2, 5]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 950,
    title: "X of a Kind in a Deck of Cards",
    titleSlug: "x-of-a-kind-in-a-deck-of-cards",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Math", "Counting", "Number Theory"],
    constaints:
      "<li>Each group has <strong>exactly</strong> <code>x</code> cards where <code>x &gt; 1</code>, and</li> <li>All the cards in one group have the same integer written on them.</li> <li><code>1 &lt;= deck.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= deck[i] &lt; 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>deck</code> where <code>deck[i]</code> represents the number written on the <code>i<sup>th</sup></code> card.</p><p>Partition the cards into <strong>one or more groups</strong> such that:</p><p>Return <code>true</code><em> if such partition is possible, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "deck = [1,2,3,4,4,3,2,1]",
        outputText: "true",
        explanation: ": Possible partition [1,1],[2,2],[3,3],[4,4].",
      },
      {
        id: 2,
        inputText: "deck = [1,1,1,2,2,2,3,3]",
        outputText: "false",
        explanation: ": No possible partition.",
      },
    ],
    tests: "[[1, 2, 3, 4, 4, 3, 2, 1], [1, 1, 1, 2, 2, 2, 3, 3]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} deck\n * @return {boolean}\n */\nvar hasGroupsSizeX = function(deck) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 953,
    title: "Reverse Only Letters",
    titleSlug: "reverse-only-letters",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li>All the characters that are not English letters remain in the same position.</li> <li>All the English letters (lowercase or uppercase) should be reversed.</li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of characters with ASCII values in the range <code>[33, 122]</code>.</li> <li><code>s</code> does not contain <code>'\\\"'</code> or <code>'\\\\'</code>.</li>",
    question:
      "<p>Given a string <code>s</code>, reverse the string according to the following rules:</p><p>Return <code>s</code><em> after reversing it</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "ab-cd"',
        outputText: '"dc-ba"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "a-bC-dEf-ghIj"',
        outputText: '"j-Ih-gfE-dCba"',
        explanation: "",
      },
      {
        id: 3,
        inputText: 's = "Test1ng-Leet=code-Q!"',
        outputText: '"Qedo1ct-eeLg=ntse-T!"',
        explanation: "",
      },
    ],
    tests: '["ab-cd", "a-bC-dEf-ghIj", "Test1ng-Leet=code-Q!"]',
    answer: '["dc-ba", "j-Ih-gfE-dCba", "Qedo1ct-eeLg=ntse-T!"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseOnlyLetters = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 954,
    title: "Maximum Sum Circular Subarray",
    titleSlug: "maximum-sum-circular-subarray",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Queue",
      "Monotonic Queue",
    ],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li>",
    question:
      "<p>Given a <strong>circular integer array</strong> <code>nums</code> of length <code>n</code>, return <em>the maximum possible sum of a non-empty <strong>subarray</strong> of </em><code>nums</code>.</p><p>A <strong>circular array</strong> means the end of the array connects to the beginning of the array. Formally, the next element of <code>nums[i]</code> is <code>nums[(i + 1) % n]</code> and the previous element of <code>nums[i]</code> is <code>nums[(i - 1 + n) % n]</code>.</p><p>A <strong>subarray</strong> may only include each element of the fixed buffer <code>nums</code> at most once. Formally, for a subarray <code>nums[i], nums[i + 1], ..., nums[j]</code>, there does not exist <code>i &lt;= k1</code>, <code>k2 &lt;= j</code> with <code>k1 % n == k2 % n</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,-2,3,-2]",
        outputText: "3",
        explanation: "Subarray [3] has maximum sum 3.",
      },
      {
        id: 2,
        inputText: "nums = [5,-3,5]",
        outputText: "10",
        explanation: "Subarray [5,5] has maximum sum 5 + 5 = 10.",
      },
      {
        id: 3,
        inputText: "nums = [-3,-2,-3]",
        outputText: "-2",
        explanation: "Subarray [-2] has maximum sum -2.",
      },
    ],
    tests: "[[1, -2, 3, -2], [5, -3, 5], [-3, -2, -3]]",
    answer: "[3, 10, -2]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubarraySumCircular = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 957,
    title: "Minimum Add to Make Parentheses Valid",
    titleSlug: "minimum-add-to-make-parentheses-valid",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Greedy"],
    constaints:
      '<li>It is the empty string,</li> <li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li> <li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li> <li>For example, if <code>s = "()))"</code>, you can insert an opening parenthesis to be <code>"(<strong>(</strong>)))"</code> or a closing parenthesis to be <code>"())<strong>)</strong>)"</code>.</li> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>\'(\'</code> or <code>\')\'</code>.</li>',
    question:
      "<p>A parentheses string is valid if and only if:</p><p>You are given a parentheses string <code>s</code>. In one move, you can insert a parenthesis at any position of the string.</p><p>Return <em>the minimum number of moves required to make </em><code>s</code><em> valid</em>.</p>",
    examples: [
      { id: 1, inputText: 's = "())"', outputText: "1", explanation: "" },
      { id: 2, inputText: 's = "((("', outputText: "3", explanation: "" },
    ],
    tests: '["())", "((("]',
    answer: "[1, 3]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar minAddToMakeValid = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 958,
    title: "Sort Array By Parity II",
    titleSlug: "sort-array-by-parity-ii",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Sorting"],
    constaints:
      "<li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>nums.length</code> is even.</li> <li>Half of the integers in <code>nums</code> are even.</li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>Given an array of integers <code>nums</code>, half of the integers in <code>nums</code> are <strong>odd</strong>, and the other half are <strong>even</strong>.</p><p>Sort the array so that whenever <code>nums[i]</code> is odd, <code>i</code> is <strong>odd</strong>, and whenever <code>nums[i]</code> is even, <code>i</code> is <strong>even</strong>.</p><p>Return <em>any answer array that satisfies this condition</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,2,5,7]",
        outputText: "[4,5,2,7]",
        explanation:
          "[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.",
      },
      {
        id: 2,
        inputText: "nums = [2,3]",
        outputText: "[2,3]",
        explanation: "",
      },
    ],
    tests: "[[4, 2, 5, 7], [2, 3]]",
    answer: "[[4, 5, 2, 7], [2, 3]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArrayByParityII = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 959,
    title: "3Sum With Multiplicity",
    titleSlug: "3sum-with-multiplicity",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Two Pointers", "Sorting", "Counting"],
    constaints:
      "<li><code>3 &lt;= arr.length &lt;= 3000</code></li> <li><code>0 &lt;= arr[i] &lt;= 100</code></li> <li><code>0 &lt;= target &lt;= 300</code></li>",
    question:
      "<p>Given an integer array <code>arr</code>, and an integer <code>target</code>, return the number of tuples <code>i, j, k</code> such that <code>i &lt; j &lt; k</code> and <code>arr[i] + arr[j] + arr[k] == target</code>.</p><p>As the answer can be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,1,2,2,3,3,4,4,5,5], target = 8",
        outputText: "20",
        explanation:
          "Enumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.",
      },
      {
        id: 2,
        inputText: "arr = [1,1,2,2,2,2], target = 5",
        outputText: "12",
        explanation:
          "arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.",
      },
      {
        id: 3,
        inputText: "arr = [2,1,3], target = 6",
        outputText: "1",
        explanation: "(1, 2, 3) occured one time in the array so we return 1.",
      },
    ],
    tests: "[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [1, 1, 2, 2, 2, 2], [2, 1, 3]]",
    answer: "[20, 12, 1]",
    code: "/**\n * @param {number[]} arr\n * @param {number} target\n * @return {number}\n */\nvar threeSumMulti = function(arr, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 961,
    title: "Long Pressed Name",
    titleSlug: "long-pressed-name",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= name.length, typed.length &lt;= 1000</code></li> <li><code>name</code> and <code>typed</code> consist of only lowercase English letters.</li>",
    question:
      "<p>Your friend is typing his <code>name</code> into a keyboard. Sometimes, when typing a character <code>c</code>, the key might get <em>long pressed</em>, and the character will be typed 1 or more times.</p><p>You examine the <code>typed</code> characters of the keyboard. Return <code>True</code> if it is possible that it was your friends name, with some characters (possibly none) being long pressed.</p>",
    examples: [
      {
        id: 1,
        inputText: 'name = "alex", typed = "aaleex"',
        outputText: "true",
        explanation: "'a' and 'e' in 'alex' were long pressed.",
      },
      {
        id: 2,
        inputText: 'name = "saeed", typed = "ssaaedd"',
        outputText: "false",
        explanation:
          "'e' must have been pressed twice, but it was not in the typed output.",
      },
    ],
    tests: '["alex", "saeed"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} name\n * @param {string} typed\n * @return {boolean}\n */\nvar isLongPressedName = function(name, typed) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 965,
    title: "Unique Email Addresses",
    titleSlug: "unique-email-addresses",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      '<li>For example, in <code>"alice@leetcode.com"</code>, <code>"alice"</code> is the <strong>local name</strong>, and <code>"leetcode.com"</code> is the <strong>domain name</strong>.</li> <li>For example, <code>"alice.z@leetcode.com"</code> and <code>"alicez@leetcode.com"</code> forward to the same email address.</li> <li>For example, <code>"m.y+name@email.com"</code> will be forwarded to <code>"my@email.com"</code>.</li> <li><code>1 &lt;= emails.length &lt;= 100</code></li> <li><code>1 &lt;= emails[i].length &lt;= 100</code></li> <li><code>emails[i]</code> consist of lowercase English letters, <code>\'+\'</code>, <code>\'.\'</code> and <code>\'@\'</code>.</li> <li>Each <code>emails[i]</code> contains exactly one <code>\'@\'</code> character.</li> <li>All local and domain names are non-empty.</li> <li>Local names do not start with a <code>\'+\'</code> character.</li> <li>Domain names end with the <code>".com"</code> suffix.</li>',
    question:
      "<p>Every <strong>valid email</strong> consists of a <strong>local name</strong> and a <strong>domain name</strong>, separated by the <code>'@'</code> sign. Besides lowercase letters, the email may contain one or more <code>'.'</code> or <code>'+'</code>.</p><p>If you add periods <code>'.'</code> between some characters in the <strong>local name</strong> part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule <strong>does not apply</strong> to <strong>domain names</strong>.</p><p>If you add a plus <code>'+'</code> in the <strong>local name</strong>, everything after the first plus sign <strong>will be ignored</strong>. This allows certain emails to be filtered. Note that this rule <strong>does not apply</strong> to <strong>domain names</strong>.</p><p>It is possible to use both of these rules at the same time.</p><p>Given an array of strings <code>emails</code> where we send one email to each <code>emails[i]</code>, return <em>the number of different addresses that actually receive mails</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'emails = ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]',
        outputText: "2",
        explanation:
          '"testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails.',
      },
      {
        id: 2,
        inputText:
          'emails = ["a@leetcode.com","b@leetcode.com","c@leetcode.com"]',
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      '[["test.email+alex@leetcode.com", "test.e.mail+bob.cathy@leetcode.com", "testemail+david@lee.tcode.com"], ["a@leetcode.com", "b@leetcode.com", "c@leetcode.com"]]',
    answer: "[2, 3]",
    code: "/**\n * @param {string[]} emails\n * @return {number}\n */\nvar numUniqueEmails = function(emails) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 967,
    title: "Minimum Falling Path Sum",
    titleSlug: "minimum-falling-path-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Matrix"],
    constaints:
      "<li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>",
    question:
      "<p>Given an <code>n x n</code> array of integers <code>matrix</code>, return <em>the <strong>minimum sum</strong> of any <strong>falling path</strong> through</em> <code>matrix</code>.</p><p>A <strong>falling path</strong> starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position <code>(row, col)</code> will be <code>(row + 1, col - 1)</code>, <code>(row + 1, col)</code>, or <code>(row + 1, col + 1)</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[2,1,3],[6,5,4],[7,8,9]]",
        outputText: "13",
        explanation: "There are two falling paths with a minimum sum as shown.",
      },
      {
        id: 2,
        inputText: "matrix = [[-19,57],[-40,-5]]",
        outputText: "-59",
        explanation: "The falling path with a minimum sum is shown.",
      },
    ],
    tests: "[[[2, 1, 3], [6, 5, 4], [7, 8, 9]], [[-19, 57], [-40, -5]]]",
    answer: "[13, -59]",
    code: "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar minFallingPathSum = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 969,
    title: "Number of Recent Calls",
    titleSlug: "number-of-recent-calls",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Design", "Queue", "Data Stream"],
    constaints:
      "<li><code>RecentCounter()</code> Initializes the counter with zero recent requests.</li> <li><code>int ping(int t)</code> Adds a new request at time <code>t</code>, where <code>t</code> represents some time in milliseconds, and returns the number of requests that has happened in the past <code>3000</code> milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range <code>[t - 3000, t]</code>.</li> <li><code>1 &lt;= t &lt;= 10<sup>9</sup></code></li> <li>Each test case will call <code>ping</code> with <strong>strictly increasing</strong> values of <code>t</code>.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>ping</code>.</li>",
    question:
      "<p>You have a <code>RecentCounter</code> class which counts the number of recent requests within a certain time frame.</p><p>Implement the <code>RecentCounter</code> class:</p><p>It is <strong>guaranteed</strong> that every call to <code>ping</code> uses a strictly larger value of <code>t</code> than the previous call.</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["RecentCounter", "ping", "ping", "ping", "ping"]\n[[], [1], [100], [3001], [3002]]',
        outputText: "[null, 1, 2, 3, 3]",
        explanation:
          "RecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [",
      },
    ],
    tests: '[["RecentCounter", "ping", "ping", "ping", "ping"]]',
    answer: "[[null, 1, 2, 3, 3]]",
    code: "\nvar RecentCounter = function() {\n    \n};\n\n/** \n * @param {number} t\n * @return {number}\n */\nRecentCounter.prototype.ping = function(t) {\n    \n};\n\n/** \n * Your RecentCounter object will be instantiated and called as such:\n * var obj = new RecentCounter()\n * var param_1 = obj.ping(t)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 972,
    title: "Knight Dialer",
    titleSlug: "knight-dialer",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Dynamic Programming"],
    constaints: "<li><code>1 &lt;= n &lt;= 5000</code></li>",
    question:
      "<p>The chess knight has a <strong>unique movement</strong>,\u00a0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an <strong>L</strong>). The possible movements of chess knight are shown in this diagram:</p><p>A chess knight can move as indicated in the chess diagram below:</p><p>We have a chess knight and a phone pad as shown below, the knight <strong>can only stand on a numeric cell</strong>\u00a0(i.e. blue cell).</p><p>Given an integer <code>n</code>, return how many distinct phone numbers of length <code>n</code> we can dial.</p><p>You are allowed to place the knight <strong>on any numeric cell</strong> initially and then you should perform <code>n - 1</code> jumps to dial a number of length <code>n</code>. All jumps should be <strong>valid</strong> knight jumps.</p><p>As the answer may be very large, <strong>return the answer modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 1",
        outputText: "10",
        explanation:
          "We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.",
      },
      {
        id: 2,
        inputText: "n = 2",
        outputText: "20",
        explanation:
          "All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]",
      },
      {
        id: 3,
        inputText: "n = 3131",
        outputText: "136006598",
        explanation: "Please take care of the mod.",
      },
    ],
    tests: "[1, 2, 3131]",
    answer: "[10, 20, 136006598]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar knightDialer = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 973,
    title: "Stamping The Sequence",
    titleSlug: "stamping-the-sequence",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Stack", "Greedy", "Queue"],
    constaints:
      '<li>For example, if <code>stamp = "abc"</code> and <code>target = "abcba"</code>, then <code>s</code> is <code>"?????"</code> initially. In one turn you can:\n\n\t<ul>\n<li>place <code>stamp</code> at index <code>0</code> of <code>s</code> to obtain <code>"abc??"</code>,</li>\n<li>place <code>stamp</code> at index <code>1</code> of <code>s</code> to obtain <code>"?abc?"</code>, or</li>\n<li>place <code>stamp</code> at index <code>2</code> of <code>s</code> to obtain <code>"??abc"</code>.</li>\n</ul>\n\tNote that <code>stamp</code> must be fully contained in the boundaries of <code>s</code> in order to stamp (i.e., you cannot place <code>stamp</code> at index <code>3</code> of <code>s</code>).</li> <li>place <code>stamp</code> at index <code>0</code> of <code>s</code> to obtain <code>"abc??"</code>,</li> <li>place <code>stamp</code> at index <code>1</code> of <code>s</code> to obtain <code>"?abc?"</code>, or</li> <li>place <code>stamp</code> at index <code>2</code> of <code>s</code> to obtain <code>"??abc"</code>.</li> <li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li> <li><code>stamp</code> and <code>target</code> consist of lowercase English letters.</li>',
    question:
      "<p>You are given two strings <code>stamp</code> and <code>target</code>. Initially, there is a string <code>s</code> of length <code>target.length</code> with all <code>s[i] == '?'</code>.</p><p>In one turn, you can place <code>stamp</code> over <code>s</code> and replace every letter in the <code>s</code> with the corresponding letter from <code>stamp</code>.</p><p>We want to convert <code>s</code> to <code>target</code> using <strong>at most</strong> <code>10 * target.length</code> turns.</p><p>Return <em>an array of the index of the left-most letter being stamped at each turn</em>. If we cannot obtain <code>target</code> from <code>s</code> within <code>10 * target.length</code> turns, return an empty array.</p>",
    examples: [
      {
        id: 1,
        inputText: 'stamp = "abc", target = "ababc"',
        outputText: "[0,2]",
        explanation:
          'Initially s = "?????".\n- Place stamp at index 0 to get "abc??".\n- Place stamp at index 2 to get "ababc".\n[1,0,2] would also be accepted as an answer, as well as some other answers.',
      },
      {
        id: 2,
        inputText: 'stamp = "abca", target = "aabcaca"',
        outputText: "[3,0,1]",
        explanation:
          'Initially s = "???????".\n- Place stamp at index 3 to get "???abca".\n- Place stamp at index 0 to get "abcabca".\n- Place stamp at index 1 to get "aabcaca".',
      },
    ],
    tests: '["abc", "abca"]',
    answer: "[[0, 2], [3, 0, 1]]",
    code: "/**\n * @param {string} stamp\n * @param {string} target\n * @return {number[]}\n */\nvar movesToStamp = function(stamp, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 975,
    title: "Range Sum of BST",
    titleSlug: "range-sum-of-bst",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 2 * 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= low &lt;= high &lt;= 10<sup>5</sup></code></li> <li>All <code>Node.val</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given the <code>root</code> node of a binary search tree and two integers <code>low</code> and <code>high</code>, return <em>the sum of values of all nodes with a value in the <strong>inclusive</strong> range </em><code>[low, high]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [10,5,15,3,7,null,18], low = 7, high = 15",
        outputText: "32",
        explanation:
          "Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.",
      },
      {
        id: 2,
        inputText: "root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10",
        outputText: "23",
        explanation:
          "Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.",
      },
    ],
    tests:
      "[[10, 5, 15, 3, 7, null, 18], [10, 5, 15, 3, 7, 13, 18, 1, null, 6]]",
    answer: "[32, 23]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} low\n * @param {number} high\n * @return {number}\n */\nvar rangeSumBST = function(root, low, high) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 978,
    title: "Valid Mountain Array",
    titleSlug: "valid-mountain-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>arr.length &gt;= 3</code></li> <li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li>\n<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n</ul>\n</li> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an array of integers <code>arr</code>, return <em><code>true</code> if and only if it is a valid mountain array</em>.</p><p>Recall that arr is a mountain array if and only if:</p>",
    examples: [
      { id: 1, inputText: "arr = [2,1]", outputText: "false", explanation: "" },
      {
        id: 2,
        inputText: "arr = [3,5,5]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "arr = [0,3,2,1]",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[[2, 1], [3, 5, 5], [0, 3, 2, 1]]",
    answer: "[false, false, true]",
    code: "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar validMountainArray = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 979,
    title: "DI String Match",
    titleSlug: "di-string-match",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "String", "Greedy"],
    constaints:
      "<li><code>s[i] == 'I'</code> if <code>perm[i] &lt; perm[i + 1]</code>, and</li> <li><code>s[i] == 'D'</code> if <code>perm[i] &gt; perm[i + 1]</code>.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'I'</code> or <code>'D'</code>.</li>",
    question:
      "<p>A permutation <code>perm</code> of <code>n + 1</code> integers of all the integers in the range <code>[0, n]</code> can be represented as a string <code>s</code> of length <code>n</code> where:</p><p>Given a string <code>s</code>, reconstruct the permutation <code>perm</code> and return it. If there are multiple valid permutations perm, return <strong>any of them</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "IDID"',
        outputText: "[0,4,1,3,2]",
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "III"',
        outputText: "[0,1,2,3]",
        explanation: "",
      },
      {
        id: 3,
        inputText: 's = "DDI"',
        outputText: "[3,2,0,1]",
        explanation: "",
      },
    ],
    tests: '["IDID", "III", "DDI"]',
    answer: "[[0, 4, 1, 3, 2], [0, 1, 2, 3], [3, 2, 0, 1]]",
    code: "/**\n * @param {string} s\n * @return {number[]}\n */\nvar diStringMatch = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 983,
    title: "Validate Stack Sequences",
    titleSlug: "validate-stack-sequences",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Stack", "Simulation"],
    constaints:
      "<li><code>1 &lt;= pushed.length &lt;= 1000</code></li> <li><code>0 &lt;= pushed[i] &lt;= 1000</code></li> <li>All the elements of <code>pushed</code> are <strong>unique</strong>.</li> <li><code>popped.length == pushed.length</code></li> <li><code>popped</code> is a permutation of <code>pushed</code>.</li>",
    question:
      "<p>Given two integer arrays <code>pushed</code> and <code>popped</code> each with distinct values, return <code>true</code><em> if this could have been the result of a sequence of push and pop operations on an initially empty stack, or </em><code>false</code><em> otherwise.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "pushed = [1,2,3,4,5], popped = [4,5,3,2,1]",
        outputText: "true",
        explanation:
          "We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -> 4,\npush(5),\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1",
      },
      {
        id: 2,
        inputText: "pushed = [1,2,3,4,5], popped = [4,3,5,1,2]",
        outputText: "false",
        explanation: "1 cannot be popped before 2.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} pushed\n * @param {number[]} popped\n * @return {boolean}\n */\nvar validateStackSequences = function(pushed, popped) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 987,
    title: "Reveal Cards In Increasing Order",
    titleSlug: "reveal-cards-in-increasing-order",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Queue", "Sorting", "Simulation"],
    constaints:
      "<li>Take the top card of the deck, reveal it, and take it out of the deck.</li> <li>If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.</li> <li>If there are still unrevealed cards, go back to step 1. Otherwise, stop.</li> <li><code>1 &lt;= deck.length &lt;= 1000</code></li> <li><code>1 &lt;= deck[i] &lt;= 10<sup>6</sup></code></li> <li>All the values of <code>deck</code> are <strong>unique</strong>.</li>",
    question:
      "<p>You are given an integer array <code>deck</code>. There is a deck of cards where every card has a unique integer. The integer on the <code>i<sup>th</sup></code> card is <code>deck[i]</code>.</p><p>You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.</p><p>You will do the following steps repeatedly until all cards are revealed:</p><p>Return <em>an ordering of the deck that would reveal the cards in increasing order</em>.</p><p><strong>Note</strong> that the first entry in the answer is considered to be the top of the deck.</p>",
    examples: [
      {
        id: 1,
        inputText: "deck = [17,13,11,2,3,5,7]",
        outputText: "[2,13,3,11,5,17,7]",
        explanation:
          "We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.",
      },
      {
        id: 2,
        inputText: "deck = [1,1000]",
        outputText: "[1,1000]",
        explanation: "",
      },
    ],
    tests: "[[17, 13, 11, 2, 3, 5, 7], [1, 1000]]",
    answer: "[[2, 13, 3, 11, 5, 17, 7], [1, 1000]]",
    code: "/**\n * @param {number[]} deck\n * @return {number[]}\n */\nvar deckRevealedIncreasing = function(deck) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 988,
    title: "Flip Equivalent Binary Trees",
    titleSlug: "flip-equivalent-binary-trees",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in each tree is in the range <code>[0, 100]</code>.</li> <li>Each tree will have <strong>unique node values</strong> in the range <code>[0, 99]</code>.</li>",
    question:
      "<p>For a binary tree <strong>T</strong>, we can define a <strong>flip operation</strong> as follows: choose any node, and swap the left and right child subtrees.</p><p>A binary tree <strong>X</strong>\u00a0is <em>flip equivalent</em> to a binary tree <strong>Y</strong> if and only if we can make <strong>X</strong> equal to <strong>Y</strong> after some number of flip operations.</p><p>Given the roots of two binary trees <code>root1</code> and <code>root2</code>, return <code>true</code> if the two trees are flip equivalent or <code>false</code> otherwise.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]",
        outputText: "true",
        explanation: "We flipped at nodes with values 1, 3, and 5.",
      },
      {
        id: 2,
        inputText: "root1 = [], root2 = []",
        outputText: "true",
        explanation: "",
      },
      {
        id: 3,
        inputText: "root1 = [], root2 = [1]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5, 6, null, null, null, 7, 8], [], []]",
    answer: "[true, true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {boolean}\n */\nvar flipEquiv = function(root1, root2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 990,
    title: "Verifying an Alien Dictionary",
    titleSlug: "verifying-an-alien-dictionary",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li><code>order.length == 26</code></li> <li>All characters in <code>words[i]</code> and <code>order</code> are English lowercase letters.</li>",
    question:
      "<p>In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different <code>order</code>. The <code>order</code> of the alphabet is some permutation of lowercase letters.</p><p>Given a sequence of <code>words</code> written in the alien language, and the <code>order</code> of the alphabet, return <code>true</code> if and only if the given <code>words</code> are sorted lexicographically in this alien language.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz"',
        outputText: "true",
        explanation:
          "As 'h' comes before 'l' in this language, then the sequence is sorted.",
      },
      {
        id: 2,
        inputText:
          'words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz"',
        outputText: "false",
        explanation:
          "As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.",
      },
      {
        id: 3,
        inputText:
          'words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"',
        outputText: "false",
        explanation:
          "The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character (",
      },
    ],
    tests:
      '[["hello", "leetcode"], ["word", "world", "row"], ["apple", "app"]]',
    answer: "[true, false, false]",
    code: "/**\n * @param {string[]} words\n * @param {string} order\n * @return {boolean}\n */\nvar isAlienSorted = function(words, order) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 991,
    title: "Array of Doubled Pairs",
    titleSlug: "array-of-doubled-pairs",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Greedy", "Sorting"],
    constaints:
      "<li><code>2 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>arr.length</code> is even.</li> <li><code>-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an integer array of even length <code>arr</code>, return <code>true</code><em> if it is possible to reorder </em><code>arr</code><em> such that </em><code>arr[2 * i + 1] = 2 * arr[2 * i]</code><em> for every </em><code>0 &lt;= i &lt; len(arr) / 2</code><em>, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [3,1,3,6]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 2,
        inputText: "arr = [2,1,2,6]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "arr = [4,-2,2,-4]",
        outputText: "true",
        explanation:
          "We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].",
      },
    ],
    tests: "[[3, 1, 3, 6], [2, 1, 2, 6], [4, -2, 2, -4]]",
    answer: "[false, false, true]",
    code: "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar canReorderDoubled = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 994,
    title: "Prison Cells After N Days",
    titleSlug: "prison-cells-after-n-days",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Math", "Bit Manipulation"],
    constaints:
      "<li>If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.</li> <li>Otherwise, it becomes vacant.</li> <li><code>cells.length == 8</code></li> <li><code>cells[i]</code>\u00a0is either <code>0</code> or <code>1</code>.</li> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>There are <code>8</code> prison cells in a row and each cell is either occupied or vacant.</p><p>Each day, whether the cell is occupied or vacant changes according to the following rules:</p><p><strong>Note</strong> that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.</p><p>You are given an integer array <code>cells</code> where <code>cells[i] == 1</code> if the <code>i<sup>th</sup></code> cell is occupied and <code>cells[i] == 0</code> if the <code>i<sup>th</sup></code> cell is vacant, and you are given an integer <code>n</code>.</p><p>Return the state of the prison after <code>n</code> days (i.e., <code>n</code> such changes described above).</p>",
    examples: [
      {
        id: 1,
        inputText: "cells = [0,1,0,1,1,0,0,1], n = 7",
        outputText: "[0,0,1,1,0,0,0,0]",
        explanation:
          "The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]",
      },
      {
        id: 2,
        inputText: "cells = [1,0,0,1,0,0,1,0], n = 1000000000",
        outputText: "[0,0,1,1,1,1,1,0]",
        explanation: "",
      },
    ],
    tests: "[[0, 1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0]]",
    answer: "[[0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0]]",
    code: "/**\n * @param {number[]} cells\n * @param {number} n\n * @return {number[]}\n */\nvar prisonAfterNDays = function(cells, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 998,
    title: "Check Completeness of a Binary Tree",
    titleSlug: "check-completeness-of-a-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Breadth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      '<p>Given the <code>root</code> of a binary tree, determine if it is a <em>complete binary tree</em>.</p><p>In a <strong><a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank">complete binary tree</a></strong>, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and <code>2<sup>h</sup></code> nodes inclusive at the last level <code>h</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,4,5,6]",
        outputText: "true",
        explanation:
          "Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.",
      },
      {
        id: 2,
        inputText: "root = [1,2,3,4,5,null,7]",
        outputText: "false",
        explanation: "The node with value 7 isn't as far left as possible.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, null, 7]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isCompleteTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1001,
    title: "N-Repeated Element in Size 2N Array",
    titleSlug: "n-repeated-element-in-size-2n-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>nums.length == 2 * n</code>.</li> <li><code>nums</code> contains <code>n + 1</code> <strong>unique</strong> elements.</li> <li>Exactly one element of <code>nums</code> is repeated <code>n</code> times.</li> <li><code>2 &lt;= n &lt;= 5000</code></li> <li><code>nums.length == 2 * n</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> contains <code>n + 1</code> <strong>unique</strong> elements and one of them is repeated exactly <code>n</code> times.</li>",
    question:
      "<p>You are given an integer array <code>nums</code> with the following properties:</p><p>Return <em>the element that is repeated </em><code>n</code><em> times</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,3]",
        outputText: "3",
        explanation: "",
      },
      {
        id: 2,
        inputText: "nums = [2,1,2,5,3,2]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [5,1,5,2,5,3,5,4]",
        outputText: "5",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 3], [2, 1, 2, 5, 3, 2], [5, 1, 5, 2, 5, 3, 5, 4]]",
    answer: "[3, 2, 5]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar repeatedNTimes = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1005,
    title: "Univalued Binary Tree",
    titleSlug: "univalued-binary-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt; 100</code></li>",
    question:
      "<p>A binary tree is <strong>uni-valued</strong> if every node in the tree has the same value.</p><p>Given the <code>root</code> of a binary tree, return <code>true</code><em> if the given tree is <strong>uni-valued</strong>, or </em><code>false</code><em> otherwise.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,1,1,1,1,null,1]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [2,2,2,5,2]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 1, 1, 1, 1, null, 1], [2, 2, 2, 5, 2]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isUnivalTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1006,
    title: "Vowel Spellchecker",
    titleSlug: "vowel-spellchecker",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      '<li>Capitalization: If the query matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the case in the wordlist.\n\n\t<ul>\n<li>Example: <code>wordlist = ["yellow"]</code>, <code>query = "YellOw"</code>: <code>correct = "yellow"</code></li>\n<li>Example: <code>wordlist = ["Yellow"]</code>, <code>query = "yellow"</code>: <code>correct = "Yellow"</code></li>\n<li>Example: <code>wordlist = ["yellow"]</code>, <code>query = "yellow"</code>: <code>correct = "yellow"</code></li>\n</ul>\n</li> <li>Example: <code>wordlist = ["yellow"]</code>, <code>query = "YellOw"</code>: <code>correct = "yellow"</code></li> <li>Example: <code>wordlist = ["Yellow"]</code>, <code>query = "yellow"</code>: <code>correct = "Yellow"</code></li> <li>Example: <code>wordlist = ["yellow"]</code>, <code>query = "yellow"</code>: <code>correct = "yellow"</code></li> <li>Vowel Errors: If after replacing the vowels <code>(\'a\', \'e\', \'i\', \'o\', \'u\')</code> of the query word with any vowel individually, it matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the match in the wordlist.\n\t<ul>\n<li>Example: <code>wordlist = ["YellOw"]</code>, <code>query = "yollow"</code>: <code>correct = "YellOw"</code></li>\n<li>Example: <code>wordlist = ["YellOw"]</code>, <code>query = "yeellow"</code>: <code>correct = ""</code> (no match)</li>\n<li>Example: <code>wordlist = ["YellOw"]</code>, <code>query = "yllw"</code>: <code>correct = ""</code> (no match)</li>\n</ul>\n</li> <li>Example: <code>wordlist = ["YellOw"]</code>, <code>query = "yollow"</code>: <code>correct = "YellOw"</code></li> <li>Example: <code>wordlist = ["YellOw"]</code>, <code>query = "yeellow"</code>: <code>correct = ""</code> (no match)</li> <li>Example: <code>wordlist = ["YellOw"]</code>, <code>query = "yllw"</code>: <code>correct = ""</code> (no match)</li> <li>When the query exactly matches a word in the wordlist (<strong>case-sensitive</strong>), you should return the same word back.</li> <li>When the query matches a word up to capitlization, you should return the first such match in the wordlist.</li> <li>When the query matches a word up to vowel errors, you should return the first such match in the wordlist.</li> <li>If the query has no matches in the wordlist, you should return the empty string.</li> <li><code>1 &lt;= wordlist.length, queries.length &lt;= 5000</code></li> <li><code>1 &lt;= wordlist[i].length, queries[i].length &lt;= 7</code></li> <li><code>wordlist[i]</code> and <code>queries[i]</code> consist only of only English letters.</li>',
    question:
      "<p>Given a <code>wordlist</code>, we want to implement a spellchecker that converts a query word into a correct word.</p><p>For a given <code>query</code> word, the spell checker handles two categories of spelling mistakes:</p><p>In addition, the spell checker operates under the following precedence rules:</p><p>Given some <code>queries</code>, return a list of words <code>answer</code>, where <code>answer[i]</code> is the correct word for <code>query = queries[i]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'wordlist = ["KiTe","kite","hare","Hare"], queries = ["kite","Kite","KiTe","Hare","HARE","Hear","hear","keti","keet","keto"]',
        outputText:
          '["kite","KiTe","KiTe","Hare","hare","","","KiTe","","KiTe"]',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'wordlist = ["yellow"], queries = ["YellOw"]',
        outputText: '["yellow"]',
        explanation: "",
      },
    ],
    tests: '[["KiTe", "kite", "hare", "Hare"], ["yellow"]]',
    answer:
      '[["kite", "KiTe", "KiTe", "Hare", "hare", "", "", "KiTe", "", "KiTe"], ["yellow"]]',
    code: "/**\n * @param {string[]} wordlist\n * @param {string[]} queries\n * @return {string[]}\n */\nvar spellchecker = function(wordlist, queries) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1010,
    title: "Powerful Integers",
    titleSlug: "powerful-integers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Math", "Enumeration"],
    constaints:
      "<li><code>1 &lt;= x, y &lt;= 100</code></li> <li><code>0 &lt;= bound &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given three integers <code>x</code>, <code>y</code>, and <code>bound</code>, return <em>a list of all the <strong>powerful integers</strong> that have a value less than or equal to</em> <code>bound</code>.</p><p>An integer is <strong>powerful</strong> if it can be represented as <code>x<sup>i</sup> + y<sup>j</sup></code> for some integers <code>i &gt;= 0</code> and <code>j &gt;= 0</code>.</p><p>You may return the answer in <strong>any order</strong>. In your answer, each value should occur <strong>at most once</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "x = 2, y = 3, bound = 10",
        outputText: "[2,3,4,5,7,9,10]",
        explanation: "2 = 2",
      },
      {
        id: 2,
        inputText: "x = 3, y = 5, bound = 15",
        outputText: "[2,4,6,8,10,14]",
        explanation: "",
      },
    ],
    tests: "[2, 3]",
    answer: "[[2, 3, 4, 5, 7, 9, 10], [2, 4, 6, 8, 10, 14]]",
    code: "/**\n * @param {number} x\n * @param {number} y\n * @param {number} bound\n * @return {number[]}\n */\nvar powerfulIntegers = function(x, y, bound) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1014,
    title: "K Closest Points to Origin",
    titleSlug: "k-closest-points-to-origin",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Math",
      "Divide and Conquer",
      "Geometry",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect",
    ],
    constaints:
      "<li><code>1 &lt;= k &lt;= points.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane and an integer <code>k</code>, return the <code>k</code> closest points to the origin <code>(0, 0)</code>.</p><p>The distance between two points on the <strong>X-Y</strong> plane is the Euclidean distance (i.e., <code>\u221a(x<sub>1</sub> - x<sub>2</sub>)<sup>2</sup> + (y<sub>1</sub> - y<sub>2</sub>)<sup>2</sup></code>).</p><p>You may return the answer in <strong>any order</strong>. The answer is <strong>guaranteed</strong> to be <strong>unique</strong> (except for the order that it is in).</p>",
    examples: [
      {
        id: 1,
        inputText: "points = [[1,3],[-2,2]], k = 1",
        outputText: "[[-2,2]]",
        explanation:
          "The distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].",
      },
      {
        id: 2,
        inputText: "points = [[3,3],[5,-1],[-2,4]], k = 2",
        outputText: "[[3,3],[-2,4]]",
        explanation: "The answer [[-2,4],[3,3]] would also be accepted.",
      },
    ],
    tests: "[[[1, 3], [-2, 2]], [[3, 3], [5, -1], [-2, 4]]]",
    answer: "[[[-2, 2]], [[3, 3], [-2, 4]]]",
    code: "/**\n * @param {number[][]} points\n * @param {number} k\n * @return {number[][]}\n */\nvar kClosest = function(points, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1016,
    title: "Subarray Sums Divisible by K",
    titleSlug: "subarray-sums-divisible-by-k",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>2 &lt;= k &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the number of non-empty <strong>subarrays</strong> that have a sum divisible by </em><code>k</code>.</p><p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,5,0,-2,-3,1], k = 5",
        outputText: "7",
        explanation:
          "There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]",
      },
      {
        id: 2,
        inputText: "nums = [5], k = 9",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[[4, 5, 0, -2, -3, 1], [5]]",
    answer: "[7, 0]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraysDivByK = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1018,
    title: "Largest Perimeter Triangle",
    titleSlug: "largest-perimeter-triangle",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Greedy", "Sorting"],
    constaints:
      "<li><code>3 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>the largest perimeter of a triangle with a non-zero area, formed from three of these lengths</em>. If it is impossible to form any triangle of a non-zero area, return <code>0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,1,2]",
        outputText: "5",
        explanation:
          "You can form a triangle with three side lengths: 1, 2, and 2.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,1,10]",
        outputText: "0",
        explanation:
          "You cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.",
      },
    ],
    tests: "[[2, 1, 2], [1, 2, 1, 10]]",
    answer: "[5, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar largestPerimeter = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1019,
    title: "Squares of a Sorted Array",
    titleSlug: "squares-of-a-sorted-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Sorting"],
    constaints:
      "<li><code><span>1 &lt;= nums.length &lt;= </span>10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>",
    question:
      "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing</strong> order, return <em>an array of <strong>the squares of each number</strong> sorted in non-decreasing order</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [-4,-1,0,3,10]",
        outputText: "[0,1,9,16,100]",
        explanation:
          "After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].",
      },
      {
        id: 2,
        inputText: "nums = [-7,-3,2,3,11]",
        outputText: "[4,9,9,49,121]",
        explanation: "",
      },
    ],
    tests: "[[-4, -1, 0, 3, 10], [-7, -3, 2, 3, 11]]",
    answer: "[[0, 1, 9, 16, 100], [4, 9, 9, 49, 121]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortedSquares = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1021,
    title: "Distribute Coins in Binary Tree",
    titleSlug: "distribute-coins-in-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= Node.val &lt;= n</code></li> <li>The sum of all <code>Node.val</code> is <code>n</code>.</li>",
    question:
      "<p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes where each <code>node</code> in the tree has <code>node.val</code> coins. There are <code>n</code> coins in total throughout the whole tree.</p><p>In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.</p><p>Return <em>the <strong>minimum</strong> number of moves required to make every node have <strong>exactly</strong> one coin</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,0,0]",
        outputText: "2",
        explanation:
          "From the root of the tree, we move one coin to its left child, and one coin to its right child.",
      },
      {
        id: 2,
        inputText: "root = [0,3,0]",
        outputText: "3",
        explanation:
          "From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.",
      },
    ],
    tests: "[[3, 0, 0], [0, 3, 0]]",
    answer: "[2, 3]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar distributeCoins = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1022,
    title: "Unique Paths III",
    titleSlug: "unique-paths-iii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Backtracking", "Bit Manipulation", "Matrix"],
    constaints:
      "<li><code>1</code> representing the starting square. There is exactly one starting square.</li> <li><code>2</code> representing the ending square. There is exactly one ending square.</li> <li><code>0</code> representing empty squares we can walk over.</li> <li><code>-1</code> representing obstacles that we cannot walk over.</li> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 20</code></li> <li><code>1 &lt;= m * n &lt;= 20</code></li> <li><code>-1 &lt;= grid[i][j] &lt;= 2</code></li> <li>There is exactly one starting cell and one ending cell.</li>",
    question:
      "<p>You are given an <code>m x n</code> integer array <code>grid</code> where <code>grid[i][j]</code> could be:</p><p>Return <em>the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]",
        outputText: "2",
        explanation:
          "We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)",
      },
      {
        id: 2,
        inputText: "grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]",
        outputText: "4",
        explanation:
          "We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)",
      },
      {
        id: 3,
        inputText: "grid = [[0,1],[2,0]]",
        outputText: "0",
        explanation:
          "There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.",
      },
    ],
    tests:
      "[[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, -1]], [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 2]], [[0, 1], [2, 0]]]",
    answer: "[2, 4, 0]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar uniquePathsIII = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1023,
    title: "Time Based Key-Value Store",
    titleSlug: "time-based-key-value-store",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Binary Search", "Design"],
    constaints:
      '<li><code>TimeMap()</code> Initializes the object of the data structure.</li> <li><code>void set(String key, String value, int timestamp)</code> Stores the key <code>key</code> with the value <code>value</code> at the given time <code>timestamp</code>.</li> <li><code>String get(String key, int timestamp)</code> Returns a value such that <code>set</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>. If there are multiple such values, it returns the value associated with the largest <code>timestamp_prev</code>. If there are no values, it returns <code>""</code>.</li> <li><code>1 &lt;= key.length, value.length &lt;= 100</code></li> <li><code>key</code> and <code>value</code> consist of lowercase English letters and digits.</li> <li><code>1 &lt;= timestamp &lt;= 10<sup>7</sup></code></li> <li>All the timestamps <code>timestamp</code> of <code>set</code> are strictly increasing.</li> <li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>set</code> and <code>get</code>.</li>',
    question:
      "<p>Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.</p><p>Implement the <code>TimeMap</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["TimeMap", "set", "get", "get", "set", "get", "get"]\n[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]',
        outputText: '[null, null, "bar", "bar", null, "bar2", "bar2"]',
        explanation:
          'TimeMap timeMap = new TimeMap();\ntimeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.\ntimeMap.get("foo", 1);         // return "bar"\ntimeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".\ntimeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.\ntimeMap.get("foo", 4);         // return "bar2"\ntimeMap.get("foo", 5);         // return "bar2"',
      },
    ],
    tests: '[["TimeMap", "set", "get", "get", "set", "get", "get"]]',
    answer: '[[null, null, "bar", "bar", null, "bar2", "bar2"]]',
    code: "\nvar TimeMap = function() {\n    \n};\n\n/** \n * @param {string} key \n * @param {string} value \n * @param {number} timestamp\n * @return {void}\n */\nTimeMap.prototype.set = function(key, value, timestamp) {\n    \n};\n\n/** \n * @param {string} key \n * @param {number} timestamp\n * @return {string}\n */\nTimeMap.prototype.get = function(key, timestamp) {\n    \n};\n\n/** \n * Your TimeMap object will be instantiated and called as such:\n * var obj = new TimeMap()\n * obj.set(key,value,timestamp)\n * var param_2 = obj.get(key,timestamp)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1028,
    title: "Interval List Intersections",
    titleSlug: "interval-list-intersections",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers"],
    constaints:
      "<li><code>0 &lt;= firstList.length, secondList.length &lt;= 1000</code></li> <li><code>firstList.length + secondList.length &gt;= 1</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>end<sub>i</sub> &lt; start<sub>i+1</sub></code></li> <li><code>0 &lt;= start<sub>j</sub> &lt; end<sub>j</sub> &lt;= 10<sup>9</sup> </code></li> <li><code>end<sub>j</sub> &lt; start<sub>j+1</sub></code></li>",
    question:
      "<p>You are given two lists of closed intervals, <code>firstList</code> and <code>secondList</code>, where <code>firstList[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and <code>secondList[j] = [start<sub>j</sub>, end<sub>j</sub>]</code>. Each list of intervals is pairwise <strong>disjoint</strong> and in <strong>sorted order</strong>.</p><p>Return <em>the intersection of these two interval lists</em>.</p><p>A <strong>closed interval</strong> <code>[a, b]</code> (with <code>a &lt;= b</code>) denotes the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.</p><p>The <strong>intersection</strong> of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of <code>[1, 3]</code> and <code>[2, 4]</code> is <code>[2, 3]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]",
        outputText: "[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "firstList = [[1,3],[5,9]], secondList = []",
        outputText: "[]",
        explanation: "",
      },
    ],
    tests: "[[[0, 2], [5, 10], [13, 23], [24, 25]], [[1, 3], [5, 9]]]",
    answer: "[[[1, 2], [5, 5], [8, 10], [15, 23], [24, 24], [25, 25]], []]",
    code: "/**\n * @param {number[][]} firstList\n * @param {number[][]} secondList\n * @return {number[][]}\n */\nvar intervalIntersection = function(firstList, secondList) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1029,
    title: "Vertical Order Traversal of a Binary Tree",
    titleSlug: "vertical-order-traversal-of-a-binary-tree",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, calculate the <strong>vertical order traversal</strong> of the binary tree.</p><p>For each node at position <code>(row, col)</code>, its left and right children will be at positions <code>(row + 1, col - 1)</code> and <code>(row + 1, col + 1)</code> respectively. The root of the tree is at <code>(0, 0)</code>.</p><p>The <strong>vertical order traversal</strong> of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.</p><p>Return <em>the <strong>vertical order traversal</strong> of the binary tree</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [3,9,20,null,null,15,7]",
        outputText: "[[9],[3,15],[20],[7]]",
        explanation:
          "Column -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.",
      },
      {
        id: 2,
        inputText: "root = [1,2,3,4,5,6,7]",
        outputText: "[[4],[2],[1,5,6],[3],[7]]",
        explanation:
          "Column -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.",
      },
      {
        id: 3,
        inputText: "root = [1,2,3,4,6,5,7]",
        outputText: "[[4],[2],[1,5,6],[3],[7]]",
        explanation:
          "This case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.",
      },
    ],
    tests:
      "[[3, 9, 20, null, null, 15, 7], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 6, 5, 7]]",
    answer:
      "[[[9], [3, 15], [20], [7]], [[4], [2], [1, 5, 6], [3], [7]], [[4], [2], [1, 5, 6], [3], [7]]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar verticalTraversal = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1030,
    title: "Smallest String Starting From Leaf",
    titleSlug: "smallest-string-starting-from-leaf",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      '<li>For example, <code>"ab"</code> is lexicographically smaller than <code>"aba"</code>.</li> <li>The number of nodes in the tree is in the range <code>[1, 8500]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 25</code></li>',
    question:
      "<p>You are given the <code>root</code> of a binary tree where each node has a value in the range <code>[0, 25]</code> representing the letters <code>'a'</code> to <code>'z'</code>.</p><p>Return <em>the <strong>lexicographically smallest</strong> string that starts at a leaf of this tree and ends at the root</em>.</p><p>As a reminder, any shorter prefix of a string is <strong>lexicographically smaller</strong>.</p><p>A leaf of a node is a node that has no children.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [0,1,2,3,4,3,4]",
        outputText: '"dba"',
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [25,1,3,1,3,0,2]",
        outputText: '"adz"',
        explanation: "",
      },
      {
        id: 3,
        inputText: "root = [2,2,1,null,1,0,null,0]",
        outputText: '"abc"',
        explanation: "",
      },
    ],
    tests:
      "[[0, 1, 2, 3, 4, 3, 4], [25, 1, 3, 1, 3, 0, 2], [2, 2, 1, null, 1, 0, null, 0]]",
    answer: '["dba", "adz", "abc"]',
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string}\n */\nvar smallestFromLeaf = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1031,
    title: "Add to Array-Form of Integer",
    titleSlug: "add-to-array-form-of-integer",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li>For example, for <code>num = 1321</code>, the array form is <code>[1,3,2,1]</code>.</li> <li><code>1 &lt;= num.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= num[i] &lt;= 9</code></li> <li><code>num</code> does not contain any leading zeros except for the zero itself.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>The <strong>array-form</strong> of an integer <code>num</code> is an array representing its digits in left to right order.</p><p>Given <code>num</code>, the <strong>array-form</strong> of an integer, and an integer <code>k</code>, return <em>the <strong>array-form</strong> of the integer</em> <code>num + k</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = [1,2,0,0], k = 34",
        outputText: "[1,2,3,4]",
        explanation: "1200 + 34 = 1234",
      },
      {
        id: 2,
        inputText: "num = [2,7,4], k = 181",
        outputText: "[4,5,5]",
        explanation: "274 + 181 = 455",
      },
      {
        id: 3,
        inputText: "num = [2,1,5], k = 806",
        outputText: "[1,0,2,1]",
        explanation: "215 + 806 = 1021",
      },
    ],
    tests: "[[1, 2, 0, 0], [2, 7, 4], [2, 1, 5]]",
    answer: "[[1, 2, 3, 4], [4, 5, 5], [1, 0, 2, 1]]",
    code: "/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1033,
    title: "Broken Calculator",
    titleSlug: "broken-calculator",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Greedy"],
    constaints:
      "<li>multiply the number on display by <code>2</code>, or</li> <li>subtract <code>1</code> from the number on display.</li> <li><code>1 &lt;= startValue, target &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>There is a broken calculator that has the integer <code>startValue</code> on its display initially. In one operation, you can:</p><p>Given two integers <code>startValue</code> and <code>target</code>, return <em>the minimum number of operations needed to display </em><code>target</code><em> on the calculator</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "startValue = 2, target = 3",
        outputText: "2",
        explanation:
          "Use double operation and then decrement operation {2 -> 4 -> 3}.",
      },
      {
        id: 2,
        inputText: "startValue = 5, target = 8",
        outputText: "2",
        explanation: "Use decrement and then double {5 -> 4 -> 8}.",
      },
      {
        id: 3,
        inputText: "startValue = 3, target = 10",
        outputText: "3",
        explanation: "Use double, decrement and double {3 -> 6 -> 5 -> 10}.",
      },
    ],
    tests: "[2, 5, 3]",
    answer: "[2, 2, 3]",
    code: "/**\n * @param {number} startValue\n * @param {number} target\n * @return {number}\n */\nvar brokenCalc = function(startValue, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1035,
    title: "Cousins in Binary Tree",
    titleSlug: "cousins-in-binary-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[2, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> <li>Each node has a <strong>unique</strong> value.</li> <li><code>x != y</code></li> <li><code>x</code> and <code>y</code> are exist in the tree.</li>",
    question:
      "<p>Given the <code>root</code> of a binary tree with unique values and the values of two different nodes of the tree <code>x</code> and <code>y</code>, return <code>true</code> <em>if the nodes corresponding to the values </em><code>x</code><em> and </em><code>y</code><em> in the tree are <strong>cousins</strong>, or </em><code>false</code><em> otherwise.</em></p><p>Two nodes of a binary tree are <strong>cousins</strong> if they have the same depth with different parents.</p><p>Note that in a binary tree, the root node is at the depth <code>0</code>, and children of each depth <code>k</code> node are at the depth <code>k + 1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,4], x = 4, y = 3",
        outputText: "false",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [1,2,3,null,4,null,5], x = 5, y = 4",
        outputText: "true",
        explanation: "",
      },
      {
        id: 3,
        inputText: "root = [1,2,3,null,4], x = 2, y = 3",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4], [1, 2, 3, null, 4, null, 5], [1, 2, 3, null, 4]]",
    answer: "[false, true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nvar isCousins = function(root, x, y) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1036,
    title: "Rotting Oranges",
    titleSlug: "rotting-oranges",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Breadth-First Search", "Matrix"],
    constaints:
      "<li><code>0</code> representing an empty cell,</li> <li><code>1</code> representing a fresh orange, or</li> <li><code>2</code> representing a rotten orange.</li> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10</code></li> <li><code>grid[i][j]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li>",
    question:
      "<p>You are given an <code>m x n</code> <code>grid</code> where each cell can have one of three values:</p><p>Every minute, any fresh orange that is <strong>4-directionally adjacent</strong> to a rotten orange becomes rotten.</p><p>Return <em>the minimum number of minutes that must elapse until no cell has a fresh orange</em>. If <em>this is impossible, return</em> <code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[2,1,1],[1,1,0],[0,1,1]]",
        outputText: "4",
        explanation: "",
      },
      {
        id: 2,
        inputText: "grid = [[2,1,1],[0,1,1],[1,0,1]]",
        outputText: "-1",
        explanation:
          "The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.",
      },
      {
        id: 3,
        inputText: "grid = [[0,2]]",
        outputText: "0",
        explanation:
          "Since there are already no fresh oranges at minute 0, the answer is just 0.",
      },
    ],
    tests:
      "[[[2, 1, 1], [1, 1, 0], [0, 1, 1]], [[2, 1, 1], [0, 1, 1], [1, 0, 1]], [[0, 2]]]",
    answer: "[4, -1, 0]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar orangesRotting = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1039,
    title: "Find the Town Judge",
    titleSlug: "find-the-town-judge",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Graph"],
    constaints:
      "<li>The town judge trusts nobody.</li> <li>Everybody (except for the town judge) trusts the town judge.</li> <li>There is exactly one person that satisfies properties <strong>1</strong> and <strong>2</strong>.</li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= trust.length &lt;= 10<sup>4</sup></code></li> <li><code>trust[i].length == 2</code></li> <li>All the pairs of <code>trust</code> are <strong>unique</strong>.</li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li>",
    question:
      "<p>In a town, there are <code>n</code> people labeled from <code>1</code> to <code>n</code>. There is a rumor that one of these people is secretly the town judge.</p><p>If the town judge exists, then:</p><p>You are given an array <code>trust</code> where <code>trust[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> representing that the person labeled <code>a<sub>i</sub></code> trusts the person labeled <code>b<sub>i</sub></code>. If a trust relationship does not exist in <code>trust</code> array, then such a trust relationship does not exist.</p><p>Return <em>the label of the town judge if the town judge exists and can be identified, or return </em><code>-1</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2, trust = [[1,2]]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "n = 3, trust = [[1,3],[2,3]]",
        outputText: "3",
        explanation: "",
      },
      {
        id: 3,
        inputText: "n = 3, trust = [[1,3],[2,3],[3,1]]",
        outputText: "-1",
        explanation: "",
      },
    ],
    tests: "[2, 3, 3]",
    answer: "[2, 3, -1]",
    code: "/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function(n, trust) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1041,
    title: "Available Captures for Rook",
    titleSlug: "available-captures-for-rook",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints:
      "<li><code>board.length == 8</code></li> <li><code>board[i].length == 8</code></li> <li><code>board[i][j]</code> is either <code>'R'</code>, <code>'.'</code>, <code>'B'</code>, or <code>'p'</code></li> <li>There is exactly one cell with <code>board[i][j] == 'R'</code></li>",
    question:
      "<p>On an <code>8 x 8</code> chessboard, there is <strong>exactly one</strong> white rook <code>'R'</code> and some number of white bishops <code>'B'</code>, black pawns <code>'p'</code>, and empty squares <code>'.'</code>.</p><p>When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered <strong>attacking</strong> a pawn if the rook can capture the pawn on the rook's turn. The <strong>number of available captures</strong> for the white rook is the number of pawns that the rook is <strong>attacking</strong>.</p><p>Return <em>the <strong>number of available captures</strong> for the white rook</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'board = [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]',
        outputText: "3",
        explanation: "In this example, the rook is attacking all the pawns.",
      },
      {
        id: 2,
        inputText:
          'board = [[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]',
        outputText: "0",
        explanation:
          "The bishops are blocking the rook from attacking any of the pawns.",
      },
      {
        id: 3,
        inputText:
          'board = [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]',
        outputText: "3",
        explanation:
          "The rook is attacking the pawns at positions b5, d6, and f5.",
      },
    ],
    tests:
      '[[[".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "R", ".", ".", ".", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]], [[".", ".", ".", ".", ".", ".", ".", "."], [".", "p", "p", "p", "p", "p", ".", "."], [".", "p", "p", "B", "p", "p", ".", "."], [".", "p", "B", "R", "B", "p", ".", "."], [".", "p", "p", "B", "p", "p", ".", "."], [".", "p", "p", "p", "p", "p", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]], [[".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], ["p", "p", ".", "R", ".", "p", "B", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "B", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]]',
    answer: "[3, 0, 3]",
    code: "/**\n * @param {character[][]} board\n * @return {number}\n */\nvar numRookCaptures = function(board) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1045,
    title: "Check If Word Is Valid After Substitutions",
    titleSlug: "check-if-word-is-valid-after-substitutions",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li>Insert string <code>\"abc\"</code> into any position in <code>t</code>. More formally, <code>t</code> becomes <code>t<sub>left</sub> + \"abc\" + t<sub>right</sub></code>, where <code>t == t<sub>left</sub> + t<sub>right</sub></code>. Note that <code>t<sub>left</sub></code> and <code>t<sub>right</sub></code> may be <strong>empty</strong>.</li> <li><code>1 &lt;= s.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>s</code> consists of letters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code></li>",
    question:
      '<p>Given a string <code>s</code>, determine if it is <strong>valid</strong>.</p><p>A string <code>s</code> is <strong>valid</strong> if, starting with an empty string <code>t = ""</code>, you can <strong>transform </strong><code>t</code><strong> into </strong><code>s</code> after performing the following operation <strong>any number of times</strong>:</p><p>Return <code>true</code> <em>if </em><code>s</code><em> is a <strong>valid</strong> string, otherwise, return</em> <code>false</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "aabcbc"',
        outputText: "true",
        explanation: '"" -> "',
      },
      {
        id: 2,
        inputText: 's = "abcabcababcc"',
        outputText: "true",
        explanation: '"" -> "',
      },
      {
        id: 3,
        inputText: 's = "abccba"',
        outputText: "false",
        explanation: 'It is impossible to get "abccba" using the operation.',
      },
    ],
    tests: '["aabcbc", "abcabcababcc", "abccba"]',
    answer: "[true, true, false]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1046,
    title: "Max Consecutive Ones III",
    titleSlug: "max-consecutive-ones-iii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Sliding Window", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>0 &lt;= k &lt;= nums.length</code></li>",
    question:
      "<p>Given a binary array <code>nums</code> and an integer <code>k</code>, return <em>the maximum number of consecutive </em><code>1</code><em>'s in the array if you can flip at most</em> <code>k</code> <code>0</code>'s.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2",
        outputText: "6",
        explanation: "[1,1,1,0,0,",
      },
      {
        id: 2,
        inputText: "nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3",
        outputText: "10",
        explanation: "[0,0,",
      },
    ],
    tests:
      "[[1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1]]",
    answer: "[6, 10]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar longestOnes = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1047,
    title: "Maximize Sum Of Array After K Negations",
    titleSlug: "maximize-sum-of-array-after-k-negations",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li>choose an index <code>i</code> and replace <code>nums[i]</code> with <code>-nums[i]</code>.</li> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, modify the array in the following way:</p><p>You should apply this process exactly <code>k</code> times. You may choose the same index <code>i</code> multiple times.</p><p>Return <em>the largest possible sum of the array after modifying it in this way</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,2,3], k = 1",
        outputText: "5",
        explanation: "Choose index 1 and nums becomes [4,-2,3].",
      },
      {
        id: 2,
        inputText: "nums = [3,-1,0,2], k = 3",
        outputText: "6",
        explanation: "Choose indices (1, 2, 2) and nums becomes [3,1,0,2].",
      },
      {
        id: 3,
        inputText: "nums = [2,-3,-1,5,-4], k = 2",
        outputText: "13",
        explanation: "Choose indices (1, 4) and nums becomes [2,3,-1,5,4].",
      },
    ],
    tests: "[[4, 2, 3], [3, -1, 0, 2], [2, -3, -1, 5, -4]]",
    answer: "[5, 6, 13]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar largestSumAfterKNegations = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1050,
    title: "Construct Binary Search Tree from Preorder Traversal",
    titleSlug: "construct-binary-search-tree-from-preorder-traversal",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Stack",
      "Tree",
      "Binary Search Tree",
      "Monotonic Stack",
      "Binary Tree",
    ],
    constaints:
      "<li><code>1 &lt;= preorder.length &lt;= 100</code></li> <li><code>1 &lt;= preorder[i] &lt;= 1000</code></li> <li>All the values of <code>preorder</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given an array of integers preorder, which represents the <strong>preorder traversal</strong> of a BST (i.e., <strong>binary search tree</strong>), construct the tree and return <em>its root</em>.</p><p>It is <strong>guaranteed</strong> that there is always possible to find a binary search tree with the given requirements for the given test cases.</p><p>A <strong>binary search tree</strong> is a binary tree where for every node, any descendant of <code>Node.left</code> has a value <strong>strictly less than</strong> <code>Node.val</code>, and any descendant of <code>Node.right</code> has a value <strong>strictly greater than</strong> <code>Node.val</code>.</p><p>A <strong>preorder traversal</strong> of a binary tree displays the value of the node first, then traverses <code>Node.left</code>, then traverses <code>Node.right</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "preorder = [8,5,1,7,10,12]",
        outputText: "[8,5,10,1,7,null,12]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "preorder = [1,3]",
        outputText: "[1,null,3]",
        explanation: "",
      },
    ],
    tests: "[[8, 5, 1, 7, 10, 12], [1, 3]]",
    answer: "[[8, 5, 10, 1, 7, null, 12], [1, null, 3]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} preorder\n * @return {TreeNode}\n */\nvar bstFromPreorder = function(preorder) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1055,
    title: "Pairs of Songs With Total Durations Divisible by 60",
    titleSlug: "pairs-of-songs-with-total-durations-divisible-by-60",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Counting"],
    constaints:
      "<li><code>1 &lt;= time.length &lt;= 6 * 10<sup>4</sup></code></li> <li><code>1 &lt;= time[i] &lt;= 500</code></li>",
    question:
      "<p>You are given a list of songs where the <code>i<sup>th</sup></code> song has a duration of <code>time[i]</code> seconds.</p><p>Return <em>the number of pairs of songs for which their total duration in seconds is divisible by</em> <code>60</code>. Formally, we want the number of indices <code>i</code>, <code>j</code> such that <code>i &lt; j</code> with <code>(time[i] + time[j]) % 60 == 0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "time = [30,20,150,100,40]",
        outputText: "3",
        explanation:
          "Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60",
      },
      {
        id: 2,
        inputText: "time = [60,60,60]",
        outputText: "3",
        explanation:
          "All three pairs have a total duration of 120, which is divisible by 60.",
      },
    ],
    tests: "[[30, 20, 150, 100, 40], [60, 60, 60]]",
    answer: "[3, 3]",
    code: "/**\n * @param {number[]} time\n * @return {number}\n */\nvar numPairsDivisibleBy60 = function(time) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1062,
    title: "Partition Array Into Three Parts With Equal Sum",
    titleSlug: "partition-array-into-three-parts-with-equal-sum",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy"],
    constaints:
      "<li><code>3 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an array of integers <code>arr</code>, return <code>true</code> if we can partition the array into three <strong>non-empty</strong> parts with equal sums.</p><p>Formally, we can partition the array if we can find indexes <code>i + 1 &lt; j</code> with <code>(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])</code></p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [0,2,1,-6,6,-7,9,1,2,0,1]",
        outputText: "true",
        explanation: "0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1",
      },
      {
        id: 2,
        inputText: "arr = [0,2,1,-6,6,7,9,-1,2,0,1]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "arr = [3,3,6,5,-2,2,5,1,-9,4]",
        outputText: "true",
        explanation: "3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4",
      },
    ],
    tests:
      "[[0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1], [0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1], [3, 3, 6, 5, -2, 2, 5, 1, -9, 4]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar canThreePartsEqualSum = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1071,
    title: "Binary Prefix Divisible By 5",
    titleSlug: "binary-prefix-divisible-by-5",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li>For example, if <code>nums = [1,0,1]</code>, then <code>x<sub>0</sub> = 1</code>, <code>x<sub>1</sub> = 2</code>, and <code>x<sub>2</sub> = 5</code>.</li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>You are given a binary array <code>nums</code> (<strong>0-indexed</strong>).</p><p>We define <code>x<sub>i</sub></code> as the number whose binary representation is the subarray <code>nums[0..i]</code> (from most-significant-bit to least-significant-bit).</p><p>Return <em>an array of booleans </em><code>answer</code><em> where </em><code>answer[i]</code><em> is </em><code>true</code><em> if </em><code>x<sub>i</sub></code><em> is divisible by </em><code>5</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,1,1]",
        outputText: "[true,false,false]",
        explanation:
          "The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer[0] is true.",
      },
      {
        id: 2,
        inputText: "nums = [1,1,1]",
        outputText: "[false,false,false]",
        explanation: "",
      },
    ],
    tests: "[[0, 1, 1], [1, 1, 1]]",
    answer: "[[true, false, false], [false, false, false]]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean[]}\n */\nvar prefixesDivBy5 = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1072,
    title: "Next Greater Node In Linked List",
    titleSlug: "next-greater-node-in-linked-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Linked List", "Stack", "Monotonic Stack"],
    constaints:
      "<li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= Node.val &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given the <code>head</code> of a linked list with <code>n</code> nodes.</p><p>For each node in the list, find the value of the <strong>next greater node</strong>. That is, for each node, find the value of the first node that is next to it and has a <strong>strictly larger</strong> value than it.</p><p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the value of the next greater node of the <code>i<sup>th</sup></code> node (<strong>1-indexed</strong>). If the <code>i<sup>th</sup></code> node does not have a next greater node, set <code>answer[i] = 0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [2,1,5]",
        outputText: "[5,5,0]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "head = [2,7,4,3,5]",
        outputText: "[7,0,5,5,0]",
        explanation: "",
      },
    ],
    tests: "[[2, 1, 5], [2, 7, 4, 3, 5]]",
    answer: "[[5, 5, 0], [7, 0, 5, 5, 0]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number[]}\n */\nvar nextLargerNodes = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1073,
    title: "Number of Enclaves",
    titleSlug: "number-of-enclaves",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix",
    ],
    constaints:
      "<li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>You are given an <code>m x n</code> binary matrix <code>grid</code>, where <code>0</code> represents a sea cell and <code>1</code> represents a land cell.</p><p>A <strong>move</strong> consists of walking from one land cell to another adjacent (<strong>4-directionally</strong>) land cell or walking off the boundary of the <code>grid</code>.</p><p>Return <em>the number of land cells in</em> <code>grid</code> <em>for which we cannot walk off the boundary of the grid in any number of <strong>moves</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]",
        outputText: "3",
        explanation:
          "There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.",
      },
      {
        id: 2,
        inputText: "grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]",
        outputText: "0",
        explanation:
          "All 1s are either on the boundary or can reach the boundary.",
      },
    ],
    tests:
      "[[[0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]], [[0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0]]]",
    answer: "[3, 0]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar numEnclaves = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1079,
    title: "Sum of Root To Leaf Binary Numbers",
    titleSlug: "sum-of-root-to-leaf-binary-numbers",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>For example, if the path is <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, then this could represent <code>01101</code> in binary, which is <code>13</code>.</li> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>Node.val</code> is <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>You are given the <code>root</code> of a binary tree where each node has a value <code>0</code> or <code>1</code>. Each root-to-leaf path represents a binary number starting with the most significant bit.</p><p>For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return <em>the sum of these numbers</em>.</p><p>The test cases are generated so that the answer fits in a <strong>32-bits</strong> integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,0,1,0,1,0,1]",
        outputText: "22",
        explanation: "(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22",
      },
      { id: 2, inputText: "root = [0]", outputText: "0", explanation: "" },
    ],
    tests: "[[1, 0, 1, 0, 1, 0, 1], [0]]",
    answer: "[22, 0]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumRootToLeaf = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1086,
    title: "Divisor Game",
    titleSlug: "divisor-game",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Brainteaser", "Game Theory"],
    constaints:
      "<li>Choosing any <code>x</code> with <code>0 &lt; x &lt; n</code> and <code>n % x == 0</code>.</li> <li>Replacing the number <code>n</code> on the chalkboard with <code>n - x</code>.</li> <li><code>1 &lt;= n &lt;= 1000</code></li>",
    question:
      "<p>Alice and Bob take turns playing a game, with Alice starting first.</p><p>Initially, there is a number <code>n</code> on the chalkboard. On each player's turn, that player makes a move consisting of:</p><p>Also, if a player cannot make a move, they lose the game.</p><p>Return <code>true</code> <em>if and only if Alice wins the game, assuming both players play optimally</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "true",
        explanation: "Alice chooses 1, and Bob has no more moves.",
      },
      {
        id: 2,
        inputText: "n = 3",
        outputText: "false",
        explanation:
          "Alice chooses 1, Bob chooses 1, and Alice has no more moves.",
      },
    ],
    tests: "[2, 3]",
    answer: "[true, false]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar divisorGame = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1092,
    title: "Maximum Difference Between Node and Ancestor",
    titleSlug: "maximum-difference-between-node-and-ancestor",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[2, 5000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, find the maximum value <code>v</code> for which there exist <strong>different</strong> nodes <code>a</code> and <code>b</code> where <code>v = |a.val - b.val|</code> and <code>a</code> is an ancestor of <code>b</code>.</p><p>A node <code>a</code> is an ancestor of <code>b</code> if either: any child of <code>a</code> is equal to <code>b</code>\u00a0or any child of <code>a</code> is an ancestor of <code>b</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [8,3,10,1,6,null,14,null,null,4,7,13]",
        outputText: "7",
        explanation:
          "We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.",
      },
      {
        id: 2,
        inputText: "root = [1,null,2,null,0,3]",
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      "[[8, 3, 10, 1, 6, null, 14, null, null, 4, 7, 13], [1, null, 2, null, 0, 3]]",
    answer: "[7, 3]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxAncestorDiff = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1094,
    title: "Matrix Cells in Distance Order",
    titleSlug: "matrix-cells-in-distance-order",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry", "Sorting", "Matrix"],
    constaints:
      "<li><code>1 &lt;= rows, cols &lt;= 100</code></li> <li><code>0 &lt;= rCenter &lt; rows</code></li> <li><code>0 &lt;= cCenter &lt; cols</code></li>",
    question:
      "<p>You are given four integers <code>row</code>, <code>cols</code>, <code>rCenter</code>, and <code>cCenter</code>. There is a <code>rows x cols</code> matrix and you are on the cell with the coordinates <code>(rCenter, cCenter)</code>.</p><p>Return <em>the coordinates of all cells in the matrix, sorted by their <strong>distance</strong> from </em><code>(rCenter, cCenter)</code><em> from the smallest distance to the largest distance</em>. You may return the answer in <strong>any order</strong> that satisfies this condition.</p><p>The <strong>distance</strong> between two cells <code>(r<sub>1</sub>, c<sub>1</sub>)</code> and <code>(r<sub>2</sub>, c<sub>2</sub>)</code> is <code>|r<sub>1</sub> - r<sub>2</sub>| + |c<sub>1</sub> - c<sub>2</sub>|</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "rows = 1, cols = 2, rCenter = 0, cCenter = 0",
        outputText: "[[0,0],[0,1]]",
        explanation: "The distances from (0, 0) to other cells are: [0,1]",
      },
      {
        id: 2,
        inputText: "rows = 2, cols = 2, rCenter = 0, cCenter = 1",
        outputText: "[[0,1],[0,0],[1,1],[1,0]]",
        explanation:
          "The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.",
      },
      {
        id: 3,
        inputText: "rows = 2, cols = 3, rCenter = 1, cCenter = 2",
        outputText: "[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]",
        explanation:
          "The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].",
      },
    ],
    tests: "[1, 2, 2]",
    answer:
      "[[[0, 0], [0, 1]], [[0, 1], [0, 0], [1, 1], [1, 0]], [[1, 2], [0, 2], [1, 1], [0, 1], [1, 0], [0, 0]]]",
    code: "/**\n * @param {number} rows\n * @param {number} cols\n * @param {number} rCenter\n * @param {number} cCenter\n * @return {number[][]}\n */\nvar allCellsDistOrder = function(rows, cols, rCenter, cCenter) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1095,
    title: "Two City Scheduling",
    titleSlug: "two-city-scheduling",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li><code>2 * n == costs.length</code></li> <li><code>2 &lt;= costs.length &lt;= 100</code></li> <li><code>costs.length</code> is even.</li> <li><code>1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000</code></li>",
    question:
      "<p>A company is planning to interview <code>2n</code> people. Given the array <code>costs</code> where <code>costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>]</code>,\u00a0the cost of flying the <code>i<sup>th</sup></code> person to city <code>a</code> is <code>aCost<sub>i</sub></code>, and the cost of flying the <code>i<sup>th</sup></code> person to city <code>b</code> is <code>bCost<sub>i</sub></code>.</p><p>Return <em>the minimum cost to fly every person to a city</em> such that exactly <code>n</code> people arrive in each city.</p>",
    examples: [
      {
        id: 1,
        inputText: "costs = [[10,20],[30,200],[400,50],[30,20]]",
        outputText: "110",
        explanation:
          "The first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.",
      },
      {
        id: 2,
        inputText:
          "costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]",
        outputText: "1859",
        explanation: "",
      },
      {
        id: 3,
        inputText:
          "costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]",
        outputText: "3086",
        explanation: "",
      },
    ],
    tests:
      "[[[10, 20], [30, 200], [400, 50], [30, 20]], [[259, 770], [448, 54], [926, 667], [184, 139], [840, 118], [577, 469]], [[515, 563], [451, 713], [537, 709], [343, 819], [855, 779], [457, 60], [650, 359], [631, 42]]]",
    answer: "[110, 1859, 3086]",
    code: "/**\n * @param {number[][]} costs\n * @return {number}\n */\nvar twoCitySchedCost = function(costs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1103,
    title: "Moving Stones Until Consecutive",
    titleSlug: "moving-stones-until-consecutive",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Brainteaser"],
    constaints:
      "<li><code>answer[0]</code> <em>is the minimum number of moves you can play, and</em></li> <li><code>answer[1]</code> <em>is the maximum number of moves you can play</em>.</li> <li><code>1 &lt;= a, b, c &lt;= 100</code></li> <li><code>a</code>, <code>b</code>, and <code>c</code> have different values.</li>",
    question:
      "<p>There are three stones in different positions on the X-axis. You are given three integers <code>a</code>, <code>b</code>, and <code>c</code>, the positions of the stones.</p><p>In one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions <code>x</code>, <code>y</code>, and <code>z</code> with <code>x &lt; y &lt; z</code>. You pick up the stone at either position <code>x</code> or position <code>z</code>, and move that stone to an integer position <code>k</code>, with <code>x &lt; k &lt; z</code> and <code>k != y</code>.</p><p>The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).</p><p>Return <em>an integer array </em><code>answer</code><em> of length </em><code>2</code><em> where</em>:</p>",
    examples: [
      {
        id: 1,
        inputText: "a = 1, b = 2, c = 5",
        outputText: "[1,2]",
        explanation:
          "Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.",
      },
      {
        id: 2,
        inputText: "a = 4, b = 3, c = 2",
        outputText: "[0,0]",
        explanation: "We cannot make any moves.",
      },
      {
        id: 3,
        inputText: "a = 3, b = 5, c = 1",
        outputText: "[1,2]",
        explanation:
          "Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.",
      },
    ],
    tests: "[1, 4, 3]",
    answer: "[[1, 2], [0, 0], [1, 2]]",
    code: "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number[]}\n */\nvar numMovesStones = function(a, b, c) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1112,
    title: "Find Words That Can Be Formed by Characters",
    titleSlug: "find-words-that-can-be-formed-by-characters",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length, chars.length &lt;= 100</code></li> <li><code>words[i]</code> and <code>chars</code> consist of lowercase English letters.</li>",
    question:
      "<p>You are given an array of strings <code>words</code> and a string <code>chars</code>.</p><p>A string is <strong>good</strong> if it can be formed by characters from <code>chars</code> (each character can only be used once).</p><p>Return <em>the sum of lengths of all good strings in words</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["cat","bt","hat","tree"], chars = "atach"',
        outputText: "6",
        explanation:
          'The strings that can be formed are "cat" and "hat" so the answer is 3 + 3 = 6.',
      },
      {
        id: 2,
        inputText:
          'words = ["hello","world","leetcode"], chars = "welldonehoneyr"',
        outputText: "10",
        explanation:
          'The strings that can be formed are "hello" and "world" so the answer is 5 + 5 = 10.',
      },
    ],
    tests: '[["cat", "bt", "hat", "tree"], ["hello", "world", "leetcode"]]',
    answer: "[6, 10]",
    code: "/**\n * @param {string[]} words\n * @param {string} chars\n * @return {number}\n */\nvar countCharacters = function(words, chars) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1114,
    title: "Binary Search Tree to Greater Sum Tree",
    titleSlug: "binary-search-tree-to-greater-sum-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Search Tree", "Binary Tree"],
    constaints:
      "<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li> <li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li>All the values in the tree are <strong>unique</strong>.</li>",
    question:
      "<p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p><p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
        outputText: "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [0,null,1]",
        outputText: "[1,null,1]",
        explanation: "",
      },
    ],
    tests:
      "[[4, 1, 6, 0, 2, 5, 7, null, null, null, 3, null, null, null, 8], [0, null, 1]]",
    answer:
      "[[30, 36, 21, 36, 35, 26, 15, null, null, null, 33, null, null, null, 8], [1, null, 1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar bstToGst = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1115,
    title: "Valid Boomerang",
    titleSlug: "valid-boomerang",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry"],
    constaints:
      "<li><code>points.length == 3</code></li> <li><code>points[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li>",
    question:
      "<p>Given an array <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane, return <code>true</code> <em>if these points are a <strong>boomerang</strong></em>.</p><p>A <strong>boomerang</strong> is a set of three points that are <strong>all distinct</strong> and <strong>not in a straight line</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "points = [[1,1],[2,3],[3,2]]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "points = [[1,1],[2,2],[3,3]]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[[[1, 1], [2, 3], [3, 2]], [[1, 1], [2, 2], [3, 3]]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[][]} points\n * @return {boolean}\n */\nvar isBoomerang = function(points) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1116,
    title: "Maximum Level Sum of a Binary Tree",
    titleSlug: "maximum-level-sum-of-a-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, the level of its root is <code>1</code>, the level of its children is <code>2</code>, and so on.</p><p>Return the <strong>smallest</strong> level <code>x</code> such that the sum of all the values of nodes at level <code>x</code> is <strong>maximal</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,7,0,7,-8,null,null]",
        outputText: "2",
        explanation:
          "Level 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2.",
      },
      {
        id: 2,
        inputText: "root = [989,null,10250,98693,-89388,null,null,null,-32127]",
        outputText: "2",
        explanation: "",
      },
    ],
    tests:
      "[[1, 7, 0, 7, -8, null, null], [989, null, 10250, 98693, -89388, null, null, null, -32127]]",
    answer: "[2, 2]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxLevelSum = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1121,
    title: "Partition Array for Maximum Sum",
    titleSlug: "partition-array-for-maximum-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 500</code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= arr.length</code></li>",
    question:
      "<p>Given an integer array <code>arr</code>, partition the array into (contiguous) subarrays of length <strong>at most</strong> <code>k</code>. After partitioning, each subarray has their values changed to become the maximum value of that subarray.</p><p>Return <em>the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,15,7,9,2,5,10], k = 3",
        outputText: "84",
        explanation: "arr becomes [15,15,15,9,10,10,10]",
      },
      {
        id: 2,
        inputText: "arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4",
        outputText: "83",
        explanation: "",
      },
      {
        id: 3,
        inputText: "arr = [1], k = 1",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[1, 15, 7, 9, 2, 5, 10], [1, 4, 1, 5, 7, 3, 6, 1, 9, 9, 3], [1]]",
    answer: "[84, 83, 1]",
    code: "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\nvar maxSumAfterPartitioning = function(arr, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1127,
    title: "Last Stone Weight",
    titleSlug: "last-stone-weight",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Heap (Priority Queue)"],
    constaints:
      "<li>If <code>x == y</code>, both stones are destroyed, and</li> <li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code> has new weight <code>y - x</code>.</li> <li><code>1 &lt;= stones.length &lt;= 30</code></li> <li><code>1 &lt;= stones[i] &lt;= 1000</code></li>",
    question:
      "<p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the <code>i<sup>th</sup></code> stone.</p><p>We are playing a game with the stones. On each turn, we choose the <strong>heaviest two stones</strong> and smash them together. Suppose the heaviest two stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p><p>At the end of the game, there is <strong>at most one</strong> stone left.</p><p>Return <em>the weight of the last remaining stone</em>. If there are no stones left, return <code>0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "stones = [2,7,4,1,8,1]",
        outputText: "1",
        explanation:
          "We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.",
      },
      { id: 2, inputText: "stones = [1]", outputText: "1", explanation: "" },
    ],
    tests: "[[2, 7, 4, 1, 8, 1], [1]]",
    answer: "[1, 1]",
    code: "/**\n * @param {number[]} stones\n * @return {number}\n */\nvar lastStoneWeight = function(stones) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1128,
    title: "Remove All Adjacent Duplicates In String",
    titleSlug: "remove-all-adjacent-duplicates-in-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li>",
    question:
      "<p>You are given a string <code>s</code> consisting of lowercase English letters. A <strong>duplicate removal</strong> consists of choosing two <strong>adjacent</strong> and <strong>equal</strong> letters and removing them.</p><p>We repeatedly make <strong>duplicate removals</strong> on <code>s</code> until we no longer can.</p><p>Return <em>the final string after all such duplicate removals have been made</em>. It can be proven that the answer is <strong>unique</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abbaca"',
        outputText: '"ca"',
        explanation:
          'For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".',
      },
      { id: 2, inputText: 's = "azxxzy"', outputText: '"ay"', explanation: "" },
    ],
    tests: '["abbaca", "azxxzy"]',
    answer: '["ca", "ay"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicates = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1137,
    title: "Height Checker",
    titleSlug: "height-checker",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting", "Counting Sort"],
    constaints:
      "<li><code>1 &lt;= heights.length &lt;= 100</code></li> <li><code>1 &lt;= heights[i] &lt;= 100</code></li>",
    question:
      "<p>A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in <strong>non-decreasing order</strong> by height. Let this ordering be represented by the integer array <code>expected</code> where <code>expected[i]</code> is the expected height of the <code>i<sup>th</sup></code> student in line.</p><p>You are given an integer array <code>heights</code> representing the <strong>current order</strong> that the students are standing in. Each <code>heights[i]</code> is the height of the <code>i<sup>th</sup></code> student in line (<strong>0-indexed</strong>).</p><p>Return <em>the <strong>number of indices</strong> where </em><code>heights[i] != expected[i]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "heights = [1,1,4,2,1,3]",
        outputText: "3",
        explanation: "heights:  [1,1,",
      },
      {
        id: 2,
        inputText: "heights = [5,1,2,3,4]",
        outputText: "5",
        explanation: "heights:  [",
      },
      {
        id: 3,
        inputText: "heights = [1,2,3,4,5]",
        outputText: "0",
        explanation:
          "heights:  [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match.",
      },
    ],
    tests: "[[1, 1, 4, 2, 1, 3], [5, 1, 2, 3, 4], [1, 2, 3, 4, 5]]",
    answer: "[3, 5, 0]",
    code: "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar heightChecker = function(heights) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1146,
    title: "Greatest Common Divisor of Strings",
    titleSlug: "greatest-common-divisor-of-strings",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "String"],
    constaints:
      "<li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li> <li><code>str1</code> and <code>str2</code> consist of English uppercase letters.</li>",
    question:
      '<p>For two strings <code>s</code> and <code>t</code>, we say "<code>t</code> divides <code>s</code>" if and only if <code>s = t + t + t + ... + t + t</code> (i.e., <code>t</code> is concatenated with itself one or more times).</p><p>Given two strings <code>str1</code> and <code>str2</code>, return <em>the largest string </em><code>x</code><em> such that </em><code>x</code><em> divides both </em><code>str1</code><em> and </em><code>str2</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'str1 = "ABCABC", str2 = "ABC"',
        outputText: '"ABC"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'str1 = "ABABAB", str2 = "ABAB"',
        outputText: '"AB"',
        explanation: "",
      },
      {
        id: 3,
        inputText: 'str1 = "LEET", str2 = "CODE"',
        outputText: '""',
        explanation: "",
      },
    ],
    tests: '["ABCABC", "ABABAB", "LEET"]',
    answer: '["ABC", "AB", ""]',
    code: "/**\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1156,
    title: "Occurrences After Bigram",
    titleSlug: "occurrences-after-bigram",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= text.length &lt;= 1000</code></li> <li><code>text</code> consists of lowercase English letters and spaces.</li> <li>All the words in <code>text</code> a separated by <strong>a single space</strong>.</li> <li><code>1 &lt;= first.length, second.length &lt;= 10</code></li> <li><code>first</code> and <code>second</code> consist of lowercase English letters.</li>",
    question:
      '<p>Given two strings <code>first</code> and <code>second</code>, consider occurrences in some text of the form <code>"first second third"</code>, where <code>second</code> comes immediately after <code>first</code>, and <code>third</code> comes immediately after <code>second</code>.</p><p>Return <em>an array of all the words</em> <code>third</code> <em>for each occurrence of</em> <code>"first second third"</code>.</p>',
    examples: [
      {
        id: 1,
        inputText:
          'text = "alice is a good girl she is a good student", first = "a", second = "good"',
        outputText: '["girl","student"]',
        explanation: "",
      },
      {
        id: 2,
        inputText:
          'text = "we will we will rock you", first = "we", second = "will"',
        outputText: '["we","rock"]',
        explanation: "",
      },
    ],
    tests:
      '["alice is a good girl she is a good student", "we will we will rock you"]',
    answer: '[["girl", "student"], ["we", "rock"]]',
    code: "/**\n * @param {string} text\n * @param {string} first\n * @param {string} second\n * @return {string[]}\n */\nvar findOcurrences = function(text, first, second) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1160,
    title: "Letter Tile Possibilities",
    titleSlug: "letter-tile-possibilities",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Backtracking", "Counting"],
    constaints:
      "<li><code>1 &lt;= tiles.length &lt;= 7</code></li> <li><code>tiles</code> consists of uppercase English letters.</li>",
    question:
      "<p>You have <code>n</code>\u00a0\u00a0<code>tiles</code>, where each tile has one letter <code>tiles[i]</code> printed on it.</p><p>Return <em>the number of possible non-empty sequences of letters</em> you can make using the letters printed on those <code>tiles</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'tiles = "AAB"',
        outputText: "8",
        explanation:
          'The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".',
      },
      {
        id: 2,
        inputText: 'tiles = "AAABBC"',
        outputText: "188",
        explanation: "",
      },
      { id: 3, inputText: 'tiles = "V"', outputText: "1", explanation: "" },
    ],
    tests: '["AAB", "AAABBC", "V"]',
    answer: "[8, 188, 1]",
    code: "/**\n * @param {string} tiles\n * @return {number}\n */\nvar numTilePossibilities = function(tiles) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1168,
    title: "Duplicate Zeros",
    titleSlug: "duplicate-zeros",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 9</code></li>",
    question:
      "<p>Given a fixed-length integer array <code>arr</code>, duplicate each occurrence of zero, shifting the remaining elements to the right.</p><p><strong>Note</strong> that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,0,2,3,0,4,5,0]",
        outputText: "[1,0,0,2,3,0,0,4]",
        explanation:
          "After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]",
      },
      {
        id: 2,
        inputText: "arr = [1,2,3]",
        outputText: "[1,2,3]",
        explanation:
          "After calling your function, the input array is modified to: [1,2,3]",
      },
    ],
    tests: "[[1, 0, 2, 3, 0, 4, 5, 0], [1, 2, 3]]",
    answer: "[[1, 0, 0, 2, 3, 0, 0, 4], [1, 2, 3]]",
    code: "/**\n * @param {number[]} arr\n * @return {void} Do not return anything, modify arr in-place instead.\n */\nvar duplicateZeros = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1171,
    title: "Shortest Path in Binary Matrix",
    titleSlug: "shortest-path-in-binary-matrix",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Breadth-First Search", "Matrix"],
    constaints:
      "<li>All the visited cells of the path are <code>0</code>.</li> <li>All the adjacent cells of the path are <strong>8-directionally</strong> connected (i.e., they are different and they share an edge or a corner).</li> <li><code>n == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>grid[i][j] is 0 or 1</code></li>",
    question:
      "<p>Given an <code>n x n</code> binary matrix <code>grid</code>, return <em>the length of the shortest <strong>clear path</strong> in the matrix</em>. If there is no clear path, return <code>-1</code>.</p><p>A <strong>clear path</strong> in a binary matrix is a path from the <strong>top-left</strong> cell (i.e., <code>(0, 0)</code>) to the <strong>bottom-right</strong> cell (i.e., <code>(n - 1, n - 1)</code>) such that:</p><p>The <strong>length of a clear path</strong> is the number of visited cells of this path.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[0,1],[1,0]]",
        outputText: "2",
        explanation: "",
      },
      {
        id: 2,
        inputText: "grid = [[0,0,0],[1,1,0],[1,1,0]]",
        outputText: "4",
        explanation: "",
      },
      {
        id: 3,
        inputText: "grid = [[1,0,0],[1,1,0],[1,1,0]]",
        outputText: "-1",
        explanation: "",
      },
    ],
    tests:
      "[[[0, 1], [1, 0]], [[0, 0, 0], [1, 1, 0], [1, 1, 0]], [[1, 0, 0], [1, 1, 0], [1, 1, 0]]]",
    answer: "[2, 4, -1]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar shortestPathBinaryMatrix = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1184,
    title: "Car Pooling",
    titleSlug: "car-pooling",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Sorting",
      "Heap (Priority Queue)",
      "Simulation",
      "Prefix Sum",
    ],
    constaints:
      "<li><code>1 &lt;= trips.length &lt;= 1000</code></li> <li><code>trips[i].length == 3</code></li> <li><code>1 &lt;= numPassengers<sub>i</sub> &lt;= 100</code></li> <li><code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt;= 1000</code></li> <li><code>1 &lt;= capacity &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>There is a car with <code>capacity</code> empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</p><p>You are given the integer <code>capacity</code> and an array <code>trips</code> where <code>trips[i] = [numPassengers<sub>i</sub>, from<sub>i</sub>, to<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> trip has <code>numPassengers<sub>i</sub></code> passengers and the locations to pick them up and drop them off are <code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> respectively. The locations are given as the number of kilometers due east from the car's initial location.</p><p>Return <code>true</code><em> if it is possible to pick up and drop off all passengers for all the given trips, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "trips = [[2,1,5],[3,3,7]], capacity = 4",
        outputText: "false",
        explanation: "",
      },
      {
        id: 2,
        inputText: "trips = [[2,1,5],[3,3,7]], capacity = 5",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[[[2, 1, 5], [3, 3, 7]], [[2, 1, 5], [3, 3, 7]]]",
    answer: "[false, true]",
    code: "/**\n * @param {number[][]} trips\n * @param {number} capacity\n * @return {boolean}\n */\nvar carPooling = function(trips, capacity) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1195,
    title: "Distribute Candies to People",
    titleSlug: "distribute-candies-to-people",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Simulation"],
    constaints:
      "<li>1 &lt;= candies &lt;= 10^9</li> <li>1 &lt;= num_people &lt;= 1000</li>",
    question:
      "<p>We distribute some\u00a0number of <code>candies</code>, to a row of <strong><code>n =\u00a0num_people</code></strong>\u00a0people in the following way:</p><p>We then give 1 candy to the first person, 2 candies to the second person, and so on until we give <code>n</code>\u00a0candies to the last person.</p><p>Then, we go back to the start of the row, giving <code>n\u00a0+ 1</code> candies to the first person, <code>n\u00a0+ 2</code> candies to the second person, and so on until we give <code>2 * n</code>\u00a0candies to the last person.</p><p>This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.\u00a0 The last person will receive all of our remaining candies (not necessarily one more than the previous gift).</p><p>Return an array (of length <code>num_people</code>\u00a0and sum <code>candies</code>) that represents the final distribution of candies.</p>",
    examples: [
      {
        id: 1,
        inputText: "candies = 7, num_people = 4",
        outputText: "[1,2,3,1]",
        explanation:
          "On the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].",
      },
      {
        id: 2,
        inputText: "candies = 10, num_people = 3",
        outputText: "[5,2,3]",
        explanation:
          "On the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3].",
      },
    ],
    tests: "[7, 10]",
    answer: "[[1, 2, 3, 1], [5, 2, 3]]",
    code: "/**\n * @param {number} candies\n * @param {number} num_people\n * @return {number[]}\n */\nvar distributeCandies = function(candies, num_people) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1205,
    title: "Defanging an IP Address",
    titleSlug: "defanging-an-ip-address",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>The given <code>address</code> is a valid IPv4 address.</li>",
    question:
      '<p>Given a valid (IPv4) IP <code>address</code>, return a defanged version of that IP address.</p><p>A <em>defanged\u00a0IP address</em>\u00a0replaces every period <code>"."</code> with <code>"[.]"</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'address = "1.1.1.1"',
        outputText: '"1[.]1[.]1[.]1"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'address = "255.100.50.0"',
        outputText: '"255[.]100[.]50[.]0"',
        explanation: "",
      },
    ],
    tests: '["1.1.1.1", "255.100.50.0"]',
    answer: '["1[.]1[.]1[.]1", "255[.]100[.]50[.]0"]',
    code: "/**\n * @param {string} address\n * @return {string}\n */\nvar defangIPaddr = function(address) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1207,
    title: "Delete Nodes And Return Forest",
    titleSlug: "delete-nodes-and-return-forest",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the given tree is at most <code>1000</code>.</li> <li>Each node has a distinct value between <code>1</code> and <code>1000</code>.</li> <li><code>to_delete.length &lt;= 1000</code></li> <li><code>to_delete</code> contains distinct values between <code>1</code> and <code>1000</code>.</li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, each node in the tree has a distinct value.</p><p>After deleting all nodes with a value in <code>to_delete</code>, we are left with a forest (a disjoint union of trees).</p><p>Return the roots of the trees in the remaining forest. You may return the result in any order.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,4,5,6,7], to_delete = [3,5]",
        outputText: "[[1,2,null,4],[6],[7]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [1,2,4,null,3], to_delete = [3]",
        outputText: "[[1,2,4]]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4, 5, 6, 7], [1, 2, 4, null, 3]]",
    answer: "[[[1, 2, null, 4], [6], [7]], [[1, 2, 4]]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number[]} to_delete\n * @return {TreeNode[]}\n */\nvar delNodes = function(root, to_delete) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1210,
    title: "Mean of Array After Removing Some Elements",
    titleSlug: "mean-of-array-after-removing-some-elements",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      '<li><code>20 &lt;= arr.length &lt;= 1000</code></li> <li><code>arr.length</code><b> </b><strong>is a multiple</strong> of <code>20</code>.</li> <li><code><font face="monospace">0 &lt;= arr[i] &lt;= 10<sup>5</sup></font></code></li>',
    question:
      "<p>Given an integer array <code>arr</code>, return <em>the mean of the remaining integers after removing the smallest <code>5%</code> and the largest <code>5%</code> of the elements.</em></p><p>Answers within <code>10<sup>-5</sup></code> of the <strong>actual answer</strong> will be considered accepted.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]",
        outputText: "2.00000",
        explanation:
          "After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.",
      },
      {
        id: 2,
        inputText: "arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]",
        outputText: "4.00000",
        explanation: "",
      },
      {
        id: 3,
        inputText:
          "arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]",
        outputText: "4.77778",
        explanation: "",
      },
    ],
    tests:
      "[[1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3], [6, 2, 7, 5, 1, 2, 0, 3, 10, 2, 5, 0, 5, 5, 0, 8, 7, 6, 8, 0], [6, 0, 7, 0, 7, 5, 7, 8, 3, 4, 0, 7, 8, 1, 6, 8, 1, 1, 2, 4, 8, 1, 9, 5, 4, 3, 8, 5, 10, 8, 6, 6, 1, 0, 6, 10, 8, 2, 3, 4]]",
    answer: "[2.0, 4.0, 4.77778]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar trimMean = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1211,
    title: "Iterator for Combination",
    titleSlug: "iterator-for-combination",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Backtracking", "Design", "Iterator"],
    constaints:
      "<li><code>CombinationIterator(string characters, int combinationLength)</code> Initializes the object with a string <code>characters</code> of <strong>sorted distinct</strong> lowercase English letters and a number <code>combinationLength</code> as arguments.</li> <li><code>next()</code> Returns the next combination of length <code>combinationLength</code> in <strong>lexicographical order</strong>.</li> <li><code>hasNext()</code> Returns <code>true</code> if and only if there exists a next combination.</li> <li><code>1 &lt;= combinationLength &lt;= characters.length &lt;= 15</code></li> <li>All the characters of <code>characters</code> are <strong>unique</strong>.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>next</code> and <code>hasNext</code>.</li> <li>It is guaranteed that all calls of the function <code>next</code> are valid.</li>",
    question: "<p>Design the <code>CombinationIterator</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["CombinationIterator", "next", "hasNext", "next", "hasNext", "next", "hasNext"]\n[["abc", 2], [], [], [], [], [], []]',
        outputText: '[null, "ab", true, "ac", true, "bc", false]',
        explanation:
          'CombinationIterator itr = new CombinationIterator("abc", 2);\nitr.next();    // return "ab"\nitr.hasNext(); // return True\nitr.next();    // return "ac"\nitr.hasNext(); // return True\nitr.next();    // return "bc"\nitr.hasNext(); // return False',
      },
    ],
    tests:
      '[["CombinationIterator", "next", "hasNext", "next", "hasNext", "next", "hasNext"]]',
    answer: '[[null, "ab", true, "ac", true, "bc", false]]',
    code: "/**\n * @param {string} characters\n * @param {number} combinationLength\n */\nvar CombinationIterator = function(characters, combinationLength) {\n    \n};\n\n/**\n * @return {string}\n */\nCombinationIterator.prototype.next = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nCombinationIterator.prototype.hasNext = function() {\n    \n};\n\n/** \n * Your CombinationIterator object will be instantiated and called as such:\n * var obj = new CombinationIterator(characters, combinationLength)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1212,
    title: "Sequential Digits",
    titleSlug: "sequential-digits",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Enumeration"],
    constaints: "<li><code>10 &lt;= low &lt;= high &lt;= 10^9</code></li>",
    question:
      "<p>An\u00a0integer has <em>sequential digits</em> if and only if each digit in the number is one more than the previous digit.</p><p>Return a <strong>sorted</strong> list of all the integers\u00a0in the range <code>[low, high]</code>\u00a0inclusive that have sequential digits.</p>",
    examples: [
      {
        id: 1,
        inputText: "low = 100, high = 300",
        outputText: "[123,234]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "low = 1000, high = 13000",
        outputText: "[1234,2345,3456,4567,5678,6789,12345]",
        explanation: "",
      },
    ],
    tests: "[100, 1000]",
    answer: "[[123, 234], [1234, 2345, 3456, 4567, 5678, 6789, 12345]]",
    code: "/**\n * @param {number} low\n * @param {number} high\n * @return {number[]}\n */\nvar sequentialDigits = function(low, high) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1217,
    title: "Relative Sort Array",
    titleSlug: "relative-sort-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sorting", "Counting Sort"],
    constaints:
      "<li><code>1 &lt;= arr1.length, arr2.length &lt;= 1000</code></li> <li><code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code></li> <li>All the elements of <code>arr2</code> are <strong>distinct</strong>.</li> <li>Each\u00a0<code>arr2[i]</code> is in <code>arr1</code>.</li>",
    question:
      "<p>Given two arrays <code>arr1</code> and <code>arr2</code>, the elements of <code>arr2</code> are distinct, and all elements in <code>arr2</code> are also in <code>arr1</code>.</p><p>Sort the elements of <code>arr1</code> such that the relative ordering of items in <code>arr1</code> are the same as in <code>arr2</code>. Elements that do not appear in <code>arr2</code> should be placed at the end of <code>arr1</code> in <strong>ascending</strong> order.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]",
        outputText: "[2,2,2,1,4,3,3,9,6,7,19]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]",
        outputText: "[22,28,8,6,17,44]",
        explanation: "",
      },
    ],
    tests: "[[2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19], [28, 6, 22, 8, 44, 17]]",
    answer: "[[2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19], [22, 28, 8, 6, 17, 44]]",
    code: "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number[]}\n */\nvar relativeSortArray = function(arr1, arr2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1221,
    title: "Element Appearing More Than 25% In Sorted Array",
    titleSlug: "element-appearing-more-than-25-in-sorted-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an integer array <strong>sorted</strong> in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,2,2,6,6,6,6,7,10]",
        outputText: "6",
        explanation: "",
      },
      { id: 2, inputText: "arr = [1,1]", outputText: "1", explanation: "" },
    ],
    tests: "[[1, 2, 2, 6, 6, 6, 6, 7, 10], [1, 1]]",
    answer: "[6, 1]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar findSpecialInteger = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1227,
    title: "Number of Equivalent Domino Pairs",
    titleSlug: "number-of-equivalent-domino-pairs",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Counting"],
    constaints:
      "<li><code>1 &lt;= dominoes.length &lt;= 4 * 10<sup>4</sup></code></li> <li><code>dominoes[i].length == 2</code></li> <li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li>",
    question:
      "<p>Given a list of <code>dominoes</code>, <code>dominoes[i] = [a, b]</code> is <strong>equivalent to</strong> <code>dominoes[j] = [c, d]</code> if and only if either (<code>a == c</code> and <code>b == d</code>), or (<code>a == d</code> and <code>b == c</code>) - that is, one domino can be rotated to be equal to another domino.</p><p>Return <em>the number of pairs </em><code>(i, j)</code><em> for which </em><code>0 &lt;= i &lt; j &lt; dominoes.length</code><em>, and </em><code>dominoes[i]</code><em> is <strong>equivalent to</strong> </em><code>dominoes[j]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "dominoes = [[1,2],[2,1],[3,4],[5,6]]",
        outputText: "1",
        explanation: "",
      },
      {
        id: 2,
        inputText: "dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]",
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2], [2, 1], [3, 4], [5, 6]], [[1, 2], [1, 2], [1, 1], [1, 2], [2, 2]]]",
    answer: "[1, 3]",
    code: "/**\n * @param {number[][]} dominoes\n * @return {number}\n */\nvar numEquivDominoPairs = function(dominoes) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1231,
    title: "Replace Elements with Greatest Element on Right Side",
    titleSlug: "replace-elements-with-greatest-element-on-right-side",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an array <code>arr</code>,\u00a0replace every element in that array with the greatest element among the elements to its\u00a0right, and replace the last element with <code>-1</code>.</p><p>After doing so, return the array.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [17,18,5,4,6,1]",
        outputText: "[18,6,6,6,1,-1]",
        explanation:
          "- index 0 --> the greatest element to the right of index 0 is index 1 (18).\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\n- index 5 --> there are no elements to the right of index 5, so we put -1.",
      },
      {
        id: 2,
        inputText: "arr = [400]",
        outputText: "[-1]",
        explanation: "There are no elements to the right of index 0.",
      },
    ],
    tests: "[[17, 18, 5, 4, 6, 1], [400]]",
    answer: "[[18, 6, 6, 6, 1, -1], [-1]]",
    code: "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar replaceElements = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1236,
    title: "N-th Tribonacci Number",
    titleSlug: "n-th-tribonacci-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Memoization"],
    constaints:
      "<li><code>0 &lt;= n &lt;= 37</code></li> <li>The answer is guaranteed to fit within a 32-bit integer, ie. <code>answer &lt;= 2^31 - 1</code>.</li>",
    question:
      "<p>The Tribonacci sequence T<sub>n</sub> is defined as follows:\u00a0</p><p>T<sub>0</sub> = 0, T<sub>1</sub> = 1, T<sub>2</sub> = 1, and T<sub>n+3</sub> = T<sub>n</sub> + T<sub>n+1</sub> + T<sub>n+2</sub> for n &gt;= 0.</p><p>Given <code>n</code>, return the value of T<sub>n</sub>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 4",
        outputText: "4",
        explanation: "T_3 = 0 + 1 + 1 = 2\r\nT_4 = 1 + 1 + 2 = 4",
      },
      { id: 2, inputText: "n = 25", outputText: "1389537", explanation: "" },
    ],
    tests: "[4, 25]",
    answer: "[4, 1389537]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar tribonacci = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1238,
    title: "Alphabet Board Path",
    titleSlug: "alphabet-board-path",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>'U'</code> moves our position up one row, if the position exists on the board;</li> <li><code>'D'</code> moves our position down one row, if the position exists on the board;</li> <li><code>'L'</code> moves our position left one column, if the position exists on the board;</li> <li><code>'R'</code> moves our position right one column, if the position exists on the board;</li> <li><code>'!'</code>\u00a0adds the character <code>board[r][c]</code> at our current position <code>(r, c)</code>\u00a0to the\u00a0answer.</li> <li><code>1 &lt;= target.length &lt;= 100</code></li> <li><code>target</code> consists only of English lowercase letters.</li>",
    question:
      '<p>On an alphabet board, we start at position <code>(0, 0)</code>, corresponding to character\u00a0<code>board[0][0]</code>.</p><p>Here, <code>board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"]</code>, as shown in the diagram below.</p><p><img alt="" src="https://assets.leetcode.com/uploads/2019/07/28/azboard.png" style="width: 250px; height: 317px;"/></p><p>We may make the following moves:</p><p>(Here, the only positions that exist on the board are positions with letters on them.)</p><p>Return a sequence of moves that makes our answer equal to <code>target</code>\u00a0in the minimum number of moves.\u00a0 You may return any path that does so.</p>',
    examples: [
      {
        id: 1,
        inputText: 'target = "leet"',
        outputText: '"DDR!UURRR!!DDD!"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 'target = "code"',
        outputText: '"RR!DDRR!UUL!R!"',
        explanation: "",
      },
    ],
    tests: '["leet", "code"]',
    answer: '["DDR!UURRR!!DDD!", "RR!DDRR!UUL!R!"]',
    code: "/**\n * @param {string} target\n * @return {string}\n */\nvar alphabetBoardPath = function(target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1241,
    title: "Decompress Run-Length Encoded List",
    titleSlug: "decompress-run-length-encoded-list",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      '<li><code>2 &lt;= nums.length &lt;= 100</code></li> <li><code>nums.length % 2 == 0</code></li> <li><code><font face="monospace">1 &lt;= nums[i] &lt;= 100</font></code></li>',
    question:
      "<p>We are given a list <code>nums</code> of integers representing a list compressed with run-length encoding.</p><p>Consider each adjacent pair\u00a0of elements <code>[freq, val] = [nums[2*i], nums[2*i+1]]</code>\u00a0(with <code>i &gt;= 0</code>).\u00a0 For each such pair, there are <code>freq</code> elements with value <code>val</code> concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.</p><p>Return the decompressed list.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4]",
        outputText: "[2,4,4,4]",
        explanation:
          "The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\nThe second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\nAt the end the concatenation [2] + [4,4,4] is [2,4,4,4].",
      },
      {
        id: 2,
        inputText: "nums = [1,1,2,3]",
        outputText: "[1,3,3]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4], [1, 1, 2, 3]]",
    answer: "[[2, 4, 4, 4], [1, 3, 3]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar decompressRLElist = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1242,
    title: "Matrix Block Sum",
    titleSlug: "matrix-block-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Prefix Sum"],
    constaints:
      "<li><code>i - k &lt;= r &lt;= i + k,</code></li> <li><code>j - k &lt;= c &lt;= j + k</code>, and</li> <li><code>(r, c)</code> is a valid position in the matrix.</li> <li><code>m ==\u00a0mat.length</code></li> <li><code>n ==\u00a0mat[i].length</code></li> <li><code>1 &lt;= m, n, k &lt;= 100</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 100</code></li>",
    question:
      "<p>Given a <code>m x n</code> matrix <code>mat</code> and an integer <code>k</code>, return <em>a matrix</em> <code>answer</code> <em>where each</em> <code>answer[i][j]</code> <em>is the sum of all elements</em> <code>mat[r][c]</code> <em>for</em>:</p>",
    examples: [
      {
        id: 1,
        inputText: "mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1",
        outputText: "[[12,21,16],[27,45,33],[24,39,28]]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2",
        outputText: "[[45,45,45],[45,45,45],[45,45,45]]",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]",
    answer:
      "[[[12, 21, 16], [27, 45, 33], [24, 39, 28]], [[45, 45, 45], [45, 45, 45], [45, 45, 45]]]",
    code: "/**\n * @param {number[][]} mat\n * @param {number} k\n * @return {number[][]}\n */\nvar matrixBlockSum = function(mat, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1243,
    title: "Sum of Nodes with Even-Valued Grandparent",
    titleSlug: "sum-of-nodes-with-even-valued-grandparent",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, return <em>the sum of values of nodes with an <strong>even-valued grandparent</strong></em>. If there are no nodes with an <strong>even-valued grandparent</strong>, return <code>0</code>.</p><p>A <strong>grandparent</strong> of a node is the parent of its parent if it exists.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        outputText: "18",
        explanation:
          "The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.",
      },
      { id: 2, inputText: "root = [1]", outputText: "0", explanation: "" },
    ],
    tests: "[[6, 7, 8, 2, 7, 1, 3, 9, null, 1, 4, null, null, null, 5], [1]]",
    answer: "[18, 0]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumEvenGrandparent = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1249,
    title: "Snapshot Array",
    titleSlug: "snapshot-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Binary Search", "Design"],
    constaints:
      "<li><code>SnapshotArray(int length)</code> initializes an array-like data structure with the given length. <strong>Initially, each element equals 0</strong>.</li> <li><code>void set(index, val)</code> sets the element at the given <code>index</code> to be equal to <code>val</code>.</li> <li><code>int snap()</code> takes a snapshot of the array and returns the <code>snap_id</code>: the total number of times we called <code>snap()</code> minus <code>1</code>.</li> <li><code>int get(index, snap_id)</code> returns the value at the given <code>index</code>, at the time we took the snapshot with the given <code>snap_id</code></li> <li><code>1 &lt;= length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= index &lt; length</code></li> <li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= snap_id &lt; </code>(the total number of times we call <code>snap()</code>)</li> <li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>set</code>, <code>snap</code>, and <code>get</code>.</li>",
    question:
      "<p>Implement a SnapshotArray that supports the following interface:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["SnapshotArray","set","snap","set","get"]\n[[3],[0,5],[],[0,6],[0,0]]',
        outputText: "[null,null,0,null,5]",
        explanation:
          "SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5",
      },
    ],
    tests: '[["SnapshotArray", "set", "snap", "set", "get"]]',
    answer: "[[null, null, 0, null, 5]]",
    code: "/**\n * @param {number} length\n */\nvar SnapshotArray = function(length) {\n    \n};\n\n/** \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nSnapshotArray.prototype.set = function(index, val) {\n    \n};\n\n/**\n * @return {number}\n */\nSnapshotArray.prototype.snap = function() {\n    \n};\n\n/** \n * @param {number} index \n * @param {number} snap_id\n * @return {number}\n */\nSnapshotArray.prototype.get = function(index, snap_id) {\n    \n};\n\n/** \n * Your SnapshotArray object will be instantiated and called as such:\n * var obj = new SnapshotArray(length)\n * obj.set(index,val)\n * var param_2 = obj.snap()\n * var param_3 = obj.get(index,snap_id)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1250,
    title: "Longest Common Subsequence",
    titleSlug: "longest-common-subsequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      '<li>For example, <code>"ace"</code> is a subsequence of <code>"abcde"</code>.</li> <li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li> <li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li>',
    question:
      "<p>Given two strings <code>text1</code> and <code>text2</code>, return <em>the length of their longest <strong>common subsequence</strong>. </em>If there is no <strong>common subsequence</strong>, return <code>0</code>.</p><p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p><p>A <strong>common subsequence</strong> of two strings is a subsequence that is common to both strings.</p>",
    examples: [
      {
        id: 1,
        inputText: 'text1 = "abcde", text2 = "ace"',
        outputText: "3",
        explanation:
          'The longest common subsequence is "ace" and its length is 3.',
      },
      {
        id: 2,
        inputText: 'text1 = "abc", text2 = "abc"',
        outputText: "3",
        explanation:
          'The longest common subsequence is "abc" and its length is 3.',
      },
      {
        id: 3,
        inputText: 'text1 = "abc", text2 = "def"',
        outputText: "0",
        explanation: "There is no such common subsequence, so the result is 0.",
      },
    ],
    tests: '["abcde", "abc", "abc"]',
    answer: "[3, 3, 0]",
    code: "/**\n * @param {string} text1\n * @param {string} text2\n * @return {number}\n */\nvar longestCommonSubsequence = function(text1, text2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1253,
    title: "Sort the Matrix Diagonally",
    titleSlug: "sort-the-matrix-diagonally",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sorting", "Matrix"],
    constaints:
      "<li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 100</code></li>",
    question:
      "<p>A <strong>matrix diagonal</strong> is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the <strong>matrix diagonal</strong> starting from <code>mat[2][0]</code>, where <code>mat</code> is a <code>6 x 3</code> matrix, includes cells <code>mat[2][0]</code>, <code>mat[3][1]</code>, and <code>mat[4][2]</code>.</p><p>Given an <code>m x n</code> matrix <code>mat</code> of integers, sort each <strong>matrix diagonal</strong> in ascending order and return <em>the resulting matrix</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
        outputText: "[[1,1,1,1],[1,2,2,2],[1,2,3,3]]",
        explanation: "",
      },
      {
        id: 2,
        inputText:
          "mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]",
        outputText:
          "[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]",
        explanation: "",
      },
    ],
    tests:
      "[[[3, 3, 1, 1], [2, 2, 1, 2], [1, 1, 1, 2]], [[11, 25, 66, 1, 69, 7], [23, 55, 17, 45, 15, 52], [75, 31, 36, 44, 58, 8], [22, 27, 33, 25, 68, 4], [84, 28, 14, 11, 5, 50]]]",
    answer:
      "[[[1, 1, 1, 1], [1, 2, 2, 2], [1, 2, 3, 3]], [[5, 17, 4, 1, 52, 7], [11, 11, 25, 45, 8, 69], [14, 23, 25, 44, 58, 15], [22, 27, 31, 36, 50, 66], [84, 28, 75, 33, 55, 68]]]",
    code: "/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar diagonalSort = function(mat) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1254,
    title: "Deepest Leaves Sum",
    titleSlug: "deepest-leaves-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li>",
    question: "",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,4,5,null,6,7,null,null,null,null,8]",
        outputText: "15",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        outputText: "19",
        explanation: "",
      },
    ],
    tests:
      "[[1, 2, 3, 4, 5, null, 6, 7, null, null, null, null, 8], [6, 7, 8, 2, 7, 1, 3, 9, null, 1, 4, null, null, null, 5]]",
    answer: "[15, 19]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar deepestLeavesSum = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1256,
    title: "Rank Transform of an Array",
    titleSlug: "rank-transform-of-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sorting"],
    constaints:
      "<li>Rank is an integer starting from 1.</li> <li>The larger the element, the larger the rank. If two elements are equal, their rank must be the same.</li> <li>Rank should be as small as possible.</li> <li><code>0 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= arr[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an array of integers\u00a0<code>arr</code>, replace each element with its rank.</p><p>The rank represents how large the element is. The rank has the following rules:</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [40,10,20,30]",
        outputText: "[4,1,2,3]",
        explanation:
          ": 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.",
      },
      {
        id: 2,
        inputText: "arr = [100,100,100]",
        outputText: "[1,1,1]",
        explanation: ": Same elements share the same rank.",
      },
      {
        id: 3,
        inputText: "arr = [37,12,28,9,100,56,80,5,12]",
        outputText: "[5,3,4,2,8,6,7,1,3]",
        explanation: "",
      },
    ],
    tests:
      "[[40, 10, 20, 30], [100, 100, 100], [37, 12, 28, 9, 100, 56, 80, 5, 12]]",
    answer: "[[4, 1, 2, 3], [1, 1, 1], [5, 3, 4, 2, 8, 6, 7, 1, 3]]",
    code: "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar arrayRankTransform = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1260,
    title: "Day of the Year",
    titleSlug: "day-of-the-year",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "String"],
    constaints:
      "<li><code>date.length == 10</code></li> <li><code>date[4] == date[7] == '-'</code>, and all other <code>date[i]</code>'s are digits</li> <li><code>date</code> represents a calendar date between Jan 1<sup>st</sup>, 1900 and Dec 31<sup>th</sup>, 2019.</li>",
    question:
      '<p>Given a string <code>date</code> representing a <a href="https://en.wikipedia.org/wiki/Gregorian_calendar" target="_blank">Gregorian calendar</a> date formatted as <code>YYYY-MM-DD</code>, return <em>the day number of the year</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: 'date = "2019-01-09"',
        outputText: "9",
        explanation: "Given date is the 9th day of the year in 2019.",
      },
      {
        id: 2,
        inputText: 'date = "2019-02-10"',
        outputText: "41",
        explanation: "",
      },
    ],
    tests: '["2019-01-09", "2019-02-10"]',
    answer: "[9, 41]",
    code: "/**\n * @param {string} date\n * @return {number}\n */\nvar dayOfYear = function(date) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1264,
    title: "Maximum Number of Words You Can Type",
    titleSlug: "maximum-number-of-words-you-can-type",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= text.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= brokenLetters.length &lt;= 26</code></li> <li><code>text</code> consists of words separated by a single space without any leading or trailing spaces.</li> <li>Each word only consists of lowercase English letters.</li> <li><code>brokenLetters</code> consists of <strong>distinct</strong> lowercase English letters.</li>",
    question:
      "<p>There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.</p><p>Given a string <code>text</code> of words separated by a single space (no leading or trailing spaces) and a string <code>brokenLetters</code> of all <strong>distinct</strong> letter keys that are broken, return <em>the <strong>number of words</strong> in</em> <code>text</code> <em>you can fully type using this keyboard</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'text = "hello world", brokenLetters = "ad"',
        outputText: "1",
        explanation: "We cannot type \"world\" because the 'd' key is broken.",
      },
      {
        id: 2,
        inputText: 'text = "leet code", brokenLetters = "lt"',
        outputText: "1",
        explanation:
          "We cannot type \"leet\" because the 'l' and 't' keys are broken.",
      },
      {
        id: 3,
        inputText: 'text = "leet code", brokenLetters = "e"',
        outputText: "0",
        explanation:
          "We cannot type either word because the 'e' key is broken.",
      },
    ],
    tests: '["hello world", "leet code", "leet code"]',
    answer: "[1, 1, 0]",
    code: "/**\n * @param {string} text\n * @param {string} brokenLetters\n * @return {number}\n */\nvar canBeTypedWords = function(text, brokenLetters) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1267,
    title: "Remove Zero Sum Consecutive Nodes from Linked List",
    titleSlug: "remove-zero-sum-consecutive-nodes-from-linked-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Linked List"],
    constaints:
      "<li>The given linked list will contain between <code>1</code> and <code>1000</code> nodes.</li> <li>Each node in the linked list has <code>-1000 &lt;= node.val &lt;= 1000</code>.</li>",
    question:
      "<p>Given the <code>head</code> of a linked list, we repeatedly delete consecutive sequences of nodes that sum to <code>0</code> until there are no such sequences.</p><p>After doing so, return the head of the final linked list.\u00a0 You may return any such answer.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,2,-3,3,1]",
        outputText: "[3,1]",
        explanation: "The answer [1,2,1] would also be accepted.",
      },
      {
        id: 2,
        inputText: "head = [1,2,3,-3,4]",
        outputText: "[1,2,4]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "head = [1,2,3,-3,-2]",
        outputText: "[1]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, -3, 3, 1], [1, 2, 3, -3, 4], [1, 2, 3, -3, -2]]",
    answer: "[[3, 1], [1, 2, 4], [1]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar removeZeroSumSublists = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1273,
    title: "Compare Strings by Frequency of the Smallest Character",
    titleSlug: "compare-strings-by-frequency-of-the-smallest-character",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= queries.length &lt;= 2000</code></li> <li><code>1 &lt;= words.length &lt;= 2000</code></li> <li><code>1 &lt;= queries[i].length, words[i].length &lt;= 10</code></li> <li><code>queries[i][j]</code>, <code>words[i][j]</code> consist of lowercase English letters.</li>",
    question:
      "<p>Let the function <code>f(s)</code> be the <strong>frequency of the lexicographically smallest character</strong> in a non-empty string <code>s</code>. For example, if <code>s = \"dcce\"</code> then <code>f(s) = 2</code> because the lexicographically smallest character is <code>'c'</code>, which has a frequency of 2.</p><p>You are given an array of strings <code>words</code> and another array of query strings <code>queries</code>. For each query <code>queries[i]</code>, count the <strong>number of words</strong> in <code>words</code> such that <code>f(queries[i])</code> &lt; <code>f(W)</code> for each <code>W</code> in <code>words</code>.</p><p>Return <em>an integer array </em><code>answer</code><em>, where each </em><code>answer[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'queries = ["cbd"], words = ["zaaaz"]',
        outputText: "[1]",
        explanation:
          'On the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz").',
      },
      {
        id: 2,
        inputText: 'queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]',
        outputText: "[1,2]",
        explanation:
          'On the first query only f("bbb") < f("aaaa"). On the second query both f("aaa") and f("aaaa") are both > f("cc").',
      },
    ],
    tests: '[["cbd"], ["bbb", "cc"]]',
    answer: "[[1], [1, 2]]",
    code: "/**\n * @param {string[]} queries\n * @param {string[]} words\n * @return {number[]}\n */\nvar numSmallerByFrequency = function(queries, words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1274,
    title: "Number of Days Between Two Dates",
    titleSlug: "number-of-days-between-two-dates",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "String"],
    constaints:
      "<li>The given dates are valid\u00a0dates between the years <code>1971</code> and <code>2100</code>.</li>",
    question:
      "<p>Write a program to count the number of days between two dates.</p><p>The two dates are given as strings, their format is <code>YYYY-MM-DD</code>\u00a0as shown in the examples.</p>",
    examples: [
      {
        id: 1,
        inputText: 'date1 = "2019-06-29", date2 = "2019-06-30"',
        outputText: "1",
        explanation: "",
      },
      {
        id: 2,
        inputText: 'date1 = "2020-01-15", date2 = "2019-12-31"',
        outputText: "15",
        explanation: "",
      },
    ],
    tests: '["2019-06-29", "2020-01-15"]',
    answer: "[1, 15]",
    code: "/**\n * @param {string} date1\n * @param {string} date2\n * @return {number}\n */\nvar daysBetweenDates = function(date1, date2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1275,
    title: "Validate Binary Tree Nodes",
    titleSlug: "validate-binary-tree-nodes",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Binary Tree",
    ],
    constaints:
      "<li><code>n == leftChild.length == rightChild.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>-1 &lt;= leftChild[i], rightChild[i] &lt;= n - 1</code></li>",
    question:
      "<p>You have <code>n</code> binary tree nodes numbered from <code>0</code> to <code>n - 1</code> where node <code>i</code> has two children <code>leftChild[i]</code> and <code>rightChild[i]</code>, return <code>true</code> if and only if <strong>all</strong> the given nodes form <strong>exactly one</strong> valid binary tree.</p><p>If node <code>i</code> has no left child then <code>leftChild[i]</code> will equal <code>-1</code>, similarly for the right child.</p><p>Note that the nodes have no values and that we only use the node numbers in this problem.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: "n = 2, leftChild = [1,0], rightChild = [-1,-1]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests: "[4, 4, 2]",
    answer: "[true, false, false]",
    code: "/**\n * @param {number} n\n * @param {number[]} leftChild\n * @param {number[]} rightChild\n * @return {boolean}\n */\nvar validateBinaryTreeNodes = function(n, leftChild, rightChild) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1276,
    title: "Closest Divisors",
    titleSlug: "closest-divisors",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math"],
    constaints: "<li><code>1 &lt;= num &lt;= 10^9</code></li>",
    question:
      "<p>Given an integer <code>num</code>, find the closest two integers in absolute difference whose product equals\u00a0<code>num + 1</code>\u00a0or <code>num + 2</code>.</p><p>Return the two integers in any order.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 8",
        outputText: "[3,3]",
        explanation:
          "For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.",
      },
      { id: 2, inputText: "num = 123", outputText: "[5,25]", explanation: "" },
      { id: 3, inputText: "num = 999", outputText: "[40,25]", explanation: "" },
    ],
    tests: "[8, 123, 999]",
    answer: "[[3, 3], [5, 25], [40, 25]]",
    code: "/**\n * @param {number} num\n * @return {number[]}\n */\nvar closestDivisors = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1279,
    title: "Prime Arrangements",
    titleSlug: "prime-arrangements",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints: "<li><code>1 &lt;= n &lt;= 100</code></li>",
    question:
      "<p>Return the number of permutations of 1 to <code>n</code> so that prime numbers are at prime indices (1-indexed.)</p><p><em>(Recall that an integer\u00a0is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers\u00a0both smaller than it.)</em></p><p>Since the answer may be large, return the answer <strong>modulo <code>10^9 + 7</code></strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5",
        outputText: "12",
        explanation:
          "For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.",
      },
      { id: 2, inputText: "n = 100", outputText: "682289015", explanation: "" },
    ],
    tests: "[5, 100]",
    answer: "[12, 682289015]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar numPrimeArrangements = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1284,
    title: "Four Divisors",
    titleSlug: "four-divisors",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return <em>the sum of divisors of the integers in that array that have exactly four divisors</em>. If there is no such integer in the array, return <code>0</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [21,4,7]",
        outputText: "32",
        explanation:
          "21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only.",
      },
      { id: 2, inputText: "nums = [21,21]", outputText: "64", explanation: "" },
      {
        id: 3,
        inputText: "nums = [1,2,3,4,5]",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[[21, 4, 7], [21, 21], [1, 2, 3, 4, 5]]",
    answer: "[32, 64, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumFourDivisors = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1285,
    title: "Balance a Binary Search Tree",
    titleSlug: "balance-a-binary-search-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Divide and Conquer",
      "Greedy",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a binary search tree, return <em>a <strong>balanced</strong> binary search tree with the same node values</em>. If there is more than one answer, return <strong>any of them</strong>.</p><p>A binary search tree is <strong>balanced</strong> if the depth of the two subtrees of every node never differs by more than <code>1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,null,2,null,3,null,4,null,null]",
        outputText: "[2,1,3,null,null,null,4]",
        explanation:
          "This is not the only correct answer, [3,1,4,null,2] is also correct.",
      },
      {
        id: 2,
        inputText: "root = [2,1,3]",
        outputText: "[2,1,3]",
        explanation: "",
      },
    ],
    tests: "[[1, null, 2, null, 3, null, 4], [2, 1, 3]]",
    answer: "[[2, 1, 3, null, null, null, 4], [2, 1, 3]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar balanceBST = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1289,
    title: "Day of the Week",
    titleSlug: "day-of-the-week",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li>The given dates are valid dates between the years <code>1971</code> and <code>2100</code>.</li>",
    question:
      '<p>Given a date, return the corresponding day of the week for that date.</p><p>The input is given as three integers representing the <code>day</code>, <code>month</code> and <code>year</code> respectively.</p><p>Return the answer as one of the following values\u00a0<code>{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: "day = 31, month = 8, year = 2019",
        outputText: '"Saturday"',
        explanation: "",
      },
      {
        id: 2,
        inputText: "day = 18, month = 7, year = 1999",
        outputText: '"Sunday"',
        explanation: "",
      },
      {
        id: 3,
        inputText: "day = 15, month = 8, year = 1993",
        outputText: '"Sunday"',
        explanation: "",
      },
    ],
    tests: "[31, 18, 15]",
    answer: '["Saturday", "Sunday", "Sunday"]',
    code: "/**\n * @param {number} day\n * @param {number} month\n * @param {number} year\n * @return {string}\n */\nvar dayOfTheWeek = function(day, month, year) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1294,
    title: "Range Frequency Queries",
    titleSlug: "range-frequency-queries",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Binary Search", "Design", "Segment Tree"],
    constaints:
      "<li><code>RangeFreqQuery(int[] arr)</code> Constructs an instance of the class with the given <strong>0-indexed</strong> integer array <code>arr</code>.</li> <li><code>int query(int left, int right, int value)</code> Returns the <strong>frequency</strong> of <code>value</code> in the subarray <code>arr[left...right]</code>.</li> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i], value &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= left &lt;= right &lt; arr.length</code></li> <li>At most <code>10<sup>5</sup></code> calls will be made to <code>query</code></li>",
    question:
      "<p>Design a data structure to find the <strong>frequency</strong> of a given value in a given subarray.</p><p>The <strong>frequency</strong> of a value in a subarray is the number of occurrences of that value in the subarray.</p><p>Implement the <code>RangeFreqQuery</code> class:</p><p>A <strong>subarray</strong> is a contiguous sequence of elements within an array. <code>arr[left...right]</code> denotes the subarray that contains the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> (<strong>inclusive</strong>).</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["RangeFreqQuery", "query", "query"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]',
        outputText: "[null, 1, 2]",
        explanation:
          "RangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array.",
      },
    ],
    tests: '[["RangeFreqQuery", "query", "query"]]',
    answer: "[[null, 1, 2]]",
    code: "/**\n * @param {number[]} arr\n */\nvar RangeFreqQuery = function(arr) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right \n * @param {number} value\n * @return {number}\n */\nRangeFreqQuery.prototype.query = function(left, right, value) {\n    \n};\n\n/** \n * Your RangeFreqQuery object will be instantiated and called as such:\n * var obj = new RangeFreqQuery(arr)\n * var param_1 = obj.query(left,right,value)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1298,
    title: "Reverse Substrings Between Each Pair of Parentheses",
    titleSlug: "reverse-substrings-between-each-pair-of-parentheses",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> only contains lower case English characters and parentheses.</li> <li>It is guaranteed that all parentheses are balanced.</li>",
    question:
      "<p>You are given a string <code>s</code> that consists of lower case English letters and brackets.</p><p>Reverse the strings in each pair of matching parentheses, starting from the innermost one.</p><p>Your result should <strong>not</strong> contain any brackets.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "(abcd)"',
        outputText: '"dcba"',
        explanation: "",
      },
      {
        id: 2,
        inputText: 's = "(u(love)i)"',
        outputText: '"iloveu"',
        explanation:
          'The substring "love" is reversed first, then the whole string is reversed.',
      },
      {
        id: 3,
        inputText: 's = "(ed(et(oc))el)"',
        outputText: '"leetcode"',
        explanation:
          'First, we reverse the substring "oc", then "etco", and finally, the whole string.',
      },
    ],
    tests: '["(abcd)", "(u(love)i)", "(ed(et(oc))el)"]',
    answer: '["dcba", "iloveu", "leetcode"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseParentheses = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1303,
    title: "Minimum Moves to Reach Target Score",
    titleSlug: "minimum-moves-to-reach-target-score",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Greedy"],
    constaints:
      "<li><strong>Increment</strong> the current integer by one (i.e., <code>x = x + 1</code>).</li> <li><strong>Double</strong> the current integer (i.e., <code>x = 2 * x</code>).</li> <li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= maxDoubles &lt;= 100</code></li>",
    question:
      "<p>You are playing a game with integers. You start with the integer <code>1</code> and you want to reach the integer <code>target</code>.</p><p>In one move, you can either:</p><p>You can use the <strong>increment</strong> operation <strong>any</strong> number of times, however, you can only use the <strong>double</strong> operation <strong>at most</strong> <code>maxDoubles</code> times.</p><p>Given the two integers <code>target</code> and <code>maxDoubles</code>, return <em>the minimum number of moves needed to reach </em><code>target</code><em> starting with </em><code>1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "target = 5, maxDoubles = 0",
        outputText: "4",
        explanation: "Keep incrementing by 1 until you reach target.",
      },
      {
        id: 2,
        inputText: "target = 19, maxDoubles = 2",
        outputText: "7",
        explanation:
          "Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19",
      },
      {
        id: 3,
        inputText: "target = 10, maxDoubles = 4",
        outputText: "4",
        explanation:
          "Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10",
      },
    ],
    tests: "[5, 19, 10]",
    answer: "[4, 7, 4]",
    code: "/**\n * @param {number} target\n * @param {number} maxDoubles\n * @return {number}\n */\nvar minMoves = function(target, maxDoubles) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1306,
    title: "Minimum Absolute Difference",
    titleSlug: "minimum-absolute-difference",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li><code>a, b</code> are from <code>arr</code></li> <li><code>a &lt; b</code></li> <li><code>b - a</code> equals to the minimum absolute difference of any two elements in <code>arr</code></li> <li><code>2 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given an array of <strong>distinct</strong> integers <code>arr</code>, find all pairs of elements with the minimum absolute difference of any two elements.</p><p>Return a list of pairs in ascending order(with respect to pairs), each pair <code>[a, b]</code> follows</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [4,2,1,3]",
        outputText: "[[1,2],[2,3],[3,4]]",
        explanation:
          "The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.",
      },
      {
        id: 2,
        inputText: "arr = [1,3,6,10,15]",
        outputText: "[[1,3]]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "arr = [3,8,-10,23,19,-4,-14,27]",
        outputText: "[[-14,-10],[19,23],[23,27]]",
        explanation: "",
      },
    ],
    tests:
      "[[4, 2, 1, 3], [1, 3, 6, 10, 15], [3, 8, -10, 23, 19, -4, -14, 27]]",
    answer:
      "[[[1, 2], [2, 3], [3, 4]], [[1, 3]], [[-14, -10], [19, 23], [23, 27]]]",
    code: "/**\n * @param {number[]} arr\n * @return {number[][]}\n */\nvar minimumAbsDifference = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1310,
    title: "Watering Plants",
    titleSlug: "watering-plants",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Simulation"],
    constaints:
      "<li>Water the plants in order from left to right.</li> <li>After watering the current plant, if you do not have enough water to <strong>completely</strong> water the next plant, return to the river to fully refill the watering can.</li> <li>You <strong>cannot</strong> refill the watering can early.</li> <li><code>n == plants.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= plants[i] &lt;= 10<sup>6</sup></code></li> <li><code>max(plants[i]) &lt;= capacity &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You want to water <code>n</code> plants in your garden with a watering can. The plants are arranged in a row and are labeled from <code>0</code> to <code>n - 1</code> from left to right where the <code>i<sup>th</sup></code> plant is located at <code>x = i</code>. There is a river at <code>x = -1</code> that you can refill your watering can at.</p><p>Each plant needs a specific amount of water. You will water the plants in the following way:</p><p>You are initially at the river (i.e., <code>x = -1</code>). It takes <strong>one step</strong> to move <strong>one unit</strong> on the x-axis.</p><p>Given a <strong>0-indexed</strong> integer array <code>plants</code> of <code>n</code> integers, where <code>plants[i]</code> is the amount of water the <code>i<sup>th</sup></code> plant needs, and an integer <code>capacity</code> representing the watering can capacity, return <em>the <strong>number of steps</strong> needed to water all the plants</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "plants = [2,2,3,3], capacity = 5",
        outputText: "14",
        explanation:
          "Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.",
      },
      {
        id: 2,
        inputText: "plants = [1,1,1,4,2,3], capacity = 4",
        outputText: "30",
        explanation:
          "Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30.",
      },
      {
        id: 3,
        inputText: "plants = [7,7,7,7,7,7,7], capacity = 8",
        outputText: "49",
        explanation:
          "You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.",
      },
    ],
    tests: "[[2, 2, 3, 3], [1, 1, 1, 4, 2, 3], [7, 7, 7, 7, 7, 7, 7]]",
    answer: "[14, 30, 49]",
    code: "/**\n * @param {number[]} plants\n * @param {number} capacity\n * @return {number}\n */\nvar wateringPlants = function(plants, capacity) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1319,
    title: "Unique Number of Occurrences",
    titleSlug: "unique-number-of-occurrences",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 1000</code></li> <li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li>",
    question:
      "<p>Given an array of integers <code>arr</code>, return <code>true</code> <em>if the number of occurrences of each value in the array is <strong>unique</strong> or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,2,2,1,1,3]",
        outputText: "true",
        explanation:
          "The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.",
      },
      { id: 2, inputText: "arr = [1,2]", outputText: "false", explanation: "" },
      {
        id: 3,
        inputText: "arr = [-3,0,1,-3,1,1,1,-3,10,0]",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 2, 1, 1, 3], [1, 2], [-3, 0, 1, -3, 1, 1, 1, -3, 10, 0]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar uniqueOccurrences = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1320,
    title: "Remove All Adjacent Duplicates in String II",
    titleSlug: "remove-all-adjacent-duplicates-in-string-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>s</code> only contains lowercase English letters.</li>",
    question:
      "<p>You are given a string <code>s</code> and an integer <code>k</code>, a <code>k</code> <strong>duplicate removal</strong> consists of choosing <code>k</code> adjacent and equal letters from <code>s</code> and removing them, causing the left and the right side of the deleted substring to concatenate together.</p><p>We repeatedly make <code>k</code> <strong>duplicate removals</strong> on <code>s</code> until we no longer can.</p><p>Return <em>the final string after all such duplicate removals have been made</em>. It is guaranteed that the answer is <strong>unique</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abcd", k = 2',
        outputText: '"abcd"',
        explanation: "There's nothing to delete.",
      },
      {
        id: 2,
        inputText: 's = "deeedbbcccbdaa", k = 3',
        outputText: '"aa"',
        explanation:
          'First delete "eee" and "ccc", get "ddbbbdaa"\nThen delete "bbb", get "dddaa"\nFinally delete "ddd", get "aa"',
      },
      {
        id: 3,
        inputText: 's = "pbbcggttciiippooaais", k = 2',
        outputText: '"ps"',
        explanation: "",
      },
    ],
    tests: '["abcd", "deeedbbcccbdaa", "pbbcggttciiippooaais"]',
    answer: '["abcd", "aa", "ps"]',
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar removeDuplicates = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1325,
    title: "Path with Maximum Probability",
    titleSlug: "path-with-maximum-probability",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Graph", "Heap (Priority Queue)", "Shortest Path"],
    constaints:
      "<li><code>2 &lt;= n &lt;= 10^4</code></li> <li><code>0 &lt;= start, end &lt; n</code></li> <li><code>start != end</code></li> <li><code>0 &lt;= a, b &lt; n</code></li> <li><code>a != b</code></li> <li><code>0 &lt;= succProb.length == edges.length &lt;= 2*10^4</code></li> <li><code>0 &lt;= succProb[i] &lt;= 1</code></li> <li>There is at most one edge between every two nodes.</li>",
    question:
      "<p>You are given an undirected weighted graph of\u00a0<code>n</code>\u00a0nodes (0-indexed), represented by an edge list where\u00a0<code>edges[i] = [a, b]</code>\u00a0is an undirected edge connecting the nodes\u00a0<code>a</code>\u00a0and\u00a0<code>b</code>\u00a0with a probability of success of traversing that edge\u00a0<code>succProb[i]</code>.</p><p>Given two nodes\u00a0<code>start</code>\u00a0and\u00a0<code>end</code>, find the path with the maximum probability of success to go from\u00a0<code>start</code>\u00a0to\u00a0<code>end</code>\u00a0and return its success probability.</p><p>If there is no path from\u00a0<code>start</code>\u00a0to\u00a0<code>end</code>, <strong>return\u00a00</strong>. Your answer will be accepted if it differs from the correct answer by at most <strong>1e-5</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2",
        outputText: "0.25000",
        explanation:
          "There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.",
      },
      {
        id: 2,
        inputText:
          "n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2",
        outputText: "0.30000",
        explanation: "",
      },
      {
        id: 3,
        inputText:
          "n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2",
        outputText: "0.00000",
        explanation: "There is no path between 0 and 2.",
      },
    ],
    tests: "[3, 3, 3]",
    answer: "[0.25, 0.3, 0.0]",
    code: "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number[]} succProb\n * @param {number} start_node\n * @param {number} end_node\n * @return {number}\n */\nvar maxProbability = function(n, edges, succProb, start_node, end_node) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1326,
    title: "Sum of Floored Pairs",
    titleSlug: "sum-of-floored-pairs",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Math", "Binary Search", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return the sum of <code>floor(nums[i] / nums[j])</code> for all pairs of indices <code>0 &lt;= i, j &lt; nums.length</code> in the array. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p><p>The <code>floor()</code> function returns the integer part of the division.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,5,9]",
        outputText: "10",
        explanation:
          "floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.",
      },
      {
        id: 2,
        inputText: "nums = [7,7,7,7,7,7,7]",
        outputText: "49",
        explanation: "",
      },
    ],
    tests: "[[2, 5, 9], [7, 7, 7, 7, 7, 7, 7]]",
    answer: "[10, 49]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfFlooredPairs = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1341,
    title: "Split a String in Balanced Strings",
    titleSlug: "split-a-string-in-balanced-strings",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Greedy", "Counting"],
    constaints:
      "<li>Each substring is balanced.</li> <li><code>2 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'L'</code> or <code>'R'</code>.</li> <li><code>s</code> is a <strong>balanced</strong> string.</li>",
    question:
      "<p><strong>Balanced</strong> strings are those that have an equal quantity of <code>'L'</code> and <code>'R'</code> characters.</p><p>Given a <strong>balanced</strong> string <code>s</code>, split it into some number of substrings such that:</p><p>Return <em>the <strong>maximum</strong> number of balanced strings you can obtain.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 's = "RLRRLLRLRL"',
        outputText: "4",
        explanation:
          's can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of \'L\' and \'R\'.',
      },
      {
        id: 2,
        inputText: 's = "RLRRRLLRLL"',
        outputText: "2",
        explanation:
          's can be split into "RL", "RRRLLRLL", each substring contains same number of \'L\' and \'R\'.\nNote that s cannot be split into "RL", "RR", "RL", "LR", "LL", because the 2',
      },
      {
        id: 3,
        inputText: 's = "LLLLRRRR"',
        outputText: "1",
        explanation: 's can be split into "LLLLRRRR".',
      },
    ],
    tests: '["RLRRLLRLRL", "RLRRRLLRLL", "LLLLRRRR"]',
    answer: "[4, 2, 1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar balancedStringSplit = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1349,
    title: "Check If It Is a Straight Line",
    titleSlug: "check-if-it-is-a-straight-line",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry"],
    constaints:
      "<li><code>2 &lt;=\u00a0coordinates.length &lt;= 1000</code></li> <li><code>coordinates[i].length == 2</code></li> <li><code>-10^4 &lt;=\u00a0coordinates[i][0],\u00a0coordinates[i][1] &lt;= 10^4</code></li> <li><code>coordinates</code>\u00a0contains no duplicate point.</li>",
    question:
      "<p>You are given an array\u00a0<code>coordinates</code>, <code>coordinates[i] = [x, y]</code>, where <code>[x, y]</code> represents the coordinate of a point. Check if these points\u00a0make a straight line in the XY plane.</p>",
    examples: [
      {
        id: 1,
        inputText: "coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        outputText: "true",
        explanation: "",
      },
      {
        id: 2,
        inputText: "coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]",
        outputText: "false",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[1, 1], [2, 2], [3, 4], [4, 5], [5, 6], [7, 7]]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[][]} coordinates\n * @return {boolean}\n */\nvar checkStraightLine = function(coordinates) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1364,
    title: "Tuple with Same Product",
    titleSlug: "tuple-with-same-product",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Counting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li>All elements in <code>nums</code> are <strong>distinct</strong>.</li>",
    question:
      "<p>Given an array <code>nums</code> of <strong>distinct</strong> positive integers, return <em>the number of tuples </em><code>(a, b, c, d)</code><em> such that </em><code>a * b = c * d</code><em> where </em><code>a</code><em>, </em><code>b</code><em>, </em><code>c</code><em>, and </em><code>d</code><em> are elements of </em><code>nums</code><em>, and </em><code>a != b != c != d</code><em>.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,3,4,6]",
        outputText: "8",
        explanation:
          "There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)",
      },
      {
        id: 2,
        inputText: "nums = [1,2,4,5,10]",
        outputText: "16",
        explanation:
          "There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)",
      },
    ],
    tests: "[[2, 3, 4, 6], [1, 2, 4, 5, 10]]",
    answer: "[8, 16]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar tupleSameProduct = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1371,
    title: "Minimum Remove to Make Valid Parentheses",
    titleSlug: "minimum-remove-to-make-valid-parentheses",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li>It is the empty string, contains only lowercase characters, or</li> <li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li> <li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either<code>'('</code> , <code>')'</code>, or lowercase English letter<code>.</code></li>",
    question:
      "<p>Given a string <font face=\"monospace\">s</font> of <code>'('</code> , <code>')'</code> and lowercase English characters.</p><p>Your task is to remove the minimum number of parentheses ( <code>'('</code> or <code>')'</code>, in any positions ) so that the resulting <em>parentheses string</em> is valid and return <strong>any</strong> valid string.</p><p>Formally, a <em>parentheses string</em> is valid if and only if:</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "lee(t(c)o)de)"',
        outputText: '"lee(t(c)o)de"',
        explanation: '"lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.',
      },
      {
        id: 2,
        inputText: 's = "a)b(c)d"',
        outputText: '"ab(c)d"',
        explanation: "",
      },
      {
        id: 3,
        inputText: 's = "))(("',
        outputText: '""',
        explanation: "An empty string is also valid.",
      },
    ],
    tests: '["lee(t(c)o)de)", "a)b(c)d", "))(("]',
    answer: '["lee(t(c)o)de", "ab(c)d", ""]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar minRemoveToMakeValid = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1378,
    title: "Cells with Odd Values in a Matrix",
    titleSlug: "cells-with-odd-values-in-a-matrix",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Simulation"],
    constaints:
      "<li>Increment <strong>all</strong> the cells on row <code>r<sub>i</sub></code>.</li> <li>Increment <strong>all</strong> the cells on column <code>c<sub>i</sub></code>.</li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>1 &lt;= indices.length &lt;= 100</code></li> <li><code>0 &lt;= r<sub>i</sub> &lt; m</code></li> <li><code>0 &lt;= c<sub>i</sub> &lt; n</code></li>",
    question:
      "<p>There is an <code>m x n</code> matrix that is initialized to all <code>0</code>'s. There is also a 2D array <code>indices</code> where each <code>indices[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> represents a <strong>0-indexed location</strong> to perform some increment operations on the matrix.</p><p>For each location <code>indices[i]</code>, do <strong>both</strong> of the following:</p><p>Given <code>m</code>, <code>n</code>, and <code>indices</code>, return <em>the <strong>number of odd-valued cells</strong> in the matrix after applying the increment to all locations in </em><code>indices</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "m = 2, n = 3, indices = [[0,1],[1,1]]",
        outputText: "6",
        explanation:
          "Initial matrix = [[0,0,0],[0,0,0]].\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\nThe final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.",
      },
      {
        id: 2,
        inputText: "m = 2, n = 2, indices = [[1,1],[0,0]]",
        outputText: "0",
        explanation:
          "Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.",
      },
    ],
    tests: "[2, 2]",
    answer: "[6, 0]",
    code: "/**\n * @param {number} m\n * @param {number} n\n * @param {number[][]} indices\n * @return {number}\n */\nvar oddCells = function(m, n, indices) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1387,
    title: "Find Elements in a Contaminated Binary Tree",
    titleSlug: "find-elements-in-a-contaminated-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree",
    ],
    constaints:
      "<li><code>root.val == 0</code></li> <li>If <code>treeNode.val == x</code> and <code>treeNode.left != null</code>, then <code>treeNode.left.val == 2 * x + 1</code></li> <li>If <code>treeNode.val == x</code> and <code>treeNode.right != null</code>, then <code>treeNode.right.val == 2 * x + 2</code></li> <li><code>FindElements(TreeNode* root)</code> Initializes the object with a contaminated binary tree and recovers it.</li> <li><code>bool find(int target)</code> Returns <code>true</code> if the <code>target</code> value exists in the recovered binary tree.</li> <li><code>TreeNode.val == -1</code></li> <li>The height of the binary tree is less than or equal to <code>20</code></li> <li>The total number of nodes is between <code>[1, 10<sup>4</sup>]</code></li> <li>Total calls of <code>find()</code> is between <code>[1, 10<sup>4</sup>]</code></li> <li><code>0 &lt;= target &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given a binary tree with the following rules:</p><p>Now the binary tree is contaminated, which means all <code>treeNode.val</code> have been changed to <code>-1</code>.</p><p>Implement the <code>FindElements</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText: '["FindElements","find","find"]\n[[[-1,null,-1]],[1],[2]]',
        outputText: "[null,false,true]",
        explanation:
          "FindElements findElements = new FindElements([-1,null,-1]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True",
      },
      {
        id: 2,
        inputText:
          '["FindElements","find","find","find"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]',
        outputText: "[null,true,true,false]",
        explanation:
          "FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False",
      },
      {
        id: 3,
        inputText:
          '["FindElements","find","find","find","find"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]',
        outputText: "[null,true,false,false,true]",
        explanation:
          "FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True",
      },
    ],
    tests:
      '[["FindElements", "find", "find"], ["FindElements", "find", "find", "find"], ["FindElements", "find", "find", "find", "find"]]',
    answer:
      "[[null, false, true], [null, true, true, false], [null, true, false, false, true]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n */\nvar FindElements = function(root) {\n    \n};\n\n/** \n * @param {number} target\n * @return {boolean}\n */\nFindElements.prototype.find = function(target) {\n    \n};\n\n/** \n * Your FindElements object will be instantiated and called as such:\n * var obj = new FindElements(root)\n * var param_1 = obj.find(target)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1392,
    title: "Find the Difference of Two Arrays",
    titleSlug: "find-the-difference-of-two-arrays",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>answer[0]</code> <em>is a list of all <strong>distinct</strong> integers in</em> <code>nums1</code> <em>which are <strong>not</strong> present in</em> <code>nums2</code><em>.</em></li> <li><code>answer[1]</code> <em>is a list of all <strong>distinct</strong> integers in</em> <code>nums2</code> <em>which are <strong>not</strong> present in</em> <code>nums1</code>.</li> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>",
    question:
      "<p>Given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, return <em>a list</em> <code>answer</code> <em>of size</em> <code>2</code> <em>where:</em></p><p><strong>Note</strong> that the integers in the lists may be returned in <strong>any</strong> order.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [1,2,3], nums2 = [2,4,6]",
        outputText: "[[1,3],[4,6]]",
        explanation:
          "For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].",
      },
      {
        id: 2,
        inputText: "nums1 = [1,2,3,3], nums2 = [1,1,2,2]",
        outputText: "[[3],[]]",
        explanation:
          "For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = [].",
      },
    ],
    tests: "[[1, 2, 3], [1, 2, 3, 3]]",
    answer: "[[[1, 3], [4, 6]], [[3], []]]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[][]}\n */\nvar findDifference = function(nums1, nums2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1395,
    title: "Minimum Time Visiting All Points",
    titleSlug: "minimum-time-visiting-all-points",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry"],
    constaints:
      "<li>In <code>1</code> second, you can either:\n\n\t<ul>\n<li>move vertically by one\u00a0unit,</li>\n<li>move horizontally by one unit, or</li>\n<li>move diagonally <code>sqrt(2)</code> units (in other words, move one unit vertically then one unit horizontally in <code>1</code> second).</li>\n</ul>\n</li> <li>move vertically by one\u00a0unit,</li> <li>move horizontally by one unit, or</li> <li>move diagonally <code>sqrt(2)</code> units (in other words, move one unit vertically then one unit horizontally in <code>1</code> second).</li> <li>You have to visit the points in the same order as they appear in the array.</li> <li>You are allowed to pass through points that appear later in the order, but these do not count as visits.</li> <li><code>points.length == n</code></li> <li><code>1 &lt;= n\u00a0&lt;= 100</code></li> <li><code>points[i].length == 2</code></li> <li><code>-1000\u00a0&lt;= points[i][0], points[i][1]\u00a0&lt;= 1000</code></li>",
    question:
      "<p>On a 2D plane, there are <code>n</code> points with integer coordinates <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. Return <em>the <strong>minimum time</strong> in seconds to visit all the points in the order given by </em><code>points</code>.</p><p>You can move according to these rules:</p>",
    examples: [
      {
        id: 1,
        inputText: "points = [[1,1],[3,4],[-1,0]]",
        outputText: "7",
        explanation: "One optimal path is",
      },
      {
        id: 2,
        inputText: "points = [[3,2],[-2,2]]",
        outputText: "5",
        explanation: "",
      },
    ],
    tests: "[[[1, 1], [3, 4], [-1, 0]], [[3, 2], [-2, 2]]]",
    answer: "[7, 5]",
    code: "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minTimeToVisitAllPoints = function(points) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1396,
    title: "Count Servers that Communicate",
    titleSlug: "count-servers-that-communicate",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix",
      "Counting",
    ],
    constaints:
      "<li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m &lt;= 250</code></li> <li><code>1 &lt;= n &lt;= 250</code></li> <li><code>grid[i][j] == 0 or 1</code></li>",
    question:
      "<p>You are given a map of a server center, represented as a <code>m * n</code> integer matrix\u00a0<code>grid</code>, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.<br/>\n<br/>\nReturn the number of servers\u00a0that communicate with any other server.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[1,0],[0,1]]",
        outputText: "0",
        explanation: "No servers can communicate with others.",
      },
      {
        id: 2,
        inputText: "grid = [[1,0],[1,1]]",
        outputText: "3",
        explanation:
          "All three servers can communicate with at least one other server.",
      },
      {
        id: 3,
        inputText: "grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]",
        outputText: "4",
        explanation:
          "The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.",
      },
    ],
    tests:
      "[[[1, 0], [0, 1]], [[1, 0], [1, 1]], [[1, 1, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1]]]",
    answer: "[0, 3, 4]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar countServers = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1400,
    title: "Find Winner on a Tic Tac Toe Game",
    titleSlug: "find-winner-on-a-tic-tac-toe-game",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Matrix", "Simulation"],
    constaints:
      "<li>Players take turns placing characters into empty squares <code>' '</code>.</li> <li>The first player <code>A</code> always places <code>'X'</code> characters, while the second player <code>B</code> always places <code>'O'</code> characters.</li> <li><code>'X'</code> and <code>'O'</code> characters are always placed into empty squares, never on filled ones.</li> <li>The game ends when there are <strong>three</strong> of the same (non-empty) character filling any row, column, or diagonal.</li> <li>The game also ends if all squares are non-empty.</li> <li>No more moves can be played if the game is over.</li> <li><code>1 &lt;= moves.length &lt;= 9</code></li> <li><code>moves[i].length == 2</code></li> <li><code>0 &lt;= row<sub>i</sub>, col<sub>i</sub> &lt;= 2</code></li> <li>There are no repeated elements on <code>moves</code>.</li> <li><code>moves</code> follow the rules of tic tac toe.</li>",
    question:
      '<p><strong>Tic-tac-toe</strong> is played by two players <code>A</code> and <code>B</code> on a <code>3 x 3</code> grid. The rules of Tic-Tac-Toe are:</p><p>Given a 2D integer array <code>moves</code> where <code>moves[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> move will be played on <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code>. return <em>the winner of the game if it exists</em> (<code>A</code> or <code>B</code>). In case the game ends in a draw return <code>"Draw"</code>. If there are still movements to play return <code>"Pending"</code>.</p><p>You can assume that <code>moves</code> is valid (i.e., it follows the rules of <strong>Tic-Tac-Toe</strong>), the grid is initially empty, and <code>A</code> will play first.</p>',
    examples: [
      {
        id: 1,
        inputText: "moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]",
        outputText: '"A"',
        explanation: "A wins, they always play first.",
      },
      {
        id: 2,
        inputText: "moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]",
        outputText: '"B"',
        explanation: "B wins.",
      },
      {
        id: 3,
        inputText:
          "moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
        outputText: '"Draw"',
        explanation:
          "The game ends in a draw since there are no moves to make.",
      },
    ],
    tests:
      "[[[0, 0], [2, 0], [1, 1], [2, 1], [2, 2]], [[0, 0], [1, 1], [0, 1], [0, 2], [1, 0], [2, 0]], [[0, 0], [1, 1], [2, 0], [1, 0], [1, 2], [2, 1], [0, 1], [0, 2], [2, 2]]]",
    answer: '["A", "B", "Draw"]',
    code: "/**\n * @param {number[][]} moves\n * @return {string}\n */\nvar tictactoe = function(moves) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1421,
    title: "Find Numbers with Even Number of Digits",
    titleSlug: "find-numbers-with-even-number-of-digits",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 500</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an array <code>nums</code> of integers, return how many of them contain an <strong>even number</strong> of digits.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [12,345,2,6,7896]",
        outputText: "2",
        explanation:
          "12 contains 2 digits (even number of digits).\u00a0\n345 contains 3 digits (odd number of digits).\u00a0\n2 contains 1 digit (odd number of digits).\u00a0\n6 contains 1 digit (odd number of digits).\u00a0\n7896 contains 4 digits (even number of digits).\u00a0\nTherefore only 12 and 7896 contain an even number of digits.",
      },
      {
        id: 2,
        inputText: "nums = [555,901,482,1771]",
        outputText: "1",
        explanation: "Only 1771 contains an even number of digits.",
      },
    ],
    tests: "[[12, 345, 2, 6, 7896], [555, 901, 482, 1771]]",
    answer: "[2, 1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumbers = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1422,
    title: "Divide Array in Sets of K Consecutive Numbers",
    titleSlug: "divide-array-in-sets-of-k-consecutive-numbers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Greedy", "Sorting"],
    constaints:
      "<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an array of integers <code>nums</code> and a positive integer <code>k</code>, check whether it is possible to divide this array into sets of <code>k</code> consecutive numbers.</p><p>Return <code>true</code> <em>if it is possible</em>.<strong> </strong>Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,3,4,4,5,6], k = 4",
        outputText: "true",
        explanation: "Array can be divided into [1,2,3,4] and [3,4,5,6].",
      },
      {
        id: 2,
        inputText: "nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3",
        outputText: "true",
        explanation:
          "Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].",
      },
      {
        id: 3,
        inputText: "nums = [1,2,3,4], k = 3",
        outputText: "false",
        explanation: "Each array should be divided in subarrays of size 3.",
      },
    ],
    tests:
      "[[1, 2, 3, 3, 4, 4, 5, 6], [3, 2, 1, 2, 3, 4, 3, 4, 5, 9, 10, 11], [1, 2, 3, 4]]",
    answer: "[true, true, false]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar isPossibleDivide = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1423,
    title: "Maximum Number of Occurrences of a Substring",
    titleSlug: "maximum-number-of-occurrences-of-a-substring",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sliding Window"],
    constaints:
      "<li>The number of unique characters in the substring must be less than or equal to <code>maxLetters</code>.</li> <li>The substring size must be between <code>minSize</code> and <code>maxSize</code> inclusive.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= maxLetters &lt;= 26</code></li> <li><code>1 &lt;= minSize &lt;= maxSize &lt;= min(26, s.length)</code></li> <li><code>s</code> consists of only lowercase English letters.</li>",
    question:
      "<p>Given a string <code>s</code>, return the maximum number of occurrences of <strong>any</strong> substring under the following rules:</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aababcaab", maxLetters = 2, minSize = 3, maxSize = 4',
        outputText: "2",
        explanation:
          'Substring "aab" has 2 occurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).',
      },
      {
        id: 2,
        inputText: 's = "aaaa", maxLetters = 1, minSize = 3, maxSize = 3',
        outputText: "2",
        explanation:
          'Substring "aaa" occur 2 times in the string. It can overlap.',
      },
    ],
    tests: '["aababcaab", "aaaa"]',
    answer: "[2, 2]",
    code: "/**\n * @param {string} s\n * @param {number} maxLetters\n * @param {number} minSize\n * @param {number} maxSize\n * @return {number}\n */\nvar maxFreq = function(s, maxLetters, minSize, maxSize) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1427,
    title: "All Elements in Two Binary Search Trees",
    titleSlug: "all-elements-in-two-binary-search-trees",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Sorting",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in each tree is in the range <code>[0, 5000]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given two binary search trees <code>root1</code> and <code>root2</code>, return <em>a list containing all the integers from both trees sorted in <strong>ascending</strong> order</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root1 = [2,1,4], root2 = [1,0,3]",
        outputText: "[0,1,1,2,3,4]",
        explanation: "",
      },
      {
        id: 2,
        inputText: "root1 = [1,null,8], root2 = [8,1]",
        outputText: "[1,1,8,8]",
        explanation: "",
      },
    ],
    tests: "[[2, 1, 4], [1, null, 8]]",
    answer: "[[0, 1, 1, 2, 3, 4], [1, 1, 8, 8]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {number[]}\n */\nvar getAllElements = function(root1, root2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1440,
    title: "Convert Integer to the Sum of Two No-Zero Integers",
    titleSlug: "convert-integer-to-the-sum-of-two-no-zero-integers",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li><code>a</code> and <code>b</code> are <strong>No-Zero integers</strong>.</li> <li><code>a + b = n</code></li> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p><strong>No-Zero integer</strong> is a positive integer that <strong>does not contain any <code>0</code></strong> in its decimal representation.</p><p>Given an integer <code>n</code>, return <em>a list of two integers</em> <code>[a, b]</code> <em>where</em>:</p><p>The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "[1,1]",
        explanation:
          "Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n.",
      },
      {
        id: 2,
        inputText: "n = 11",
        outputText: "[2,9]",
        explanation:
          "Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as [8, 3] that can be accepted.",
      },
    ],
    tests: "[2, 11]",
    answer: "[[1, 1], [2, 9]]",
    code: "/**\n * @param {number} n\n * @return {number[]}\n */\nvar getNoZeroIntegers = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1444,
    title: "Number of Steps to Reduce a Number to Zero",
    titleSlug: "number-of-steps-to-reduce-a-number-to-zero",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation"],
    constaints: "<li><code>0 &lt;= num &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>Given an integer <code>num</code>, return <em>the number of steps to reduce it to zero</em>.</p><p>In one step, if the current number is even, you have to divide it by <code>2</code>, otherwise, you have to subtract <code>1</code> from it.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 14",
        outputText: "6",
        explanation:
          "Step 1) 14 is even; divide by 2 and obtain 7.\u00a0\nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3.\u00a0\nStep 4) 3 is odd; subtract 1 and obtain 2.\u00a0\nStep 5) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 6) 1 is odd; subtract 1 and obtain 0.",
      },
      {
        id: 2,
        inputText: "num = 8",
        outputText: "4",
        explanation:
          "Step 1) 8 is even; divide by 2 and obtain 4.\u00a0\nStep 2) 4 is even; divide by 2 and obtain 2.\u00a0\nStep 3) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 4) 1 is odd; subtract 1 and obtain 0.",
      },
      { id: 3, inputText: "num = 123", outputText: "12", explanation: "" },
    ],
    tests: "[14, 8, 123]",
    answer: "[6, 4, 12]",
    code: "/**\n * @param {number} num\n * @return {number}\n */\nvar numberOfSteps = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1446,
    title: "Angle Between Hands of a Clock",
    titleSlug: "angle-between-hands-of-a-clock",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li><code>1 &lt;= hour &lt;= 12</code></li> <li><code>0 &lt;= minutes &lt;= 59</code></li>",
    question:
      "<p>Given two numbers, <code>hour</code> and <code>minutes</code>, return <em>the smaller angle (in degrees) formed between the </em><code>hour</code><em> and the </em><code>minute</code><em> hand</em>.</p><p>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted as correct.</p>",
    examples: [
      {
        id: 1,
        inputText: "hour = 12, minutes = 30",
        outputText: "165",
        explanation: "",
      },
      {
        id: 2,
        inputText: "hour = 3, minutes = 30",
        outputText: "75",
        explanation: "",
      },
      {
        id: 3,
        inputText: "hour = 3, minutes = 15",
        outputText: "7.5",
        explanation: "",
      },
    ],
    tests: "[12, 3, 3]",
    answer: "[165, 75, 7.5]",
    code: "/**\n * @param {number} hour\n * @param {number} minutes\n * @return {number}\n */\nvar angleClock = function(hour, minutes) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1447,
    title: "Jump Game IV",
    titleSlug: "jump-game-iv",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Breadth-First Search"],
    constaints:
      "<li><code>i + 1</code> where:\u00a0<code>i + 1 &lt; arr.length</code>.</li> <li><code>i - 1</code> where:\u00a0<code>i - 1 &gt;= 0</code>.</li> <li><code>j</code> where: <code>arr[i] == arr[j]</code> and <code>i != j</code>.</li> <li><code>1 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>8</sup> &lt;= arr[i] &lt;= 10<sup>8</sup></code></li>",
    question:
      "<p>Given an array of\u00a0integers <code>arr</code>, you are initially positioned at the first index of the array.</p><p>In one step you can jump from index <code>i</code> to index:</p><p>Return <em>the minimum number of steps</em> to reach the <strong>last index</strong> of the array.</p><p>Notice that you can not jump outside of the array at any time.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [100,-23,-23,404,100,23,23,23,3,404]",
        outputText: "3",
        explanation:
          "You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.",
      },
      {
        id: 2,
        inputText: "arr = [7]",
        outputText: "0",
        explanation: "Start index is the last index. You do not need to jump.",
      },
      {
        id: 3,
        inputText: "arr = [7,6,9,6,9,6,9,7]",
        outputText: "1",
        explanation:
          "You can jump directly from index 0 to index 7 which is last index of the array.",
      },
    ],
    tests:
      "[[100, -23, -23, 404, 100, 23, 23, 23, 3, 404], [7], [7, 6, 9, 6, 9, 6, 9, 7]]",
    answer: "[3, 0, 1]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar minJumps = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1448,
    title: "Maximum 69 Number",
    titleSlug: "maximum-69-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Greedy"],
    constaints:
      "<li><code>1 &lt;= num &lt;= 10<sup>4</sup></code></li> <li><code>num</code>\u00a0consists of only <code>6</code> and <code>9</code> digits.</li>",
    question:
      "<p>You are given a positive integer <code>num</code> consisting only of digits <code>6</code> and <code>9</code>.</p><p>Return <em>the maximum number you can get by changing <strong>at most</strong> one digit (</em><code>6</code><em> becomes </em><code>9</code><em>, and </em><code>9</code><em> becomes </em><code>6</code><em>)</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 9669",
        outputText: "9969",
        explanation:
          "Changing the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969.",
      },
      {
        id: 2,
        inputText: "num = 9996",
        outputText: "9999",
        explanation:
          "Changing the last digit 6 to 9 results in the maximum number.",
      },
      {
        id: 3,
        inputText: "num = 9999",
        outputText: "9999",
        explanation: "It is better not to apply any change.",
      },
    ],
    tests: "[9669, 9996, 9999]",
    answer: "[9969, 9999, 9999]",
    code: "/**\n * @param {number} num\n * @return {number}\n */\nvar maximum69Number  = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1449,
    title: "Print Words Vertically",
    titleSlug: "print-words-vertically",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "String", "Simulation"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 200</code></li> <li><code>s</code>\u00a0contains only upper case English letters.</li> <li>It's guaranteed that there is only one\u00a0space between 2 words.</li>",
    question:
      "<p>Given a string <code>s</code>.\u00a0Return\u00a0all the words vertically in the same order in which they appear in <code>s</code>.<br/>\r\nWords are returned as a list of strings, complete with\u00a0spaces when is necessary. (Trailing spaces are not allowed).<br/>\r\nEach word would be put on only one column and that in one column there will be only one word.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "HOW ARE YOU"',
        outputText: '["HAY","ORO","WEU"]',
        explanation:
          'Each word is printed vertically. \r\n "HAY"\r\n\u00a0"ORO"\r\n\u00a0"WEU"',
      },
      {
        id: 2,
        inputText: 's = "TO BE OR NOT TO BE"',
        outputText: '["TBONTB","OEROOE","   T"]',
        explanation:
          'Trailing spaces is not allowed. \r\n"TBONTB"\r\n"OEROOE"\r\n"   T"',
      },
      {
        id: 3,
        inputText: 's = "CONTEST IS COMING"',
        outputText: '["CIC","OSO","N M","T I","E N","S G","T"]',
        explanation: "",
      },
    ],
    tests: '["HOW ARE YOU", "TO BE OR NOT TO BE", "CONTEST IS COMING"]',
    answer:
      '[["HAY", "ORO", "WEU"], ["TBONTB", "OEROOE", "   T"], ["CIC", "OSO", "N M", "T I", "E N", "S G", "T"]]',
    code: "/**\n * @param {string} s\n * @return {string[]}\n */\nvar printVertically = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1450,
    title: "Delete Leaves With a Given Value",
    titleSlug: "delete-leaves-with-a-given-value",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li> <li><code>1 &lt;= Node.val, target &lt;= 1000</code></li>",
    question:
      "<p>Given a binary tree <code>root</code> and an integer <code>target</code>, delete all the <strong>leaf nodes</strong> with value <code>target</code>.</p><p>Note that once you delete a leaf node with value <code>target</code><strong>, </strong>if its parent node becomes a leaf node and has the value <code>target</code>, it should also be deleted (you need to continue doing that until you cannot).</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,2,null,2,4], target = 2",
        outputText: "[1,null,3,null,4]",
        explanation:
          "Leaf nodes in green with value (target = 2) are removed (Picture in left). \nAfter removing, new nodes become leaf nodes with value (target = 2) (Picture in center).",
      },
      {
        id: 2,
        inputText: "root = [1,3,3,3,2], target = 3",
        outputText: "[1,3,null,null,2]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "root = [1,2,null,2,null,2], target = 2",
        outputText: "[1]",
        explanation:
          "Leaf nodes in green with value (target = 2) are removed at each step.",
      },
    ],
    tests:
      "[[1, 2, 3, 2, null, 2, 4], [1, 3, 3, 3, 2], [1, 2, null, 2, null, 2]]",
    answer: "[[1, null, 3, null, 4], [1, 3, null, null, 2], [1]]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} target\n * @return {TreeNode}\n */\nvar removeLeafNodes = function(root, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1454,
    title: "Remove Palindromic Subsequences",
    titleSlug: "remove-palindromic-subsequences",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'a'</code> or <code>'b'</code>.</li>",
    question:
      "<p>You are given a string <code>s</code> consisting <strong>only</strong> of letters <code>'a'</code> and <code>'b'</code>. In a single step you can remove one <strong>palindromic subsequence</strong> from <code>s</code>.</p><p>Return <em>the <strong>minimum</strong> number of steps to make the given string empty</em>.</p><p>A string is a <strong>subsequence</strong> of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does <strong>not</strong> necessarily need to be contiguous.</p><p>A string is called <strong>palindrome</strong> if is one that reads the same backward as well as forward.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "ababa"',
        outputText: "1",
        explanation:
          "s is already a palindrome, so its entirety can be removed in a single step.",
      },
      { id: 2, inputText: 's = "abb"', outputText: "2", explanation: '"' },
      { id: 3, inputText: 's = "baabb"', outputText: "2", explanation: '"' },
    ],
    tests: '["ababa", "abb", "baabb"]',
    answer: "[1, 2, 2]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar removePalindromeSub = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1454,
    title: "Remove Palindromic Subsequences",
    titleSlug: "remove-palindromic-subsequences",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'a'</code> or <code>'b'</code>.</li>",
    question:
      "<p>You are given a string <code>s</code> consisting <strong>only</strong> of letters <code>'a'</code> and <code>'b'</code>. In a single step you can remove one <strong>palindromic subsequence</strong> from <code>s</code>.</p><p>Return <em>the <strong>minimum</strong> number of steps to make the given string empty</em>.</p><p>A string is a <strong>subsequence</strong> of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does <strong>not</strong> necessarily need to be contiguous.</p><p>A string is called <strong>palindrome</strong> if is one that reads the same backward as well as forward.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "ababa"',
        outputText: "1",
        explanation:
          "s is already a palindrome, so its entirety can be removed in a single step.",
      },
      { id: 2, inputText: 's = "abb"', outputText: "2", explanation: '"' },
      { id: 3, inputText: 's = "baabb"', outputText: "2", explanation: '"' },
    ],
    tests: '["ababa", "abb", "baabb"]',
    answer: "[1, 2, 2]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar removePalindromeSub = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1455,
    title: "Filter Restaurants by Vegan-Friendly, Price and Distance",
    titleSlug: "filter-restaurants-by-vegan-friendly-price-and-distance",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li><code>1 &lt;=\u00a0restaurants.length &lt;= 10^4</code></li> <li><code>restaurants[i].length == 5</code></li> <li><code>1 &lt;=\u00a0id<sub>i</sub>, rating<sub>i</sub>, price<sub>i</sub>, distance<sub>i </sub>&lt;= 10^5</code></li> <li><code>1 &lt;=\u00a0maxPrice,\u00a0maxDistance &lt;= 10^5</code></li> <li><code>veganFriendly<sub>i</sub></code> and\u00a0<code>veganFriendly</code>\u00a0are\u00a00 or 1.</li> <li>All <code>id<sub>i</sub></code> are distinct.</li>",
    question:
      "<p>Given the array <code>restaurants</code> where \u00a0<code>restaurants[i] = [id<sub>i</sub>, rating<sub>i</sub>, veganFriendly<sub>i</sub>, price<sub>i</sub>, distance<sub>i</sub>]</code>. You have to filter the restaurants using three filters.</p><p>The <code>veganFriendly</code> filter will be either <em>true</em> (meaning you should only include restaurants with <code>veganFriendly<sub>i</sub></code> set to true)\u00a0or <em>false</em>\u00a0(meaning you can include any restaurant). In addition, you have the filters\u00a0<code>maxPrice</code> and <code>maxDistance</code>\u00a0which\u00a0are the maximum value for price and distance of restaurants you should consider respectively.</p><p>Return the array of restaurant <em><strong>IDs</strong></em> after filtering, ordered by <strong>rating</strong> from highest to lowest. For restaurants with the same rating, order them by <em><strong>id</strong></em> from highest to lowest. For simplicity <code>veganFriendly<sub>i</sub></code> and <code>veganFriendly</code> take value <em>1</em> when it is <em>true</em>, and <em>0</em> when it is <em>false</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10",
        outputText: "[3,1,5]",
        explanation:
          "The restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest).",
      },
      {
        id: 2,
        inputText:
          "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10",
        outputText: "[4,3,2,1,5]",
        explanation:
          "The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.",
      },
      {
        id: 3,
        inputText:
          "restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3",
        outputText: "[4,5]",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 4, 1, 40, 10], [2, 8, 0, 50, 5], [3, 8, 1, 30, 4], [4, 10, 0, 10, 3], [5, 1, 1, 15, 1]], [[1, 4, 1, 40, 10], [2, 8, 0, 50, 5], [3, 8, 1, 30, 4], [4, 10, 0, 10, 3], [5, 1, 1, 15, 1]], [[1, 4, 1, 40, 10], [2, 8, 0, 50, 5], [3, 8, 1, 30, 4], [4, 10, 0, 10, 3], [5, 1, 1, 15, 1]]]",
    answer: "[[3, 1, 5], [4, 3, 2, 1, 5], [4, 5]]",
    code: "/**\n * @param {number[][]} restaurants\n * @param {number} veganFriendly\n * @param {number} maxPrice\n * @param {number} maxDistance\n * @return {number[]}\n */\nvar filterRestaurants = function(restaurants, veganFriendly, maxPrice, maxDistance) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1458,
    title: "Sort Integers by The Number of 1 Bits",
    titleSlug: "sort-integers-by-the-number-of-1-bits",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Bit Manipulation", "Sorting", "Counting"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 500</code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>arr</code>. Sort the integers in the array\u00a0in ascending order by the number of <code>1</code>'s\u00a0in their binary representation and in case of two or more integers have the same number of <code>1</code>'s you have to sort them in ascending order.</p><p>Return <em>the array after sorting it</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [0,1,2,3,4,5,6,7,8]",
        outputText: "[0,1,2,4,8,3,5,6,7]",
        explanation:
          "[0] is the only integer with 0 bits.\n[1,2,4,8] all have 1 bit.\n[3,5,6] have 2 bits.\n[7] has 3 bits.\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]",
      },
      {
        id: 2,
        inputText: "arr = [1024,512,256,128,64,32,16,8,4,2,1]",
        outputText: "[1,2,4,8,16,32,64,128,256,512,1024]",
        explanation:
          "All integers have 1 bit in the binary representation, you should just sort them in ascending order.",
      },
    ],
    tests:
      "[[0, 1, 2, 3, 4, 5, 6, 7, 8], [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]]",
    answer:
      "[[0, 1, 2, 4, 8, 3, 5, 6, 7], [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]]",
    code: "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar sortByBits = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1459,
    title: "Apply Discount Every n Orders",
    titleSlug: "apply-discount-every-n-orders",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Design"],
    constaints:
      "<li><code>Cashier(int n, int discount, int[] products, int[] prices)</code> Initializes the object with <code>n</code>, the <code>discount</code>, and the <code>products</code> and their <code>prices</code>.</li> <li><code>double getBill(int[] product, int[] amount)</code> Returns the final total of the bill with the discount applied (if any). Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= discount &lt;= 100</code></li> <li><code>1 &lt;= products.length &lt;= 200</code></li> <li><code>prices.length == products.length</code></li> <li><code>1 &lt;= products[i] &lt;= 200</code></li> <li><code>1 &lt;= prices[i] &lt;= 1000</code></li> <li>The elements in <code>products</code> are <strong>unique</strong>.</li> <li><code>1 &lt;= product.length &lt;= products.length</code></li> <li><code>amount.length == product.length</code></li> <li><code>product[j]</code> exists in <code>products</code>.</li> <li><code>1 &lt;= amount[j] &lt;= 1000</code></li> <li>The elements of <code>product</code> are <strong>unique</strong>.</li> <li>At most <code>1000</code> calls will be made to <code>getBill</code>.</li> <li>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li>",
    question:
      "<p>There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays <code>products</code> and <code>prices</code>, where the <code>i<sup>th</sup></code> product has an ID of <code>products[i]</code> and a price of <code>prices[i]</code>.</p><p>When a customer is paying, their bill is represented as two parallel integer arrays <code>product</code> and <code>amount</code>, where the <code>j<sup>th</sup></code> product they purchased has an ID of <code>product[j]</code>, and <code>amount[j]</code> is how much of the product they bought. Their subtotal is calculated as the sum of each <code>amount[j] * (price of the j<sup>th</sup> product)</code>.</p><p>The supermarket decided to have a sale. Every <code>n<sup>th</sup></code> customer paying for their groceries will be given a <strong>percentage discount</strong>. The discount amount is given by <code>discount</code>, where they will be given <code>discount</code> percent off their subtotal. More formally, if their subtotal is <code>bill</code>, then they would actually pay <code>bill * ((100 - discount) / 100)</code>.</p><p>Implement the <code>Cashier</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["Cashier","getBill","getBill","getBill","getBill","getBill","getBill","getBill"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]',
        outputText: "[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]",
        explanation:
          "Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0. 1",
      },
    ],
    tests:
      '[["Cashier", "getBill", "getBill", "getBill", "getBill", "getBill", "getBill", "getBill"]]',
    answer: "[[null, 500.0, 4000.0, 800.0, 4000.0, 4000.0, 7350.0, 2500.0]]",
    code: "/**\n * @param {number} n\n * @param {number} discount\n * @param {number[]} products\n * @param {number[]} prices\n */\nvar Cashier = function(n, discount, products, prices) {\n    \n};\n\n/** \n * @param {number[]} product \n * @param {number[]} amount\n * @return {number}\n */\nCashier.prototype.getBill = function(product, amount) {\n    \n};\n\n/** \n * Your Cashier object will be instantiated and called as such:\n * var obj = new Cashier(n, discount, products, prices)\n * var param_1 = obj.getBill(product,amount)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1460,
    title: "Number of Substrings Containing All Three Characters",
    titleSlug: "number-of-substrings-containing-all-three-characters",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sliding Window"],
    constaints:
      "<li><code>3 &lt;= s.length &lt;= 5 x 10^4</code></li> <li><code>s</code>\u00a0only consists of\u00a0<em>a</em>, <em>b</em> or <em>c\u00a0</em>characters.</li>",
    question:
      "<p>Given a string <code>s</code>\u00a0consisting only of characters <em>a</em>, <em>b</em> and <em>c</em>.</p><p>Return the number of substrings containing <b>at least</b>\u00a0one occurrence of all these characters <em>a</em>, <em>b</em> and <em>c</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abcabc"',
        outputText: "10",
        explanation:
          "The substrings containing\u00a0at least\u00a0one occurrence of the characters",
      },
      {
        id: 2,
        inputText: 's = "aaacb"',
        outputText: "3",
        explanation:
          "The substrings containing\u00a0at least\u00a0one occurrence of the characters",
      },
      { id: 3, inputText: 's = "abc"', outputText: "1", explanation: "" },
    ],
    tests: '["abcabc", "aaacb", "abc"]',
    answer: "[10, 3, 1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar numberOfSubstrings = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1464,
    title: "Reduce Array Size to The Half",
    titleSlug: "reduce-array-size-to-the-half",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
    ],
    constaints:
      "<li><code>2 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>arr.length</code> is even.</li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given an integer array <code>arr</code>. You can choose a set of integers and remove all the occurrences of these integers in the array.</p><p>Return <em>the minimum size of the set so that <strong>at least</strong> half of the integers of the array are removed</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [3,3,3,3,5,5,5,2,2,7]",
        outputText: "2",
        explanation:
          "Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.",
      },
      {
        id: 2,
        inputText: "arr = [7,7,7,7,7,7]",
        outputText: "1",
        explanation:
          "The only possible set you can choose is {7}. This will make the new array empty.",
      },
    ],
    tests: "[[3, 3, 3, 3, 5, 5, 5, 2, 2, 7], [7, 7, 7, 7, 7, 7]]",
    answer: "[2, 1]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar minSetSize = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1465,
    title: "Maximum Product of Splitted Binary Tree",
    titleSlug: "maximum-product-of-splitted-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Binary Tree"],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[2, 5 * 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given the <code>root</code> of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.</p><p>Return <em>the maximum product of the sums of the two subtrees</em>. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p><p><strong>Note</strong> that you need to maximize the answer before taking the mod and not after taking it.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,2,3,4,5,6]",
        outputText: "110",
        explanation:
          "Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)",
      },
      {
        id: 2,
        inputText: "root = [1,null,2,3,4,null,null,5,6]",
        outputText: "90",
        explanation:
          "Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)",
      },
    ],
    tests: "[[1, 2, 3, 4, 5, 6], [1, null, 2, 3, 4, null, null, 5, 6]]",
    answer: "[110, 90]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxProduct = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1469,
    title: "Minimum Number of Steps to Make Two Strings Anagram",
    titleSlug: "minimum-number-of-steps-to-make-two-strings-anagram",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Counting"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s.length == t.length</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters only.</li>",
    question:
      "<p>You are given two strings of the same length <code>s</code> and <code>t</code>. In one step you can choose <strong>any character</strong> of <code>t</code> and replace it with <strong>another character</strong>.</p><p>Return <em>the minimum number of steps</em> to make <code>t</code> an anagram of <code>s</code>.</p><p>An <strong>Anagram</strong> of a string is a string that contains the same characters with a different (or the same) ordering.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "bab", t = "aba"',
        outputText: "1",
        explanation:
          "Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.",
      },
      {
        id: 2,
        inputText: 's = "leetcode", t = "practice"',
        outputText: "5",
        explanation:
          "Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.",
      },
      {
        id: 3,
        inputText: 's = "anagram", t = "mangaar"',
        outputText: "0",
        explanation: '"anagram" and "mangaar" are anagrams.',
      },
    ],
    tests: '["bab", "leetcode", "anagram"]',
    answer: "[1, 5, 0]",
    code: "/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar minSteps = function(s, t) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1470,
    title: "Tweet Counts Per Frequency",
    titleSlug: "tweet-counts-per-frequency",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "Binary Search", "Design", "Sorting", "Ordered Set"],
    constaints:
      '<li>Every <strong>minute</strong> (60-second chunks): <code>[10,69]</code>, <code>[70,129]</code>, <code>[130,189]</code>, <code>...</code>, <code>[9970,10000]</code></li> <li>Every <strong>hour</strong> (3600-second chunks): <code>[10,3609]</code>, <code>[3610,7209]</code>, <code>[7210,10000]</code></li> <li>Every <strong>day</strong> (86400-second chunks): <code>[10,10000]</code></li> <li><code>TweetCounts()</code> Initializes the <code>TweetCounts</code> object.</li> <li><code>void recordTweet(String tweetName, int time)</code> Stores the <code>tweetName</code> at the recorded <code>time</code> (in <strong>seconds</strong>).</li> <li><code>List&lt;Integer&gt; getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)</code> Returns a list of integers representing the number of tweets with <code>tweetName</code> in each <strong>time chunk</strong> for the given period of time <code>[startTime, endTime]</code> (in <strong>seconds</strong>) and frequency <code>freq</code>.\n\t<ul>\n<li><code>freq</code> is one of <code>"minute"</code>, <code>"hour"</code>, or <code>"day"</code> representing a frequency of every <strong>minute</strong>, <strong>hour</strong>, or <strong>day</strong> respectively.</li>\n</ul>\n</li> <li><code>freq</code> is one of <code>"minute"</code>, <code>"hour"</code>, or <code>"day"</code> representing a frequency of every <strong>minute</strong>, <strong>hour</strong>, or <strong>day</strong> respectively.</li> <li><code>0 &lt;= time, startTime, endTime &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= endTime - startTime &lt;= 10<sup>4</sup></code></li> <li>There will be at most <code>10<sup>4</sup></code> calls <strong>in total</strong> to <code>recordTweet</code> and <code>getTweetCountsPerFrequency</code>.</li>',
    question:
      "<p>A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller <strong>time chunks</strong> based on a certain frequency (every <strong>minute</strong>, <strong>hour</strong>, or <strong>day</strong>).</p><p>For example, the period <code>[10, 10000]</code> (in <strong>seconds</strong>) would be partitioned into the following <strong>time chunks</strong> with these frequencies:</p><p>Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (<code>10000</code> in the above example).</p><p>Design and implement an API to help the company with their analysis.</p><p>Implement the <code>TweetCounts</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["TweetCounts","recordTweet","recordTweet","recordTweet","getTweetCountsPerFrequency","getTweetCountsPerFrequency","recordTweet","getTweetCountsPerFrequency"]\n[[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]]',
        outputText: "[null,null,null,null,[2],[2,1],null,[4]]",
        explanation:
          'TweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet("tweet3", 0);                              // New tweet "tweet3" at time 0\ntweetCounts.recordTweet("tweet3", 60);                             // New tweet "tweet3" at time 60\ntweetCounts.recordTweet("tweet3", 10);                             // New tweet "tweet3" at time 10\ntweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 59); // return [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency("minute", "tweet3", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet("tweet3", 120);                            // New tweet "tweet3" at time 120\ntweetCounts.getTweetCountsPerFrequency("hour", "tweet3", 0, 210);  // return [4]; chunk [0,210] had 4 tweets',
      },
    ],
    tests:
      '[["TweetCounts", "recordTweet", "recordTweet", "recordTweet", "getTweetCountsPerFrequency", "getTweetCountsPerFrequency", "recordTweet", "getTweetCountsPerFrequency"]]',
    answer: "[[null, null, null, null, [2], [2, 1], null, [4]]]",
    code: "\nvar TweetCounts = function() {\n    \n};\n\n/** \n * @param {string} tweetName \n * @param {number} time\n * @return {void}\n */\nTweetCounts.prototype.recordTweet = function(tweetName, time) {\n    \n};\n\n/** \n * @param {string} freq \n * @param {string} tweetName \n * @param {number} startTime \n * @param {number} endTime\n * @return {number[]}\n */\nTweetCounts.prototype.getTweetCountsPerFrequency = function(freq, tweetName, startTime, endTime) {\n    \n};\n\n/** \n * Your TweetCounts object will be instantiated and called as such:\n * var obj = new TweetCounts()\n * obj.recordTweet(tweetName,time)\n * var param_2 = obj.getTweetCountsPerFrequency(freq,tweetName,startTime,endTime)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1472,
    title: "Increasing Decreasing String",
    titleSlug: "increasing-decreasing-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Counting"],
    constaints:
      "<li>Pick the <strong>smallest</strong> character from <code>s</code> and <strong>append</strong> it to the result.</li> <li>Pick the <strong>smallest</strong> character from <code>s</code> which is greater than the last appended character to the result and <strong>append</strong> it.</li> <li>Repeat step 2 until you cannot pick more characters.</li> <li>Pick the <strong>largest</strong> character from <code>s</code> and <strong>append</strong> it to the result.</li> <li>Pick the <strong>largest</strong> character from <code>s</code> which is smaller than the last appended character to the result and <strong>append</strong> it.</li> <li>Repeat step 5 until you cannot pick more characters.</li> <li>Repeat the steps from 1 to 6 until you pick all characters from <code>s</code>.</li> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of only lowercase English letters.</li>",
    question:
      "<p>You are given a string <code>s</code>. Reorder the string using the following algorithm:</p><p>In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.</p><p>Return <em>the result string after sorting </em><code>s</code><em> with this algorithm</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aaaabbbbcccc"',
        outputText: '"abccbaabccba"',
        explanation:
          'After steps 1, 2 and 3 of the first iteration, result = "abc"\nAfter steps 4, 5 and 6 of the first iteration, result = "abccba"\nFirst iteration is done. Now s = "aabbcc" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = "abccbaabc"\nAfter steps 4, 5 and 6 of the second iteration, result = "abccbaabccba"',
      },
      {
        id: 2,
        inputText: 's = "rat"',
        outputText: '"art"',
        explanation:
          'The word "rat" becomes "art" after re-ordering it with the mentioned algorithm.',
      },
    ],
    tests: '["aaaabbbbcccc", "rat"]',
    answer: '["abccbaabccba", "art"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar sortString = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1473,
    title: "Find the Longest Substring Containing Vowels in Even Counts",
    titleSlug: "find-the-longest-substring-containing-vowels-in-even-counts",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Bit Manipulation", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 5 x 10^5</code></li> <li><code>s</code>\u00a0contains only lowercase English letters.</li>",
    question:
      "<p>Given the string <code>s</code>, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "eleetminicoworoep"',
        outputText: "13",
        explanation:
          'The longest substring is "leetminicowor" which contains two each of the vowels:',
      },
      {
        id: 2,
        inputText: 's = "leetcodeisgreat"',
        outputText: "5",
        explanation:
          'The longest substring is "leetc" which contains two e\'s.',
      },
      {
        id: 3,
        inputText: 's = "bcbcbc"',
        outputText: "6",
        explanation:
          'In this case, the given string "bcbcbc" is the longest because all vowels:',
      },
    ],
    tests: '["eleetminicoworoep", "leetcodeisgreat", "bcbcbc"]',
    answer: "[13, 5, 6]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar findTheLongestSubstring = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1474,
    title: "Longest ZigZag Path in a Binary Tree",
    titleSlug: "longest-zigzag-path-in-a-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>Choose <strong>any </strong>node in the binary tree and a direction (right or left).</li> <li>If the current direction is right, move to the right child of the current node; otherwise, move to the left child.</li> <li>Change the direction from right to left or from left to right.</li> <li>Repeat the second and third steps until you can't move in the tree.</li> <li>The number of nodes in the tree is in the range <code>[1, 5 * 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>You are given the <code>root</code> of a binary tree.</p><p>A ZigZag path for a binary tree is defined as follow:</p><p>Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).</p><p>Return <em>the longest <strong>ZigZag</strong> path contained in that tree</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]",
        outputText: "3",
        explanation:
          "Longest ZigZag path in blue nodes (right -> left -> right).",
      },
      {
        id: 2,
        inputText: "root = [1,1,1,null,1,null,null,1,1,null,1]",
        outputText: "4",
        explanation:
          "Longest ZigZag path in blue nodes (left -> right -> left -> right).",
      },
      { id: 3, inputText: "root = [1]", outputText: "0", explanation: "" },
    ],
    tests:
      "[[1, null, 1, 1, 1, null, null, 1, 1, null, 1, null, null, null, 1], [1, 1, 1, null, 1, null, null, 1, 1, null, 1], [1]]",
    answer: "[3, 4, 0]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar longestZigZag = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1475,
    title: "Maximum Sum BST in Binary Tree",
    titleSlug: "maximum-sum-bst-in-binary-tree",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree",
    ],
    constaints:
      "<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li> <li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> <li>The number of nodes in the tree is in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li> <li><code>-4 * 10<sup>4</sup> &lt;= Node.val &lt;= 4 * 10<sup>4</sup></code></li>",
    question:
      "<p>Given a <strong>binary tree</strong> <code>root</code>, return <em>the maximum sum of all keys of <strong>any</strong> sub-tree which is also a Binary Search Tree (BST)</em>.</p><p>Assume a BST is defined as follows:</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]",
        outputText: "20",
        explanation:
          "Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.",
      },
      {
        id: 2,
        inputText: "root = [4,3,null,1,2]",
        outputText: "2",
        explanation:
          "Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.",
      },
      {
        id: 3,
        inputText: "root = [-4,-2,-5]",
        outputText: "0",
        explanation: "All values are negatives. Return an empty BST.",
      },
    ],
    tests:
      "[[1, 4, 3, 2, 4, 2, 5, null, null, null, null, null, null, 4, 6], [4, 3, null, 1, 2], [-4, -2, -5]]",
    answer: "[20, 2, 0]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxSumBST = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1476,
    title: "Count Negative Numbers in a Sorted Matrix",
    titleSlug: "count-negative-numbers-in-a-sorted-matrix",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Matrix"],
    constaints:
      "<li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-100 &lt;= grid[i][j] &lt;= 100</code></li>",
    question:
      "<p>Given a <code>m x n</code> matrix <code>grid</code> which is sorted in non-increasing order both row-wise and column-wise, return <em>the number of <strong>negative</strong> numbers in</em> <code>grid</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]",
        outputText: "8",
        explanation: "There are 8 negatives number in the matrix.",
      },
      {
        id: 2,
        inputText: "grid = [[3,2],[1,0]]",
        outputText: "0",
        explanation: "",
      },
    ],
    tests:
      "[[[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]], [[3, 2], [1, 0]]]",
    answer: "[8, 0]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar countNegatives = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1477,
    title: "Product of the Last K Numbers",
    titleSlug: "product-of-the-last-k-numbers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Design", "Queue", "Data Stream"],
    constaints:
      "<li><code>ProductOfNumbers()</code> Initializes the object with an empty stream.</li> <li><code>void add(int num)</code> Appends the integer <code>num</code> to the stream.</li> <li><code>int getProduct(int k)</code> Returns the product of the last <code>k</code> numbers in the current list. You can assume that always the current list has at least <code>k</code> numbers.</li> <li><code>0 &lt;= num &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 4 * 10<sup>4</sup></code></li> <li>At most <code>4 * 10<sup>4</sup></code> calls will be made to <code>add</code> and <code>getProduct</code>.</li> <li>The product of the stream at any point in time will fit in a <strong>32-bit</strong> integer.</li>",
    question:
      "<p>Design an algorithm that accepts a stream of integers and retrieves the product of the last <code>k</code> integers of the stream.</p><p>Implement the <code>ProductOfNumbers</code> class:</p><p>The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]',
        outputText: "[null,null,null,null,null,null,20,40,0,null,32]",
        explanation:
          "ProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32",
      },
    ],
    tests:
      '[["ProductOfNumbers", "add", "add", "add", "add", "add", "getProduct", "getProduct", "getProduct", "add", "getProduct"]]',
    answer: "[[null, null, null, null, null, null, 20, 40, 0, null, 32]]",
    code: "\nvar ProductOfNumbers = function() {\n    \n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nProductOfNumbers.prototype.add = function(num) {\n    \n};\n\n/** \n * @param {number} k\n * @return {number}\n */\nProductOfNumbers.prototype.getProduct = function(k) {\n    \n};\n\n/** \n * Your ProductOfNumbers object will be instantiated and called as such:\n * var obj = new ProductOfNumbers()\n * obj.add(num)\n * var param_2 = obj.getProduct(k)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1478,
    title: "Maximum Number of Events That Can Be Attended",
    titleSlug: "maximum-number-of-events-that-can-be-attended",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting", "Heap (Priority Queue)"],
    constaints:
      "<li><code>1 &lt;= events.length &lt;= 10<sup>5</sup></code></li> <li><code>events[i].length == 2</code></li> <li><code>1 &lt;= startDay<sub>i</sub> &lt;= endDay<sub>i</sub> &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given an array of <code>events</code> where <code>events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>]</code>. Every event <code>i</code> starts at <code>startDay<sub>i</sub></code><sub> </sub>and ends at <code>endDay<sub>i</sub></code>.</p><p>You can attend an event <code>i</code> at any day <code>d</code> where <code>startTime<sub>i</sub> &lt;= d &lt;= endTime<sub>i</sub></code>. You can only attend one event at any time <code>d</code>.</p><p>Return <em>the maximum number of events you can attend</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "events = [[1,2],[2,3],[3,4]]",
        outputText: "3",
        explanation:
          "You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3.",
      },
      {
        id: 2,
        inputText: "events= [[1,2],[2,3],[3,4],[1,2]]",
        outputText: "4",
        explanation: "",
      },
    ],
    tests: "[[[1, 2], [2, 3], [3, 4]], [[1, 2], [2, 3], [3, 4], [1, 2]]]",
    answer: "[3, 4]",
    code: "/**\n * @param {number[][]} events\n * @return {number}\n */\nvar maxEvents = function(events) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1479,
    title: "Construct Target Array With Multiple Sums",
    titleSlug: "construct-target-array-with-multiple-sums",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Heap (Priority Queue)"],
    constaints:
      "<li>let <code>x</code> be the sum of all elements currently in your array.</li> <li>choose index <code>i</code>, such that <code>0 &lt;= i &lt; n</code> and set the value of <code>arr</code> at index <code>i</code> to <code>x</code>.</li> <li>You may repeat this procedure as many times as needed.</li> <li><code>n == target.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= target[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given an array <code>target</code> of n integers. From a starting array <code>arr</code> consisting of <code>n</code> 1's, you may perform the following procedure :</p><p>Return <code>true</code> <em>if it is possible to construct the</em> <code>target</code> <em>array from</em> <code>arr</code><em>, otherwise, return</em> <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "target = [9,3,5]",
        outputText: "true",
        explanation:
          "Start with arr = [1, 1, 1] \n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done",
      },
      {
        id: 2,
        inputText: "target = [1,1,1,2]",
        outputText: "false",
        explanation: "Impossible to create target array from [1,1,1,1].",
      },
      {
        id: 3,
        inputText: "target = [8,5]",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[[9, 3, 5], [1, 1, 1, 2], [8, 5]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} target\n * @return {boolean}\n */\nvar isPossible = function(target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1483,
    title: "Rank Teams by Votes",
    titleSlug: "rank-teams-by-votes",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Sorting", "Counting"],
    constaints:
      "<li><code>1 &lt;= votes.length &lt;= 1000</code></li> <li><code>1 &lt;= votes[i].length &lt;= 26</code></li> <li><code>votes[i].length == votes[j].length</code> for <code>0 &lt;= i, j &lt; votes.length</code>.</li> <li><code>votes[i][j]</code> is an English <strong>uppercase</strong> letter.</li> <li>All characters of <code>votes[i]</code> are unique.</li> <li>All the characters that occur in <code>votes[0]</code> <strong>also occur</strong> in <code>votes[j]</code> where <code>1 &lt;= j &lt; votes.length</code>.</li>",
    question:
      "<p>In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.</p><p>The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.</p><p>You are given an array of strings <code>votes</code> which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.</p><p>Return <em>a string of all teams <strong>sorted</strong> by the ranking system</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'votes = ["ABC","ACB","ABC","ACB","ACB"]',
        outputText: '"ACB"',
        explanation:
          "Team A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team.\nTeam B was ranked second by 2 voters and ranked third by 3 voters.\nTeam C was ranked second by 3 voters and ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team, and team B is the third.",
      },
      {
        id: 2,
        inputText: 'votes = ["WXYZ","XYZW"]',
        outputText: '"XWYZ"',
        explanation:
          "X is the winner due to the tie-breaking rule. X has the same votes as W for the first position, but X has one vote in the second position, while W does not have any votes in the second position.",
      },
      {
        id: 3,
        inputText: 'votes = ["ZMNAGUEDSJYLBOPHRQICWFXTVK"]',
        outputText: '"ZMNAGUEDSJYLBOPHRQICWFXTVK"',
        explanation: "Only one voter, so their votes are used for the ranking.",
      },
    ],
    tests:
      '[["ABC", "ACB", "ABC", "ACB", "ACB"], ["WXYZ", "XYZW"], ["ZMNAGUEDSJYLBOPHRQICWFXTVK"]]',
    answer: '["ACB", "XWYZ", "ZMNAGUEDSJYLBOPHRQICWFXTVK"]',
    code: "/**\n * @param {string[]} votes\n * @return {string}\n */\nvar rankTeams = function(votes) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1486,
    title: "Find the Distance Value Between Two Arrays",
    titleSlug: "find-the-distance-value-between-two-arrays",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= arr1.length, arr2.length &lt;= 500</code></li> <li><code>-1000 &lt;= arr1[i], arr2[j] &lt;= 1000</code></li> <li><code>0 &lt;= d &lt;= 100</code></li>",
    question:
      "<p>Given two integer arrays <code>arr1</code> and <code>arr2</code>, and the integer <code>d</code>, <em>return the distance value between the two arrays</em>.</p><p>The distance value is defined as the number of elements <code>arr1[i]</code> such that there is not any element <code>arr2[j]</code> where <code>|arr1[i]-arr2[j]| &lt;= d</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2",
        outputText: "2",
        explanation:
          "For arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:",
      },
      {
        id: 2,
        inputText: "arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3",
        outputText: "2",
        explanation: "",
      },
      {
        id: 3,
        inputText: "arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[4, 5, 8], [1, 4, 2, 3], [2, 1, 100, 3]]",
    answer: "[2, 2, 1]",
    code: "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @param {number} d\n * @return {number}\n */\nvar findTheDistanceValue = function(arr1, arr2, d) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1489,
    title: "Pizza With 3n Slices",
    titleSlug: "pizza-with-3n-slices",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Greedy", "Heap (Priority Queue)"],
    constaints:
      "<li>You will pick <strong>any</strong> pizza slice.</li> <li>Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.</li> <li>Your friend Bob will pick the next slice in the clockwise direction of your pick.</li> <li>Repeat until there are no more slices of pizzas.</li> <li><code>3 * n == slices.length</code></li> <li><code>1 &lt;= slices.length &lt;= 500</code></li> <li><code>1 &lt;= slices[i] &lt;= 1000</code></li>",
    question:
      "<p>There is a pizza with <code>3n</code> slices of varying size, you and your friends will take slices of pizza as follows:</p><p>Given an integer array <code>slices</code> that represent the sizes of the pizza slices in a clockwise direction, return <em>the maximum possible sum of slice sizes that you can pick</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "slices = [1,2,3,4,5,6]",
        outputText: "10",
        explanation:
          "Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.",
      },
      {
        id: 2,
        inputText: "slices = [8,9,8,6,1,1]",
        outputText: "16",
        explanation:
          "Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5, 6], [8, 9, 8, 6, 1, 1]]",
    answer: "[10, 16]",
    code: "/**\n * @param {number[]} slices\n * @return {number}\n */\nvar maxSizeSlices = function(slices) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1491,
    title: "Number of Times Binary String Is Prefix-Aligned",
    titleSlug: "number-of-times-binary-string-is-prefix-aligned",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>n == flips.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>flips</code> is a permutation of the integers in the range <code>[1, n]</code>.</li>",
    question:
      "<p>You have a <strong>1-indexed</strong> binary string of length <code>n</code> where all the bits are <code>0</code> initially. We will flip all the bits of this binary string (i.e., change them from <code>0</code> to <code>1</code>) one by one. You are given a <strong>1-indexed</strong> integer array <code>flips</code> where <code>flips[i]</code> indicates that the bit at index <code>i</code> will be flipped in the <code>i<sup>th</sup></code> step.</p><p>A binary string is <strong>prefix-aligned</strong> if, after the <code>i<sup>th</sup></code> step, all the bits in the <strong>inclusive</strong> range <code>[1, i]</code> are ones and all the other bits are zeros.</p><p>Return <em>the number of times the binary string is <strong>prefix-aligned</strong> during the flipping process</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "flips = [3,2,4,1,5]",
        outputText: "2",
        explanation:
          'The binary string is initially "00000".\nAfter applying step 1: The string becomes "00100", which is not prefix-aligned.\nAfter applying step 2: The string becomes "01100", which is not prefix-aligned.\nAfter applying step 3: The string becomes "01110", which is not prefix-aligned.\nAfter applying step 4: The string becomes "11110", which is prefix-aligned.\nAfter applying step 5: The string becomes "11111", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2.',
      },
      {
        id: 2,
        inputText: "flips = [4,1,2,3]",
        outputText: "1",
        explanation:
          'The binary string is initially "0000".\nAfter applying step 1: The string becomes "0001", which is not prefix-aligned.\nAfter applying step 2: The string becomes "1001", which is not prefix-aligned.\nAfter applying step 3: The string becomes "1101", which is not prefix-aligned.\nAfter applying step 4: The string becomes "1111", which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1.',
      },
    ],
    tests: "[[3, 2, 4, 1, 5], [4, 1, 2, 3]]",
    answer: "[2, 1]",
    code: "/**\n * @param {number[]} flips\n * @return {number}\n */\nvar numTimesAllBlue = function(flips) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1492,
    title: "Time Needed to Inform All Employees",
    titleSlug: "time-needed-to-inform-all-employees",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Breadth-First Search"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= headID &lt; n</code></li> <li><code>manager.length == n</code></li> <li><code>0 &lt;= manager[i] &lt; n</code></li> <li><code>manager[headID] == -1</code></li> <li><code>informTime.length == n</code></li> <li><code>0 &lt;= informTime[i] &lt;= 1000</code></li> <li><code>informTime[i] == 0</code> if employee <code>i</code> has no subordinates.</li> <li>It is <strong>guaranteed</strong> that all the employees can be informed.</li>",
    question:
      "<p>A company has <code>n</code> employees with a unique ID for each employee from <code>0</code> to <code>n - 1</code>. The head of the company is the one with <code>headID</code>.</p><p>Each employee has one direct manager given in the <code>manager</code> array where <code>manager[i]</code> is the direct manager of the <code>i-th</code> employee, <code>manager[headID] = -1</code>. Also, it is guaranteed that the subordination relationships have a tree structure.</p><p>The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.</p><p>The <code>i-th</code> employee needs <code>informTime[i]</code> minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).</p><p>Return <em>the number of minutes</em> needed to inform all the employees about the urgent news.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 1, headID = 0, manager = [-1], informTime = [0]",
        outputText: "0",
        explanation:
          "The head of the company is the only employee in the company.",
      },
      {
        id: 2,
        inputText:
          "n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]",
        outputText: "1",
        explanation:
          "The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown.",
      },
    ],
    tests: "[1, 6]",
    answer: "[0, 1]",
    code: "/**\n * @param {number} n\n * @param {number} headID\n * @param {number[]} manager\n * @param {number[]} informTime\n * @return {number}\n */\nvar numOfMinutes = function(n, headID, manager, informTime) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1493,
    title: "Frog Position After T Seconds",
    titleSlug: "frog-position-after-t-seconds",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Tree", "Depth-First Search", "Breadth-First Search", "Graph"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 100</code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li> <li><code>1 &lt;= t &lt;= 50</code></li> <li><code>1 &lt;= target &lt;= n</code></li>",
    question:
      "<p>Given an undirected tree consisting of <code>n</code> vertices numbered from <code>1</code> to <code>n</code>. A frog starts jumping from <strong>vertex 1</strong>. In one second, the frog jumps from its current vertex to another <strong>unvisited</strong> vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.</p><p>The edges of the undirected tree are given in the array <code>edges</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means that exists an edge connecting the vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p><p><em>Return the probability that after <code>t</code> seconds the frog is on the vertex <code>target</code>. </em>Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4",
        outputText: "0.16666666666666666",
        explanation:
          "The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after",
      },
      {
        id: 2,
        inputText:
          "n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7",
        outputText: "0.3333333333333333",
        explanation:
          "The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after",
      },
    ],
    tests: "[7, 7]",
    answer: "[0.16666666666666666, 0.3333333333333333]",
    code: "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} t\n * @param {number} target\n * @return {number}\n */\nvar frogPosition = function(n, edges, t, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1496,
    title: "Lucky Numbers in a Matrix",
    titleSlug: "lucky-numbers-in-a-matrix",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix"],
    constaints:
      "<li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= n, m &lt;= 50</code></li> <li><code>1 &lt;= matrix[i][j] &lt;= 10<sup>5</sup></code>.</li> <li>All elements in the matrix are distinct.</li>",
    question:
      "<p>Given an <code>m x n</code> matrix of <strong>distinct </strong>numbers, return <em>all <strong>lucky numbers</strong> in the matrix in <strong>any </strong>order</em>.</p><p>A <strong>lucky number</strong> is an element of the matrix such that it is the minimum element in its row and maximum in its column.</p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[3,7,8],[9,11,13],[15,16,17]]",
        outputText: "[15]",
        explanation:
          "15 is the only lucky number since it is the minimum in its row and the maximum in its column.",
      },
      {
        id: 2,
        inputText: "matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]",
        outputText: "[12]",
        explanation:
          "12 is the only lucky number since it is the minimum in its row and the maximum in its column.",
      },
      {
        id: 3,
        inputText: "matrix = [[7,8],[1,2]]",
        outputText: "[7]",
        explanation:
          "7 is the only lucky number since it is the minimum in its row and the maximum in its column.",
      },
    ],
    tests:
      "[[[3, 7, 8], [9, 11, 13], [15, 16, 17]], [[1, 10, 4, 2], [9, 3, 8, 7], [15, 16, 17, 12]], [[7, 8], [1, 2]]]",
    answer: "[[15], [12], [7]]",
    code: "/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar luckyNumbers  = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1497,
    title: "Design a Stack With Increment Operation",
    titleSlug: "design-a-stack-with-increment-operation",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Stack", "Design"],
    constaints:
      "<li><code>CustomStack(int maxSize)</code> Initializes the object with <code>maxSize</code> which is the maximum number of elements in the stack.</li> <li><code>void push(int x)</code> Adds <code>x</code> to the top of the stack if the stack has not reached the <code>maxSize</code>.</li> <li><code>int pop()</code> Pops and returns the top of the stack or <code>-1</code> if the stack is empty.</li> <li><code>void inc(int k, int val)</code> Increments the bottom <code>k</code> elements of the stack by <code>val</code>. If there are less than <code>k</code> elements in the stack, increment all the elements in the stack.</li> <li><code>1 &lt;= maxSize, x, k &lt;= 1000</code></li> <li><code>0 &lt;= val &lt;= 100</code></li> <li>At most <code>1000</code> calls will be made to each method of <code>increment</code>, <code>push</code> and <code>pop</code> each separately.</li>",
    question:
      "<p>Design a stack that supports increment operations on its elements.</p><p>Implement the <code>CustomStack</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["CustomStack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]',
        outputText:
          "[null,null,null,2,null,null,null,null,null,103,202,201,-1]",
        explanation:
          "CustomStack stk = new CustomStack(3); // Stack is Empty []\nstk.push(1);                          // stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.push(3);                          // stack becomes [1, 2, 3]\nstk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4\nstk.increment(5, 100);                // stack becomes [101, 102, 103]\nstk.increment(2, 100);                // stack becomes [201, 202, 103]\nstk.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\nstk.pop();                            // return 202 --> Return top of the stack 202, stack becomes [201]\nstk.pop();                            // return 201 --> Return top of the stack 201, stack becomes []\nstk.pop();                            // return -1 --> Stack is empty return -1.",
      },
    ],
    tests:
      '[["CustomStack", "push", "push", "pop", "push", "push", "push", "increment", "increment", "pop", "pop", "pop", "pop"]]',
    answer:
      "[[null, null, null, 2, null, null, null, null, null, 103, 202, 201, -1]]",
    code: "/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    \n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    \n};\n\n/** \n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1498,
    title: "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    titleSlug:
      "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the <code>tree</code> is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li>The values of the nodes of the <code>tree</code> are unique.</li> <li><code>target</code> node is a node from the <code>original</code> tree and is not <code>null</code>.</li>",
    question:
      "<p>Given two binary trees <code>original</code> and <code>cloned</code> and given a reference to a node <code>target</code> in the original tree.</p><p>The <code>cloned</code> tree is a <strong>copy of</strong> the <code>original</code> tree.</p><p>Return <em>a reference to the same node</em> in the <code>cloned</code> tree.</p><p><strong>Note</strong> that you are <strong>not allowed</strong> to change any of the two trees or the <code>target</code> node and the answer <strong>must be</strong> a reference to a node in the <code>cloned</code> tree.</p>",
    examples: [
      {
        id: 1,
        inputText: "tree = [7,4,3,null,null,6,19], target = 3",
        outputText: "3",
        explanation:
          "In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.",
      },
      {
        id: 2,
        inputText: "tree = [7], target =  7",
        outputText: "7",
        explanation: "",
      },
      {
        id: 3,
        inputText:
          "tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4",
        outputText: "4",
        explanation: "",
      },
    ],
    tests:
      "[[7, 4, 3, null, null, 6, 19], [7], [8, null, 6, null, 5, null, 4, null, 3, null, 2, null, 1]]",
    answer: "[3, 7, 4]",
    code: "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction getTargetCopy(original: TreeNode | null, cloned: TreeNode | null, target: TreeNode | null): TreeNode | null {\n\n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1500,
    title: "Count Largest Group",
    titleSlug: "count-largest-group",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "Math"],
    constaints: "<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer <code>n</code>.</p><p>Each number from <code>1</code> to <code>n</code> is grouped according to the sum of its digits.</p><p>Return <em>the number of groups that have the largest size</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 13",
        outputText: "4",
        explanation:
          "There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].\nThere are 4 groups with largest size.",
      },
      {
        id: 2,
        inputText: "n = 2",
        outputText: "2",
        explanation: "There are 2 groups [1], [2] of size 1.",
      },
    ],
    tests: "[13, 2]",
    answer: "[4, 2]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar countLargestGroup = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1501,
    title: "Circle and Rectangle Overlapping",
    titleSlug: "circle-and-rectangle-overlapping",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Geometry"],
    constaints:
      "<li><code>1 &lt;= radius &lt;= 2000</code></li> <li><code>-10<sup>4</sup> &lt;= xCenter, yCenter &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= x1 &lt; x2 &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= y1 &lt; y2 &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given a circle represented as <code>(radius, xCenter, yCenter)</code> and an axis-aligned rectangle represented as <code>(x1, y1, x2, y2)</code>, where <code>(x1, y1)</code> are the coordinates of the bottom-left corner, and <code>(x2, y2)</code> are the coordinates of the top-right corner of the rectangle.</p><p>Return <code>true</code><em> if the circle and rectangle are overlapped otherwise return </em><code>false</code>. In other words, check if there is <strong>any</strong> point <code>(x<sub>i</sub>, y<sub>i</sub>)</code> that belongs to the circle and the rectangle at the same time.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1",
        outputText: "true",
        explanation: "Circle and rectangle share the point (1,0).",
      },
      {
        id: 2,
        inputText:
          "radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1",
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText:
          "radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1",
        outputText: "true",
        explanation: "",
      },
    ],
    tests: "[1, 1, 1]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number} radius\n * @param {number} xCenter\n * @param {number} yCenter\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @return {boolean}\n */\nvar checkOverlap = function(radius, xCenter, yCenter, x1, y1, x2, y2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1502,
    title: "Construct K Palindrome Strings",
    titleSlug: "construct-k-palindrome-strings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Greedy", "Counting"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given a string <code>s</code> and an integer <code>k</code>, return <code>true</code> <em>if you can use all the characters in </em><code>s</code><em> to construct </em><code>k</code><em> palindrome strings or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "annabelle", k = 2',
        outputText: "true",
        explanation:
          'You can construct two palindromes using all characters in s.\nSome possible constructions "anna" + "elble", "anbna" + "elle", "anellena" + "b"',
      },
      {
        id: 2,
        inputText: 's = "leetcode", k = 3',
        outputText: "false",
        explanation:
          "It is impossible to construct 3 palindromes using all the characters of s.",
      },
      {
        id: 3,
        inputText: 's = "true", k = 4',
        outputText: "true",
        explanation:
          "The only possible solution is to put each character in a separate string.",
      },
    ],
    tests: '["annabelle", "leetcode", "true"]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {boolean}\n */\nvar canConstruct = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1503,
    title: "Reducing Dishes",
    titleSlug: "reducing-dishes",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Greedy", "Sorting"],
    constaints:
      "<li><code>n == satisfaction.length</code></li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>-1000 &lt;= satisfaction[i] &lt;= 1000</code></li>",
    question:
      "<p>A chef has collected data on the <code>satisfaction</code> level of his <code>n</code> dishes. Chef can cook any dish in 1 unit of time.</p><p><strong>Like-time coefficient</strong> of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. <code>time[i] * satisfaction[i]</code>.</p><p>Return the maximum sum of <strong>like-time coefficient </strong>that the chef can obtain after preparing some amount of dishes.</p><p>Dishes can be prepared in <strong>any </strong>order and the chef can discard some dishes to get this maximum value.</p>",
    examples: [
      {
        id: 1,
        inputText: "satisfaction = [-1,-8,0,5,-9]",
        outputText: "14",
        explanation:
          "After Removing the second and last dish, the maximum total",
      },
      {
        id: 2,
        inputText: "satisfaction = [4,3,2]",
        outputText: "20",
        explanation:
          "Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)",
      },
      {
        id: 3,
        inputText: "satisfaction = [-1,-4,-5]",
        outputText: "0",
        explanation: "People do not like the dishes. No dish is prepared.",
      },
    ],
    tests: "[[-1, -8, 0, 5, -7], [4, 3, 2], [-1, -4, -5]]",
    answer: "[14, 20, 0]",
    code: "/**\n * @param {number[]} satisfaction\n * @return {number}\n */\nvar maxSatisfaction = function(satisfaction) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1505,
    title: "Create Target Array in the Given Order",
    titleSlug: "create-target-array-in-the-given-order",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Simulation"],
    constaints:
      "<li>Initially <em>target</em> array is empty.</li> <li>From left to right read nums[i] and index[i], insert at index <code>index[i]</code>\u00a0the value <code>nums[i]</code>\u00a0in\u00a0<em>target</em> array.</li> <li>Repeat the previous step until there are no elements to read in <code>nums</code> and <code>index.</code></li> <li><code>1 &lt;= nums.length, index.length &lt;= 100</code></li> <li><code>nums.length == index.length</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> <li><code>0 &lt;= index[i] &lt;= i</code></li>",
    question:
      "<p>Given two arrays of integers\u00a0<code>nums</code> and <code>index</code>. Your task is to create <em>target</em> array under the following rules:</p><p>Return the <em>target</em> array.</p><p>It is guaranteed that the insertion operations will be valid.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,1,2,3,4], index = [0,1,2,2,1]",
        outputText: "[0,4,1,3,2]",
        explanation:
          "nums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4,0], index = [0,1,2,3,0]",
        outputText: "[0,1,2,3,4]",
        explanation:
          "nums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]",
      },
      {
        id: 3,
        inputText: "nums = [1], index = [0]",
        outputText: "[1]",
        explanation: "",
      },
    ],
    tests: "[[0, 1, 2, 3, 4], [1, 2, 3, 4, 0], [1]]",
    answer: "[[0, 4, 1, 3, 2], [0, 1, 2, 3, 4], [1]]",
    code: "/**\n * @param {number[]} nums\n * @param {number[]} index\n * @return {number[]}\n */\nvar createTargetArray = function(nums, index) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1508,
    title: "Longest Happy Prefix",
    titleSlug: "longest-happy-prefix",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Rolling Hash", "String Matching", "Hash Function"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> contains only lowercase English letters.</li>",
    question:
      '<p>A string is called a <strong>happy prefix</strong> if is a <strong>non-empty</strong> prefix which is also a suffix (excluding itself).</p><p>Given a string <code>s</code>, return <em>the <strong>longest happy prefix</strong> of</em> <code>s</code>. Return an empty string <code>""</code> if no such prefix exists.</p>',
    examples: [
      {
        id: 1,
        inputText: 's = "level"',
        outputText: '"l"',
        explanation:
          's contains 4 prefix excluding itself ("l", "le", "lev", "leve"), and suffix ("l", "el", "vel", "evel"). The largest prefix which is also suffix is given by "l".',
      },
      {
        id: 2,
        inputText: 's = "ababab"',
        outputText: '"abab"',
        explanation:
          '"abab" is the largest prefix which is also suffix. They can overlap in the original string.',
      },
    ],
    tests: '["level", "ababab"]',
    answer: '["l", "abab"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPrefix = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1510,
    title: "Find Lucky Integer in an Array",
    titleSlug: "find-lucky-integer-in-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Counting"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 500</code></li> <li><code>1 &lt;= arr[i] &lt;= 500</code></li>",
    question:
      "<p>Given an array of integers <code>arr</code>, a <strong>lucky integer</strong> is an integer that has a frequency in the array equal to its value.</p><p>Return <em>the largest <strong>lucky integer</strong> in the array</em>. If there is no <strong>lucky integer</strong> return <code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [2,2,3,4]",
        outputText: "2",
        explanation:
          "The only lucky number in the array is 2 because frequency[2] == 2.",
      },
      {
        id: 2,
        inputText: "arr = [1,2,2,3,3,3]",
        outputText: "3",
        explanation:
          "1, 2 and 3 are all lucky numbers, return the largest of them.",
      },
      {
        id: 3,
        inputText: "arr = [2,2,2,3,3]",
        outputText: "-1",
        explanation: "There are no lucky numbers in the array.",
      },
    ],
    tests: "[[2, 2, 3, 4], [1, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3]]",
    answer: "[2, 3, -1]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar findLucky = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1511,
    title: "Count Number of Teams",
    titleSlug: "count-number-of-teams",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Binary Indexed Tree"],
    constaints:
      "<li>Choose 3 soldiers with index (<code>i</code>, <code>j</code>, <code>k</code>) with rating (<code>rating[i]</code>, <code>rating[j]</code>, <code>rating[k]</code>).</li> <li>A team is valid if: (<code>rating[i] &lt; rating[j] &lt; rating[k]</code>) or (<code>rating[i] &gt; rating[j] &gt; rating[k]</code>) where (<code>0 &lt;= i &lt; j &lt; k &lt; n</code>).</li> <li><code>n == rating.length</code></li> <li><code>3 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= rating[i] &lt;= 10<sup>5</sup></code></li> <li>All the integers in <code>rating</code> are <strong>unique</strong>.</li>",
    question:
      "<p>There are <code>n</code> soldiers standing in a line. Each soldier is assigned a <strong>unique</strong> <code>rating</code> value.</p><p>You have to form a team of 3 soldiers amongst them under the following rules:</p><p>Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).</p>",
    examples: [
      {
        id: 1,
        inputText: "rating = [2,5,3,4,1]",
        outputText: "3",
        explanation:
          "We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1).",
      },
      {
        id: 2,
        inputText: "rating = [2,1,3]",
        outputText: "0",
        explanation: "We can't form any team given the conditions.",
      },
      {
        id: 3,
        inputText: "rating = [1,2,3,4]",
        outputText: "4",
        explanation: "",
      },
    ],
    tests: "[[2, 5, 3, 4, 1], [2, 1, 3], [1, 2, 3, 4]]",
    answer: "[3, 0, 4]",
    code: "/**\n * @param {number[]} rating\n * @return {number}\n */\nvar numTeams = function(rating) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1512,
    title: "Design Underground System",
    titleSlug: "design-underground-system",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Design"],
    constaints:
      "<li><code>void checkIn(int id, string stationName, int t)</code>\n<ul>\n<li>A customer with a card ID equal to <code>id</code>, checks in at the station <code>stationName</code> at time <code>t</code>.</li>\n<li>A customer can only be checked into one place at a time.</li>\n</ul>\n</li> <li>A customer with a card ID equal to <code>id</code>, checks in at the station <code>stationName</code> at time <code>t</code>.</li> <li>A customer can only be checked into one place at a time.</li> <li><code>void checkOut(int id, string stationName, int t)</code>\n<ul>\n<li>A customer with a card ID equal to <code>id</code>, checks out from the station <code>stationName</code> at time <code>t</code>.</li>\n</ul>\n</li> <li>A customer with a card ID equal to <code>id</code>, checks out from the station <code>stationName</code> at time <code>t</code>.</li> <li><code>double getAverageTime(string startStation, string endStation)</code>\n<ul>\n<li>Returns the average time it takes to travel from <code>startStation</code> to <code>endStation</code>.</li>\n<li>The average time is computed from all the previous traveling times from <code>startStation</code> to <code>endStation</code> that happened <strong>directly</strong>, meaning a check in at <code>startStation</code> followed by a check out from <code>endStation</code>.</li>\n<li>The time it takes to travel from <code>startStation</code> to <code>endStation</code> <strong>may be different</strong> from the time it takes to travel from <code>endStation</code> to <code>startStation</code>.</li>\n<li>There will be at least one customer that has traveled from <code>startStation</code> to <code>endStation</code> before <code>getAverageTime</code> is called.</li>\n</ul>\n</li> <li>Returns the average time it takes to travel from <code>startStation</code> to <code>endStation</code>.</li> <li>The average time is computed from all the previous traveling times from <code>startStation</code> to <code>endStation</code> that happened <strong>directly</strong>, meaning a check in at <code>startStation</code> followed by a check out from <code>endStation</code>.</li> <li>The time it takes to travel from <code>startStation</code> to <code>endStation</code> <strong>may be different</strong> from the time it takes to travel from <code>endStation</code> to <code>startStation</code>.</li> <li>There will be at least one customer that has traveled from <code>startStation</code> to <code>endStation</code> before <code>getAverageTime</code> is called.</li> <li><code>1 &lt;= id, t &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= stationName.length, startStation.length, endStation.length &lt;= 10</code></li> <li>All strings consist of uppercase and lowercase English letters and digits.</li> <li>There will be at most <code>2 * 10<sup>4</sup></code> calls <strong>in total</strong> to <code>checkIn</code>, <code>checkOut</code>, and <code>getAverageTime</code>.</li> <li>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li>",
    question:
      "<p>An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.</p><p>Implement the <code>UndergroundSystem</code> class:</p><p>You may assume all calls to the <code>checkIn</code> and <code>checkOut</code> methods are consistent. If a customer checks in at time <code>t<sub>1</sub></code> then checks out at time <code>t<sub>2</sub></code>, then <code>t<sub>1</sub> &lt; t<sub>2</sub></code>. All events happen in chronological order.</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["UndergroundSystem","checkIn","checkIn","checkIn","checkOut","checkOut","checkOut","getAverageTime","getAverageTime","checkIn","getAverageTime","checkOut","getAverageTime"]\n[[],[45,"Leyton",3],[32,"Paradise",8],[27,"Leyton",10],[45,"Waterloo",15],[27,"Waterloo",20],[32,"Cambridge",22],["Paradise","Cambridge"],["Leyton","Waterloo"],[10,"Leyton",24],["Leyton","Waterloo"],[10,"Waterloo",38],["Leyton","Waterloo"]]',
        outputText:
          "[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]",
        explanation:
          'UndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, "Leyton", 3);\nundergroundSystem.checkIn(32, "Paradise", 8);\nundergroundSystem.checkIn(27, "Leyton", 10);\nundergroundSystem.checkOut(45, "Waterloo", 15);  // Customer 45 "Leyton" -> "Waterloo" in 15-3 = 12\nundergroundSystem.checkOut(27, "Waterloo", 20);  // Customer 27 "Leyton" -> "Waterloo" in 20-10 = 10\nundergroundSystem.checkOut(32, "Cambridge", 22); // Customer 32 "Paradise" -> "Cambridge" in 22-8 = 14\nundergroundSystem.getAverageTime("Paradise", "Cambridge"); // return 14.00000. One trip "Paradise" -> "Cambridge", (14) / 1 = 14\nundergroundSystem.getAverageTime("Leyton", "Waterloo");    // return 11.00000. Two trips "Leyton" -> "Waterloo", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, "Leyton", 24);\nundergroundSystem.getAverageTime("Leyton", "Waterloo");    // return 11.00000\nundergroundSystem.checkOut(10, "Waterloo", 38);  // Customer 10 "Leyton" -> "Waterloo" in 38-24 = 14\nundergroundSystem.getAverageTime("Leyton", "Waterloo");    // return 12.00000. Three trips "Leyton" -> "Waterloo", (10 + 12 + 14) / 3 = 12',
      },
      {
        id: 2,
        inputText:
          '["UndergroundSystem","checkIn","checkOut","getAverageTime","checkIn","checkOut","getAverageTime","checkIn","checkOut","getAverageTime"]\n[[],[10,"Leyton",3],[10,"Paradise",8],["Leyton","Paradise"],[5,"Leyton",10],[5,"Paradise",16],["Leyton","Paradise"],[2,"Leyton",21],[2,"Paradise",30],["Leyton","Paradise"]]',
        outputText:
          "[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]",
        explanation:
          'UndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, "Leyton", 3);\nundergroundSystem.checkOut(10, "Paradise", 8); // Customer 10 "Leyton" -> "Paradise" in 8-3 = 5\nundergroundSystem.getAverageTime("Leyton", "Paradise"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5, "Leyton", 10);\nundergroundSystem.checkOut(5, "Paradise", 16); // Customer 5 "Leyton" -> "Paradise" in 16-10 = 6\nundergroundSystem.getAverageTime("Leyton", "Paradise"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2, "Leyton", 21);\nundergroundSystem.checkOut(2, "Paradise", 30); // Customer 2 "Leyton" -> "Paradise" in 30-21 = 9\nundergroundSystem.getAverageTime("Leyton", "Paradise"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667',
      },
    ],
    tests:
      '[["UndergroundSystem", "checkIn", "checkIn", "checkIn", "checkOut", "checkOut", "checkOut", "getAverageTime", "getAverageTime", "checkIn", "getAverageTime", "checkOut", "getAverageTime"], ["UndergroundSystem", "checkIn", "checkOut", "getAverageTime", "checkIn", "checkOut", "getAverageTime", "checkIn", "checkOut", "getAverageTime"]]',
    answer:
      "[[null, null, null, null, null, null, null, 14.0, 11.0, null, 11.0, null, 12.0], [null, null, null, 5.0, null, null, 5.5, null, null, 6.66667]]",
    code: "\nvar UndergroundSystem = function() {\n    \n};\n\n/** \n * @param {number} id \n * @param {string} stationName \n * @param {number} t\n * @return {void}\n */\nUndergroundSystem.prototype.checkIn = function(id, stationName, t) {\n    \n};\n\n/** \n * @param {number} id \n * @param {string} stationName \n * @param {number} t\n * @return {void}\n */\nUndergroundSystem.prototype.checkOut = function(id, stationName, t) {\n    \n};\n\n/** \n * @param {string} startStation \n * @param {string} endStation\n * @return {number}\n */\nUndergroundSystem.prototype.getAverageTime = function(startStation, endStation) {\n    \n};\n\n/** \n * Your UndergroundSystem object will be instantiated and called as such:\n * var obj = new UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * var param_3 = obj.getAverageTime(startStation,endStation)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1514,
    title: "Minimum Value to Get Positive Step by Step Sum",
    titleSlug: "minimum-value-to-get-positive-step-by-step-sum",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>Given an array of integers\u00a0<code>nums</code>, you start with an initial <strong>positive</strong> value <em>startValue</em><em>.</em></p><p>In each iteration, you calculate the step by step sum of <em>startValue</em>\u00a0plus\u00a0elements in <code>nums</code>\u00a0(from left to right).</p><p>Return the minimum <strong>positive</strong> value of\u00a0<em>startValue</em> such that the step by step sum is never less than 1.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [-3,2,-3,4,2]",
        outputText: "5",
        explanation:
          "If you choose startValue = 4, in the third iteration your step by step sum is less than 1.",
      },
      {
        id: 2,
        inputText: "nums = [1,2]",
        outputText: "1",
        explanation: "Minimum start value should be positive.",
      },
      {
        id: 3,
        inputText: "nums = [1,-2,-3]",
        outputText: "5",
        explanation: "",
      },
    ],
    tests: "[[-3, 2, -3, 4, 2], [1, 2], [1, -2, -3]]",
    answer: "[5, 1, 5]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minStartValue = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1516,
    title: "The k-th Lexicographical String of All Happy Strings of Length n",
    titleSlug:
      "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Backtracking"],
    constaints:
      "<li>consists only of letters of the set <code>['a', 'b', 'c']</code>.</li> <li><code>s[i] != s[i + 1]</code> for all values of <code>i</code> from <code>1</code> to <code>s.length - 1</code> (string is 1-indexed).</li> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>1 &lt;= k &lt;= 100</code></li>",
    question:
      '<p>A <strong>happy string</strong> is a string that:</p><p>For example, strings <strong>"abc", "ac", "b"</strong> and <strong>"abcbabcbcb"</strong> are all happy strings and strings <strong>"aa", "baa"</strong> and <strong>"ababbc"</strong> are not happy strings.</p><p>Given two integers <code>n</code> and <code>k</code>, consider a list of all happy strings of length <code>n</code> sorted in lexicographical order.</p><p>Return <em>the kth string</em> of this list or return an <strong>empty string</strong> if there are less than <code>k</code> happy strings of length <code>n</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: "n = 1, k = 3",
        outputText: '"c"',
        explanation:
          'The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".',
      },
      {
        id: 2,
        inputText: "n = 1, k = 4",
        outputText: '""',
        explanation: "There are only 3 happy strings of length 1.",
      },
      {
        id: 3,
        inputText: "n = 3, k = 9",
        outputText: '"cab"',
        explanation:
          'There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9',
      },
    ],
    tests: "[1, 1, 3]",
    answer: '["c", "", "cab"]',
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getHappyString = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1519,
    title: "Minimum Subsequence in Non-Increasing Order",
    titleSlug: "minimum-subsequence-in-non-increasing-order",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 500</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>Given the array <code>nums</code>, obtain a subsequence of the array whose sum of elements is <strong>strictly greater</strong> than the sum of the non\u00a0included elements in such subsequence.\u00a0</p><p>If there are multiple solutions, return the subsequence with <strong>minimum size</strong> and if there still exist multiple solutions, return the subsequence with the <strong>maximum total sum</strong> of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\u00a0</p><p>Note that the solution with the given constraints is guaranteed to be\u00a0<strong>unique</strong>. Also return the answer sorted in <strong>non-increasing</strong> order.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,3,10,9,8]",
        outputText: "[10,9]",
        explanation:
          "The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements.",
      },
      {
        id: 2,
        inputText: "nums = [4,4,7,6,7]",
        outputText: "[7,7,6]",
        explanation:
          "The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-increasing order.",
      },
    ],
    tests: "[[4, 3, 10, 9, 8], [4, 4, 7, 6, 7]]",
    answer: "[[10, 9], [7, 7, 6]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar minSubsequence = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1525,
    title: "Queries on a Permutation With Key",
    titleSlug: "queries-on-a-permutation-with-key",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Indexed Tree", "Simulation"],
    constaints:
      "<li>In the beginning, you have the permutation <code>P=[1,2,3,...,m]</code>.</li> <li>For the current <code>i</code>, find the position of <code>queries[i]</code> in the permutation <code>P</code> (<strong>indexing from 0</strong>) and then move this at the beginning of the permutation <code>P</code>. Notice that the position of <code>queries[i]</code> in <code>P</code> is the result for <code>queries[i]</code>.</li> <li><code>1 &lt;= m &lt;= 10^3</code></li> <li><code>1 &lt;= queries.length &lt;= m</code></li> <li><code>1 &lt;= queries[i] &lt;= m</code></li>",
    question:
      "<p>Given the array <code>queries</code> of positive integers between <code>1</code> and <code>m</code>, you have to process all <code>queries[i]</code> (from <code>i=0</code> to <code>i=queries.length-1</code>) according to the following rules:</p><p>Return an array containing the result for the given <code>queries</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "queries = [3,1,2,1], m = 5",
        outputText: "[2,1,2,1]",
        explanation:
          "The queries are processed as follow: \nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is",
      },
      {
        id: 2,
        inputText: "queries = [4,1,2,2], m = 4",
        outputText: "[3,1,2,0]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "queries = [7,5,5,8,3], m = 8",
        outputText: "[6,5,0,7,5]",
        explanation: "",
      },
    ],
    tests: "[[3, 1, 2, 1], [4, 1, 2, 2], [7, 5, 5, 8, 3]]",
    answer: "[[2, 1, 2, 1], [3, 1, 2, 0], [6, 5, 0, 7, 5]]",
    code: "/**\n * @param {number[]} queries\n * @param {number} m\n * @return {number[]}\n */\nvar processQueries = function(queries, m) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1526,
    title: "HTML Entity Parser",
    titleSlug: "html-entity-parser",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><strong>Quotation Mark:</strong> the entity is <code>&amp;quot;</code> and symbol character is <code>\"</code>.</li> <li><strong>Single Quote Mark:</strong> the entity is <code>&amp;apos;</code> and symbol character is <code>'</code>.</li> <li><strong>Ampersand:</strong> the entity is <code>&amp;amp;</code> and symbol character is <code>&amp;</code>.</li> <li><strong>Greater Than Sign:</strong> the entity is <code>&amp;gt;</code> and symbol character is <code>&gt;</code>.</li> <li><strong>Less Than Sign:</strong> the entity is <code>&amp;lt;</code> and symbol character is <code>&lt;</code>.</li> <li><strong>Slash:</strong> the entity is <code>&amp;frasl;</code> and symbol character is <code>/</code>.</li> <li><code>1 &lt;= text.length &lt;= 10<sup>5</sup></code></li> <li>The string may contain any possible characters out of all the 256 ASCII characters.</li>",
    question:
      "<p><strong>HTML entity parser</strong> is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.</p><p>The special characters and their entities for HTML are:</p><p>Given the input <code>text</code> string to the HTML parser, you have to implement the entity parser.</p><p>Return <em>the text after replacing the entities by the special characters</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'text = "&amp; is an HTML entity but &ambassador; is not."',
        outputText: '"& is an HTML entity but &ambassador; is not."',
        explanation: "The parser will replace the &amp; entity by &",
      },
      {
        id: 2,
        inputText: 'text = "and I quote: &quot;...&quot;"',
        outputText: '"and I quote: \\"...\\""',
        explanation: "",
      },
    ],
    tests:
      '["&amp; is an HTML entity but &ambassador; is not.", "and I quote: &quot;...&quot;"]',
    answer:
      '["& is an HTML entity but &ambassador; is not.", "and I quote: \\"...\\""]',
    code: "/**\n * @param {string} text\n * @return {string}\n */\nvar entityParser = function(text) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1528,
    title: "Kids With the Greatest Number of Candies",
    titleSlug: "kids-with-the-greatest-number-of-candies",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>n == candies.length</code></li> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= candies[i] &lt;= 100</code></li> <li><code>1 &lt;= extraCandies &lt;= 50</code></li>",
    question:
      "<p>There are <code>n</code> kids with candies. You are given an integer array <code>candies</code>, where each <code>candies[i]</code> represents the number of candies the <code>i<sup>th</sup></code> kid has, and an integer <code>extraCandies</code>, denoting the number of extra candies that you have.</p><p>Return <em>a boolean array </em><code>result</code><em> of length </em><code>n</code><em>, where </em><code>result[i]</code><em> is </em><code>true</code><em> if, after giving the </em><code>i<sup>th</sup></code><em> kid all the </em><code>extraCandies</code><em>, they will have the <strong>greatest</strong> number of candies among all the kids</em><em>, or </em><code>false</code><em> otherwise</em>.</p><p>Note that <strong>multiple</strong> kids can have the <strong>greatest</strong> number of candies.</p>",
    examples: [
      {
        id: 1,
        inputText: "candies = [2,3,5,1,3], extraCandies = 3",
        outputText: "[true,true,true,false,true]",
        explanation:
          "If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.",
      },
      {
        id: 2,
        inputText: "candies = [4,2,1,1,2], extraCandies = 1",
        outputText: "[true,false,false,false,false]",
        explanation:
          "There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.",
      },
      {
        id: 3,
        inputText: "candies = [12,1,12], extraCandies = 10",
        outputText: "[true,false,true]",
        explanation: "",
      },
    ],
    tests: "[[2, 3, 5, 1, 3], [4, 2, 1, 1, 2], [12, 1, 12]]",
    answer:
      "[[true, true, true, false, true], [true, false, false, false, false], [true, false, true]]",
    code: "/**\n * @param {number[]} candies\n * @param {number} extraCandies\n * @return {boolean[]}\n */\nvar kidsWithCandies = function(candies, extraCandies) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1529,
    title: "Max Difference You Can Get From Changing an Integer",
    titleSlug: "max-difference-you-can-get-from-changing-an-integer",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Greedy"],
    constaints:
      "<li>Pick a digit <code>x (0 &lt;= x &lt;= 9)</code>.</li> <li>Pick another digit <code>y (0 &lt;= y &lt;= 9)</code>. The digit <code>y</code> can be equal to <code>x</code>.</li> <li>Replace all the occurrences of <code>x</code> in the decimal representation of <code>num</code> by <code>y</code>.</li> <li>The new integer <strong>cannot</strong> have any leading zeros, also the new integer <strong>cannot</strong> be 0.</li> <li><code>1 &lt;= num &lt;= 10</code><sup>8</sup></li>",
    question:
      "<p>You are given an integer <code>num</code>. You will apply the following steps exactly <strong>two</strong> times:</p><p>Let <code>a</code> and <code>b</code> be the results of applying the operations to <code>num</code> the first and second times, respectively.</p><p>Return <em>the max difference</em> between <code>a</code> and <code>b</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 555",
        outputText: "888",
        explanation:
          "The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888",
      },
      {
        id: 2,
        inputText: "num = 9",
        outputText: "8",
        explanation:
          "The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8",
      },
    ],
    tests: "[555, 9]",
    answer: "[888, 8]",
    code: "/**\n * @param {number} num\n * @return {number}\n */\nvar maxDiff = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1532,
    title: "Reformat The String",
    titleSlug: "reformat-the-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of only lowercase English letters and/or digits.</li>",
    question:
      "<p>You are given an alphanumeric string <code>s</code>. (<strong>Alphanumeric string</strong> is a string consisting of lowercase English letters and digits).</p><p>You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.</p><p>Return <em>the reformatted string</em> or return <strong>an empty string</strong> if it is impossible to reformat the string.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "a0b1c2"',
        outputText: '"0a1b2c"',
        explanation:
          'No two adjacent characters have the same type in "0a1b2c". "a0b1c2", "0a1b2c", "0c2a1b" are also valid permutations.',
      },
      {
        id: 2,
        inputText: 's = "leetcode"',
        outputText: '""',
        explanation:
          '"leetcode" has only characters so we cannot separate them by digits.',
      },
      {
        id: 3,
        inputText: 's = "1229857369"',
        outputText: '""',
        explanation:
          '"1229857369" has only digits so we cannot separate them by characters.',
      },
    ],
    tests: '["a0b1c2", "leetcode", "1229857369"]',
    answer: '["0a1b2c", "", ""]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar reformat = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1533,
    title: "Display Table of Food Orders in a Restaurant",
    titleSlug: "display-table-of-food-orders-in-a-restaurant",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Sorting", "Ordered Set"],
    constaints:
      "<li><code>1 &lt;=\u00a0orders.length &lt;= 5 * 10^4</code></li> <li><code>orders[i].length == 3</code></li> <li><code>1 &lt;= customerName<sub>i</sub>.length, foodItem<sub>i</sub>.length &lt;= 20</code></li> <li><code>customerName<sub>i</sub></code> and <code>foodItem<sub>i</sub></code> consist of lowercase and uppercase English letters and the space character.</li> <li><code>tableNumber<sub>i</sub>\u00a0</code>is a valid integer between <code>1</code> and <code>500</code>.</li>",
    question:
      "<p>Given\u00a0the array <code>orders</code>, which represents the orders that customers have done in a restaurant. More specifically\u00a0<code>orders[i]=[customerName<sub>i</sub>,tableNumber<sub>i</sub>,foodItem<sub>i</sub>]</code> where <code>customerName<sub>i</sub></code> is the name of the customer, <code>tableNumber<sub>i</sub></code>\u00a0is the table customer sit at, and <code>foodItem<sub>i</sub></code>\u00a0is the item customer orders.</p><p><em>Return the restaurant's \u201c<strong>display table</strong>\u201d</em>. The \u201c<strong>display table</strong>\u201d is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \u201cTable\u201d, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'orders = [["David","3","Ceviche"],["Corina","10","Beef Burrito"],["David","3","Fried Chicken"],["Carla","5","Water"],["Carla","5","Ceviche"],["Rous","3","Ceviche"]]',
        outputText:
          '[["Table","Beef Burrito","Ceviche","Fried Chicken","Water"],["3","0","2","1","0"],["5","0","1","0","1"],["10","1","0","0","0"]]',
        explanation: "The displaying table looks like:",
      },
      {
        id: 2,
        inputText:
          'orders = [["James","12","Fried Chicken"],["Ratesh","12","Fried Chicken"],["Amadeus","12","Fried Chicken"],["Adam","1","Canadian Waffles"],["Brianna","1","Canadian Waffles"]]',
        outputText:
          '[["Table","Canadian Waffles","Fried Chicken"],["1","2","0"],["12","0","3"]]',
        explanation:
          'For the table 1: Adam and Brianna order "Canadian Waffles".\r\nFor the table 12: James, Ratesh and Amadeus order "Fried Chicken".',
      },
      {
        id: 3,
        inputText:
          'orders = [["Laura","2","Bean Burrito"],["Jhon","2","Beef Burrito"],["Melissa","2","Soda"]]',
        outputText:
          '[["Table","Bean Burrito","Beef Burrito","Soda"],["2","1","1","1"]]',
        explanation: "",
      },
    ],
    tests:
      '[[["David", "3", "Ceviche"], ["Corina", "10", "Beef Burrito"], ["David", "3", "Fried Chicken"], ["Carla", "5", "Water"], ["Carla", "5", "Ceviche"], ["Rous", "3", "Ceviche"]], [["James", "12", "Fried Chicken"], ["Ratesh", "12", "Fried Chicken"], ["Amadeus", "12", "Fried Chicken"], ["Adam", "1", "Canadian Waffles"], ["Brianna", "1", "Canadian Waffles"]], [["Laura", "2", "Bean Burrito"], ["Jhon", "2", "Beef Burrito"], ["Melissa", "2", "Soda"]]]',
    answer:
      '[[["Table", "Beef Burrito", "Ceviche", "Fried Chicken", "Water"], ["3", "0", "2", "1", "0"], ["5", "0", "1", "0", "1"], ["10", "1", "0", "0", "0"]], [["Table", "Canadian Waffles", "Fried Chicken"], ["1", "2", "0"], ["12", "0", "3"]], [["Table", "Bean Burrito", "Beef Burrito", "Soda"], ["2", "1", "1", "1"]]]',
    code: "/**\r\n * @param {string[][]} orders\r\n * @return {string[][]}\r\n */\r\nvar displayTable = function(orders) {\r\n    \r\n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1538,
    title: "Maximum Points You Can Obtain from Cards",
    titleSlug: "maximum-points-you-can-obtain-from-cards",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sliding Window", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= cardPoints.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= cardPoints[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= cardPoints.length</code></li>",
    question:
      "<p>There are several cards <strong>arranged in a row</strong>, and each card has an associated number of points. The points are given in the integer array <code>cardPoints</code>.</p><p>In one step, you can take one card from the beginning or from the end of the row. You have to take exactly <code>k</code> cards.</p><p>Your score is the sum of the points of the cards you have taken.</p><p>Given the integer array <code>cardPoints</code> and the integer <code>k</code>, return the <em>maximum score</em> you can obtain.</p>",
    examples: [
      {
        id: 1,
        inputText: "cardPoints = [1,2,3,4,5,6,1], k = 3",
        outputText: "12",
        explanation:
          "After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.",
      },
      {
        id: 2,
        inputText: "cardPoints = [2,2,2], k = 2",
        outputText: "4",
        explanation:
          "Regardless of which two cards you take, your score will always be 4.",
      },
      {
        id: 3,
        inputText: "cardPoints = [9,7,7,9,7,7,9], k = 7",
        outputText: "55",
        explanation:
          "You have to take all the cards. Your score is the sum of points of all cards.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5, 6, 1], [2, 2, 2], [9, 7, 7, 9, 7, 7, 9]]",
    answer: "[12, 4, 55]",
    code: "/**\n * @param {number[]} cardPoints\n * @param {number} k\n * @return {number}\n */\nvar maxScore = function(cardPoints, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1542,
    title: "Consecutive Characters",
    titleSlug: "consecutive-characters",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of only lowercase English letters.</li>",
    question:
      "<p>The <strong>power</strong> of the string is the maximum length of a non-empty substring that contains only one unique character.</p><p>Given a string <code>s</code>, return <em>the <strong>power</strong> of</em> <code>s</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "leetcode"',
        outputText: "2",
        explanation:
          "The substring \"ee\" is of length 2 with the character 'e' only.",
      },
      {
        id: 2,
        inputText: 's = "abbcccddddeeeeedcba"',
        outputText: "5",
        explanation:
          "The substring \"eeeee\" is of length 5 with the character 'e' only.",
      },
    ],
    tests: '["leetcode", "abbcccddddeeeeedcba"]',
    answer: "[2, 5]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar maxPower = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1543,
    title: "Simplified Fractions",
    titleSlug: "simplified-fractions",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String", "Number Theory"],
    constaints: "<li><code>1 &lt;= n &lt;= 100</code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <em>a list of all <strong>simplified</strong> fractions between </em><code>0</code><em> and </em><code>1</code><em> (exclusive) such that the denominator is less-than-or-equal-to </em><code>n</code>. You can return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: '["1/2"]',
        explanation:
          '"1/2" is the only unique fraction with a denominator less-than-or-equal-to 2.',
      },
      {
        id: 2,
        inputText: "n = 3",
        outputText: '["1/2","1/3","2/3"]',
        explanation: "",
      },
      {
        id: 3,
        inputText: "n = 4",
        outputText: '["1/2","1/3","1/4","2/3","3/4"]',
        explanation:
          '"2/4" is not a simplified fraction because it can be simplified to "1/2".',
      },
    ],
    tests: "[2, 3, 4]",
    answer:
      '[["1/2"], ["1/2", "1/3", "2/3"], ["1/2", "1/3", "1/4", "2/3", "3/4"]]',
    code: "/**\n * @param {number} n\n * @return {string[]}\n */\nvar simplifiedFractions = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1547,
    title: "Destination City",
    titleSlug: "destination-city",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= paths.length &lt;= 100</code></li> <li><code>paths[i].length == 2</code></li> <li><code>1 &lt;= cityA<sub>i</sub>.length, cityB<sub>i</sub>.length &lt;= 10</code></li> <li><code>cityA<sub>i</sub> != cityB<sub>i</sub></code></li> <li>All strings consist of lowercase and uppercase English letters and the space character.</li>",
    question:
      "<p>You are given the array <code>paths</code>, where <code>paths[i] = [cityA<sub>i</sub>, cityB<sub>i</sub>]</code> means there exists a direct path going from <code>cityA<sub>i</sub></code> to <code>cityB<sub>i</sub></code>. <em>Return the destination city, that is, the city without any path outgoing to another city.</em></p><p>It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'paths = [["London","New York"],["New York","Lima"],["Lima","Sao Paulo"]]',
        outputText: '"Sao Paulo"',
        explanation:
          'Starting at "London" city you will reach "Sao Paulo" city which is the destination city. Your trip consist of: "London" -> "New York" -> "Lima" -> "Sao Paulo".',
      },
      {
        id: 2,
        inputText: 'paths = [["B","C"],["D","B"],["C","A"]]',
        outputText: '"A"',
        explanation:
          'All possible trips are:\u00a0\n"D" -> "B" -> "C" -> "A".\u00a0\n"B" -> "C" -> "A".\u00a0\n"C" -> "A".\u00a0\n"A".\u00a0\nClearly the destination city is "A".',
      },
      {
        id: 3,
        inputText: 'paths = [["A","Z"]]',
        outputText: '"Z"',
        explanation: "",
      },
    ],
    tests:
      '[[["London", "New York"], ["New York", "Lima"], ["Lima", "Sao Paulo"]], [["B", "C"], ["D", "B"], ["C", "A"]], [["A", "Z"]]]',
    answer: '["Sao Paulo", "A", "Z"]',
    code: "/**\n * @param {string[][]} paths\n * @return {string}\n */\nvar destCity = function(paths) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1548,
    title: "Check If All 1's Are at Least Length K Places Away",
    titleSlug: "check-if-all-1s-are-at-least-length-k-places-away",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= k &lt;= nums.length</code></li> <li><code>nums[i]</code> is <code>0</code> or <code>1</code></li>",
    question:
      "<p>Given an binary array <code>nums</code> and an integer <code>k</code>, return <code>true</code><em> if all </em><code>1</code><em>'s are at least </em><code>k</code><em> places away from each other, otherwise return </em><code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,0,0,0,1,0,0,1], k = 2",
        outputText: "true",
        explanation:
          "Each of the 1s are at least 2 places away from each other.",
      },
      {
        id: 2,
        inputText: "nums = [1,0,0,1,0,1], k = 2",
        outputText: "false",
        explanation:
          "The second 1 and third 1 are only one apart from each other.",
      },
    ],
    tests: "[[1, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar kLengthApart = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1550,
    title: "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    titleSlug: "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Heap (Priority Queue)", "Matrix"],
    constaints:
      "<li><code>m == mat.length</code></li> <li><code>n == mat.length[i]</code></li> <li><code>1 &lt;= m, n &lt;= 40</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 5000</code></li> <li><code>1 &lt;= k &lt;= min(200, n<sup>m</sup>)</code></li> <li><code>mat[i]</code> is a non-decreasing array.</li>",
    question:
      "<p>You are given an <code>m x n</code> matrix <code>mat</code> that has its rows sorted in non-decreasing order and an integer <code>k</code>.</p><p>You are allowed to choose <strong>exactly one element</strong> from each row to form an array.</p><p>Return <em>the </em><code>k<sup>th</sup></code><em> smallest array sum among all possible arrays</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "mat = [[1,3,11],[2,4,6]], k = 5",
        outputText: "7",
        explanation:
          "Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.",
      },
      {
        id: 2,
        inputText: "mat = [[1,3,11],[2,4,6]], k = 9",
        outputText: "17",
        explanation: "",
      },
      {
        id: 3,
        inputText: "mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7",
        outputText: "9",
        explanation:
          "Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.",
      },
    ],
    tests:
      "[[[1, 3, 11], [2, 4, 6]], [[1, 3, 11], [2, 4, 6]], [[1, 10, 10], [1, 4, 5], [2, 3, 6]]]",
    answer: "[7, 17, 9]",
    code: "/**\n * @param {number[][]} mat\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(mat, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1557,
    title: "Check If a String Contains All Binary Codes of Size K",
    titleSlug: "check-if-a-string-contains-all-binary-codes-of-size-k",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Rolling Hash",
      "Hash Function",
    ],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>1 &lt;= k &lt;= 20</code></li>",
    question:
      "<p>Given a binary string <code>s</code> and an integer <code>k</code>, return <code>true</code> <em>if every binary code of length</em> <code>k</code> <em>is a substring of</em> <code>s</code>. Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "00110110", k = 2',
        outputText: "true",
        explanation:
          'The binary codes of length 2 are "00", "01", "10" and "11". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.',
      },
      {
        id: 2,
        inputText: 's = "0110", k = 1',
        outputText: "true",
        explanation:
          'The binary codes of length 1 are "0" and "1", it is clear that both exist as a substring.',
      },
      {
        id: 3,
        inputText: 's = "0110", k = 2',
        outputText: "false",
        explanation:
          'The binary code "00" is of length 2 and does not exist in the array.',
      },
    ],
    tests: '["00110110", "0110", "0110"]',
    answer: "[true, true, false]",
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {boolean}\n */\nvar hasAllCodes = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1562,
    title:
      "People Whose List of Favorite Companies Is Not a Subset of Another List",
    titleSlug:
      "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= favoriteCompanies.length &lt;= 100</code></li> <li><code>1 &lt;= favoriteCompanies[i].length &lt;= 500</code></li> <li><code>1 &lt;= favoriteCompanies[i][j].length &lt;= 20</code></li> <li>All strings in <code>favoriteCompanies[i]</code> are <strong>distinct</strong>.</li> <li>All lists of favorite companies are <strong>distinct</strong>, that is, If we sort alphabetically each list then <code>favoriteCompanies[i] != favoriteCompanies[j].</code></li> <li>All strings consist of lowercase English letters only.</li>",
    question:
      "<p>Given the array <code>favoriteCompanies</code> where <code>favoriteCompanies[i]</code> is the list of favorites companies for the <code>ith</code> person (<strong>indexed from 0</strong>).</p><p><em>Return the indices of people whose list of favorite companies is not a <strong>subset</strong> of any other list of favorites companies</em>. You must return the indices in increasing order.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'favoriteCompanies = [["leetcode","google","facebook"],["google","microsoft"],["google","facebook"],["google"],["amazon"]]',
        outputText: "[0,1,4]",
        explanation:
          'Person with index=2 has favoriteCompanies[2]=["google","facebook"] which is a subset of favoriteCompanies[0]=["leetcode","google","facebook"] corresponding to the person with index 0. \nPerson with index=3 has favoriteCompanies[3]=["google"] which is a subset of favoriteCompanies[0]=["leetcode","google","facebook"] and favoriteCompanies[1]=["google","microsoft"]. \nOther lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].',
      },
      {
        id: 2,
        inputText:
          'favoriteCompanies = [["leetcode","google","facebook"],["leetcode","amazon"],["facebook","google"]]',
        outputText: "[0,1]",
        explanation:
          'In this case favoriteCompanies[2]=["facebook","google"] is a subset of favoriteCompanies[0]=["leetcode","google","facebook"], therefore, the answer is [0,1].',
      },
      {
        id: 3,
        inputText:
          'favoriteCompanies = [["leetcode"],["google"],["facebook"],["amazon"]]',
        outputText: "[0,1,2,3]",
        explanation: "",
      },
    ],
    tests:
      '[[["leetcode", "google", "facebook"], ["google", "microsoft"], ["google", "facebook"], ["google"], ["amazon"]], [["leetcode", "google", "facebook"], ["leetcode", "amazon"], ["facebook", "google"]], [["leetcode"], ["google"], ["facebook"], ["amazon"]]]',
    answer: "[[0, 1, 4], [0, 1], [0, 1, 2, 3]]",
    code: "/**\n * @param {string[][]} favoriteCompanies\n * @return {number[]}\n */\nvar peopleIndexes = function(favoriteCompanies) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1566,
    title: "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    titleSlug: "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String", "String Matching"],
    constaints:
      "<li><code>1 &lt;= sentence.length &lt;= 100</code></li> <li><code>1 &lt;= searchWord.length &lt;= 10</code></li> <li><code>sentence</code> consists of lowercase English letters and spaces.</li> <li><code>searchWord</code> consists of lowercase English letters.</li>",
    question:
      "<p>Given a <code>sentence</code> that consists of some words separated by a <strong>single space</strong>, and a <code>searchWord</code>, check if <code>searchWord</code> is a prefix of any word in <code>sentence</code>.</p><p>Return <em>the index of the word in </em><code>sentence</code><em> (<strong>1-indexed</strong>) where </em><code>searchWord</code><em> is a prefix of this word</em>. If <code>searchWord</code> is a prefix of more than one word, return the index of the first word <strong>(minimum index)</strong>. If there is no such word return <code>-1</code>.</p><p>A <strong>prefix</strong> of a string <code>s</code> is any leading contiguous substring of <code>s</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'sentence = "i love eating burger", searchWord = "burg"',
        outputText: "4",
        explanation:
          '"burg" is prefix of "burger" which is the 4th word in the sentence.',
      },
      {
        id: 2,
        inputText:
          'sentence = "this problem is an easy problem", searchWord = "pro"',
        outputText: "2",
        explanation:
          '"pro" is prefix of "problem" which is the 2nd and the 6th word in the sentence, but we return 2 as it\'s the minimal index.',
      },
      {
        id: 3,
        inputText: 'sentence = "i am tired", searchWord = "you"',
        outputText: "-1",
        explanation: '"you" is not a prefix of any word in the sentence.',
      },
    ],
    tests:
      '["i love eating burger", "this problem is an easy problem", "i am tired"]',
    answer: "[4, 2, -1]",
    code: "/**\n * @param {string} sentence\n * @param {string} searchWord\n * @return {number}\n */\nvar isPrefixOfWord = function(sentence, searchWord) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1567,
    title: "Maximum Number of Vowels in a Substring of Given Length",
    titleSlug: "maximum-number-of-vowels-in-a-substring-of-given-length",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>1 &lt;= k &lt;= s.length</code></li>",
    question:
      "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the maximum number of vowel letters in any substring of </em><code>s</code><em> with length </em><code>k</code>.</p><p><strong>Vowel letters</strong> in English are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abciiidef", k = 3',
        outputText: "3",
        explanation: 'The substring "iii" contains 3 vowel letters.',
      },
      {
        id: 2,
        inputText: 's = "aeiou", k = 2',
        outputText: "2",
        explanation: "Any substring of length 2 contains 2 vowels.",
      },
      {
        id: 3,
        inputText: 's = "leetcode", k = 3',
        outputText: "2",
        explanation: '"lee", "eet" and "ode" contain 2 vowels.',
      },
    ],
    tests: '["abciiidef", "aeiou", "leetcode"]',
    answer: "[3, 2, 2]",
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxVowels = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1568,
    title: "Pseudo-Palindromic Paths in a Binary Tree",
    titleSlug: "pseudo-palindromic-paths-in-a-binary-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree",
    ],
    constaints:
      "<li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 9</code></li>",
    question:
      "<p>Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be <strong>pseudo-palindromic</strong> if at least one permutation of the node values in the path is a palindrome.</p><p><em>Return the number of <strong>pseudo-palindromic</strong> paths going from the root node to leaf nodes.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "root = [2,3,1,3,1,null,1]",
        outputText: "2",
        explanation:
          "The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).",
      },
      {
        id: 2,
        inputText: "root = [2,1,1,1,3,null,null,null,null,null,1]",
        outputText: "1",
        explanation:
          "The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).",
      },
      { id: 3, inputText: "root = [9]", outputText: "1", explanation: "" },
    ],
    tests:
      "[[2, 3, 1, 3, 1, null, 1], [2, 1, 1, 1, 3, null, null, null, null, null, 1], [9]]",
    answer: "[2, 1, 1]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar pseudoPalindromicPaths  = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1572,
    title: "Subrectangle Queries",
    titleSlug: "subrectangle-queries",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Design", "Matrix"],
    constaints:
      '<li>Updates all values with <code>newValue</code> in the subrectangle whose upper left coordinate is <code>(row1,col1)</code> and bottom right coordinate is <code>(row2,col2)</code>.</li> <li>Returns the current value of the coordinate <code>(row,col)</code> from\u00a0the rectangle.</li> <li>There will be at most <code><font face="monospace">500</font></code>\u00a0operations considering both methods:\u00a0<code>updateSubrectangle</code> and <code>getValue</code>.</li> <li><code>1 &lt;= rows, cols &lt;= 100</code></li> <li><code>rows ==\u00a0rectangle.length</code></li> <li><code>cols == rectangle[i].length</code></li> <li><code>0 &lt;= row1 &lt;= row2 &lt; rows</code></li> <li><code>0 &lt;= col1 &lt;= col2 &lt; cols</code></li> <li><code>1 &lt;= newValue, rectangle[i][j] &lt;= 10^9</code></li> <li><code>0 &lt;= row &lt; rows</code></li> <li><code>0 &lt;= col &lt; cols</code></li>',
    question:
      "<p>Implement the class <code>SubrectangleQueries</code>\u00a0which receives a <code>rows x cols</code> rectangle as a matrix of integers in the constructor and supports two methods:</p><p>1.<code>\u00a0updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code></p><p>2.<code>\u00a0getValue(int row, int col)</code></p>",
    examples: [
      {
        id: 1,
        inputText:
          '["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue","getValue"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]',
        outputText: "[null,1,null,5,5,null,10,5]",
        explanation:
          "SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5",
      },
      {
        id: 2,
        inputText:
          '["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]',
        outputText: "[null,1,null,100,100,null,20]",
        explanation:
          "SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20",
      },
    ],
    tests:
      '[["SubrectangleQueries", "getValue", "updateSubrectangle", "getValue", "getValue", "updateSubrectangle", "getValue", "getValue"], ["SubrectangleQueries", "getValue", "updateSubrectangle", "getValue", "getValue", "updateSubrectangle", "getValue"]]',
    answer:
      "[[null, 1, null, 5, 5, null, 10, 5], [null, 1, null, 100, 100, null, 20]]",
    code: "/**\n * @param {number[][]} rectangle\n */\nvar SubrectangleQueries = function(rectangle) {\n    \n};\n\n/** \n * @param {number} row1 \n * @param {number} col1 \n * @param {number} row2 \n * @param {number} col2 \n * @param {number} newValue\n * @return {void}\n */\nSubrectangleQueries.prototype.updateSubrectangle = function(row1, col1, row2, col2, newValue) {\n    \n};\n\n/** \n * @param {number} row \n * @param {number} col\n * @return {number}\n */\nSubrectangleQueries.prototype.getValue = function(row, col) {\n    \n};\n\n/** \n * Your SubrectangleQueries object will be instantiated and called as such:\n * var obj = new SubrectangleQueries(rectangle)\n * obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n * var param_2 = obj.getValue(row,col)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1574,
    title: "Maximum Product of Two Elements in an Array",
    titleSlug: "maximum-product-of-two-elements-in-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting", "Heap (Priority Queue)"],
    constaints:
      "<li><code>2 &lt;= nums.length &lt;= 500</code></li> <li><code>1 &lt;= nums[i] &lt;= 10^3</code></li>",
    question: "",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,4,5,2]",
        outputText: "12",
        explanation:
          "If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.",
      },
      {
        id: 2,
        inputText: "nums = [1,5,4,5]",
        outputText: "16",
        explanation:
          "Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.",
      },
      { id: 3, inputText: "nums = [3,7]", outputText: "12", explanation: "" },
    ],
    tests: "[[3, 4, 5, 2], [1, 5, 4, 5], [3, 7]]",
    answer: "[12, 16, 12]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1576,
    title: "Reorder Routes to Make All Paths Lead to the City Zero",
    titleSlug: "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Depth-First Search", "Breadth-First Search", "Graph"],
    constaints:
      "<li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>connections.length == n - 1</code></li> <li><code>connections[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li>",
    question:
      "<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.</p><p>Roads are represented by <code>connections</code> where <code>connections[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents a road from city <code>a<sub>i</sub></code> to city <code>b<sub>i</sub></code>.</p><p>This year, there will be a big event in the capital (city <code>0</code>), and many people want to travel to this city.</p><p>Your task consists of reorienting some roads such that each city can visit the city <code>0</code>. Return the <strong>minimum</strong> number of edges changed.</p><p>It's <strong>guaranteed</strong> that each city can reach city <code>0</code> after reorder.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]",
        outputText: "3",
        explanation:
          "Change the direction of edges show in red such that each node can reach the node 0 (capital).",
      },
      {
        id: 2,
        inputText: "n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]",
        outputText: "2",
        explanation:
          "Change the direction of edges show in red such that each node can reach the node 0 (capital).",
      },
      {
        id: 3,
        inputText: "n = 3, connections = [[1,0],[2,0]]",
        outputText: "0",
        explanation: "",
      },
    ],
    tests: "[6, 5, 3]",
    answer: "[3, 2, 0]",
    code: "/**\n * @param {number} n\n * @param {number[][]} connections\n * @return {number}\n */\nvar minReorder = function(n, connections) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1580,
    title: "Shuffle the Array",
    titleSlug: "shuffle-the-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 500</code></li> <li><code>nums.length == 2n</code></li> <li><code>1 &lt;= nums[i] &lt;= 10^3</code></li>",
    question:
      "<p>Given the array <code>nums</code> consisting of <code>2n</code> elements in the form <code>[x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>,y<sub>1</sub>,y<sub>2</sub>,...,y<sub>n</sub>]</code>.</p><p><em>Return the array in the form</em> <code>[x<sub>1</sub>,y<sub>1</sub>,x<sub>2</sub>,y<sub>2</sub>,...,x<sub>n</sub>,y<sub>n</sub>]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,5,1,3,4,7], n = 3",
        outputText: "[2,3,5,4,1,7]",
        explanation: "Since x",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4,4,3,2,1], n = 4",
        outputText: "[1,4,2,3,3,2,4,1]",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [1,1,2,2], n = 2",
        outputText: "[1,2,1,2]",
        explanation: "",
      },
    ],
    tests: "[[2, 5, 1, 3, 4, 7], [1, 2, 3, 4, 4, 3, 2, 1], [1, 1, 2, 2]]",
    answer: "[[2, 3, 5, 4, 1, 7], [1, 4, 2, 3, 3, 2, 4, 1], [1, 2, 1, 2]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number[]}\n */\nvar shuffle = function(nums, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1581,
    title: "The k Strongest Values in an Array",
    titleSlug: "the-k-strongest-values-in-an-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Sorting"],
    constaints:
      "<li>For <code>arr = [6, -3, 7, 2, 11]</code>, <code>n = 5</code> and the median is obtained by sorting the array <code>arr = [-3, 2, 6, 7, 11]</code> and the median is <code>arr[m]</code> where <code>m = ((5 - 1) / 2) = 2</code>. The median is <code>6</code>.</li> <li>For <code>arr = [-7, 22, 17,\u20093]</code>, <code>n = 4</code> and the median is obtained by sorting the array <code>arr = [-7, 3, 17, 22]</code> and the median is <code>arr[m]</code> where <code>m = ((4 - 1) / 2) = 1</code>. The median is <code>3</code>.</li> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= arr.length</code></li>",
    question:
      "<p>Given an array of integers <code>arr</code> and an integer <code>k</code>.</p><p>A value <code>arr[i]</code> is said to be stronger than a value <code>arr[j]</code> if <code>|arr[i] - m| &gt; |arr[j] - m|</code> where <code>m</code> is the <strong>median</strong> of the array.<br/>\nIf <code>|arr[i] - m| == |arr[j] - m|</code>, then <code>arr[i]</code> is said to be stronger than <code>arr[j]</code> if <code>arr[i] &gt; arr[j]</code>.</p><p>Return <em>a list of the strongest <code>k</code></em> values in the array. return the answer <strong>in any arbitrary order</strong>.</p><p><strong>Median</strong> is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position <code>((n - 1) / 2)</code> in the sorted list <strong>(0-indexed)</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,2,3,4,5], k = 2",
        outputText: "[5,1]",
        explanation:
          "Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also",
      },
      {
        id: 2,
        inputText: "arr = [1,1,3,5,5], k = 2",
        outputText: "[5,5]",
        explanation:
          "Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].",
      },
      {
        id: 3,
        inputText: "arr = [6,7,11,7,6,8], k = 5",
        outputText: "[11,8,6,6,7]",
        explanation:
          "Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\nAny permutation of [11,8,6,6,7] is",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [1, 1, 3, 5, 5], [6, 7, 11, 7, 6, 8]]",
    answer: "[[5, 1], [5, 5], [11, 8, 6, 6, 7]]",
    code: "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nvar getStrongest = function(arr, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1582,
    title: "Design Browser History",
    titleSlug: "design-browser-history",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Linked List",
      "Stack",
      "Design",
      "Doubly-Linked List",
      "Data Stream",
    ],
    constaints:
      "<li><code>BrowserHistory(string homepage)</code> Initializes the object with the <code>homepage</code>\u00a0of the browser.</li> <li><code>void visit(string url)</code>\u00a0Visits\u00a0<code>url</code> from the current page. It clears up all the forward history.</li> <li><code>string back(int steps)</code>\u00a0Move <code>steps</code> back in history. If you can only return <code>x</code> steps in the history and <code>steps &gt; x</code>, you will\u00a0return only <code>x</code> steps. Return the current <code>url</code>\u00a0after moving back in history <strong>at most</strong> <code>steps</code>.</li> <li><code>string forward(int steps)</code>\u00a0Move <code>steps</code> forward in history. If you can only forward <code>x</code> steps in the history and <code>steps &gt; x</code>, you will\u00a0forward only\u00a0<code>x</code> steps. Return the current <code>url</code>\u00a0after forwarding in history <strong>at most</strong> <code>steps</code>.</li> <li><code>1 &lt;= homepage.length &lt;= 20</code></li> <li><code>1 &lt;= url.length &lt;= 20</code></li> <li><code>1 &lt;= steps &lt;= 100</code></li> <li><code>homepage</code> and <code>url</code> consist of\u00a0 '.' or lower case English letters.</li> <li>At most <code>5000</code>\u00a0calls will be made to <code>visit</code>, <code>back</code>, and <code>forward</code>.</li>",
    question:
      "<p>You have a <strong>browser</strong> of one tab where you start on the <code>homepage</code> and you can visit another <code>url</code>, get back in the history number of <code>steps</code> or move forward in the history number of <code>steps</code>.</p><p>Implement the <code>BrowserHistory</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]\n[["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]',
        outputText:
          '[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]',
        explanation:
          'BrowserHistory browserHistory = new BrowserHistory("leetcode.com");\nbrowserHistory.visit("google.com");       // You are in "leetcode.com". Visit "google.com"\nbrowserHistory.visit("facebook.com");     // You are in "google.com". Visit "facebook.com"\nbrowserHistory.visit("youtube.com");      // You are in "facebook.com". Visit "youtube.com"\nbrowserHistory.back(1);                   // You are in "youtube.com", move back to "facebook.com" return "facebook.com"\nbrowserHistory.back(1);                   // You are in "facebook.com", move back to "google.com" return "google.com"\nbrowserHistory.forward(1);                // You are in "google.com", move forward to "facebook.com" return "facebook.com"\nbrowserHistory.visit("linkedin.com");     // You are in "facebook.com". Visit "linkedin.com"\nbrowserHistory.forward(2);                // You are in "linkedin.com", you cannot move forward any steps.\nbrowserHistory.back(2);                   // You are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"\nbrowserHistory.back(7);                   // You are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com"',
      },
    ],
    tests:
      '[["BrowserHistory", "visit", "visit", "visit", "back", "back", "forward", "visit", "forward", "back", "back"]]',
    answer:
      '[[null, null, null, null, "facebook.com", "google.com", "facebook.com", null, "linkedin.com", "google.com", "leetcode.com"]]',
    code: "/**\n * @param {string} homepage\n */\nvar BrowserHistory = function(homepage) {\n    \n};\n\n/** \n * @param {string} url\n * @return {void}\n */\nBrowserHistory.prototype.visit = function(url) {\n    \n};\n\n/** \n * @param {number} steps\n * @return {string}\n */\nBrowserHistory.prototype.back = function(steps) {\n    \n};\n\n/** \n * @param {number} steps\n * @return {string}\n */\nBrowserHistory.prototype.forward = function(steps) {\n    \n};\n\n/** \n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1584,
    title: "Average Salary Excluding the Minimum and Maximum Salary",
    titleSlug: "average-salary-excluding-the-minimum-and-maximum-salary",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li><code>3 &lt;= salary.length &lt;= 100</code></li> <li><code>1000 &lt;= salary[i] &lt;= 10<sup>6</sup></code></li> <li>All the integers of <code>salary</code> are <strong>unique</strong>.</li>",
    question:
      "<p>You are given an array of <strong>unique</strong> integers <code>salary</code> where <code>salary[i]</code> is the salary of the <code>i<sup>th</sup></code> employee.</p><p>Return <em>the average salary of employees excluding the minimum and maximum salary</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>",
    examples: [
      {
        id: 1,
        inputText: "salary = [4000,3000,1000,2000]",
        outputText: "2500.00000",
        explanation:
          "Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500",
      },
      {
        id: 2,
        inputText: "salary = [1000,2000,3000]",
        outputText: "2000.00000",
        explanation:
          "Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000",
      },
    ],
    tests: "[[4000, 3000, 1000, 2000], [1000, 2000, 3000]]",
    answer: "[2500.0, 2000.0]",
    code: "/**\n * @param {number[]} salary\n * @return {number}\n */\nvar average = function(salary) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1585,
    title: "The kth Factor of n",
    titleSlug: "the-kth-factor-of-n",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Number Theory"],
    constaints: "<li><code>1 &lt;= k &lt;= n &lt;= 1000</code></li>",
    question:
      "<p>You are given two positive integers <code>n</code> and <code>k</code>. A factor of an integer <code>n</code> is defined as an integer <code>i</code> where <code>n % i == 0</code>.</p><p>Consider a list of all factors of <code>n</code> sorted in <strong>ascending order</strong>, return <em>the </em><code>k<sup>th</sup></code><em> factor</em> in this list or return <code>-1</code> if <code>n</code> has less than <code>k</code> factors.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 12, k = 3",
        outputText: "3",
        explanation: "Factors list is [1, 2, 3, 4, 6, 12], the 3",
      },
      {
        id: 2,
        inputText: "n = 7, k = 2",
        outputText: "7",
        explanation: "Factors list is [1, 7], the 2",
      },
      {
        id: 3,
        inputText: "n = 4, k = 4",
        outputText: "-1",
        explanation:
          "Factors list is [1, 2, 4], there is only 3 factors. We should return -1.",
      },
    ],
    tests: "[12, 7, 4]",
    answer: "[3, 7, -1]",
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar kthFactor = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1586,
    title: "Longest Subarray of 1's After Deleting One Element",
    titleSlug: "longest-subarray-of-1s-after-deleting-one-element",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>Given a binary array <code>nums</code>, you should delete one element from it.</p><p>Return <em>the size of the longest non-empty subarray containing only </em><code>1</code><em>'s in the resulting array</em>. Return <code>0</code> if there is no such subarray.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,0,1]",
        outputText: "3",
        explanation:
          "After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.",
      },
      {
        id: 2,
        inputText: "nums = [0,1,1,1,0,1,1,0,1]",
        outputText: "5",
        explanation:
          "After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].",
      },
      {
        id: 3,
        inputText: "nums = [1,1,1]",
        outputText: "2",
        explanation: "You must delete one element.",
      },
    ],
    tests: "[[1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1]]",
    answer: "[3, 5, 2]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestSubarray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1603,
    title: "Running Sum of 1d Array",
    titleSlug: "running-sum-of-1d-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-10^6\u00a0&lt;= nums[i] &lt;=\u00a010^6</code></li>",
    question:
      "<p>Given an array <code>nums</code>. We define a running sum of an array as\u00a0<code>runningSum[i] = sum(nums[0]\u2026nums[i])</code>.</p><p>Return the running sum of <code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4]",
        outputText: "[1,3,6,10]",
        explanation:
          "Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].",
      },
      {
        id: 2,
        inputText: "nums = [1,1,1,1,1]",
        outputText: "[1,2,3,4,5]",
        explanation:
          "Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].",
      },
      {
        id: 3,
        inputText: "nums = [3,1,2,10,1]",
        outputText: "[3,4,6,16,17]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4], [1, 1, 1, 1, 1], [3, 1, 2, 10, 1]]",
    answer: "[[1, 3, 6, 10], [1, 2, 3, 4, 5], [3, 4, 6, 16, 17]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar runningSum = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1604,
    title: "Least Number of Unique Integers after K Removals",
    titleSlug: "least-number-of-unique-integers-after-k-removals",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Greedy", "Sorting", "Counting"],
    constaints:
      "<li><code>1 &lt;= arr.length\u00a0&lt;= 10^5</code></li> <li><code>1 &lt;= arr[i] &lt;= 10^9</code></li> <li><code>0 &lt;= k\u00a0&lt;= arr.length</code></li>",
    question:
      "<p>Given an array of integers\u00a0<code>arr</code>\u00a0and an integer <code>k</code>.\u00a0Find the <em>least number of unique integers</em>\u00a0after removing <strong>exactly</strong> <code>k</code> elements<b>.</b></p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [5,5,4], k = 1",
        outputText: "1",
        explanation: ": Remove the single 4, only 5 is left.",
      },
      {
        id: 2,
        inputText: "arr = [4,3,1,1,3,3,2], k = 3",
        outputText: "2",
        explanation:
          ": Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.",
      },
    ],
    tests: "[[5, 5, 4], [4, 3, 1, 1, 3, 3, 2]]",
    answer: "[1, 2]",
    code: "/**\r\n * @param {number[]} arr\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findLeastNumOfUniqueInts = function(arr, k) {\r\n    \r\n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1605,
    title: "Minimum Number of Days to Make m Bouquets",
    titleSlug: "minimum-number-of-days-to-make-m-bouquets",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search"],
    constaints:
      "<li><code>bloomDay.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= bloomDay[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= m &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= k &lt;= n</code></li>",
    question:
      "<p>You are given an integer array <code>bloomDay</code>, an integer <code>m</code> and an integer <code>k</code>.</p><p>You want to make <code>m</code> bouquets. To make a bouquet, you need to use <code>k</code> <strong>adjacent flowers</strong> from the garden.</p><p>The garden consists of <code>n</code> flowers, the <code>i<sup>th</sup></code> flower will bloom in the <code>bloomDay[i]</code> and then can be used in <strong>exactly one</strong> bouquet.</p><p>Return <em>the minimum number of days you need to wait to be able to make </em><code>m</code><em> bouquets from the garden</em>. If it is impossible to make m bouquets return <code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "bloomDay = [1,10,3,10,2], m = 3, k = 1",
        outputText: "3",
        explanation:
          "Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.",
      },
      {
        id: 2,
        inputText: "bloomDay = [1,10,3,10,2], m = 3, k = 2",
        outputText: "-1",
        explanation:
          "We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.",
      },
      {
        id: 3,
        inputText: "bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3",
        outputText: "12",
        explanation:
          "We need 2 bouquets each should have 3 flowers.\nHere is the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways.",
      },
    ],
    tests: "[[1, 10, 3, 10, 2], [1, 10, 3, 10, 2], [7, 7, 7, 7, 12, 7, 7]]",
    answer: "[3, -1, 12]",
    code: "/**\n * @param {number[]} bloomDay\n * @param {number} m\n * @param {number} k\n * @return {number}\n */\nvar minDays = function(bloomDay, m, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1610,
    title: "XOR Operation in an Array",
    titleSlug: "xor-operation-in-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= start &lt;= 1000</code></li> <li><code>n == nums.length</code></li>",
    question:
      "<p>You are given an integer <code>n</code> and an integer <code>start</code>.</p><p>Define an array <code>nums</code> where <code>nums[i] = start + 2 * i</code> (<strong>0-indexed</strong>) and <code>n == nums.length</code>.</p><p>Return <em>the bitwise XOR of all elements of</em> <code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5, start = 0",
        outputText: "8",
        explanation:
          'Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere "^" corresponds to bitwise XOR operator.',
      },
      {
        id: 2,
        inputText: "n = 4, start = 3",
        outputText: "8",
        explanation:
          "Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.",
      },
    ],
    tests: "[5, 4]",
    answer: "[8, 8]",
    code: "/**\n * @param {number} n\n * @param {number} start\n * @return {number}\n */\nvar xorOperation = function(n, start) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1615,
    title: "Range Sum of Sorted Subarray Sums",
    titleSlug: "range-sum-of-sorted-subarray-sums",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Binary Search", "Sorting"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= left &lt;= right &lt;= n * (n + 1) / 2</code></li>",
    question:
      "<p>You are given the array <code>nums</code> consisting of <code>n</code> positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of <code>n * (n + 1) / 2</code> numbers.</p><p><em>Return the sum of the numbers from index </em><code>left</code><em> to index </em><code>right</code> (<strong>indexed from 1</strong>)<em>, inclusive, in the new array. </em>Since the answer can be a huge number return it modulo <code>10<sup>9</sup> + 7</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4], n = 4, left = 1, right = 5",
        outputText: "13",
        explanation:
          "All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13.",
      },
      {
        id: 2,
        inputText: "nums = [1,2,3,4], n = 4, left = 3, right = 4",
        outputText: "6",
        explanation:
          "The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.",
      },
      {
        id: 3,
        inputText: "nums = [1,2,3,4], n = 4, left = 1, right = 10",
        outputText: "50",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]",
    answer: "[13, 6, 50]",
    code: "/**\n * @param {number[]} nums\n * @param {number} n\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar rangeSum = function(nums, n, left, right) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1619,
    title: "Path Crossing",
    titleSlug: "path-crossing",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= path.length &lt;= 10<sup>4</sup></code></li> <li><code>path[i]</code> is either <code>'N'</code>, <code>'S'</code>, <code>'E'</code>, or <code>'W'</code>.</li>",
    question:
      "<p>Given a string <code>path</code>, where <code>path[i] = 'N'</code>, <code>'S'</code>, <code>'E'</code> or <code>'W'</code>, each representing moving one unit north, south, east, or west, respectively. You start at the origin <code>(0, 0)</code> on a 2D plane and walk on the path specified by <code>path</code>.</p><p>Return <code>true</code> <em>if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited</em>. Return <code>false</code> otherwise.</p>",
    examples: [
      {
        id: 1,
        inputText: 'path = "NES"',
        outputText: "false",
        explanation:
          "Notice that the path doesn't cross any point more than once.",
      },
      {
        id: 2,
        inputText: 'path = "NESWW"',
        outputText: "true",
        explanation: "Notice that the path visits the origin twice.",
      },
    ],
    tests: '["NES", "NESWW"]',
    answer: "[false, true]",
    code: "/**\n * @param {string} path\n * @return {boolean}\n */\nvar isPathCrossing = function(path) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1626,
    title: "Can Make Arithmetic Progression From Sequence",
    titleSlug: "can-make-arithmetic-progression-from-sequence",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li><code>2 &lt;= arr.length &lt;= 1000</code></li> <li><code>-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>A sequence of numbers is called an <strong>arithmetic progression</strong> if the difference between any two consecutive elements is the same.</p><p>Given an array of numbers <code>arr</code>, return <code>true</code> <em>if the array can be rearranged to form an <strong>arithmetic progression</strong>. Otherwise, return</em> <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [3,5,1]",
        outputText: "true",
        explanation:
          "We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.",
      },
      {
        id: 2,
        inputText: "arr = [1,2,4]",
        outputText: "false",
        explanation:
          "There is no way to reorder the elements to obtain an arithmetic progression.",
      },
    ],
    tests: "[[3, 5, 1], [1, 2, 4]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar canMakeArithmeticProgression = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1630,
    title: "Count Odd Numbers in an Interval Range",
    titleSlug: "count-odd-numbers-in-an-interval-range",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints: "<li><code>0 &lt;= low &lt;= high\u00a0&lt;= 10^9</code></li>",
    question:
      '<p>Given two non-negative integers <code>low</code> and <code><font face="monospace">high</font></code>. Return the <em>count of odd numbers between </em><code>low</code><em> and </em><code><font face="monospace">high</font></code><em>\u00a0(inclusive)</em>.</p>',
    examples: [
      {
        id: 1,
        inputText: "low = 3, high = 7",
        outputText: "3",
        explanation: "The odd numbers between 3 and 7 are [3,5,7].",
      },
      {
        id: 2,
        inputText: "low = 8, high = 10",
        outputText: "1",
        explanation: "The odd numbers between 8 and 10 are [9].",
      },
    ],
    tests: "[3, 8]",
    answer: "[3, 1]",
    code: "/**\n * @param {number} low\n * @param {number} high\n * @return {number}\n */\nvar countOdds = function(low, high) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1631,
    title: "Number of Sub-arrays With Odd Sum",
    titleSlug: "number-of-sub-arrays-with-odd-sum",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Dynamic Programming", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 100</code></li>",
    question:
      "<p>Given an array of integers <code>arr</code>, return <em>the number of subarrays with an <strong>odd</strong> sum</em>.</p><p>Since the answer can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,3,5]",
        outputText: "4",
        explanation:
          "All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.",
      },
      {
        id: 2,
        inputText: "arr = [2,4,6]",
        outputText: "0",
        explanation:
          "All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.",
      },
      {
        id: 3,
        inputText: "arr = [1,2,3,4,5,6,7]",
        outputText: "16",
        explanation: "",
      },
    ],
    tests: "[[1, 3, 5], [2, 4, 6], [1, 2, 3, 4, 5, 6, 7]]",
    answer: "[4, 0, 16]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar numOfSubarrays = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1632,
    title: "Number of Good Ways to Split a String",
    titleSlug: "number-of-good-ways-to-split-a-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li>",
    question:
      "<p>You are given a string <code>s</code>.</p><p>A split is called <strong>good</strong> if you can split <code>s</code> into two non-empty strings <code>s<sub>left</sub></code> and <code>s<sub>right</sub></code> where their concatenation is equal to <code>s</code> (i.e., <code>s<sub>left</sub> + s<sub>right</sub> = s</code>) and the number of distinct letters in <code>s<sub>left</sub></code> and <code>s<sub>right</sub></code> is the same.</p><p>Return <em>the number of <strong>good splits</strong> you can make in <code>s</code></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aacaba"',
        outputText: "2",
        explanation: "There are 5 ways to split",
      },
      {
        id: 2,
        inputText: 's = "abcd"',
        outputText: "1",
        explanation: 'Split the string as follows ("ab", "cd").',
      },
    ],
    tests: '["aacaba", "abcd"]',
    answer: "[2, 1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar numSplits = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1633,
    title: "Minimum Number of Increments on Subarrays to Form a Target Array",
    titleSlug:
      "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
    difficulty: "Hard",
    category: "Algorithms",
    topics: [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack",
    ],
    constaints:
      "<li><code>1 &lt;= target.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= target[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given an integer array <code>target</code>. You have an integer array <code>initial</code> of the same size as <code>target</code> with all elements initially zeros.</p><p>In one operation you can choose <strong>any</strong> subarray from <code>initial</code> and increment each value by one.</p><p>Return <em>the minimum number of operations to form a </em><code>target</code><em> array from </em><code>initial</code>.</p><p>The test cases are generated so that the answer fits in a 32-bit integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "target = [1,2,3,2,1]",
        outputText: "3",
        explanation:
          "We need at least 3 operations to form the target array from the initial array.\n[",
      },
      {
        id: 2,
        inputText: "target = [3,1,1,2]",
        outputText: "4",
        explanation: "[",
      },
      {
        id: 3,
        inputText: "target = [3,1,5,4,2]",
        outputText: "7",
        explanation: "[",
      },
    ],
    tests: "[[1, 2, 3, 2, 1], [3, 1, 1, 2], [3, 1, 5, 4, 2]]",
    answer: "[3, 4, 7]",
    code: "/**\n * @param {number[]} target\n * @return {number}\n */\nvar minNumberOperations = function(target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1635,
    title: "Number of Good Pairs",
    titleSlug: "number-of-good-pairs",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Math", "Counting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>Given an array of integers <code>nums</code>, return <em>the number of <strong>good pairs</strong></em>.</p><p>A pair <code>(i, j)</code> is called <em>good</em> if <code>nums[i] == nums[j]</code> and <code>i</code> &lt; <code>j</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,1,1,3]",
        outputText: "4",
        explanation:
          "There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.",
      },
      {
        id: 2,
        inputText: "nums = [1,1,1,1]",
        outputText: "6",
        explanation: "Each pair in the array are",
      },
      { id: 3, inputText: "nums = [1,2,3]", outputText: "0", explanation: "" },
    ],
    tests: "[[1, 2, 3, 1, 1, 3], [1, 1, 1, 1], [1, 2, 3]]",
    answer: "[4, 6, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numIdenticalPairs = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1648,
    title: "Minimum Insertions to Balance a Parentheses String",
    titleSlug: "minimum-insertions-to-balance-a-parentheses-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Greedy"],
    constaints:
      "<li>Any left parenthesis <code>'('</code> must have a corresponding two consecutive right parenthesis <code>'))'</code>.</li> <li>Left parenthesis <code>'('</code> must go before the corresponding two consecutive right parenthesis <code>'))'</code>.</li> <li>For example, <code>\"())\"</code>, <code>\"())(())))\"</code> and <code>\"(())())))\"</code> are balanced, <code>\")()\"</code>, <code>\"()))\"</code> and <code>\"(()))\"</code> are not balanced.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of <code>'('</code> and <code>')'</code> only.</li>",
    question:
      "<p>Given a parentheses string <code>s</code> containing only the characters <code>'('</code> and <code>')'</code>. A parentheses string is <strong>balanced</strong> if:</p><p>In other words, we treat <code>'('</code> as an opening parenthesis and <code>'))'</code> as a closing parenthesis.</p><p>You can insert the characters <code>'('</code> and <code>')'</code> at any position of the string to balance it if needed.</p><p>Return <em>the minimum number of insertions</em> needed to make <code>s</code> balanced.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "(()))"',
        outputText: "1",
        explanation:
          "The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be \"(())))\" which is balanced.",
      },
      {
        id: 2,
        inputText: 's = "())"',
        outputText: "0",
        explanation: "The string is already balanced.",
      },
      {
        id: 3,
        inputText: 's = "))())("',
        outputText: "3",
        explanation:
          "Add '(' to match the first '))', Add '))' to match the last '('.",
      },
    ],
    tests: '["(()))", "())", "))())("]',
    answer: "[1, 0, 3]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar minInsertions = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1656,
    title: "Count Good Triplets",
    titleSlug: "count-good-triplets",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Enumeration"],
    constaints:
      "<li><code>0 &lt;= i &lt; j &lt; k &lt;\u00a0arr.length</code></li> <li><code>|arr[i] - arr[j]| &lt;= a</code></li> <li><code>|arr[j] - arr[k]| &lt;= b</code></li> <li><code>|arr[i] - arr[k]| &lt;= c</code></li> <li><code>3 &lt;= arr.length &lt;= 100</code></li> <li><code>0 &lt;= arr[i] &lt;= 1000</code></li> <li><code>0 &lt;= a, b, c &lt;= 1000</code></li>",
    question:
      "<p>Given an array of integers <code>arr</code>, and three integers\u00a0<code>a</code>,\u00a0<code>b</code>\u00a0and\u00a0<code>c</code>. You need to find the number of good triplets.</p><p>A triplet <code>(arr[i], arr[j], arr[k])</code>\u00a0is <strong>good</strong> if the following conditions are true:</p><p>Where <code>|x|</code> denotes the absolute value of <code>x</code>.</p><p>Return<em> the number of good triplets</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3",
        outputText: "4",
        explanation:
          "There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].",
      },
      {
        id: 2,
        inputText: "arr = [1,1,2,2,3], a = 0, b = 0, c = 1",
        outputText: "0",
        explanation: "No triplet satisfies all conditions.",
      },
    ],
    tests: "[[3, 0, 1, 1, 9, 7], [1, 1, 2, 2, 3]]",
    answer: "[4, 0]",
    code: "/**\n * @param {number[]} arr\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nvar countGoodTriplets = function(arr, a, b, c) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1657,
    title: "Find the Winner of an Array Game",
    titleSlug: "find-the-winner-of-an-array-game",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Simulation"],
    constaints:
      "<li><code>2 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> <li><code>arr</code> contains <strong>distinct</strong> integers.</li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an integer array <code>arr</code> of <strong>distinct</strong> integers and an integer <code>k</code>.</p><p>A game will be played between the first two elements of the array (i.e. <code>arr[0]</code> and <code>arr[1]</code>). In each round of the game, we compare <code>arr[0]</code> with <code>arr[1]</code>, the larger integer wins and remains at position <code>0</code>, and the smaller integer moves to the end of the array. The game ends when an integer wins <code>k</code> consecutive rounds.</p><p>Return <em>the integer which will win the game</em>.</p><p>It is <strong>guaranteed</strong> that there will be a winner of the game.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [2,1,3,5,4,6,7], k = 2",
        outputText: "5",
        explanation:
          "Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.",
      },
      {
        id: 2,
        inputText: "arr = [3,2,1], k = 10",
        outputText: "3",
        explanation: "3 will win the first 10 rounds consecutively.",
      },
    ],
    tests: "[[2, 1, 3, 5, 4, 6, 7], [3, 2, 1]]",
    answer: "[5, 3]",
    code: "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\nvar getWinner = function(arr, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1660,
    title: "Thousand Separator",
    titleSlug: "thousand-separator",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints: "<li><code>0 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      '<p>Given an integer <code>n</code>, add a dot (".") as the thousands separator and return it in string format.</p>',
    examples: [
      { id: 1, inputText: "n = 987", outputText: '"987"', explanation: "" },
      { id: 2, inputText: "n = 1234", outputText: '"1.234"', explanation: "" },
    ],
    tests: "[987, 1234]",
    answer: '["987", "1.234"]',
    code: "/**\n * @param {number} n\n * @return {string}\n */\nvar thousandSeparator = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1661,
    title: "Minimum Number of Vertices to Reach All Nodes",
    titleSlug: "minimum-number-of-vertices-to-reach-all-nodes",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Graph"],
    constaints:
      "<li><code>2 &lt;= n &lt;= 10^5</code></li> <li><code>1 &lt;= edges.length &lt;= min(10^5, n * (n - 1) / 2)</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= from<sub>i,</sub>\u00a0to<sub>i</sub> &lt; n</code></li> <li>All pairs <code>(from<sub>i</sub>, to<sub>i</sub>)</code> are distinct.</li>",
    question:
      "<p>Given a<strong>\u00a0directed acyclic graph</strong>,\u00a0with\u00a0<code>n</code>\u00a0vertices numbered from\u00a0<code>0</code>\u00a0to\u00a0<code>n-1</code>,\u00a0and an array\u00a0<code>edges</code>\u00a0where\u00a0<code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>]</code>\u00a0represents a directed edge from node\u00a0<code>from<sub>i</sub></code>\u00a0to node\u00a0<code>to<sub>i</sub></code>.</p><p>Find <em>the smallest set of vertices from which all nodes in the graph are reachable</em>. It's guaranteed that a unique solution exists.</p><p>Notice that you can return the vertices in any order.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]",
        outputText: "[0,3]",
        explanation:
          "It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].",
      },
      {
        id: 2,
        inputText: "n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]",
        outputText: "[0,2,3]",
        explanation:
          "Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.",
      },
    ],
    tests: "[6, 5]",
    answer: "[[0, 3], [0, 2, 3]]",
    code: "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findSmallestSetOfVertices = function(n, edges) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1662,
    title: "Minimum Numbers of Function Calls to Make Target Array",
    titleSlug: "minimum-numbers-of-function-calls-to-make-target-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code>. You have an integer array <code>arr</code> of the same length with all values set to <code>0</code> initially. You also have the following <code>modify</code> function:</p><p>You want to use the modify function to convert <code>arr</code> to <code>nums</code> using the minimum number of calls.</p><p>Return <em>the minimum number of function calls to make </em><code>nums</code><em> from </em><code>arr</code>.</p><p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> signed integer.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,5]",
        outputText: "5",
        explanation:
          "Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\nIncrement by 1 (both elements)  [0, 4] -> [1, 4] ->",
      },
      {
        id: 2,
        inputText: "nums = [2,2]",
        outputText: "3",
        explanation:
          "Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\nDouble all the elements: [1, 1] ->",
      },
      {
        id: 3,
        inputText: "nums = [4,2,5]",
        outputText: "6",
        explanation:
          "(initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] ->",
      },
    ],
    tests: "[[1, 5], [2, 2], [4, 2, 5]]",
    answer: "[5, 3, 6]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minOperations = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1666,
    title: "Make The String Great",
    titleSlug: "make-the-string-great",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Stack"],
    constaints:
      "<li><code>0 &lt;= i &lt;= s.length - 2</code></li> <li><code>s[i]</code> is a lower-case letter and <code>s[i + 1]</code> is the same letter but in upper-case or <strong>vice-versa</strong>.</li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> contains only lower and upper case English letters.</li>",
    question:
      "<p>Given a string <code>s</code> of lower and upper case English letters.</p><p>A good string is a string which doesn't have <strong>two adjacent characters</strong> <code>s[i]</code> and <code>s[i + 1]</code> where:</p><p>To make the string good, you can choose <strong>two adjacent</strong> characters that make the string bad and remove them. You can keep doing this until the string becomes good.</p><p>Return <em>the string</em> after making it good. The answer is guaranteed to be unique under the given constraints.</p><p><strong>Notice</strong> that an empty string is also good.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "leEeetcode"',
        outputText: '"leetcode"',
        explanation:
          'In the first step, either you choose i = 1 or i = 2, both will result "leEeetcode" to be reduced to "leetcode".',
      },
      {
        id: 2,
        inputText: 's = "abBAcC"',
        outputText: '""',
        explanation:
          'We have many possible scenarios, and all lead to the same answer. For example:\n"abBAcC" --> "aAcC" --> "cC" --> ""\n"abBAcC" --> "abBA" --> "aA" --> ""',
      },
      { id: 3, inputText: 's = "s"', outputText: '"s"', explanation: "" },
    ],
    tests: '["leEeetcode", "abBAcC", "s"]',
    answer: '["leetcode", "", "s"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar makeGood = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1667,
    title: "Find Kth Bit in Nth Binary String",
    titleSlug: "find-kth-bit-in-nth-binary-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Recursion", "Simulation"],
    constaints:
      '<li><code>S<sub>1</sub> = "0"</code></li> <li><code>S<sub>i</sub> = S<sub>i - 1</sub> + "1" + reverse(invert(S<sub>i - 1</sub>))</code> for <code>i &gt; 1</code></li> <li><code>S<sub>1 </sub>= "0"</code></li> <li><code>S<sub>2 </sub>= "0<strong>1</strong>1"</code></li> <li><code>S<sub>3 </sub>= "011<strong>1</strong>001"</code></li> <li><code>S<sub>4</sub> = "0111001<strong>1</strong>0110001"</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= k &lt;= 2<sup>n</sup> - 1</code></li>',
    question:
      "<p>Given two positive integers <code>n</code> and <code>k</code>, the binary string <code>S<sub>n</sub></code> is formed as follows:</p><p>Where <code>+</code> denotes the concatenation operation, <code>reverse(x)</code> returns the reversed string <code>x</code>, and <code>invert(x)</code> inverts all the bits in <code>x</code> (<code>0</code> changes to <code>1</code> and <code>1</code> changes to <code>0</code>).</p><p>For example, the first four strings in the above sequence are:</p><p>Return <em>the</em> <code>k<sup>th</sup></code> <em>bit</em> <em>in</em> <code>S<sub>n</sub></code>. It is guaranteed that <code>k</code> is valid for the given <code>n</code>.</p>",
    examples: [
      { id: 1, inputText: "n = 3, k = 1", outputText: '"0"', explanation: "S" },
      {
        id: 2,
        inputText: "n = 4, k = 11",
        outputText: '"1"',
        explanation: "S",
      },
    ],
    tests: "[3, 4]",
    answer: '["0", "1"]',
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {character}\n */\nvar findKthBit = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1674,
    title: "Minimum Operations to Make Array Equal",
    titleSlug: "minimum-operations-to-make-array-equal",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math"],
    constaints: "<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You have an array <code>arr</code> of length <code>n</code> where <code>arr[i] = (2 * i) + 1</code> for all valid values of <code>i</code> (i.e.,\u00a0<code>0 &lt;= i &lt; n</code>).</p><p>In one operation, you can select two indices <code>x</code> and <code>y</code> where <code>0 &lt;= x, y &lt; n</code> and subtract <code>1</code> from <code>arr[x]</code> and add <code>1</code> to <code>arr[y]</code> (i.e., perform <code>arr[x] -=1 </code>and <code>arr[y] += 1</code>). The goal is to make all the elements of the array <strong>equal</strong>. It is <strong>guaranteed</strong> that all the elements of the array can be made equal using some operations.</p><p>Given an integer <code>n</code>, the length of the array, return <em>the minimum number of operations</em> needed to make all the elements of arr equal.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText: "2",
        explanation:
          "arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].",
      },
      { id: 2, inputText: "n = 6", outputText: "9", explanation: "" },
    ],
    tests: "[3, 6]",
    answer: "[2, 9]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar minOperations = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1679,
    title: "Shortest Subarray to be Removed to Make Array Sorted",
    titleSlug: "shortest-subarray-to-be-removed-to-make-array-sorted",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Stack",
      "Monotonic Stack",
    ],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given an integer array <code>arr</code>, remove a subarray (can be empty) from <code>arr</code> such that the remaining elements in <code>arr</code> are <strong>non-decreasing</strong>.</p><p>Return <em>the length of the shortest subarray to remove</em>.</p><p>A <strong>subarray</strong> is a contiguous subsequence of the array.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,2,3,10,4,2,3,5]",
        outputText: "3",
        explanation:
          "The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4].",
      },
      {
        id: 2,
        inputText: "arr = [5,4,3,2,1]",
        outputText: "4",
        explanation:
          "Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].",
      },
      {
        id: 3,
        inputText: "arr = [1,2,3]",
        outputText: "0",
        explanation:
          "The array is already non-decreasing. We do not need to remove any elements.",
      },
    ],
    tests: "[[1, 2, 3, 10, 4, 2, 3, 5], [5, 4, 3, 2, 1], [1, 2, 3]]",
    answer: "[3, 4, 0]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar findLengthOfShortestSubarray = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1683,
    title: "Maximum Number of Coins You Can Get",
    titleSlug: "maximum-number-of-coins-you-can-get",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Greedy", "Sorting", "Game Theory"],
    constaints:
      "<li>In each step, you will choose <strong>any </strong><code>3</code> piles of coins (not necessarily consecutive).</li> <li>Of your choice, Alice will pick the pile with the maximum number of coins.</li> <li>You will pick the next pile with the maximum number of coins.</li> <li>Your friend Bob will pick the last pile.</li> <li>Repeat until there are no more piles of coins.</li> <li><code>3 &lt;= piles.length &lt;= 10<sup>5</sup></code></li> <li><code>piles.length % 3 == 0</code></li> <li><code>1 &lt;= piles[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>There are <code>3n</code> piles of coins of varying size, you and your friends will take piles of coins as follows:</p><p>Given an array of integers <code>piles</code> where <code>piles[i]</code> is the number of coins in the <code>i<sup>th</sup></code> pile.</p><p>Return the maximum number of coins that you can have.</p>",
    examples: [
      {
        id: 1,
        inputText: "piles = [2,4,1,2,7,8]",
        outputText: "9",
        explanation:
          "Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with",
      },
      { id: 2, inputText: "piles = [2,4,5]", outputText: "4", explanation: "" },
      {
        id: 3,
        inputText: "piles = [9,8,7,6,5,1,2,3,4]",
        outputText: "18",
        explanation: "",
      },
    ],
    tests: "[[2, 4, 1, 2, 7, 8], [2, 4, 5], [9, 8, 7, 6, 5, 1, 2, 3, 4]]",
    answer: "[9, 4, 18]",
    code: "/**\n * @param {number[]} piles\n * @return {number}\n */\nvar maxCoins = function(piles) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1689,
    title: "Detect Pattern of Length M Repeated K or More Times",
    titleSlug: "detect-pattern-of-length-m-repeated-k-or-more-times",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Enumeration"],
    constaints:
      "<li><code>2 &lt;= arr.length &lt;= 100</code></li> <li><code>1 &lt;= arr[i] &lt;= 100</code></li> <li><code>1 &lt;= m &lt;= 100</code></li> <li><code>2 &lt;= k &lt;= 100</code></li>",
    question:
      "<p>Given an array of positive integers <code>arr</code>, find a pattern of length <code>m</code> that is repeated <code>k</code> or more times.</p><p>A <strong>pattern</strong> is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times <strong>consecutively </strong>without overlapping. A pattern is defined by its length and the number of repetitions.</p><p>Return <code>true</code> <em>if there exists a pattern of length</em> <code>m</code> <em>that is repeated</em> <code>k</code> <em>or more times, otherwise return</em> <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,2,4,4,4,4], m = 1, k = 3",
        outputText: "true",
        explanation: "The pattern",
      },
      {
        id: 2,
        inputText: "arr = [1,2,1,2,1,1,1,3], m = 2, k = 2",
        outputText: "true",
        explanation: "The pattern",
      },
      {
        id: 3,
        inputText: "arr = [1,2,1,2,1,3], m = 2, k = 3",
        outputText: "false",
        explanation:
          "The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.",
      },
    ],
    tests: "[[1, 2, 4, 4, 4, 4], [1, 2, 1, 2, 1, 1, 1, 3], [1, 2, 1, 2, 1, 3]]",
    answer: "[true, true, false]",
    code: "/**\n * @param {number[]} arr\n * @param {number} m\n * @param {number} k\n * @return {boolean}\n */\nvar containsPattern = function(arr, m, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1693,
    title: "Sum of All Odd Length Subarrays",
    titleSlug: "sum-of-all-odd-length-subarrays",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= arr.length &lt;= 100</code></li> <li><code>1 &lt;= arr[i] &lt;= 1000</code></li>",
    question:
      "<p>Given an array of positive integers <code>arr</code>, return <em>the sum of all possible <strong>odd-length subarrays</strong> of </em><code>arr</code>.</p><p>A <strong>subarray</strong> is a contiguous subsequence of the array.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [1,4,2,5,3]",
        outputText: "58",
        explanation:
          "The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58",
      },
      {
        id: 2,
        inputText: "arr = [1,2]",
        outputText: "3",
        explanation:
          "There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.",
      },
      {
        id: 3,
        inputText: "arr = [10,11,12]",
        outputText: "66",
        explanation: "",
      },
    ],
    tests: "[[1, 4, 2, 5, 3], [1, 2], [10, 11, 12]]",
    answer: "[58, 3, 66]",
    code: "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar sumOddLengthSubarrays = function(arr) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1698,
    title: "Replace All ?'s to Avoid Consecutive Repeating Characters",
    titleSlug: "replace-all-s-to-avoid-consecutive-repeating-characters",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consist of lowercase English letters and <code>'?'</code>.</li>",
    question:
      "<p>Given a string <code>s</code> containing only lowercase English letters and the <code>'?'</code> character, convert <strong>all </strong>the <code>'?'</code> characters into lowercase letters such that the final string does not contain any <strong>consecutive repeating </strong>characters. You <strong>cannot </strong>modify the non <code>'?'</code> characters.</p><p>It is <strong>guaranteed </strong>that there are no consecutive repeating characters in the given string <strong>except </strong>for <code>'?'</code>.</p><p>Return <em>the final string after all the conversions (possibly zero) have been made</em>. If there is more than one solution, return <strong>any of them</strong>. It can be shown that an answer is always possible with the given constraints.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "?zs"',
        outputText: '"azs"',
        explanation:
          'There are 25 solutions for this problem. From "azs" to "yzs", all are valid. Only "z" is an invalid modification as the string will consist of consecutive repeating characters in "zzs".',
      },
      {
        id: 2,
        inputText: 's = "ubv?w"',
        outputText: '"ubvaw"',
        explanation:
          'There are 24 solutions for this problem. Only "v" and "w" are invalid modifications as the strings will consist of consecutive repeating characters in "ubvvw" and "ubvww".',
      },
    ],
    tests: '["?zs", "ubv?w"]',
    answer: '["azs", "ubvaw"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar modifyString = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1699,
    title:
      "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    titleSlug:
      "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Math", "Two Pointers"],
    constaints:
      "<li>Type 1: Triplet (i, j, k) if <code>nums1[i]<sup>2</sup> == nums2[j] * nums2[k]</code> where <code>0 &lt;= i &lt; nums1.length</code> and <code>0 &lt;= j &lt; k &lt; nums2.length</code>.</li> <li>Type 2: Triplet (i, j, k) if <code>nums2[i]<sup>2</sup> == nums1[j] * nums1[k]</code> where <code>0 &lt;= i &lt; nums2.length</code> and <code>0 &lt;= j &lt; k &lt; nums1.length</code>.</li> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given two arrays of integers <code>nums1</code> and <code>nums2</code>, return the number of triplets formed (type 1 and type 2) under the following rules:</p>",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [7,4], nums2 = [5,2,8,9]",
        outputText: "1",
        explanation: "Type 1: (1, 1, 2), nums1[1]",
      },
      {
        id: 2,
        inputText: "nums1 = [1,1], nums2 = [1,1,1]",
        outputText: "9",
        explanation: "All Triplets are valid, because 1",
      },
      {
        id: 3,
        inputText: "nums1 = [7,7,8,3], nums2 = [1,2,9,7]",
        outputText: "2",
        explanation: "There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]",
      },
    ],
    tests: "[[7, 4], [1, 1], [7, 7, 8, 3]]",
    answer: "[1, 9, 2]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar numTriplets = function(nums1, nums2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1705,
    title: "Count Unhappy Friends",
    titleSlug: "count-unhappy-friends",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Simulation"],
    constaints:
      "<li><code>x</code>\u00a0prefers <code>u</code>\u00a0over <code>y</code>,\u00a0and</li> <li><code>u</code>\u00a0prefers <code>x</code>\u00a0over <code>v</code>.</li> <li><code>2 &lt;= n &lt;= 500</code></li> <li><code>n</code>\u00a0is even.</li> <li><code>preferences.length\u00a0== n</code></li> <li><code>preferences[i].length\u00a0== n - 1</code></li> <li><code>0 &lt;= preferences[i][j] &lt;= n - 1</code></li> <li><code>preferences[i]</code>\u00a0does not contain <code>i</code>.</li> <li>All values in\u00a0<code>preferences[i]</code>\u00a0are unique.</li> <li><code>pairs.length\u00a0== n/2</code></li> <li><code>pairs[i].length\u00a0== 2</code></li> <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>\u00a0&lt;= n - 1</code></li> <li>Each person is contained in <strong>exactly one</strong> pair.</li>",
    question:
      "<p>You are given a list of\u00a0<code>preferences</code>\u00a0for\u00a0<code>n</code>\u00a0friends, where <code>n</code> is always <strong>even</strong>.</p><p>For each person <code>i</code>,\u00a0<code>preferences[i]</code>\u00a0contains\u00a0a list of friends\u00a0<strong>sorted</strong> in the <strong>order of preference</strong>. In other words, a friend earlier in the list is more preferred than a friend later in the list.\u00a0Friends in\u00a0each list are\u00a0denoted by integers from <code>0</code> to <code>n-1</code>.</p><p>All the friends are divided into pairs.\u00a0The pairings are\u00a0given in a list\u00a0<code>pairs</code>,\u00a0where <code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> denotes <code>x<sub>i</sub></code>\u00a0is paired with <code>y<sub>i</sub></code> and <code>y<sub>i</sub></code> is paired with <code>x<sub>i</sub></code>.</p><p>However, this pairing may cause some of the friends to be unhappy.\u00a0A friend <code>x</code>\u00a0is unhappy if <code>x</code>\u00a0is paired with <code>y</code>\u00a0and there exists a friend <code>u</code>\u00a0who\u00a0is paired with <code>v</code>\u00a0but:</p><p>Return <em>the number of unhappy friends</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]",
        outputText: "2",
        explanation:
          "Friend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.",
      },
      {
        id: 2,
        inputText: "n = 2, preferences = [[1], [0]], pairs = [[1, 0]]",
        outputText: "0",
        explanation: "Both friends 0 and 1 are happy.",
      },
      {
        id: 3,
        inputText:
          "n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]",
        outputText: "4",
        explanation: "",
      },
    ],
    tests: "[4, 2, 4]",
    answer: "[2, 0, 4]",
    code: "/**\n * @param {number} n\n * @param {number[][]} preferences\n * @param {number[][]} pairs\n * @return {number}\n */\nvar unhappyFriends = function(n, preferences, pairs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1708,
    title: "Design Parking System",
    titleSlug: "design-parking-system",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Design", "Simulation", "Counting"],
    constaints:
      "<li><code>ParkingSystem(int big, int medium, int small)</code> Initializes object of the <code>ParkingSystem</code> class. The number of slots for each parking space are given as part of the constructor.</li> <li><code>bool addCar(int carType)</code> Checks whether there is a parking space of <code>carType</code> for the car that wants to get into the parking lot. <code>carType</code> can be of three kinds: big, medium, or small, which are represented by <code>1</code>, <code>2</code>, and <code>3</code> respectively. <strong>A car can only park in a parking space of its </strong><code>carType</code>. If there is no space available, return <code>false</code>, else park the car in that size space and return <code>true</code>.</li> <li><code>0 &lt;= big, medium, small &lt;= 1000</code></li> <li><code>carType</code> is <code>1</code>, <code>2</code>, or <code>3</code></li> <li>At most <code>1000</code> calls will be made to <code>addCar</code></li>",
    question:
      "<p>Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.</p><p>Implement the <code>ParkingSystem</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]\n[[1, 1, 0], [1], [2], [3], [1]]',
        outputText: "[null, true, true, false, false]",
        explanation:
          "ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.",
      },
    ],
    tests: '[["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]]',
    answer: "[[null, true, true, false, false]]",
    code: "/**\n * @param {number} big\n * @param {number} medium\n * @param {number} small\n */\nvar ParkingSystem = function(big, medium, small) {\n    \n};\n\n/** \n * @param {number} carType\n * @return {boolean}\n */\nParkingSystem.prototype.addCar = function(carType) {\n    \n};\n\n/** \n * Your ParkingSystem object will be instantiated and called as such:\n * var obj = new ParkingSystem(big, medium, small)\n * var param_1 = obj.addCar(carType)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1709,
    title: "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    titleSlug:
      "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Sorting"],
    constaints:
      '<li><code>1 &lt;= keyName.length, keyTime.length &lt;= 10<sup>5</sup></code></li> <li><code>keyName.length == keyTime.length</code></li> <li><code>keyTime[i]</code> is in the format <strong>"HH:MM"</strong>.</li> <li><code>[keyName[i], keyTime[i]]</code> is <strong>unique</strong>.</li> <li><code>1 &lt;= keyName[i].length &lt;= 10</code></li> <li><code>keyName[i] contains only lowercase English letters.</code></li>',
    question:
      '<p>LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker\'s name and the time when it was used. The system emits an <strong>alert</strong> if any worker uses the key-card <strong>three or more times</strong> in a one-hour period.</p><p>You are given a list of strings <code>keyName</code> and <code>keyTime</code> where <code>[keyName[i], keyTime[i]]</code> corresponds to a person\'s name and the time when their key-card was used <strong>in a</strong> <strong>single day</strong>.</p><p>Access times are given in the <strong>24-hour time format "HH:MM"</strong>, such as <code>"23:51"</code> and <code>"09:49"</code>.</p><p>Return a <em>list of unique worker names who received an alert for frequent keycard use</em>. Sort the names in <strong>ascending order alphabetically</strong>.</p><p>Notice that <code>"10:00"</code> - <code>"11:00"</code> is considered to be within a one-hour period, while <code>"22:51"</code> - <code>"23:52"</code> is not considered to be within a one-hour period.</p>',
    examples: [
      {
        id: 1,
        inputText:
          'keyName = ["daniel","daniel","daniel","luis","luis","luis","luis"], keyTime = ["10:00","10:40","11:00","09:00","11:00","13:00","15:00"]',
        outputText: '["daniel"]',
        explanation:
          '"daniel" used the keycard 3 times in a one-hour period ("10:00","10:40", "11:00").',
      },
      {
        id: 2,
        inputText:
          'keyName = ["alice","alice","alice","bob","bob","bob","bob"], keyTime = ["12:01","12:00","18:00","21:00","21:20","21:30","23:00"]',
        outputText: '["bob"]',
        explanation:
          '"bob" used the keycard 3 times in a one-hour period ("21:00","21:20", "21:30").',
      },
    ],
    tests:
      '[["daniel", "daniel", "daniel", "luis", "luis", "luis", "luis"], ["alice", "alice", "alice", "bob", "bob", "bob", "bob"]]',
    answer: '[["daniel"], ["bob"]]',
    code: "/**\n * @param {string[]} keyName\n * @param {string[]} keyTime\n * @return {string[]}\n */\nvar alertNames = function(keyName, keyTime) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1714,
    title: "Rearrange Spaces Between Words",
    titleSlug: "rearrange-spaces-between-words",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= text.length &lt;= 100</code></li> <li><code>text</code> consists of lowercase English letters and <code>' '</code>.</li> <li><code>text</code> contains at least one word.</li>",
    question:
      "<p>You are given a string <code>text</code> of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that <code>text</code> <strong>contains at least one word</strong>.</p><p>Rearrange the spaces so that there is an <strong>equal</strong> number of spaces between every pair of adjacent words and that number is <strong>maximized</strong>. If you cannot redistribute all the spaces equally, place the <strong>extra spaces at the end</strong>, meaning the returned string should be the same length as <code>text</code>.</p><p>Return <em>the string after rearranging the spaces</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'text = "  this   is  a sentence "',
        outputText: '"this   is   a   sentence"',
        explanation:
          "There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.",
      },
      {
        id: 2,
        inputText: 'text = " practice   makes   perfect"',
        outputText: '"practice   makes   perfect "',
        explanation:
          "There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.",
      },
    ],
    tests: '["  this   is  a sentence ", " practice   makes   perfect"]',
    answer: '["this   is   a   sentence", "practice   makes   perfect "]',
    code: "/**\n * @param {string} text\n * @return {string}\n */\nvar reorderSpaces = function(text) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1720,
    title: "Crawler Log Folder",
    titleSlug: "crawler-log-folder",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "String", "Stack"],
    constaints:
      '<li><code>"../"</code> : Move to the parent folder of the current folder. (If you are already in the main folder, <strong>remain in the same folder</strong>).</li> <li><code>"./"</code> : Remain in the same folder.</li> <li><code>"x/"</code> : Move to the child folder named <code>x</code> (This folder is <strong>guaranteed to always exist</strong>).</li> <li><code>1 &lt;= logs.length &lt;= 10<sup>3</sup></code></li> <li><code>2 &lt;= logs[i].length &lt;= 10</code></li> <li><code>logs[i]</code> contains lowercase English letters, digits, <code>\'.\'</code>, and <code>\'/\'</code>.</li> <li><code>logs[i]</code> follows the format described in the statement.</li> <li>Folder names consist of lowercase English letters and digits.</li>',
    question:
      "<p>The Leetcode file system keeps a log each time some user performs a <em>change folder</em> operation.</p><p>The operations are described below:</p><p>You are given a list of strings <code>logs</code> where <code>logs[i]</code> is the operation performed by the user at the <code>i<sup>th</sup></code> step.</p><p>The file system starts in the main folder, then the operations in <code>logs</code> are performed.</p><p>Return <em>the minimum number of operations needed to go back to the main folder after the change folder operations.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 'logs = ["d1/","d2/","../","d21/","./"]',
        outputText: "2",
        explanation:
          'Use this change folder operation "../" 2 times and go back to the main folder.',
      },
      {
        id: 2,
        inputText: 'logs = ["d1/","d2/","./","d3/","../","d31/"]',
        outputText: "3",
        explanation: "",
      },
      {
        id: 3,
        inputText: 'logs = ["d1/","../","../","../"]',
        outputText: "0",
        explanation: "",
      },
    ],
    tests:
      '[["d1/", "d2/", "../", "d21/", "./"], ["d1/", "d2/", "./", "d3/", "../", "d31/"], ["d1/", "../", "../", "../"]]',
    answer: "[2, 3, 0]",
    code: "/**\n * @param {string[]} logs\n * @return {number}\n */\nvar minOperations = function(logs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1723,
    title: "Maximum Number of Achievable Transfer Requests",
    titleSlug: "maximum-number-of-achievable-transfer-requests",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Backtracking", "Bit Manipulation", "Enumeration"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= requests.length &lt;= 16</code></li> <li><code>requests[i].length == 2</code></li> <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li>",
    question:
      "<p>We have <code>n</code> buildings numbered from <code>0</code> to <code>n - 1</code>. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.</p><p>You are given an array <code>requests</code> where <code>requests[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represents an employee's request to transfer from building <code>from<sub>i</sub></code> to building <code>to<sub>i</sub></code>.</p><p><strong>All buildings are full</strong>, so a list of requests is achievable only if for each building, the <strong>net change in employee transfers is zero</strong>. This means the number of employees <strong>leaving</strong> is <strong>equal</strong> to the number of employees <strong>moving in</strong>. For example if <code>n = 3</code> and two employees are leaving building <code>0</code>, one is leaving building <code>1</code>, and one is leaving building <code>2</code>, there should be two employees moving to building <code>0</code>, one employee moving to building <code>1</code>, and one employee moving to building <code>2</code>.</p><p>Return <em>the maximum number of achievable requests</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]",
        outputText: "5",
        explanation:
          "Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.",
      },
      {
        id: 2,
        inputText: "n = 3, requests = [[0,0],[1,2],[2,1]]",
        outputText: "3",
        explanation:
          "Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests.",
      },
      {
        id: 3,
        inputText: "n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]",
        outputText: "4",
        explanation: "",
      },
    ],
    tests: "[5, 3, 4]",
    answer: "[5, 3, 4]",
    code: "/**\n * @param {number} n\n * @param {number[][]} requests\n * @return {number}\n */\nvar maximumRequests = function(n, requests) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1726,
    title: "Coordinate With Maximum Network Quality",
    titleSlug: "coordinate-with-maximum-network-quality",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Enumeration"],
    constaints:
      "<li>A coordinate <code>(x1, y1)</code> is lexicographically smaller than <code>(x2, y2)</code> if either:\n\n\t<ul>\n<li><code>x1 &lt; x2</code>, or</li>\n<li><code>x1 == x2</code> and <code>y1 &lt; y2</code>.</li>\n</ul>\n</li> <li><code>x1 &lt; x2</code>, or</li> <li><code>x1 == x2</code> and <code>y1 &lt; y2</code>.</li> <li><code>\u230aval\u230b</code> is the greatest integer less than or equal to <code>val</code> (the floor function).</li> <li><code>1 &lt;= towers.length &lt;= 50</code></li> <li><code>towers[i].length == 3</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>, q<sub>i</sub> &lt;= 50</code></li> <li><code>1 &lt;= radius &lt;= 50</code></li>",
    question:
      "<p>You are given an array of network towers <code>towers</code>, where <code>towers[i] = [x<sub>i</sub>, y<sub>i</sub>, q<sub>i</sub>]</code> denotes the <code>i<sup>th</sup></code> network tower with location <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and quality factor <code>q<sub>i</sub></code>. All the coordinates are <strong>integral coordinates</strong> on the X-Y plane, and the distance between the two coordinates is the <strong>Euclidean distance</strong>.</p><p>You are also given an integer <code>radius</code> where a tower is <strong>reachable</strong> if the distance is <strong>less than or equal to</strong> <code>radius</code>. Outside that distance, the signal becomes garbled, and the tower is <strong>not reachable</strong>.</p><p>The signal quality of the <code>i<sup>th</sup></code> tower at a coordinate <code>(x, y)</code> is calculated with the formula <code>\u230aq<sub>i</sub> / (1 + d)\u230b</code>, where <code>d</code> is the distance between the tower and the coordinate. The <strong>network quality</strong> at a coordinate is the sum of the signal qualities from all the <strong>reachable</strong> towers.</p><p>Return <em>the array </em><code>[c<sub>x</sub>, c<sub>y</sub>]</code><em> representing the <strong>integral</strong> coordinate </em><code>(c<sub>x</sub>, c<sub>y</sub>)</code><em> where the <strong>network quality</strong> is maximum. If there are multiple coordinates with the same <strong>network quality</strong>, return the lexicographically minimum <strong>non-negative</strong> coordinate.</em></p><p><strong>Note:</strong></p>",
    examples: [
      {
        id: 1,
        inputText: "towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2",
        outputText: "[2,1]",
        explanation:
          "At coordinate (2, 1) the total quality is 13.\n- Quality of 7 from (2, 1) results in \u230a7 / (1 + sqrt(0)\u230b = \u230a7\u230b = 7\n- Quality of 5 from (1, 2) results in \u230a5 / (1 + sqrt(2)\u230b = \u230a2.07\u230b = 2\n- Quality of 9 from (3, 1) results in \u230a9 / (1 + sqrt(1)\u230b = \u230a4.5\u230b = 4\nNo other coordinate has a higher network quality.",
      },
      {
        id: 2,
        inputText: "towers = [[23,11,21]], radius = 9",
        outputText: "[23,11]",
        explanation:
          "Since there is only one tower, the network quality is highest right at the tower's location.",
      },
      {
        id: 3,
        inputText: "towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2",
        outputText: "[1,2]",
        explanation: "Coordinate (1, 2) has the highest network quality.",
      },
    ],
    tests:
      "[[[1, 2, 5], [2, 1, 7], [3, 1, 9]], [[23, 11, 21]], [[1, 2, 13], [2, 1, 7], [0, 1, 9]]]",
    answer: "[[2, 1], [23, 11], [1, 2]]",
    code: "/**\n * @param {number[][]} towers\n * @param {number} radius\n * @return {number[]}\n */\nvar bestCoordinate = function(towers, radius) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1730,
    title: "Special Array With X Elements Greater Than or Equal X",
    titleSlug: "special-array-with-x-elements-greater-than-or-equal-x",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>You are given an array <code>nums</code> of non-negative integers. <code>nums</code> is considered <strong>special</strong> if there exists a number <code>x</code> such that there are <strong>exactly</strong> <code>x</code> numbers in <code>nums</code> that are <strong>greater than or equal to</strong> <code>x</code>.</p><p>Notice that <code>x</code> <strong>does not</strong> have to be an element in <code>nums</code>.</p><p>Return <code>x</code> <em>if the array is <strong>special</strong>, otherwise, return </em><code>-1</code>. It can be proven that if <code>nums</code> is special, the value for <code>x</code> is <strong>unique</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,5]",
        outputText: "2",
        explanation:
          "There are 2 values (3 and 5) that are greater than or equal to 2.",
      },
      {
        id: 2,
        inputText: "nums = [0,0]",
        outputText: "-1",
        explanation:
          "No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.",
      },
      {
        id: 3,
        inputText: "nums = [0,4,3,0,4]",
        outputText: "3",
        explanation: "There are 3 values that are greater than or equal to 3.",
      },
    ],
    tests: "[[3, 5], [0, 0], [0, 4, 3, 0, 4]]",
    answer: "[2, -1, 3]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar specialArray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1731,
    title: "Even Odd Tree",
    titleSlug: "even-odd-tree",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Tree", "Breadth-First Search", "Binary Tree"],
    constaints:
      "<li>The root of the binary tree is at level index <code>0</code>, its children are at level index <code>1</code>, their children are at level index <code>2</code>, etc.</li> <li>For every <strong>even-indexed</strong> level, all nodes at the level have <strong>odd</strong> integer values in <strong>strictly increasing</strong> order (from left to right).</li> <li>For every <b>odd-indexed</b> level, all nodes at the level have <b>even</b> integer values in <strong>strictly decreasing</strong> order (from left to right).</li> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>A binary tree is named <strong>Even-Odd</strong> if it meets the following conditions:</p><p>Given the <code>root</code> of a binary tree, <em>return </em><code>true</code><em> if the binary tree is <strong>Even-Odd</strong>, otherwise return </em><code>false</code><em>.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "root = [1,10,4,3,null,7,9,12,8,6,null,null,2]",
        outputText: "true",
        explanation:
          "The node values on each level are:\nLevel 0: [1]\nLevel 1: [10,4]\nLevel 2: [3,7,9]\nLevel 3: [12,8,6,2]\nSince levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.",
      },
      {
        id: 2,
        inputText: "root = [5,4,2,3,3,7]",
        outputText: "false",
        explanation:
          "The node values on each level are:\nLevel 0: [5]\nLevel 1: [4,2]\nLevel 2: [3,3,7]\nNode values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.",
      },
      {
        id: 3,
        inputText: "root = [5,9,1,3,5,7]",
        outputText: "false",
        explanation: "Node values in the level 1 should be even integers.",
      },
    ],
    tests:
      "[[1, 10, 4, 3, null, 7, 9, 12, 8, 6, null, null, 2], [5, 4, 2, 3, 3, 7], [5, 9, 1, 3, 5, 7]]",
    answer: "[true, false, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isEvenOddTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1742,
    title: "Widest Vertical Area Between Two Points Containing No Points",
    titleSlug: "widest-vertical-area-between-two-points-containing-no-points",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li><code>n == points.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>points[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>\u00a0&lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>Given <code>n</code> <code>points</code> on a 2D plane where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, Return<em>\u00a0the <strong>widest vertical area</strong> between two points such that no points are inside the area.</em></p><p>A <strong>vertical area</strong> is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The <strong>widest vertical area</strong> is the one with the maximum width.</p><p>Note that points <strong>on the edge</strong> of a vertical area <strong>are not</strong> considered included in the area.</p>",
    examples: [
      {
        id: 1,
        inputText: "points = [[8,7],[9,9],[7,4],[9,7]]",
        outputText: "1",
        explanation: "Both the red and the blue area are optimal.",
      },
      {
        id: 2,
        inputText: "points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]",
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      "[[[8, 7], [9, 9], [7, 4], [9, 7]], [[3, 1], [9, 0], [1, 0], [1, 4], [5, 3], [8, 8]]]",
    answer: "[1, 3]",
    code: "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxWidthOfVerticalArea = function(points) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1746,
    title: "Largest Substring Between Two Equal Characters",
    titleSlug: "largest-substring-between-two-equal-characters",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 300</code></li> <li><code>s</code> contains only lowercase English letters.</li>",
    question:
      "<p>Given a string <code>s</code>, return <em>the length of the longest substring between two equal characters, excluding the two characters.</em> If there is no such substring return <code>-1</code>.</p><p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aa"',
        outputText: "0",
        explanation:
          "The optimal substring here is an empty substring between the two",
      },
      {
        id: 2,
        inputText: 's = "abca"',
        outputText: "2",
        explanation: 'The optimal substring here is "bc".',
      },
      {
        id: 3,
        inputText: 's = "cbzxy"',
        outputText: "-1",
        explanation: "There are no characters that appear twice in s.",
      },
    ],
    tests: '["aa", "abca", "cbzxy"]',
    answer: "[0, 2, -1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar maxLengthBetweenEqualCharacters = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1747,
    title: "Lexicographically Smallest String After Applying Operations",
    titleSlug: "lexicographically-smallest-string-after-applying-operations",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Breadth-First Search"],
    constaints:
      '<li>Add <code>a</code> to all odd indices of <code>s</code> <strong>(0-indexed)</strong>. Digits post <code>9</code> are cycled back to <code>0</code>. For example, if <code>s = "3456"</code> and <code>a = 5</code>, <code>s</code> becomes <code>"3951"</code>.</li> <li>Rotate <code>s</code> to the right by <code>b</code> positions. For example, if <code>s = "3456"</code> and <code>b = 1</code>, <code>s</code> becomes <code>"6345"</code>.</li> <li><code>2 &lt;= s.length &lt;= 100</code></li> <li><code>s.length</code> is even.</li> <li><code>s</code> consists of digits from <code>0</code> to <code>9</code> only.</li> <li><code>1 &lt;= a &lt;= 9</code></li> <li><code>1 &lt;= b &lt;= s.length - 1</code></li>',
    question:
      "<p>You are given a string <code>s</code> of <strong>even length</strong> consisting of digits from <code>0</code> to <code>9</code>, and two integers <code>a</code> and <code>b</code>.</p><p>You can apply either of the following two operations any number of times and in any order on <code>s</code>:</p><p>Return <em>the <strong>lexicographically smallest</strong> string you can obtain by applying the above operations any number of times on</em> <code>s</code>.</p><p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>. For example, <code>\"0158\"</code> is lexicographically smaller than <code>\"0190\"</code> because the first position they differ is at the third letter, and <code>'5'</code> comes before <code>'9'</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "5525", a = 9, b = 2',
        outputText: '"2050"',
        explanation:
          'We can apply the following operations:\nStart:  "5525"\nRotate: "2555"\nAdd:    "2454"\nAdd:    "2353"\nRotate: "5323"\nAdd:    "5222"\nAdd:    "5121"\nRotate: "2151"\nAdd:    "2050"\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than "2050".',
      },
      {
        id: 2,
        inputText: 's = "74", a = 5, b = 1',
        outputText: '"24"',
        explanation:
          'We can apply the following operations:\nStart:  "74"\nRotate: "47"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    "42"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: "24"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than "24".',
      },
      {
        id: 3,
        inputText: 's = "0011", a = 4, b = 2',
        outputText: '"0011"',
        explanation:
          'There are no sequence of operations that will give us a lexicographically smaller string than "0011".',
      },
    ],
    tests: '["5525", "74", "0011"]',
    answer: '["2050", "24", "0011"]',
    code: "/**\n * @param {string} s\n * @param {number} a\n * @param {number} b\n * @return {string}\n */\nvar findLexSmallestString = function(s, a, b) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1748,
    title: "Best Team With No Conflicts",
    titleSlug: "best-team-with-no-conflicts",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Sorting"],
    constaints:
      "<li><code>1 &lt;= scores.length, ages.length &lt;= 1000</code></li> <li><code>scores.length == ages.length</code></li> <li><code>1 &lt;= scores[i] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= ages[i] &lt;= 1000</code></li>",
    question:
      "<p>You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the <strong>sum</strong> of scores of all the players in the team.</p><p>However, the basketball team is not allowed to have <strong>conflicts</strong>. A <strong>conflict</strong> exists if a younger player has a <strong>strictly higher</strong> score than an older player. A conflict does <strong>not</strong> occur between players of the same age.</p><p>Given two lists, <code>scores</code> and <code>ages</code>, where each <code>scores[i]</code> and <code>ages[i]</code> represents the score and age of the <code>i<sup>th</sup></code> player, respectively, return <em>the highest overall score of all possible basketball teams</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "scores = [1,3,5,10,15], ages = [1,2,3,4,5]",
        outputText: "34",
        explanation: "You can choose all the players.",
      },
      {
        id: 2,
        inputText: "scores = [4,5,6,5], ages = [2,1,2,1]",
        outputText: "16",
        explanation:
          "It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.",
      },
      {
        id: 3,
        inputText: "scores = [1,2,3,5], ages = [8,9,10,1]",
        outputText: "6",
        explanation: "It is best to choose the first 3 players.",
      },
    ],
    tests: "[[1, 3, 5, 10, 15], [4, 5, 6, 5], [1, 2, 3, 5]]",
    answer: "[34, 16, 6]",
    code: "/**\n * @param {number[]} scores\n * @param {number[]} ages\n * @return {number}\n */\nvar bestTeamScore = function(scores, ages) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1751,
    title: "Slowest Key",
    titleSlug: "slowest-key",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "String"],
    constaints:
      "<li><code>releaseTimes.length == n</code></li> <li><code>keysPressed.length == n</code></li> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= releaseTimes[i] &lt;= 10<sup>9</sup></code></li> <li><code>releaseTimes[i] &lt; releaseTimes[i+1]</code></li> <li><code>keysPressed</code> contains only lowercase English letters.</li>",
    question:
      "<p>A newly designed keypad was tested, where a tester pressed a sequence of <code>n</code> keys, one at a time.</p><p>You are given a string <code>keysPressed</code> of length <code>n</code>, where <code>keysPressed[i]</code> was the <code>i<sup>th</sup></code> key pressed in the testing sequence, and a sorted list <code>releaseTimes</code>, where <code>releaseTimes[i]</code> was the time the <code>i<sup>th</sup></code> key was released. Both arrays are <strong>0-indexed</strong>. The <code>0<sup>th</sup></code> key was pressed at the time <code>0</code>,\u00a0and every subsequent key was pressed at the <strong>exact</strong> time the previous key was released.</p><p>The tester wants to know the key of the keypress that had the <strong>longest duration</strong>. The <code>i<sup>th</sup></code><sup> </sup>keypress had a <strong>duration</strong> of <code>releaseTimes[i] - releaseTimes[i - 1]</code>, and the <code>0<sup>th</sup></code> keypress had a duration of <code>releaseTimes[0]</code>.</p><p>Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key <strong>may not</strong> have had the same <strong>duration</strong>.</p><p><em>Return the key of the keypress that had the <strong>longest duration</strong>. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 'releaseTimes = [9,29,49,50], keysPressed = "cbcd"',
        outputText: '"c"',
        explanation:
          "The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n'c' is lexicographically larger than 'b', so the answer is 'c'.",
      },
      {
        id: 2,
        inputText: 'releaseTimes = [12,23,36,46,62], keysPressed = "spuda"',
        outputText: '"a"',
        explanation:
          "The keypresses were as follows:\nKeypress for 's' had a duration of 12.\nKeypress for 'p' had a duration of 23 - 12 = 11.\nKeypress for 'u' had a duration of 36 - 23 = 13.\nKeypress for 'd' had a duration of 46 - 36 = 10.\nKeypress for 'a' had a duration of 62 - 46 = 16.\nThe longest of these was the keypress for 'a' with duration 16.",
      },
    ],
    tests: "[[9, 29, 49, 50], [12, 23, 36, 46, 62]]",
    answer: '["c", "a"]',
    code: "/**\n * @param {number[]} releaseTimes\n * @param {string} keysPressed\n * @return {character}\n */\nvar slowestKey = function(releaseTimes, keysPressed) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1755,
    title: "Defuse the Bomb",
    titleSlug: "defuse-the-bomb",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sliding Window"],
    constaints:
      "<li>If <code>k &gt; 0</code>, replace the <code>i<sup>th</sup></code> number with the sum of the <strong>next</strong> <code>k</code> numbers.</li> <li>If <code>k &lt; 0</code>, replace the <code>i<sup>th</sup></code> number with the sum of the <strong>previous</strong> <code>k</code> numbers.</li> <li>If <code>k == 0</code>, replace the <code>i<sup>th</sup></code> number with <code>0</code>.</li> <li><code>n == code.length</code></li> <li><code>1 &lt;= n\u00a0&lt;= 100</code></li> <li><code>1 &lt;= code[i] &lt;= 100</code></li> <li><code>-(n - 1) &lt;= k &lt;= n - 1</code></li>",
    question:
      "<p>You have a bomb to defuse, and your time is running out! Your informer will provide you with a <strong>circular</strong> array <code>code</code>\u00a0of length of <code>n</code>\u00a0and a key <code>k</code>.</p><p>To decrypt the code, you must replace every number. All the numbers are replaced <strong>simultaneously</strong>.</p><p>As <code>code</code> is circular, the next element of <code>code[n-1]</code> is <code>code[0]</code>, and the previous element of <code>code[0]</code> is <code>code[n-1]</code>.</p><p>Given the <strong>circular</strong> array <code>code</code> and an integer key <code>k</code>, return <em>the decrypted code to defuse the bomb</em>!</p>",
    examples: [
      {
        id: 1,
        inputText: "code = [5,7,1,4], k = 3",
        outputText: "[12,10,16,13]",
        explanation:
          "Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.",
      },
      {
        id: 2,
        inputText: "code = [1,2,3,4], k = 0",
        outputText: "[0,0,0,0]",
        explanation: "When k is zero, the numbers are replaced by 0.",
      },
      {
        id: 3,
        inputText: "code = [2,4,9,3], k = -2",
        outputText: "[12,5,6,13]",
        explanation:
          "The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the",
      },
    ],
    tests: "[[5, 7, 1, 4], [1, 2, 3, 4], [2, 4, 9, 3]]",
    answer: "[[12, 10, 16, 13], [0, 0, 0, 0], [12, 5, 6, 13]]",
    code: "/**\n * @param {number[]} code\n * @param {number} k\n * @return {number[]}\n */\nvar decrypt = function(code, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1760,
    title: "Check Array Formation Through Concatenation",
    titleSlug: "check-array-formation-through-concatenation",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>1 &lt;= pieces.length &lt;= arr.length &lt;= 100</code></li> <li><code>sum(pieces[i].length) == arr.length</code></li> <li><code>1 &lt;= pieces[i].length &lt;= arr.length</code></li> <li><code>1 &lt;= arr[i], pieces[i][j] &lt;= 100</code></li> <li>The integers in <code>arr</code> are <strong>distinct</strong>.</li> <li>The integers in <code>pieces</code> are <strong>distinct</strong> (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).</li>",
    question:
      "<p>You are given an array of <strong>distinct</strong> integers <code>arr</code> and an array of integer arrays <code>pieces</code>, where the integers in <code>pieces</code> are <strong>distinct</strong>. Your goal is to form <code>arr</code> by concatenating the arrays in <code>pieces</code> <strong>in any order</strong>. However, you are <strong>not</strong> allowed to reorder the integers in each array <code>pieces[i]</code>.</p><p>Return <code>true</code> <em>if it is possible </em><em>to form the array </em><code>arr</code><em> from </em><code>pieces</code>. Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "arr = [15,88], pieces = [[88],[15]]",
        outputText: "true",
        explanation: "Concatenate [15] then [88]",
      },
      {
        id: 2,
        inputText: "arr = [49,18,16], pieces = [[16,18,49]]",
        outputText: "false",
        explanation:
          "Even though the numbers match, we cannot reorder pieces[0].",
      },
      {
        id: 3,
        inputText: "arr = [91,4,64,78], pieces = [[78],[4,64],[91]]",
        outputText: "true",
        explanation: "Concatenate [91] then [4,64] then [78]",
      },
    ],
    tests: "[[15, 88], [49, 18, 16], [91, 4, 64, 78]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} arr\n * @param {number[][]} pieces\n * @return {boolean}\n */\nvar canFormArray = function(arr, pieces) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1761,
    title: "Count Sorted Vowel Strings",
    titleSlug: "count-sorted-vowel-strings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Dynamic Programming", "Combinatorics"],
    constaints: "<li><code>1 &lt;= n &lt;= 50</code>\u00a0</li>",
    question:
      "<p>Given an integer <code>n</code>, return <em>the number of strings of length </em><code>n</code><em> that consist only of vowels (</em><code>a</code><em>, </em><code>e</code><em>, </em><code>i</code><em>, </em><code>o</code><em>, </em><code>u</code><em>) and are <strong>lexicographically sorted</strong>.</em></p><p>A string <code>s</code> is <strong>lexicographically sorted</strong> if for all valid <code>i</code>, <code>s[i]</code> is the same as or comes before <code>s[i+1]</code> in the alphabet.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 1",
        outputText: "5",
        explanation: "The 5 sorted strings that consist of vowels only are",
      },
      {
        id: 2,
        inputText: "n = 2",
        outputText: "15",
        explanation:
          'The 15 sorted strings that consist of vowels only are\n["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"].\nNote that "ea" is not a valid string since \'e\' comes after \'a\' in the alphabet.',
      },
      { id: 3, inputText: "n = 33", outputText: "66045", explanation: "" },
    ],
    tests: "[1, 2, 33]",
    answer: "[5, 15, 66045]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar countVowelStrings = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1762,
    title: "Furthest Building You Can Reach",
    titleSlug: "furthest-building-you-can-reach",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Heap (Priority Queue)"],
    constaints:
      "<li>If the current building's height is <strong>greater than or equal</strong> to the next building's height, you do <strong>not</strong> need a ladder or bricks.</li> <li>If the current building's height is <b>less than</b> the next building's height, you can either use <strong>one ladder</strong> or <code>(h[i+1] - h[i])</code> <strong>bricks</strong>.</li> <li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= heights[i] &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= bricks &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= ladders &lt;= heights.length</code></li>",
    question:
      "<p>You are given an integer array <code>heights</code> representing the heights of buildings, some <code>bricks</code>, and some <code>ladders</code>.</p><p>You start your journey from building <code>0</code> and move to the next building by possibly using bricks or ladders.</p><p>While moving from building <code>i</code> to building <code>i+1</code> (<strong>0-indexed</strong>),</p><p><em>Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1",
        outputText: "4",
        explanation:
          "Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders.",
      },
      {
        id: 2,
        inputText:
          "heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2",
        outputText: "7",
        explanation: "",
      },
      {
        id: 3,
        inputText: "heights = [14,3,19,3], bricks = 17, ladders = 0",
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      "[[4, 2, 7, 6, 9, 14, 12], [4, 12, 2, 7, 3, 18, 20, 3, 19], [14, 3, 19, 3]]",
    answer: "[4, 7, 3]",
    code: "/**\n * @param {number[]} heights\n * @param {number} bricks\n * @param {number} ladders\n * @return {number}\n */\nvar furthestBuilding = function(heights, bricks, ladders) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1764,
    title: "Maximum Repeating Substring",
    titleSlug: "maximum-repeating-substring",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "String Matching"],
    constaints:
      "<li><code>1 &lt;= sequence.length &lt;= 100</code></li> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>sequence</code> and <code>word</code>\u00a0contains only lowercase English letters.</li>",
    question:
      "<p>For a string <code>sequence</code>, a string <code>word</code> is <strong><code>k</code>-repeating</strong> if <code>word</code> concatenated <code>k</code> times is a substring of <code>sequence</code>. The <code>word</code>'s <strong>maximum <code>k</code>-repeating value</strong> is the highest value <code>k</code> where <code>word</code> is <code>k</code>-repeating in <code>sequence</code>. If <code>word</code> is not a substring of <code>sequence</code>, <code>word</code>'s maximum <code>k</code>-repeating value is <code>0</code>.</p><p>Given strings <code>sequence</code> and <code>word</code>, return <em>the <strong>maximum <code>k</code>-repeating value</strong> of <code>word</code> in <code>sequence</code></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'sequence = "ababc", word = "ab"',
        outputText: "2",
        explanation: '"abab" is a substring in "',
      },
      {
        id: 2,
        inputText: 'sequence = "ababc", word = "ba"',
        outputText: "1",
        explanation: '"ba" is a substring in "a',
      },
      {
        id: 3,
        inputText: 'sequence = "ababc", word = "ac"',
        outputText: "0",
        explanation: '"ac" is not a substring in "ababc".',
      },
    ],
    tests: '["ababc", "ababc", "ababc"]',
    answer: "[2, 1, 0]",
    code: "/**\n * @param {string} sequence\n * @param {string} word\n * @return {number}\n */\nvar maxRepeating = function(sequence, word) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1765,
    title: "Merge In Between Linked Lists",
    titleSlug: "merge-in-between-linked-lists",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List"],
    constaints:
      "<li><code>3 &lt;= list1.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= a &lt;= b &lt; list1.length - 1</code></li> <li><code>1 &lt;= list2.length &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given two linked lists: <code>list1</code> and <code>list2</code> of sizes <code>n</code> and <code>m</code> respectively.</p><p>Remove <code>list1</code>'s nodes from the <code>a<sup>th</sup></code> node to the <code>b<sup>th</sup></code> node, and put <code>list2</code> in their place.</p><p>The blue edges and nodes in the following figure indicate the result:</p><p><em>Build the result list and return its head.</em></p>",
    examples: [
      {
        id: 1,
        inputText:
          "list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]",
        outputText: "[0,1,2,1000000,1000001,1000002,5]",
        explanation:
          "We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.",
      },
      {
        id: 2,
        inputText:
          "list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]",
        outputText: "[0,1,1000000,1000001,1000002,1000003,1000004,6]",
        explanation:
          "The blue edges and nodes in the above figure indicate the result.",
      },
    ],
    tests: "[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6]]",
    answer:
      "[[0, 1, 2, 1000000, 1000001, 1000002, 5], [0, 1, 1000000, 1000001, 1000002, 1000003, 1000004, 6]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {number} a\n * @param {number} b\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeInBetween = function(list1, a, b, list2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1767,
    title: "Design Front Middle Back Queue",
    titleSlug: "design-front-middle-back-queue",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Linked List", "Design", "Queue", "Data Stream"],
    constaints:
      "<li><code>FrontMiddleBack()</code> Initializes the queue.</li> <li><code>void pushFront(int val)</code> Adds <code>val</code> to the <strong>front</strong> of the queue.</li> <li><code>void pushMiddle(int val)</code> Adds <code>val</code> to the <strong>middle</strong> of the queue.</li> <li><code>void pushBack(int val)</code> Adds <code>val</code> to the <strong>back</strong> of the queue.</li> <li><code>int popFront()</code> Removes the <strong>front</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li> <li><code>int popMiddle()</code> Removes the <strong>middle</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li> <li><code>int popBack()</code> Removes the <strong>back</strong> element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li> <li>Pushing <code>6</code> into the middle of <code>[1, 2, 3, 4, 5]</code> results in <code>[1, 2, <u>6</u>, 3, 4, 5]</code>.</li> <li>Popping the middle from <code>[1, 2, <u>3</u>, 4, 5, 6]</code> returns <code>3</code> and results in <code>[1, 2, 4, 5, 6]</code>.</li> <li><code>1 &lt;= val &lt;= 10<sup>9</sup></code></li> <li>At most\u00a0<code>1000</code>\u00a0calls will be made to\u00a0<code>pushFront</code>,\u00a0<code>pushMiddle</code>,\u00a0<code>pushBack</code>, <code>popFront</code>, <code>popMiddle</code>, and <code>popBack</code>.</li>",
    question:
      "<p>Design a queue that supports <code>push</code> and <code>pop</code> operations in the front, middle, and back.</p><p>Implement the <code>FrontMiddleBack</code> class:</p><p><strong>Notice</strong> that when there are <b>two</b> middle position choices, the operation is performed on the <strong>frontmost</strong> middle position choice. For example:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle", "pushMiddle", "popFront", "popMiddle", "popMiddle", "popBack", "popFront"]\n[[], [1], [2], [3], [4], [], [], [], [], []]',
        outputText: "[null, null, null, null, null, 1, 3, 4, 2, -1]",
        explanation:
          "FrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [",
      },
    ],
    tests:
      '[["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle", "pushMiddle", "popFront", "popMiddle", "popMiddle", "popBack", "popFront"]]',
    answer: "[[null, null, null, null, null, 1, 3, 4, 2, -1]]",
    code: "\nvar FrontMiddleBackQueue = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushFront = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushMiddle = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushBack = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popFront = function() {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popMiddle = function() {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popBack = function() {\n    \n};\n\n/** \n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * var obj = new FrontMiddleBackQueue()\n * obj.pushFront(val)\n * obj.pushMiddle(val)\n * obj.pushBack(val)\n * var param_4 = obj.popFront()\n * var param_5 = obj.popMiddle()\n * var param_6 = obj.popBack()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1775,
    title: "Design an Ordered Stream",
    titleSlug: "design-an-ordered-stream",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Design", "Data Stream"],
    constaints:
      "<li><code>OrderedStream(int n)</code> Constructs the stream to take <code>n</code> values.</li> <li><code>String[] insert(int idKey, String value)</code> Inserts the pair <code>(idKey, value)</code> into the stream, then returns the <strong>largest possible chunk</strong> of currently inserted values that appear next in the order.</li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= id &lt;= n</code></li> <li><code>value.length == 5</code></li> <li><code>value</code>\u00a0consists only of lowercase letters.</li> <li>Each call to <code>insert</code>\u00a0will have a unique <code>id.</code></li> <li>Exactly <code>n</code> calls will be made to <code>insert</code>.</li>",
    question:
      "<p>There is a stream of <code>n</code> <code>(idKey, value)</code> pairs arriving in an <strong>arbitrary</strong> order, where <code>idKey</code> is an integer between <code>1</code> and <code>n</code> and <code>value</code> is a string. No two pairs have the same <code>id</code>.</p><p>Design a stream that returns the values in <strong>increasing order of their IDs</strong> by returning a <strong>chunk</strong> (list) of values after each insertion. The concatenation of all the <strong>chunks</strong> should result in a list of the sorted values.</p><p>Implement the <code>OrderedStream</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["OrderedStream", "insert", "insert", "insert", "insert", "insert"]\n[[5], [3, "ccccc"], [1, "aaaaa"], [2, "bbbbb"], [5, "eeeee"], [4, "ddddd"]]',
        outputText:
          '[null, [], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]]',
        explanation:
          '// Note that the values ordered by ID is ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"].\nOrderedStream os = new OrderedStream(5);\nos.insert(3, "ccccc"); // Inserts (3, "ccccc"), returns [].\nos.insert(1, "aaaaa"); // Inserts (1, "aaaaa"), returns ["aaaaa"].\nos.insert(2, "bbbbb"); // Inserts (2, "bbbbb"), returns ["bbbbb", "ccccc"].\nos.insert(5, "eeeee"); // Inserts (5, "eeeee"), returns [].\nos.insert(4, "ddddd"); // Inserts (4, "ddddd"), returns ["ddddd", "eeeee"].\n// Concatentating all the chunks returned:\n// [] + ["aaaaa"] + ["bbbbb", "ccccc"] + [] + ["ddddd", "eeeee"] = ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"]\n// The resulting order is the same as the order above.',
      },
    ],
    tests:
      '[["OrderedStream", "insert", "insert", "insert", "insert", "insert"]]',
    answer:
      '[[null, [], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]]]',
    code: "/**\n * @param {number} n\n */\nvar OrderedStream = function(n) {\n    \n};\n\n/** \n * @param {number} idKey \n * @param {string} value\n * @return {string[]}\n */\nOrderedStream.prototype.insert = function(idKey, value) {\n    \n};\n\n/** \n * Your OrderedStream object will be instantiated and called as such:\n * var obj = new OrderedStream(n)\n * var param_1 = obj.insert(idKey,value)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1776,
    title: "Minimum Operations to Reduce X to Zero",
    titleSlug: "minimum-operations-to-reduce-x-to-zero",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum",
    ],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= x &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code> and an integer <code>x</code>. In one operation, you can either remove the leftmost or the rightmost element from the array <code>nums</code> and subtract its value from <code>x</code>. Note that this <strong>modifies</strong> the array for future operations.</p><p>Return <em>the <strong>minimum number</strong> of operations to reduce </em><code>x</code> <em>to <strong>exactly</strong></em> <code>0</code> <em>if it is possible</em><em>, otherwise, return </em><code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,4,2,3], x = 5",
        outputText: "2",
        explanation:
          "The optimal solution is to remove the last two elements to reduce x to zero.",
      },
      {
        id: 2,
        inputText: "nums = [5,6,7,8,9], x = 4",
        outputText: "-1",
        explanation: "",
      },
      {
        id: 3,
        inputText: "nums = [3,2,20,1,1,3], x = 10",
        outputText: "5",
        explanation:
          "The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.",
      },
    ],
    tests: "[[1, 1, 4, 2, 3], [5, 6, 7, 8, 9], [3, 2, 20, 1, 1, 3]]",
    answer: "[2, -1, 5]",
    code: "/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar minOperations = function(nums, x) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1777,
    title: "Determine if Two Strings Are Close",
    titleSlug: "determine-if-two-strings-are-close",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sorting", "Counting"],
    constaints:
      "<li>Operation 1: Swap any two <strong>existing</strong> characters.\n\n\t<ul>\n<li>For example, <code>a<u>b</u>cd<u>e</u> -&gt; a<u>e</u>cd<u>b</u></code></li>\n</ul>\n</li> <li>For example, <code>a<u>b</u>cd<u>e</u> -&gt; a<u>e</u>cd<u>b</u></code></li> <li>Operation 2: Transform <strong>every</strong> occurrence of one <strong>existing</strong> character into another <strong>existing</strong> character, and do the same with the other character.\n\t<ul>\n<li>For example, <code><u>aa</u>c<u>abb</u> -&gt; <u>bb</u>c<u>baa</u></code> (all <code>a</code>'s turn into <code>b</code>'s, and all <code>b</code>'s turn into <code>a</code>'s)</li>\n</ul>\n</li> <li>For example, <code><u>aa</u>c<u>abb</u> -&gt; <u>bb</u>c<u>baa</u></code> (all <code>a</code>'s turn into <code>b</code>'s, and all <code>b</code>'s turn into <code>a</code>'s)</li> <li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li> <li><code>word1</code> and <code>word2</code> contain only lowercase English letters.</li>",
    question:
      "<p>Two strings are considered <strong>close</strong> if you can attain one from the other using the following operations:</p><p>You can use the operations on either string as many times as necessary.</p><p>Given two strings, <code>word1</code> and <code>word2</code>, return <code>true</code><em> if </em><code>word1</code><em> and </em><code>word2</code><em> are <strong>close</strong>, and </em><code>false</code><em> otherwise.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 'word1 = "abc", word2 = "bca"',
        outputText: "true",
        explanation:
          'You can attain word2 from word1 in 2 operations.\nApply Operation 1: "a',
      },
      {
        id: 2,
        inputText: 'word1 = "a", word2 = "aa"',
        outputText: "false",
        explanation:
          "It is impossible to attain word2 from word1, or vice versa, in any number of operations.",
      },
      {
        id: 3,
        inputText: 'word1 = "cabbba", word2 = "abbccc"',
        outputText: "true",
        explanation:
          'You can attain word2 from word1 in 3 operations.\nApply Operation 1: "ca',
      },
    ],
    tests: '["abc", "a", "cabbba"]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} word1\n * @param {string} word2\n * @return {boolean}\n */\nvar closeStrings = function(word1, word2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1781,
    title: "Check If Two String Arrays are Equivalent",
    titleSlug: "check-if-two-string-arrays-are-equivalent",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "String"],
    constaints:
      "<li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= word1[i].length, word2[i].length &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 10<sup>3</sup></code></li> <li><code>word1[i]</code> and <code>word2[i]</code> consist of lowercase letters.</li>",
    question:
      "<p>Given two string arrays <code>word1</code> and <code>word2</code>, return<em> </em><code>true</code><em> if the two arrays <strong>represent</strong> the same string, and </em><code>false</code><em> otherwise.</em></p><p>A string is <strong>represented</strong> by an array if the array elements concatenated <strong>in order</strong> forms the string.</p>",
    examples: [
      {
        id: 1,
        inputText: 'word1 = ["ab", "c"], word2 = ["a", "bc"]',
        outputText: "true",
        explanation:
          'word1 represents string "ab" + "c" -> "abc"\nword2 represents string "a" + "bc" -> "abc"\nThe strings are the same, so return true.',
      },
      {
        id: 2,
        inputText: 'word1 = ["a", "cb"], word2 = ["ab", "c"]',
        outputText: "false",
        explanation: "",
      },
      {
        id: 3,
        inputText: 'word1  = ["abc", "d", "defg"], word2 = ["abcddefg"]',
        outputText: "true",
        explanation: "",
      },
    ],
    tests: '[["ab", "c"], ["a", "cb"], ["abc", "d", "defg"]]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string[]} word1\n * @param {string[]} word2\n * @return {boolean}\n */\nvar arrayStringsAreEqual = function(word1, word2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1782,
    title: "Smallest String With A Given Numeric Value",
    titleSlug: "smallest-string-with-a-given-numeric-value",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Greedy"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>n &lt;= k &lt;= 26 * n</code></li>",
    question:
      '<p>The <strong>numeric value</strong> of a <strong>lowercase character</strong> is defined as its position <code>(1-indexed)</code> in the alphabet, so the numeric value of <code>a</code> is <code>1</code>, the numeric value of <code>b</code> is <code>2</code>, the numeric value of <code>c</code> is <code>3</code>, and so on.</p><p>The <strong>numeric value</strong> of a <strong>string</strong> consisting of lowercase characters is defined as the sum of its characters\' numeric values. For example, the numeric value of the string <code>"abe"</code> is equal to <code>1 + 2 + 5 = 8</code>.</p><p>You are given two integers <code>n</code> and <code>k</code>. Return <em>the <strong>lexicographically smallest string</strong> with <strong>length</strong> equal to <code>n</code> and <strong>numeric value</strong> equal to <code>k</code>.</em></p><p>Note that a string <code>x</code> is lexicographically smaller than string <code>y</code> if <code>x</code> comes before <code>y</code> in dictionary order, that is, either <code>x</code> is a prefix of <code>y</code>, or if <code>i</code> is the first position such that <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order.</p>',
    examples: [
      {
        id: 1,
        inputText: "n = 3, k = 27",
        outputText: '"aay"',
        explanation:
          "The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.",
      },
      {
        id: 2,
        inputText: "n = 5, k = 73",
        outputText: '"aaszz"',
        explanation: "",
      },
    ],
    tests: "[3, 5]",
    answer: '["aay", "aaszz"]',
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getSmallestString = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1786,
    title: "Count the Number of Consistent Strings",
    titleSlug: "count-the-number-of-consistent-strings",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= allowed.length &lt;=<sup> </sup>26</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li>The characters in <code>allowed</code> are <strong>distinct</strong>.</li> <li><code>words[i]</code> and <code>allowed</code> contain only lowercase English letters.</li>",
    question:
      "<p>You are given a string <code>allowed</code> consisting of <strong>distinct</strong> characters and an array of strings <code>words</code>. A string is <strong>consistent </strong>if all characters in the string appear in the string <code>allowed</code>.</p><p>Return<em> the number of <strong>consistent</strong> strings in the array </em><code>words</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'allowed = "ab", words = ["ad","bd","aaab","baa","badab"]',
        outputText: "2",
        explanation:
          "Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.",
      },
      {
        id: 2,
        inputText:
          'allowed = "abc", words = ["a","b","c","ab","ac","bc","abc"]',
        outputText: "7",
        explanation: "All strings are consistent.",
      },
      {
        id: 3,
        inputText:
          'allowed = "cad", words = ["cc","acd","b","ba","bac","bad","ac","d"]',
        outputText: "4",
        explanation: 'Strings "cc", "acd", "ac", and "d" are consistent.',
      },
    ],
    tests: '["ab", "abc", "cad"]',
    answer: "[2, 7, 4]",
    code: "/**\n * @param {string} allowed\n * @param {string[]} words\n * @return {number}\n */\nvar countConsistentStrings = function(allowed, words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1788,
    title: "Stone Game VI",
    titleSlug: "stone-game-vi",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Math",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Game Theory",
    ],
    constaints:
      "<li>If Alice wins, return <code>1</code>.</li> <li>If Bob wins, return <code>-1</code>.</li> <li>If the game results in a draw, return <code>0</code>.</li> <li><code>n == aliceValues.length == bobValues.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= aliceValues[i], bobValues[i] &lt;= 100</code></li>",
    question:
      "<p>Alice and Bob take turns playing a game, with Alice starting first.</p><p>There are <code>n</code> stones in a pile. On each player's turn, they can <strong>remove</strong> a stone from the pile and receive points based on the stone's value. Alice and Bob may <strong>value the stones differently</strong>.</p><p>You are given two integer arrays of length <code>n</code>, <code>aliceValues</code> and <code>bobValues</code>. Each <code>aliceValues[i]</code> and <code>bobValues[i]</code> represents how Alice and Bob, respectively, value the <code>i<sup>th</sup></code> stone.</p><p>The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play <strong>optimally</strong>.\u00a0Both players know the other's values.</p><p>Determine the result of the game, and:</p>",
    examples: [
      {
        id: 1,
        inputText: "aliceValues = [1,3], bobValues = [2,1]",
        outputText: "1",
        explanation:
          "If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins.",
      },
      {
        id: 2,
        inputText: "aliceValues = [1,2], bobValues = [3,1]",
        outputText: "0",
        explanation:
          "If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw.",
      },
      {
        id: 3,
        inputText: "aliceValues = [2,4,3], bobValues = [1,6,7]",
        outputText: "-1",
        explanation:
          "Regardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins.",
      },
    ],
    tests: "[[1, 3], [1, 2], [2, 4, 3]]",
    answer: "[1, 0, -1]",
    code: "/**\n * @param {number[]} aliceValues\n * @param {number[]} bobValues\n * @return {number}\n */\nvar stoneGameVI = function(aliceValues, bobValues) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1791,
    title: "Richest Customer Wealth",
    titleSlug: "richest-customer-wealth",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix"],
    constaints:
      "<li><code>m ==\u00a0accounts.length</code></li> <li><code>n ==\u00a0accounts[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li>",
    question:
      "<p>You are given an <code>m x n</code> integer grid <code>accounts</code> where <code>accounts[i][j]</code> is the amount of money the <code>i\u200b\u200b\u200b\u200b\u200b<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b</code> customer has in the <code>j\u200b\u200b\u200b\u200b\u200b<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b bank. Return<em> the <strong>wealth</strong> that the richest customer has.</em></p><p>A customer's <strong>wealth</strong> is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum <strong>wealth</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "accounts = [[1,2,3],[3,2,1]]",
        outputText: "6",
        explanation: ":",
      },
      {
        id: 2,
        inputText: "accounts = [[1,5],[7,3],[3,5]]",
        outputText: "10",
        explanation:
          ": \n1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10.",
      },
      {
        id: 3,
        inputText: "accounts = [[2,8,7],[7,1,3],[1,9,5]]",
        outputText: "17",
        explanation: "",
      },
    ],
    tests:
      "[[[1, 2, 3], [3, 2, 1]], [[1, 5], [7, 3], [3, 5]], [[2, 8, 7], [7, 1, 3], [1, 9, 5]]]",
    answer: "[6, 10, 17]",
    code: "/**\n * @param {number[][]} accounts\n * @return {number}\n */\nvar maximumWealth = function(accounts) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1792,
    title: "Find the Most Competitive Subsequence",
    titleSlug: "find-the-most-competitive-subsequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Stack", "Greedy", "Monotonic Stack"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li>",
    question:
      "<p>Given an integer array <code>nums</code> and a positive integer <code>k</code>, return <em>the most<strong> competitive</strong> subsequence of </em><code>nums</code> <em>of size </em><code>k</code>.</p><p>An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.</p><p>We define that a subsequence <code>a</code> is more <strong>competitive</strong> than a subsequence <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, subsequence <code>a</code> has a number <strong>less</strong> than the corresponding number in <code>b</code>. For example, <code>[1,3,4]</code> is more competitive than <code>[1,3,5]</code> because the first position they differ is at the final number, and <code>4</code> is less than <code>5</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,5,2,6], k = 2",
        outputText: "[2,6]",
        explanation:
          "Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.",
      },
      {
        id: 2,
        inputText: "nums = [2,4,3,3,5,4,9,6], k = 4",
        outputText: "[2,3,3,4]",
        explanation: "",
      },
    ],
    tests: "[[3, 5, 2, 6], [2, 4, 3, 3, 5, 4, 9, 6]]",
    answer: "[[2, 6], [2, 3, 3, 4]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar mostCompetitive = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1794,
    title: "Minimize Deviation in Array",
    titleSlug: "minimize-deviation-in-array",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Heap (Priority Queue)", "Ordered Set"],
    constaints:
      '<li>If the element is <strong>even</strong>, <strong>divide</strong> it by <code>2</code>.\n\n\t<ul>\n<li>For example, if the array is <code>[1,2,3,4]</code>, then you can do this operation on the last element, and the array will be <code>[1,2,3,<u>2</u>].</code></li>\n</ul>\n</li> <li>For example, if the array is <code>[1,2,3,4]</code>, then you can do this operation on the last element, and the array will be <code>[1,2,3,<u>2</u>].</code></li> <li>If the element is <strong>odd</strong>, <strong>multiply</strong> it by <code>2</code>.\n\t<ul>\n<li>For example, if the array is <code>[1,2,3,4]</code>, then you can do this operation on the first element, and the array will be <code>[<u>2</u>,2,3,4].</code></li>\n</ul>\n</li> <li>For example, if the array is <code>[1,2,3,4]</code>, then you can do this operation on the first element, and the array will be <code>[<u>2</u>,2,3,4].</code></li> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n &lt;= 5 * 10<sup><span style="font-size: 10.8333px;">4</span></sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>',
    question:
      "<p>You are given an array <code>nums</code> of <code>n</code> positive integers.</p><p>You can perform two types of operations on any element of the array any number of times:</p><p>The <strong>deviation</strong> of the array is the <strong>maximum difference</strong> between any two elements in the array.</p><p>Return <em>the <strong>minimum deviation</strong> the array can have after performing some number of operations.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4]",
        outputText: "1",
        explanation: "You can transform the array to [1,2,3,",
      },
      {
        id: 2,
        inputText: "nums = [4,1,5,20,3]",
        outputText: "3",
        explanation: "You can transform the array after two operations to [4,",
      },
      { id: 3, inputText: "nums = [2,10,8]", outputText: "3", explanation: "" },
    ],
    tests: "[[1, 2, 3, 4], [4, 1, 5, 20, 3], [2, 10, 8]]",
    answer: "[1, 3, 3]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumDeviation = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1798,
    title: "Max Number of K-Sum Pairs",
    titleSlug: "max-number-of-k-sum-pairs",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Two Pointers", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p><p>In one operation, you can pick two numbers from the array whose sum equals <code>k</code> and remove them from the array.</p><p>Return <em>the maximum number of operations you can perform on the array</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4], k = 5",
        outputText: "2",
        explanation:
          "Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.",
      },
      {
        id: 2,
        inputText: "nums = [3,1,3,4,3], k = 6",
        outputText: "1",
        explanation:
          "Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.",
      },
    ],
    tests: "[[1, 2, 3, 4], [3, 1, 3, 4, 3]]",
    answer: "[2, 1]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxOperations = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1806,
    title: "Count of Matches in Tournament",
    titleSlug: "count-of-matches-in-tournament",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Simulation"],
    constaints:
      "<li>If the current number of teams is <strong>even</strong>, each team gets paired with another team. A total of <code>n / 2</code> matches are played, and <code>n / 2</code> teams advance to the next round.</li> <li>If the current number of teams is <strong>odd</strong>, one team randomly advances in the tournament, and the rest gets paired. A total of <code>(n - 1) / 2</code> matches are played, and <code>(n - 1) / 2 + 1</code> teams advance to the next round.</li> <li><code>1 &lt;= n &lt;= 200</code></li>",
    question:
      "<p>You are given an integer <code>n</code>, the number of teams in a tournament that has strange rules:</p><p>Return <em>the number of matches played in the tournament until a winner is decided.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "n = 7",
        outputText: "6",
        explanation:
          "Details of the tournament: \n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 3 + 2 + 1 = 6.",
      },
      {
        id: 2,
        inputText: "n = 14",
        outputText: "13",
        explanation:
          "Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 7 + 3 + 2 + 1 = 13.",
      },
    ],
    tests: "[7, 14]",
    answer: "[6, 13]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar numberOfMatches = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1812,
    title: "Reformat Phone Number",
    titleSlug: "reformat-phone-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>2 digits: A single block of length 2.</li> <li>3 digits: A single block of length 3.</li> <li>4 digits: Two blocks of length 2 each.</li> <li><code>2 &lt;= number.length &lt;= 100</code></li> <li><code>number</code> consists of digits and the characters <code>'-'</code> and <code>' '</code>.</li> <li>There are at least <strong>two</strong> digits in <code>number</code>.</li>",
    question:
      "<p>You are given a phone number as a string <code>number</code>. <code>number</code> consists of digits, spaces <code>' '</code>, and/or dashes <code>'-'</code>.</p><p>You would like to reformat the phone number in a certain manner. Firstly, <strong>remove</strong> all spaces and dashes. Then, <strong>group</strong> the digits from left to right into blocks of length 3 <strong>until</strong> there are 4 or fewer digits. The final digits are then grouped as follows:</p><p>The blocks are then joined by dashes. Notice that the reformatting process should <strong>never</strong> produce any blocks of length 1 and produce <strong>at most</strong> two blocks of length 2.</p><p>Return <em>the phone number after formatting.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 'number = "1-23-45 6"',
        outputText: '"123-456"',
        explanation:
          'The digits are "123456".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is "123".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is "456".\nJoining the blocks gives "123-456".',
      },
      {
        id: 2,
        inputText: 'number = "123 4-567"',
        outputText: '"123-45-67"',
        explanation:
          'The digits are "1234567".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is "123".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are "45" and "67".\nJoining the blocks gives "123-45-67".',
      },
      {
        id: 3,
        inputText: 'number = "123 4-5678"',
        outputText: '"123-456-78"',
        explanation:
          'The digits are "12345678".\nStep 1: The 1st block is "123".\nStep 2: The 2nd block is "456".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is "78".\nJoining the blocks gives "123-456-78".',
      },
    ],
    tests: '["1-23-45 6", "123 4-567", "123 4-5678"]',
    answer: '["123-456", "123-45-67", "123-456-78"]',
    code: "/**\n * @param {string} number\n * @return {string}\n */\nvar reformatNumber = function(number) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1813,
    title: "Maximum Erasure Value",
    titleSlug: "maximum-erasure-value",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      '<p>You are given an array of positive integers <code>nums</code> and want to erase a subarray containing\u00a0<strong>unique elements</strong>. The <strong>score</strong> you get by erasing the subarray is equal to the <strong>sum</strong> of its elements.</p><p>Return <em>the <strong>maximum score</strong> you can get by erasing <strong>exactly one</strong> subarray.</em></p><p>An array <code>b</code> is called to be a <span class="tex-font-style-it">subarray</span> of <code>a</code> if it forms a contiguous subsequence of <code>a</code>, that is, if it is equal to <code>a[l],a[l+1],...,a[r]</code> for some <code>(l,r)</code>.</p>',
    examples: [
      {
        id: 1,
        inputText: "nums = [4,2,4,5,6]",
        outputText: "17",
        explanation: "The optimal subarray here is [2,4,5,6].",
      },
      {
        id: 2,
        inputText: "nums = [5,2,1,2,5,2,1,2,5]",
        outputText: "8",
        explanation: "The optimal subarray here is [5,2,1] or [1,2,5].",
      },
    ],
    tests: "[[4, 2, 4, 5, 6], [5, 2, 1, 2, 5, 2, 1, 2, 5]]",
    answer: "[17, 8]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumUniqueSubarray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1818,
    title: "Maximum Score From Removing Substrings",
    titleSlug: "maximum-score-from-removing-substrings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Greedy"],
    constaints:
      '<li>Remove substring <code>"ab"</code> and gain <code>x</code> points.\n\n\t<ul>\n<li>For example, when removing <code>"ab"</code> from <code>"c<u>ab</u>xbae"</code> it becomes <code>"cxbae"</code>.</li>\n</ul>\n</li> <li>For example, when removing <code>"ab"</code> from <code>"c<u>ab</u>xbae"</code> it becomes <code>"cxbae"</code>.</li> <li>Remove substring <code>"ba"</code> and gain <code>y</code> points.\n\t<ul>\n<li>For example, when removing <code>"ba"</code> from <code>"cabx<u>ba</u>e"</code> it becomes <code>"cabxe"</code>.</li>\n</ul>\n</li> <li>For example, when removing <code>"ba"</code> from <code>"cabx<u>ba</u>e"</code> it becomes <code>"cabxe"</code>.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= x, y &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li>',
    question:
      "<p>You are given a string <code>s</code> and two integers <code>x</code> and <code>y</code>. You can perform two types of operations any number of times.</p><p>Return <em>the maximum points you can gain after applying the above operations on</em> <code>s</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "cdbcbbaaabab", x = 4, y = 5',
        outputText: "19",
        explanation: '- Remove the "ba" underlined in "cdbcbbaaa',
      },
      {
        id: 2,
        inputText: 's = "aabbaaxybbaabb", x = 5, y = 4',
        outputText: "20",
        explanation: "",
      },
    ],
    tests: '["cdbcbbaaabab", "aabbaaxybbaabb"]',
    answer: "[19, 20]",
    code: "/**\n * @param {string} s\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar maximumGain = function(s, x, y) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1819,
    title: "Construct the Lexicographically Largest Valid Sequence",
    titleSlug: "construct-the-lexicographically-largest-valid-sequence",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking"],
    constaints:
      "<li>The integer <code>1</code> occurs once in the sequence.</li> <li>Each integer between <code>2</code> and <code>n</code> occurs twice in the sequence.</li> <li>For every integer <code>i</code> between <code>2</code> and <code>n</code>, the <strong>distance</strong> between the two occurrences of <code>i</code> is exactly <code>i</code>.</li> <li><code>1 &lt;= n &lt;= 20</code></li>",
    question:
      "<p>Given an integer <code>n</code>, find a sequence that satisfies all of the following:</p><p>The <strong>distance</strong> between two numbers on the sequence, <code>a[i]</code> and <code>a[j]</code>, is the absolute difference of their indices, <code>|j - i|</code>.</p><p>Return <em>the <strong>lexicographically largest</strong> sequence</em><em>. It is guaranteed that under the given constraints, there is always a solution. </em></p><p>A sequence <code>a</code> is lexicographically larger than a sequence <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, sequence <code>a</code> has a number greater than the corresponding number in <code>b</code>. For example, <code>[0,1,9,0]</code> is lexicographically larger than <code>[0,1,5,6]</code> because the first position they differ is at the third number, and <code>9</code> is greater than <code>5</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3",
        outputText: "[3,1,2,3,2]",
        explanation:
          "[2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.",
      },
      {
        id: 2,
        inputText: "n = 5",
        outputText: "[5,3,1,4,3,5,2,4,2]",
        explanation: "",
      },
    ],
    tests: "[3, 5]",
    answer: "[[3, 1, 2, 3, 2], [5, 3, 1, 4, 3, 5, 2, 4, 2]]",
    code: "/**\n * @param {number} n\n * @return {number[]}\n */\nvar constructDistancedSequence = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1823,
    title: "Determine if String Halves Are Alike",
    titleSlug: "determine-if-string-halves-are-alike",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Counting"],
    constaints:
      "<li><code>2 &lt;= s.length &lt;= 1000</code></li> <li><code>s.length</code> is even.</li> <li><code>s</code> consists of <strong>uppercase and lowercase</strong> letters.</li>",
    question:
      "<p>You are given a string <code>s</code> of even length. Split this string into two halves of equal lengths, and let <code>a</code> be the first half and <code>b</code> be the second half.</p><p>Two strings are <strong>alike</strong> if they have the same number of vowels (<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, <code>'u'</code>, <code>'A'</code>, <code>'E'</code>, <code>'I'</code>, <code>'O'</code>, <code>'U'</code>). Notice that <code>s</code> contains uppercase and lowercase letters.</p><p>Return <code>true</code><em> if </em><code>a</code><em> and </em><code>b</code><em> are <strong>alike</strong></em>. Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "book"',
        outputText: "true",
        explanation: 'a = "b',
      },
      {
        id: 2,
        inputText: 's = "textbook"',
        outputText: "false",
        explanation: 'a = "t',
      },
    ],
    tests: '["book", "textbook"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar halvesAreAlike = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1824,
    title: "Maximum Number of Eaten Apples",
    titleSlug: "maximum-number-of-eaten-apples",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Heap (Priority Queue)"],
    constaints:
      "<li><code>n == apples.length == days.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= apples[i], days[i] &lt;= 2 * 10<sup>4</sup></code></li> <li><code>days[i] = 0</code> if and only if <code>apples[i] = 0</code>.</li>",
    question:
      "<p>There is a special kind of apple tree that grows apples every day for <code>n</code> days. On the <code>i<sup>th</sup></code> day, the tree grows <code>apples[i]</code> apples that will rot after <code>days[i]</code> days, that is on day <code>i + days[i]</code> the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by <code>apples[i] == 0</code> and <code>days[i] == 0</code>.</p><p>You decided to eat <strong>at most</strong> one apple a day (to keep the doctors away). Note that you can keep eating after the first <code>n</code> days.</p><p>Given two integer arrays <code>days</code> and <code>apples</code> of length <code>n</code>, return <em>the maximum number of apples you can eat.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "apples = [1,2,3,5,2], days = [3,2,1,4,2]",
        outputText: "7",
        explanation:
          "You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day.",
      },
      {
        id: 2,
        inputText: "apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]",
        outputText: "5",
        explanation:
          "You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day.",
      },
    ],
    tests: "[[1, 2, 3, 5, 2], [3, 0, 0, 0, 0, 2]]",
    answer: "[7, 5]",
    code: "/**\n * @param {number[]} apples\n * @param {number[]} days\n * @return {number}\n */\nvar eatenApples = function(apples, days) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1829,
    title: "Maximum Units on a Truck",
    titleSlug: "maximum-units-on-a-truck",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li><code>numberOfBoxes<sub>i</sub></code> is the number of boxes of type <code>i</code>.</li> <li><code>numberOfUnitsPerBox<sub>i</sub></code><sub> </sub>is the number of units in each box of the type <code>i</code>.</li> <li><code>1 &lt;= boxTypes.length &lt;= 1000</code></li> <li><code>1 &lt;= numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub> &lt;= 1000</code></li> <li><code>1 &lt;= truckSize &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>You are assigned to put some amount of boxes onto <strong>one truck</strong>. You are given a 2D array <code>boxTypes</code>, where <code>boxTypes[i] = [numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub>]</code>:</p><p>You are also given an integer <code>truckSize</code>, which is the <strong>maximum</strong> number of <strong>boxes</strong> that can be put on the truck. You can choose any boxes to put on the truck as long as the number\u00a0of boxes does not exceed <code>truckSize</code>.</p><p>Return <em>the <strong>maximum</strong> total number of <strong>units</strong> that can be put on the truck.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4",
        outputText: "8",
        explanation:
          "There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.",
      },
      {
        id: 2,
        inputText: "boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10",
        outputText: "91",
        explanation: "",
      },
    ],
    tests: "[[[1, 3], [2, 2], [3, 1]], [[5, 10], [2, 5], [4, 7], [3, 9]]]",
    answer: "[8, 91]",
    code: "/**\n * @param {number[][]} boxTypes\n * @param {number} truckSize\n * @return {number}\n */\nvar maximumUnits = function(boxTypes, truckSize) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1830,
    title: "Count Good Meals",
    titleSlug: "count-good-meals",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>1 &lt;= deliciousness.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= deliciousness[i] &lt;= 2<sup>20</sup></code></li>",
    question:
      "<p>A <strong>good meal</strong> is a meal that contains <strong>exactly two different food items</strong> with a sum of deliciousness equal to a power of two.</p><p>You can pick <strong>any</strong> two different foods to make a good meal.</p><p>Given an array of integers <code>deliciousness</code> where <code>deliciousness[i]</code> is the deliciousness of the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b</code>\u200b\u200b\u200b\u200b item of food, return <em>the number of different <strong>good meals</strong> you can make from this list modulo</em> <code>10<sup>9</sup> + 7</code>.</p><p>Note that items with different indices are considered different even if they have the same deliciousness value.</p>",
    examples: [
      {
        id: 1,
        inputText: "deliciousness = [1,3,5,7,9]",
        outputText: "4",
        explanation:
          "The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2.",
      },
      {
        id: 2,
        inputText: "deliciousness = [1,1,1,3,3,3,7]",
        outputText: "15",
        explanation:
          "The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.",
      },
    ],
    tests: "[[1, 3, 5, 7, 9], [1, 1, 1, 3, 3, 3, 7]]",
    answer: "[4, 15]",
    code: "/**\n * @param {number[]} deliciousness\n * @return {number}\n */\nvar countPairs = function(deliciousness) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1834,
    title: "Minimum Number of People to Teach",
    titleSlug: "minimum-number-of-people-to-teach",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Greedy"],
    constaints:
      "<li>There are <code>n</code> languages numbered <code>1</code> through <code>n</code>,</li> <li><code>languages[i]</code> is the set of languages the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b user knows, and</li> <li><code>friendships[i] = [u<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>\u200b\u200b\u200b, v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>]</code> denotes a friendship between the users <code>u<sup>\u200b\u200b\u200b\u200b\u200b</sup><sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub></code>\u200b\u200b\u200b\u200b\u200b and <code>v<sub>i</sub></code>.</li> <li><code>2 &lt;= n &lt;= 500</code></li> <li><code>languages.length == m</code></li> <li><code>1 &lt;= m &lt;= 500</code></li> <li><code>1 &lt;= languages[i].length &lt;= n</code></li> <li><code>1 &lt;= languages[i][j] &lt;= n</code></li> <li><code>1 &lt;= u<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt; v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt;= languages.length</code></li> <li><code>1 &lt;= friendships.length &lt;= 500</code></li> <li>All tuples <code>(u<sub>\u200b\u200b\u200b\u200b\u200bi, </sub>v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>)</code> are unique</li> <li><code>languages[i]</code> contains only unique values</li>",
    question:
      '<p>On a social network consisting of <code>m</code> users and some friendships between users, two users can communicate with each other if they know a common language.</p><p>You are given an integer <code>n</code>, an array <code>languages</code>, and an array <code>friendships</code> where:</p><p>You can choose <strong>one</strong> language and teach it to some users so that all friends can communicate with each other. Return <i data-stringify-type="italic">the</i> <i><strong>minimum</strong> </i><i data-stringify-type="italic">number of users you need to teach.</i></p>',
    examples: [
      {
        id: 1,
        inputText:
          "n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]",
        outputText: "1",
        explanation:
          "You can either teach user 1 the second language or user 2 the first language.",
      },
      {
        id: 2,
        inputText:
          "n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]",
        outputText: "2",
        explanation:
          "Teach the third language to users 1 and 3, yielding two users to teach.",
      },
    ],
    tests: "[2, 3]",
    answer: "[1, 2]",
    code: "/**\n * @param {number} n\n * @param {number[][]} languages\n * @param {number[][]} friendships\n * @return {number}\n */\nvar minimumTeachings = function(n, languages, friendships) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1839,
    title: "Decode XORed Array",
    titleSlug: "decode-xored-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Bit Manipulation"],
    constaints:
      "<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>encoded.length == n - 1</code></li> <li><code>0 &lt;= encoded[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= first &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>There is a <strong>hidden</strong> integer array <code>arr</code> that consists of <code>n</code> non-negative integers.</p><p>It was encoded into another integer array <code>encoded</code> of length <code>n - 1</code>, such that <code>encoded[i] = arr[i] XOR arr[i + 1]</code>. For example, if <code>arr = [1,0,2,1]</code>, then <code>encoded = [1,2,3]</code>.</p><p>You are given the <code>encoded</code> array. You are also given an integer <code>first</code>, that is the first element of <code>arr</code>, i.e. <code>arr[0]</code>.</p><p>Return <em>the original array</em> <code>arr</code>. It can be proved that the answer exists and is unique.</p>",
    examples: [
      {
        id: 1,
        inputText: "encoded = [1,2,3], first = 1",
        outputText: "[1,0,2,1]",
        explanation:
          "If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]",
      },
      {
        id: 2,
        inputText: "encoded = [6,2,7,3], first = 4",
        outputText: "[4,2,0,7,4]",
        explanation: "",
      },
    ],
    tests: "[[1, 2, 3], [6, 2, 7, 3]]",
    answer: "[[1, 0, 2, 1], [4, 2, 0, 7, 4]]",
    code: "/**\n * @param {number[]} encoded\n * @param {number} first\n * @return {number[]}\n */\nvar decode = function(encoded, first) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1843,
    title: "Number Of Rectangles That Can Form The Largest Square",
    titleSlug: "number-of-rectangles-that-can-form-the-largest-square",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= rectangles.length &lt;= 1000</code></li> <li><code>rectangles[i].length == 2</code></li> <li><code>1 &lt;= l<sub>i</sub>, w<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>l<sub>i</sub> != w<sub>i</sub></code></li>",
    question:
      "<p>You are given an array <code>rectangles</code> where <code>rectangles[i] = [l<sub>i</sub>, w<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> rectangle of length <code>l<sub>i</sub></code> and width <code>w<sub>i</sub></code>.</p><p>You can cut the <code>i<sup>th</sup></code> rectangle to form a square with a side length of <code>k</code> if both <code>k &lt;= l<sub>i</sub></code> and <code>k &lt;= w<sub>i</sub></code>. For example, if you have a rectangle <code>[4,6]</code>, you can cut it to get a square with a side length of at most <code>4</code>.</p><p>Let <code>maxLen</code> be the side length of the <strong>largest</strong> square you can obtain from any of the given rectangles.</p><p>Return <em>the <strong>number</strong> of rectangles that can make a square with a side length of </em><code>maxLen</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "rectangles = [[5,8],[3,9],[5,12],[16,5]]",
        outputText: "3",
        explanation:
          "The largest squares you can get from each rectangle are of lengths [5,3,5,5].\r\nThe largest possible square is of length 5, and you can get it out of 3 rectangles.",
      },
      {
        id: 2,
        inputText: "rectangles = [[2,3],[3,7],[4,3],[3,7]]",
        outputText: "3",
        explanation: "",
      },
    ],
    tests:
      "[[[5, 8], [3, 9], [5, 12], [16, 5]], [[2, 3], [3, 7], [4, 3], [3, 7]]]",
    answer: "[3, 3]",
    code: "/**\n * @param {number[][]} rectangles\n * @return {number}\n */\nvar countGoodRectangles = function(rectangles) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1844,
    title: "Maximum Number of Balls in a Box",
    titleSlug: "maximum-number-of-balls-in-a-box",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "Math", "Counting"],
    constaints:
      "<li><code>1 &lt;= lowLimit &lt;= highLimit &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are working in a ball factory where you have <code>n</code> balls numbered from <code>lowLimit</code> up to <code>highLimit</code> <strong>inclusive</strong> (i.e., <code>n == highLimit - lowLimit + 1</code>), and an infinite number of boxes numbered from <code>1</code> to <code>infinity</code>.</p><p>Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number <code>321</code> will be put in the box number <code>3 + 2 + 1 = 6</code> and the ball number <code>10</code> will be put in the box number <code>1 + 0 = 1</code>.</p><p>Given two integers <code>lowLimit</code> and <code>highLimit</code>, return<em> the number of balls in the box with the most balls.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "lowLimit = 1, highLimit = 10",
        outputText: "2",
        explanation:
          "Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls.",
      },
      {
        id: 2,
        inputText: "lowLimit = 5, highLimit = 15",
        outputText: "2",
        explanation:
          "Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.",
      },
      {
        id: 3,
        inputText: "lowLimit = 19, highLimit = 28",
        outputText: "2",
        explanation:
          "Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls.",
      },
    ],
    tests: "[1, 5, 19]",
    answer: "[2, 2, 2]",
    code: "/**\n * @param {number} lowLimit\n * @param {number} highLimit\n * @return {number}\n */\nvar countBalls = function(lowLimit, highLimit) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1845,
    title: "Largest Submatrix With Rearrangements",
    titleSlug: "largest-submatrix-with-rearrangements",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting", "Matrix"],
    constaints:
      "<li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>matrix[i][j]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>You are given a binary matrix <code>matrix</code> of size <code>m x n</code>, and you are allowed to rearrange the <strong>columns</strong> of the <code>matrix</code> in any order.</p><p>Return <em>the area of the largest submatrix within </em><code>matrix</code><em> where <strong>every</strong> element of the submatrix is </em><code>1</code><em> after reordering the columns optimally.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[0,0,1],[1,1,1],[1,0,1]]",
        outputText: "4",
        explanation:
          "You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4.",
      },
      {
        id: 2,
        inputText: "matrix = [[1,0,1,0,1]]",
        outputText: "3",
        explanation:
          "You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3.",
      },
      {
        id: 3,
        inputText: "matrix = [[1,1,0],[1,0,1]]",
        outputText: "2",
        explanation:
          "Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.",
      },
    ],
    tests:
      "[[[0, 0, 1], [1, 1, 1], [1, 0, 1]], [[1, 0, 1, 0, 1]], [[1, 1, 0], [1, 0, 1]]]",
    answer: "[4, 3, 2]",
    code: "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar largestSubmatrix = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1848,
    title: "Sum of Unique Elements",
    titleSlug: "sum-of-unique-elements",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Counting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>You are given an integer array <code>nums</code>. The unique elements of an array are the elements that appear <strong>exactly once</strong> in the array.</p><p>Return <em>the <strong>sum</strong> of all the unique elements of </em><code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,2]",
        outputText: "4",
        explanation: "The unique elements are [1,3], and the sum is 4.",
      },
      {
        id: 2,
        inputText: "nums = [1,1,1,1,1]",
        outputText: "0",
        explanation: "There are no unique elements, and the sum is 0.",
      },
      {
        id: 3,
        inputText: "nums = [1,2,3,4,5]",
        outputText: "15",
        explanation: "The unique elements are [1,2,3,4,5], and the sum is 15.",
      },
    ],
    tests: "[[1, 2, 3, 2], [1, 1, 1, 1, 1], [1, 2, 3, 4, 5]]",
    answer: "[4, 0, 15]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfUnique = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1849,
    title: "Maximum Absolute Sum of Any Subarray",
    titleSlug: "maximum-absolute-sum-of-any-subarray",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming"],
    constaints:
      "<li>If <code>x</code> is a negative integer, then <code>abs(x) = -x</code>.</li> <li>If <code>x</code> is a non-negative integer, then <code>abs(x) = x</code>.</li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code>. The <strong>absolute sum</strong> of a subarray <code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code> is <code>abs(nums<sub>l</sub> + nums<sub>l+1</sub> + ... + nums<sub>r-1</sub> + nums<sub>r</sub>)</code>.</p><p>Return <em>the <strong>maximum</strong> absolute sum of any <strong>(possibly empty)</strong> subarray of </em><code>nums</code>.</p><p>Note that <code>abs(x)</code> is defined as follows:</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,-3,2,3,-4]",
        outputText: "5",
        explanation:
          "The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.",
      },
      {
        id: 2,
        inputText: "nums = [2,-5,1,-4,3,-2]",
        outputText: "8",
        explanation:
          "The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.",
      },
    ],
    tests: "[[1, -3, 2, 3, -4], [2, -5, 1, -4, 3, -2]]",
    answer: "[5, 8]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxAbsoluteSum = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1850,
    title: "Minimum Length of String After Deleting Similar Ends",
    titleSlug: "minimum-length-of-string-after-deleting-similar-ends",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li>Pick a <strong>non-empty</strong> prefix from the string <code>s</code> where all the characters in the prefix are equal.</li> <li>Pick a <strong>non-empty</strong> suffix from the string <code>s</code> where all the characters in this suffix are equal.</li> <li>The prefix and the suffix should not intersect at any index.</li> <li>The characters from the prefix and suffix must be the same.</li> <li>Delete both the prefix and the suffix.</li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> only consists of characters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code>.</li>",
    question:
      "<p>Given a string <code>s</code> consisting only of characters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code>. You are asked to apply the following algorithm on the string any number of times:</p><p>Return <em>the <strong>minimum length</strong> of </em><code>s</code> <em>after performing the above operation any number of times (possibly zero times)</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "ca"',
        outputText: "2",
        explanation:
          "You can't remove any characters, so the string stays as is.",
      },
      {
        id: 2,
        inputText: 's = "cabaabac"',
        outputText: "0",
        explanation:
          'An optimal sequence of operations is:\n- Take prefix = "c" and suffix = "c" and remove them, s = "abaaba".\n- Take prefix = "a" and suffix = "a" and remove them, s = "baab".\n- Take prefix = "b" and suffix = "b" and remove them, s = "aa".\n- Take prefix = "a" and suffix = "a" and remove them, s = "".',
      },
      {
        id: 3,
        inputText: 's = "aabccabba"',
        outputText: "3",
        explanation:
          'An optimal sequence of operations is:\n- Take prefix = "aa" and suffix = "a" and remove them, s = "bccabb".\n- Take prefix = "b" and suffix = "bb" and remove them, s = "cca".',
      },
    ],
    tests: '["ca", "cabaabac", "aabccabba"]',
    answer: "[2, 0, 3]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumLength = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1858,
    title: "Latest Time by Replacing Hidden Digits",
    titleSlug: "latest-time-by-replacing-hidden-digits",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Greedy"],
    constaints:
      "<li><code>time</code> is in the format <code>hh:mm</code>.</li> <li>It is guaranteed that you can produce a valid time from the given string.</li>",
    question:
      "<p>You are given a string <code>time</code> in the form of <code> hh:mm</code>, where some of the digits in the string are hidden (represented by <code>?</code>).</p><p>The valid times are those inclusively between <code>00:00</code> and <code>23:59</code>.</p><p>Return <em>the latest valid time you can get from</em> <code>time</code><em> by replacing the hidden</em> <em>digits</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'time = "2?:?0"',
        outputText: '"23:50"',
        explanation:
          "The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.",
      },
      {
        id: 2,
        inputText: 'time = "0?:3?"',
        outputText: '"09:39"',
        explanation: "",
      },
      {
        id: 3,
        inputText: 'time = "1?:22"',
        outputText: '"19:22"',
        explanation: "",
      },
    ],
    tests: '["2?:?0", "0?:3?", "1?:22"]',
    answer: '["23:50", "09:39", "19:22"]',
    code: "/**\n * @param {string} time\n * @return {string}\n */\nvar maximumTime = function(time) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1866,
    title: "Restore the Array From Adjacent Pairs",
    titleSlug: "restore-the-array-from-adjacent-pairs",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>nums.length == n</code></li> <li><code>adjacentPairs.length == n - 1</code></li> <li><code>adjacentPairs[i].length == 2</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i], u<sub>i</sub>, v<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li>There exists some <code>nums</code> that has <code>adjacentPairs</code> as its pairs.</li>",
    question:
      "<p>There is an integer array <code>nums</code> that consists of <code>n</code> <strong>unique </strong>elements, but you have forgotten it. However, you do remember every pair of adjacent elements in <code>nums</code>.</p><p>You are given a 2D integer array <code>adjacentPairs</code> of size <code>n - 1</code> where each <code>adjacentPairs[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that the elements <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> are adjacent in <code>nums</code>.</p><p>It is guaranteed that every adjacent pair of elements <code>nums[i]</code> and <code>nums[i+1]</code> will exist in <code>adjacentPairs</code>, either as <code>[nums[i], nums[i+1]]</code> or <code>[nums[i+1], nums[i]]</code>. The pairs can appear <strong>in any order</strong>.</p><p>Return <em>the original array </em><code>nums</code><em>. If there are multiple solutions, return <strong>any of them</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "adjacentPairs = [[2,1],[3,4],[3,2]]",
        outputText: "[1,2,3,4]",
        explanation:
          "This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs[i] may not be in left-to-right order.",
      },
      {
        id: 2,
        inputText: "adjacentPairs = [[4,-2],[1,4],[-3,1]]",
        outputText: "[-2,4,1,-3]",
        explanation:
          "There can be negative numbers.\nAnother solution is [-3,1,4,-2], which would also be accepted.",
      },
      {
        id: 3,
        inputText: "adjacentPairs = [[100000,-100000]]",
        outputText: "[100000,-100000]",
        explanation: "",
      },
    ],
    tests:
      "[[[2, 1], [3, 4], [3, 2]], [[4, -2], [1, 4], [-3, 1]], [[100000, -100000]]]",
    answer: "[[1, 2, 3, 4], [-2, 4, 1, -3], [100000, -100000]]",
    code: "/**\n * @param {number[][]} adjacentPairs\n * @return {number[]}\n */\nvar restoreArray = function(adjacentPairs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1871,
    title: "Palindrome Partitioning IV",
    titleSlug: "palindrome-partitioning-iv",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["String", "Dynamic Programming"],
    constaints:
      "<li><code>3 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.</li>",
    question:
      "<p>Given a string <code>s</code>, return <code>true</code> <em>if it is possible to split the string</em> <code>s</code> <em>into three <strong>non-empty</strong> palindromic substrings. Otherwise, return </em><code>false</code>.\u200b\u200b\u200b\u200b\u200b</p><p>A string is said to be palindrome if it the same string when reversed.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abcbdd"',
        outputText: "true",
        explanation:
          '"abcbdd" = "a" + "bcb" + "dd", and all three substrings are palindromes.',
      },
      {
        id: 2,
        inputText: 's = "bcbddxy"',
        outputText: "false",
        explanation: "s cannot be split into 3 palindromes.",
      },
    ],
    tests: '["abcbdd", "bcbddxy"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkPartitioning = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1873,
    title: "Longest Nice Substring",
    titleSlug: "longest-nice-substring",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "String",
      "Divide and Conquer",
      "Bit Manipulation",
      "Sliding Window",
    ],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of uppercase and lowercase English letters.</li>",
    question:
      "<p>A string <code>s</code> is <strong>nice</strong> if, for every letter of the alphabet that <code>s</code> contains, it appears <strong>both</strong> in uppercase and lowercase. For example, <code>\"abABB\"</code> is nice because <code>'A'</code> and <code>'a'</code> appear, and <code>'B'</code> and <code>'b'</code> appear. However, <code>\"abA\"</code> is not because <code>'b'</code> appears, but <code>'B'</code> does not.</p><p>Given a string <code>s</code>, return <em>the longest <strong>substring</strong> of <code>s</code> that is <strong>nice</strong>. If there are multiple, return the substring of the <strong>earliest</strong> occurrence. If there are none, return an empty string</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "YazaAay"',
        outputText: '"aAa"',
        explanation:
          "\"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n\"aAa\" is the longest nice substring.",
      },
      {
        id: 2,
        inputText: 's = "Bb"',
        outputText: '"Bb"',
        explanation:
          "\"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring.",
      },
      {
        id: 3,
        inputText: 's = "c"',
        outputText: '""',
        explanation: "There are no nice substrings.",
      },
    ],
    tests: '["YazaAay", "Bb", "c"]',
    answer: '["aAa", "Bb", ""]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar longestNiceSubstring = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1874,
    title: "Form Array by Concatenating Subarrays of Another Array",
    titleSlug: "form-array-by-concatenating-subarrays-of-another-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "String Matching"],
    constaints:
      '<li><code>groups.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= groups[i].length, sum(groups[i].length) &lt;= 10<sup><span style="font-size: 10.8333px;">3</span></sup></code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>3</sup></code></li> <li><code>-10<sup>7</sup> &lt;= groups[i][j], nums[k] &lt;= 10<sup>7</sup></code></li>',
    question:
      "<p>You are given a 2D integer array <code>groups</code> of length <code>n</code>. You are also given an integer array <code>nums</code>.</p><p>You are asked if you can choose <code>n</code> <strong>disjoint </strong>subarrays from the array <code>nums</code> such that the <code>i<sup>th</sup></code> subarray is equal to <code>groups[i]</code> (<b>0-indexed</b>), and if <code>i &gt; 0</code>, the <code>(i-1)<sup>th</sup></code> subarray appears <strong>before</strong> the <code>i<sup>th</sup></code> subarray in <code>nums</code> (i.e. the subarrays must be in the same order as <code>groups</code>).</p><p>Return <code>true</code> <em>if you can do this task, and</em> <code>false</code> <em>otherwise</em>.</p><p>Note that the subarrays are <strong>disjoint</strong> if and only if there is no index <code>k</code> such that <code>nums[k]</code> belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]",
        outputText: "true",
        explanation: "You can choose the 0",
      },
      {
        id: 2,
        inputText: "groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]",
        outputText: "false",
        explanation: "Note that choosing the subarrays [",
      },
      {
        id: 3,
        inputText: "groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]",
        outputText: "false",
        explanation: "Note that choosing the subarrays [7,7,",
      },
    ],
    tests:
      "[[[1, -1, -1], [3, -2, 0]], [[10, -2], [1, 2, 3, 4]], [[1, 2, 3], [3, 4]]]",
    answer: "[true, false, false]",
    code: "/**\n * @param {number[][]} groups\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canChoose = function(groups, nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1876,
    title: "Map of Highest Peak",
    titleSlug: "map-of-highest-peak",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Breadth-First Search", "Matrix"],
    constaints:
      "<li>If <code>isWater[i][j] == 0</code>, cell <code>(i, j)</code> is a <strong>land</strong> cell.</li> <li>If <code>isWater[i][j] == 1</code>, cell <code>(i, j)</code> is a <strong>water</strong> cell.</li> <li>The height of each cell must be non-negative.</li> <li>If the cell is a <strong>water</strong> cell, its height must be <code>0</code>.</li> <li>Any two adjacent cells must have an absolute height difference of <strong>at most</strong> <code>1</code>. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</li> <li><code>m == isWater.length</code></li> <li><code>n == isWater[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>isWater[i][j]</code> is <code>0</code> or <code>1</code>.</li> <li>There is at least <strong>one</strong> water cell.</li>",
    question:
      "<p>You are given an integer matrix <code>isWater</code> of size <code>m x n</code> that represents a map of <strong>land</strong> and <strong>water</strong> cells.</p><p>You must assign each cell a height in a way that follows these rules:</p><p>Find an assignment of heights such that the maximum height in the matrix is <strong>maximized</strong>.</p><p>Return <em>an integer matrix </em><code>height</code><em> of size </em><code>m x n</code><em> where </em><code>height[i][j]</code><em> is cell </em><code>(i, j)</code><em>'s height. If there are multiple solutions, return <strong>any</strong> of them</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "isWater = [[0,1],[0,0]]",
        outputText: "[[1,0],[2,1]]",
        explanation:
          "The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.",
      },
      {
        id: 2,
        inputText: "isWater = [[0,0,1],[1,0,0],[0,0,0]]",
        outputText: "[[1,1,0],[0,1,1],[1,2,2]]",
        explanation:
          "A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.",
      },
    ],
    tests: "[[[0, 1], [0, 0]], [[0, 0, 1], [1, 0, 0], [0, 0, 0]]]",
    answer: "[[[1, 0], [2, 1]], [[1, 1, 0], [0, 1, 1], [1, 2, 2]]]",
    code: "/**\n * @param {number[][]} isWater\n * @return {number[][]}\n */\nvar highestPeak = function(isWater) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1878,
    title: "Check if Array Is Sorted and Rotated",
    titleSlug: "check-if-array-is-sorted-and-rotated",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>Given an array <code>nums</code>, return <code>true</code><em> if the array was originally sorted in non-decreasing order, then rotated <strong>some</strong> number of positions (including zero)</em>. Otherwise, return <code>false</code>.</p><p>There may be <strong>duplicates</strong> in the original array.</p><p><strong>Note:</strong> An array <code>A</code> rotated by <code>x</code> positions results in an array <code>B</code> of the same length such that <code>A[i] == B[(i+x) % A.length]</code>, where <code>%</code> is the modulo operation.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,4,5,1,2]",
        outputText: "true",
        explanation:
          "[1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].",
      },
      {
        id: 2,
        inputText: "nums = [2,1,3,4]",
        outputText: "false",
        explanation:
          "There is no sorted array once rotated that can make nums.",
      },
      {
        id: 3,
        inputText: "nums = [1,2,3]",
        outputText: "true",
        explanation:
          "[1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums.",
      },
    ],
    tests: "[[3, 4, 5, 1, 2], [2, 1, 3, 4], [1, 2, 3]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar check = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1884,
    title: "Minimum Changes To Make Alternating Binary String",
    titleSlug: "minimum-changes-to-make-alternating-binary-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li>",
    question:
      "<p>You are given a string <code>s</code> consisting only of the characters <code>'0'</code> and <code>'1'</code>. In one operation, you can change any <code>'0'</code> to <code>'1'</code> or vice versa.</p><p>The string is called alternating if no two adjacent characters are equal. For example, the string <code>\"010\"</code> is alternating, while the string <code>\"0100\"</code> is not.</p><p>Return <em>the <strong>minimum</strong> number of operations needed to make</em> <code>s</code> <em>alternating</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "0100"',
        outputText: "1",
        explanation:
          "If you change the last character to '1', s will be \"0101\", which is alternating.",
      },
      {
        id: 2,
        inputText: 's = "10"',
        outputText: "0",
        explanation: "s is already alternating.",
      },
      {
        id: 3,
        inputText: 's = "1111"',
        outputText: "2",
        explanation: 'You need two operations to reach "0101" or "1010".',
      },
    ],
    tests: '["0100", "10", "1111"]',
    answer: "[1, 0, 2]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar minOperations = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1885,
    title: "Count Number of Homogenous Substrings",
    titleSlug: "count-number-of-homogenous-substrings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase letters.</li>",
    question:
      "<p>Given a string <code>s</code>, return <em>the number of <strong>homogenous</strong> substrings of </em><code>s</code><em>.</em> Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p><p>A string is <strong>homogenous</strong> if all the characters of the string are the same.</p><p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abbcccaa"',
        outputText: "13",
        explanation:
          'The homogenous substrings are listed as below:\n"a"   appears 3 times.\n"aa"  appears 1 time.\n"b"   appears 2 times.\n"bb"  appears 1 time.\n"c"   appears 3 times.\n"cc"  appears 2 times.\n"ccc" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.',
      },
      {
        id: 2,
        inputText: 's = "xy"',
        outputText: "2",
        explanation: 'The homogenous substrings are "x" and "y".',
      },
      { id: 3, inputText: 's = "zzzzz"', outputText: "15", explanation: "" },
    ],
    tests: '["abbcccaa", "xy", "zzzzz"]',
    answer: "[13, 2, 15]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar countHomogenous = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1888,
    title: "Find Nearest Point That Has the Same X or Y Coordinate",
    titleSlug: "find-nearest-point-that-has-the-same-x-or-y-coordinate",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= points.length &lt;= 10<sup>4</sup></code></li> <li><code>points[i].length == 2</code></li> <li><code>1 &lt;= x, y, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given two integers, <code>x</code> and <code>y</code>, which represent your current location on a Cartesian grid: <code>(x, y)</code>. You are also given an array <code>points</code> where each <code>points[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents that a point exists at <code>(a<sub>i</sub>, b<sub>i</sub>)</code>. A point is <strong>valid</strong> if it shares the same x-coordinate or the same y-coordinate as your location.</p><p>Return <em>the index <strong>(0-indexed)</strong> of the <strong>valid</strong> point with the smallest <strong>Manhattan distance</strong> from your current location</em>. If there are multiple, return <em>the valid point with the <strong>smallest</strong> index</em>. If there are no valid points, return <code>-1</code>.</p><p>The <strong>Manhattan distance</strong> between two points <code>(x<sub>1</sub>, y<sub>1</sub>)</code> and <code>(x<sub>2</sub>, y<sub>2</sub>)</code> is <code>abs(x<sub>1</sub> - x<sub>2</sub>) + abs(y<sub>1</sub> - y<sub>2</sub>)</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]",
        outputText: "2",
        explanation:
          "Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.",
      },
      {
        id: 2,
        inputText: "x = 3, y = 4, points = [[3,4]]",
        outputText: "0",
        explanation:
          "The answer is allowed to be on the same location as your current location.",
      },
      {
        id: 3,
        inputText: "x = 3, y = 4, points = [[2,3]]",
        outputText: "-1",
        explanation: "There are no valid points.",
      },
    ],
    tests: "[3, 3, 3]",
    answer: "[2, 0, -1]",
    code: "/**\n * @param {number} x\n * @param {number} y\n * @param {number[][]} points\n * @return {number}\n */\nvar nearestValidPoint = function(x, y, points) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1889,
    title: "Check if Number is a Sum of Powers of Three",
    titleSlug: "check-if-number-is-a-sum-of-powers-of-three",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math"],
    constaints: "<li><code>1 &lt;= n &lt;= 10<sup>7</sup></code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <code>true</code> <em>if it is possible to represent </em><code>n</code><em> as the sum of distinct powers of three.</em> Otherwise, return <code>false</code>.</p><p>An integer <code>y</code> is a power of three if there exists an integer <code>x</code> such that <code>y == 3<sup>x</sup></code>.</p>",
    examples: [
      { id: 1, inputText: "n = 12", outputText: "true", explanation: "12 = 3" },
      { id: 2, inputText: "n = 91", outputText: "true", explanation: "91 = 3" },
      { id: 3, inputText: "n = 21", outputText: "false", explanation: "" },
    ],
    tests: "[12, 91, 21]",
    answer: "[true, true, false]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar checkPowersOfThree = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1890,
    title: "Sum of Beauty of All Substrings",
    titleSlug: "sum-of-beauty-of-all-substrings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Counting"],
    constaints:
      '<li>For example, the beauty of <code>"abaacc"</code> is <code>3 - 1 = 2</code>.</li> <li><code>1 &lt;= s.length &lt;=<sup> </sup>500</code></li> <li><code>s</code> consists of only lowercase English letters.</li>',
    question:
      "<p>The <strong>beauty</strong> of a string is the difference in frequencies between the most frequent and least frequent characters.</p><p>Given a string <code>s</code>, return <em>the sum of <strong>beauty</strong> of all of its substrings.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aabcb"',
        outputText: "5",
        explanation:
          'The substrings with non-zero beauty are ["aab","aabc","aabcb","abcb","bcb"], each with beauty equal to 1.',
      },
      { id: 2, inputText: 's = "aabcbaa"', outputText: "17", explanation: "" },
    ],
    tests: '["aabcb", "aabcbaa"]',
    answer: "[5, 17]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar beautySum = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1894,
    title: "Merge Strings Alternately",
    titleSlug: "merge-strings-alternately",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= word1.length, word2.length &lt;= 100</code></li> <li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>",
    question:
      "<p>You are given two strings <code>word1</code> and <code>word2</code>. Merge the strings by adding letters in alternating order, starting with <code>word1</code>. If a string is longer than the other, append the additional letters onto the end of the merged string.</p><p>Return <em>the merged string.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 'word1 = "abc", word2 = "pqr"',
        outputText: '"apbqcr"',
        explanation:
          "The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r",
      },
      {
        id: 2,
        inputText: 'word1 = "ab", word2 = "pqrs"',
        outputText: '"apbqrs"',
        explanation:
          'Notice that as word2 is longer, "rs" is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s',
      },
      {
        id: 3,
        inputText: 'word1 = "abcd", word2 = "pq"',
        outputText: '"apbqcd"',
        explanation:
          'Notice that as word1 is longer, "cd" is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d',
      },
    ],
    tests: '["abc", "ab", "abcd"]',
    answer: '["apbqcr", "apbqrs", "apbqcd"]',
    code: "/**\n * @param {string} word1\n * @param {string} word2\n * @return {string}\n */\nvar mergeAlternately = function(word1, word2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1895,
    title: "Minimum Number of Operations to Move All Balls to Each Box",
    titleSlug: "minimum-number-of-operations-to-move-all-balls-to-each-box",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "String"],
    constaints:
      "<li><code>n == boxes.length</code></li> <li><code>1 &lt;= n &lt;= 2000</code></li> <li><code>boxes[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li>",
    question:
      "<p>You have <code>n</code> boxes. You are given a binary string <code>boxes</code> of length <code>n</code>, where <code>boxes[i]</code> is <code>'0'</code> if the <code>i<sup>th</sup></code> box is <strong>empty</strong>, and <code>'1'</code> if it contains <strong>one</strong> ball.</p><p>In one operation, you can move <strong>one</strong> ball from a box to an adjacent box. Box <code>i</code> is adjacent to box <code>j</code> if <code>abs(i - j) == 1</code>. Note that after doing so, there may be more than one ball in some boxes.</p><p>Return an array <code>answer</code> of size <code>n</code>, where <code>answer[i]</code> is the <strong>minimum</strong> number of operations needed to move all the balls to the <code>i<sup>th</sup></code> box.</p><p>Each <code>answer[i]</code> is calculated considering the <strong>initial</strong> state of the boxes.</p>",
    examples: [
      {
        id: 1,
        inputText: 'boxes = "110"',
        outputText: "[1,1,3]",
        explanation:
          "The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.",
      },
      {
        id: 2,
        inputText: 'boxes = "001011"',
        outputText: "[11,8,5,4,3,4]",
        explanation: "",
      },
    ],
    tests: '["110", "001011"]',
    answer: "[[1, 1, 3], [11, 8, 5, 4, 3, 4]]",
    code: "/**\n * @param {string} boxes\n * @return {number[]}\n */\nvar minOperations = function(boxes) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1899,
    title: "Count Items Matching a Rule",
    titleSlug: "count-items-matching-a-rule",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "String"],
    constaints:
      '<li><code>ruleKey == "type"</code> and <code>ruleValue == type<sub>i</sub></code>.</li> <li><code>ruleKey == "color"</code> and <code>ruleValue == color<sub>i</sub></code>.</li> <li><code>ruleKey == "name"</code> and <code>ruleValue == name<sub>i</sub></code>.</li> <li><code>1 &lt;= items.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= type<sub>i</sub>.length, color<sub>i</sub>.length, name<sub>i</sub>.length, ruleValue.length &lt;= 10</code></li> <li><code>ruleKey</code> is equal to either <code>"type"</code>, <code>"color"</code>, or <code>"name"</code>.</li> <li>All strings consist only of lowercase letters.</li>',
    question:
      "<p>You are given an array <code>items</code>, where each <code>items[i] = [type<sub>i</sub>, color<sub>i</sub>, name<sub>i</sub>]</code> describes the type, color, and name of the <code>i<sup>th</sup></code> item. You are also given a rule represented by two strings, <code>ruleKey</code> and <code>ruleValue</code>.</p><p>The <code>i<sup>th</sup></code> item is said to match the rule if <strong>one</strong> of the following is true:</p><p>Return <em>the number of items that match the given rule</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'items = [["phone","blue","pixel"],["computer","silver","lenovo"],["phone","gold","iphone"]], ruleKey = "color", ruleValue = "silver"',
        outputText: "1",
        explanation:
          'There is only one item matching the given rule, which is ["computer","silver","lenovo"].',
      },
      {
        id: 2,
        inputText:
          'items = [["phone","blue","pixel"],["computer","silver","phone"],["phone","gold","iphone"]], ruleKey = "type", ruleValue = "phone"',
        outputText: "2",
        explanation:
          'There are only two items matching the given rule, which are ["phone","blue","pixel"] and ["phone","gold","iphone"]. Note that the item ["computer","silver","phone"] does not match.',
      },
    ],
    tests:
      '[[["phone", "blue", "pixel"], ["computer", "silver", "lenovo"], ["phone", "gold", "iphone"]], [["phone", "blue", "pixel"], ["computer", "silver", "phone"], ["phone", "gold", "iphone"]]]',
    answer: "[1, 2]",
    code: "/**\n * @param {string[][]} items\n * @param {string} ruleKey\n * @param {string} ruleValue\n * @return {number}\n */\nvar countMatches = function(items, ruleKey, ruleValue) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1900,
    title: "Closest Dessert Cost",
    titleSlug: "closest-dessert-cost",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Backtracking"],
    constaints:
      "<li>There must be <strong>exactly one</strong> ice cream base.</li> <li>You can add <strong>one or more</strong> types of topping or have no toppings at all.</li> <li>There are <strong>at most two</strong> of <strong>each type</strong> of topping.</li> <li><code>baseCosts</code>, an integer array of length <code>n</code>, where each <code>baseCosts[i]</code> represents the price of the <code>i<sup>th</sup></code> ice cream base flavor.</li> <li><code>toppingCosts</code>, an integer array of length <code>m</code>, where each <code>toppingCosts[i]</code> is the price of <strong>one</strong> of the <code>i<sup>th</sup></code> topping.</li> <li><code>target</code>, an integer representing your target price for dessert.</li> <li><code>n == baseCosts.length</code></li> <li><code>m == toppingCosts.length</code></li> <li><code>1 &lt;= n, m &lt;= 10</code></li> <li><code>1 &lt;= baseCosts[i], toppingCosts[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= target &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You would like to make dessert and are preparing to buy the ingredients. You have <code>n</code> ice cream base flavors and <code>m</code> types of toppings to choose from. You must follow these rules when making your dessert:</p><p>You are given three inputs:</p><p>You want to make a dessert with a total cost as close to <code>target</code> as possible.</p><p>Return <em>the closest possible cost of the dessert to </em><code>target</code>. If there are multiple, return <em>the <strong>lower</strong> one.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "baseCosts = [1,7], toppingCosts = [3,4], target = 10",
        outputText: "10",
        explanation:
          "Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10.",
      },
      {
        id: 2,
        inputText: "baseCosts = [2,3], toppingCosts = [4,5,100], target = 18",
        outputText: "17",
        explanation:
          "Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.",
      },
      {
        id: 3,
        inputText: "baseCosts = [3,10], toppingCosts = [2,5], target = 9",
        outputText: "8",
        explanation:
          "It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.",
      },
    ],
    tests: "[[1, 7], [2, 3], [3, 10]]",
    answer: "[10, 17, 8]",
    code: "/**\n * @param {number[]} baseCosts\n * @param {number[]} toppingCosts\n * @param {number} target\n * @return {number}\n */\nvar closestCost = function(baseCosts, toppingCosts, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1904,
    title: "Second Largest Digit in a String",
    titleSlug: "second-largest-digit-in-a-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of only lowercase English letters and/or digits.</li>",
    question:
      "<p>Given an alphanumeric string <code>s</code>, return <em>the <strong>second largest</strong> numerical digit that appears in </em><code>s</code><em>, or </em><code>-1</code><em> if it does not exist</em>.</p><p>An <strong>alphanumeric</strong><strong> </strong>string is a string consisting of lowercase English letters and digits.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "dfa12321afd"',
        outputText: "2",
        explanation:
          "The digits that appear in s are [1, 2, 3]. The second largest digit is 2.",
      },
      {
        id: 2,
        inputText: 's = "abc1111"',
        outputText: "-1",
        explanation:
          "The digits that appear in s are [1]. There is no second largest digit.",
      },
    ],
    tests: '["dfa12321afd", "abc1111"]',
    answer: "[2, -1]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar secondHighest = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1910,
    title: "Check if Binary String Has at Most One Segment of Ones",
    titleSlug: "check-if-binary-string-has-at-most-one-segment-of-ones",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s[i]</code>\u200b\u200b\u200b\u200b is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>s[0]</code> is\u00a0<code>'1'</code>.</li>",
    question:
      "<p>Given a binary string <code>s</code> <strong>\u200b\u200b\u200b\u200b\u200bwithout leading zeros</strong>, return <code>true</code>\u200b\u200b\u200b <em>if </em><code>s</code><em> contains <strong>at most one contiguous segment of ones</strong></em>. Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "1001"',
        outputText: "false",
        explanation: "The ones do not form a contiguous segment.",
      },
      { id: 2, inputText: 's = "110"', outputText: "true", explanation: "" },
    ],
    tests: '["1001", "110"]',
    answer: "[false, true]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkOnesSegment = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1915,
    title: "Check if One String Swap Can Make Strings Equal",
    titleSlug: "check-if-one-string-swap-can-make-strings-equal",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Counting"],
    constaints:
      "<li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li> <li><code>s1.length == s2.length</code></li> <li><code>s1</code> and <code>s2</code> consist of only lowercase English letters.</li>",
    question:
      "<p>You are given two strings <code>s1</code> and <code>s2</code> of equal length. A <strong>string swap</strong> is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.</p><p>Return <code>true</code> <em>if it is possible to make both strings equal by performing <strong>at most one string swap </strong>on <strong>exactly one</strong> of the strings. </em>Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's1 = "bank", s2 = "kanb"',
        outputText: "true",
        explanation:
          'For example, swap the first character with the last character of s2 to make "bank".',
      },
      {
        id: 2,
        inputText: 's1 = "attack", s2 = "defend"',
        outputText: "false",
        explanation:
          "It is impossible to make them equal with one string swap.",
      },
      {
        id: 3,
        inputText: 's1 = "kelb", s2 = "kelb"',
        outputText: "true",
        explanation:
          "The two strings are already equal, so no string swap operation is required.",
      },
    ],
    tests: '["bank", "attack", "kelb"]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar areAlmostEqual = function(s1, s2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1916,
    title: "Find Center of Star Graph",
    titleSlug: "find-center-of-star-graph",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Graph"],
    constaints:
      "<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= u<sub>i,</sub> v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li>The given <code>edges</code> represent a valid star graph.</li>",
    question:
      "<p>There is an undirected <strong>star</strong> graph consisting of <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. A star graph is a graph where there is one <strong>center</strong> node and <strong>exactly</strong> <code>n - 1</code> edges that connect the center node with every other node.</p><p>You are given a 2D integer array <code>edges</code> where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between the nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. Return the center of the given star graph.</p>",
    examples: [
      {
        id: 1,
        inputText: "edges = [[1,2],[2,3],[4,2]]",
        outputText: "2",
        explanation:
          "As shown in the figure above, node 2 is connected to every other node, so 2 is the center.",
      },
      {
        id: 2,
        inputText: "edges = [[1,2],[5,1],[1,3],[1,4]]",
        outputText: "1",
        explanation: "",
      },
    ],
    tests: "[[[1, 2], [2, 3], [4, 2]], [[1, 2], [5, 1], [1, 3], [1, 4]]]",
    answer: "[2, 1]",
    code: "/**\n * @param {number[][]} edges\n * @return {number}\n */\nvar findCenter = function(edges) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1920,
    title: "Determine Color of a Chessboard Square",
    titleSlug: "determine-color-of-a-chessboard-square",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "String"],
    constaints:
      "<li><code>coordinates.length == 2</code></li> <li><code>'a' &lt;= coordinates[0] &lt;= 'h'</code></li> <li><code>'1' &lt;= coordinates[1] &lt;= '8'</code></li>",
    question:
      '<p>You are given <code>coordinates</code>, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.</p><p><img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/screenshot-2021-02-20-at-22159-pm.png" style="width: 400px; height: 396px;"/></p><p>Return <code>true</code><em> if the square is white, and </em><code>false</code><em> if the square is black</em>.</p><p>The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.</p>',
    examples: [
      {
        id: 1,
        inputText: 'coordinates = "a1"',
        outputText: "false",
        explanation:
          'From the chessboard above, the square with coordinates "a1" is black, so return false.',
      },
      {
        id: 2,
        inputText: 'coordinates = "h3"',
        outputText: "true",
        explanation:
          'From the chessboard above, the square with coordinates "h3" is white, so return true.',
      },
      {
        id: 3,
        inputText: 'coordinates = "c7"',
        outputText: "false",
        explanation: "",
      },
    ],
    tests: '["a1", "h3", "c7"]',
    answer: "[false, true, false]",
    code: "/**\n * @param {string} coordinates\n * @return {boolean}\n */\nvar squareIsWhite = function(coordinates) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1927,
    title: "Maximum Ascending Subarray Sum",
    titleSlug: "maximum-ascending-subarray-sum",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>Given an array of positive integers <code>nums</code>, return the <em>maximum possible sum of an <strong>ascending</strong> subarray in </em><code>nums</code>.</p><p>A subarray is defined as a contiguous sequence of numbers in an array.</p><p>A subarray <code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code> is <strong>ascending</strong> if for all <code>i</code> where <code>l &lt;= i &lt; r</code>, <code>nums<sub>i </sub> &lt; nums<sub>i+1</sub></code>. Note that a subarray of size <code>1</code> is <strong>ascending</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [10,20,30,5,10,50]",
        outputText: "65",
        explanation:
          "[5,10,50] is the ascending subarray with the maximum sum of 65.",
      },
      {
        id: 2,
        inputText: "nums = [10,20,30,40,50]",
        outputText: "150",
        explanation:
          "[10,20,30,40,50] is the ascending subarray with the maximum sum of 150.",
      },
      {
        id: 3,
        inputText: "nums = [12,17,15,13,10,11,12]",
        outputText: "33",
        explanation:
          "[10,11,12] is the ascending subarray with the maximum sum of 33.",
      },
    ],
    tests:
      "[[10, 20, 30, 5, 10, 50], [10, 20, 30, 40, 50], [12, 17, 15, 13, 10, 11, 12]]",
    answer: "[65, 150, 33]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxAscendingSum = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1938,
    title: "Minimum Operations to Make the Array Increasing",
    titleSlug: "minimum-operations-to-make-the-array-increasing",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy"],
    constaints:
      "<li>For example, if <code>nums = [1,2,3]</code>, you can choose to increment <code>nums[1]</code> to make <code>nums = [1,<u><b>3</b></u>,3]</code>.</li> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>You are given an integer array <code>nums</code> (<strong>0-indexed</strong>). In one operation, you can choose an element of the array and increment it by <code>1</code>.</p><p>Return <em>the <strong>minimum</strong> number of operations needed to make</em> <code>nums</code> <em><strong>strictly</strong> <strong>increasing</strong>.</em></p><p>An array <code>nums</code> is <strong>strictly increasing</strong> if <code>nums[i] &lt; nums[i+1]</code> for all <code>0 &lt;= i &lt; nums.length - 1</code>. An array of length <code>1</code> is trivially strictly increasing.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,1,1]",
        outputText: "3",
        explanation:
          "You can do the following operations:\r\n1) Increment nums[2], so nums becomes [1,1,",
      },
      {
        id: 2,
        inputText: "nums = [1,5,2,4,1]",
        outputText: "14",
        explanation: "",
      },
      { id: 3, inputText: "nums = [8]", outputText: "0", explanation: "" },
    ],
    tests: "[[1, 1, 1], [1, 5, 2, 4, 1], [8]]",
    answer: "[3, 14, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minOperations = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1939,
    title: "Queries on Number of Points Inside a Circle",
    titleSlug: "queries-on-number-of-points-inside-a-circle",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Geometry"],
    constaints:
      "<li><code>1 &lt;= points.length &lt;= 500</code></li> <li><code>points[i].length == 2</code></li> <li><code>0 &lt;= x<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>, y<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt;= 500</code></li> <li><code>1 &lt;= queries.length &lt;= 500</code></li> <li><code>queries[j].length == 3</code></li> <li><code>0 &lt;= x<sub>j</sub>, y<sub>j</sub> &lt;= 500</code></li> <li><code>1 &lt;= r<sub>j</sub> &lt;= 500</code></li> <li>All coordinates are integers.</li>",
    question:
      "<p>You are given an array <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> is the coordinates of the <code>i<sup>th</sup></code> point on a 2D plane. Multiple points can have the <strong>same</strong> coordinates.</p><p>You are also given an array <code>queries</code> where <code>queries[j] = [x<sub>j</sub>, y<sub>j</sub>, r<sub>j</sub>]</code> describes a circle centered at <code>(x<sub>j</sub>, y<sub>j</sub>)</code> with a radius of <code>r<sub>j</sub></code>.</p><p>For each query <code>queries[j]</code>, compute the number of points <strong>inside</strong> the <code>j<sup>th</sup></code> circle. Points <strong>on the border</strong> of the circle are considered <strong>inside</strong>.</p><p>Return <em>an array </em><code>answer</code><em>, where </em><code>answer[j]</code><em> is the answer to the </em><code>j<sup>th</sup></code><em> query</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]",
        outputText: "[3,2,2]",
        explanation:
          "The points and circles are shown above.\nqueries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.",
      },
      {
        id: 2,
        inputText:
          "points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]",
        outputText: "[2,3,2,4]",
        explanation:
          "The points and circles are shown above.\nqueries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.",
      },
    ],
    tests:
      "[[[1, 3], [3, 3], [5, 3], [2, 2]], [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]]",
    answer: "[[3, 2, 2], [2, 3, 2, 4]]",
    code: "/**\n * @param {number[][]} points\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countPoints = function(points, queries) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1944,
    title: "Truncate Sentence",
    titleSlug: "truncate-sentence",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "String"],
    constaints:
      '<li>For example, <code>"Hello World"</code>, <code>"HELLO"</code>, and <code>"hello world hello world"</code> are all sentences.</li> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>k</code> is in the range <code>[1, the number of words in s]</code>.</li> <li><code>s</code> consist of only lowercase and uppercase English letters and spaces.</li> <li>The words in <code>s</code> are separated by a single space.</li> <li>There are no leading or trailing spaces.</li>',
    question:
      "<p>A <strong>sentence</strong> is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of <strong>only</strong> uppercase and lowercase English letters (no punctuation).</p><p>You are given a sentence <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b and an integer <code>k</code>\u200b\u200b\u200b\u200b\u200b\u200b. You want to <strong>truncate</strong> <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the <strong>first</strong> <code>k</code>\u200b\u200b\u200b\u200b\u200b\u200b words. Return <code>s</code>\u200b\u200b\u200b\u200b<em>\u200b\u200b after <strong>truncating</strong> it.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 's = "Hello how are you Contestant", k = 4',
        outputText: '"Hello how are you"',
        explanation:
          'The words in s are ["Hello", "how" "are", "you", "Contestant"].\nThe first 4 words are ["Hello", "how", "are", "you"].\nHence, you should return "Hello how are you".',
      },
      {
        id: 2,
        inputText: 's = "What is the solution to this problem", k = 4',
        outputText: '"What is the solution"',
        explanation:
          'The words in s are ["What", "is" "the", "solution", "to", "this", "problem"].\nThe first 4 words are ["What", "is", "the", "solution"].\nHence, you should return "What is the solution".',
      },
      {
        id: 3,
        inputText: 's = "chopper is not a tanuki", k = 5',
        outputText: '"chopper is not a tanuki"',
        explanation: "",
      },
    ],
    tests:
      '["Hello how are you Contestant", "What is the solution to this problem", "chopper is not a tanuki"]',
    answer:
      '["Hello how are you", "What is the solution", "chopper is not a tanuki"]',
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar truncateSentence = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1945,
    title: "Finding the Users Active Minutes",
    titleSlug: "finding-the-users-active-minutes",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table"],
    constaints:
      "<li><code>1 &lt;= logs.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= ID<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>k</code> is in the range <code>[The maximum <strong>UAM</strong> for a user, 10<sup>5</sup>]</code>.</li>",
    question:
      "<p>You are given the logs for users' actions on LeetCode, and an integer <code>k</code>. The logs are represented by a 2D integer array <code>logs</code> where each <code>logs[i] = [ID<sub>i</sub>, time<sub>i</sub>]</code> indicates that the user with <code>ID<sub>i</sub></code> performed an action at the minute <code>time<sub>i</sub></code>.</p><p><strong>Multiple users</strong> can perform actions simultaneously, and a single user can perform <strong>multiple actions</strong> in the same minute.</p><p>The <strong>user active minutes (UAM)</strong> for a given user is defined as the <strong>number of unique minutes</strong> in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.</p><p>You are to calculate a <strong>1-indexed</strong> array <code>answer</code> of size <code>k</code> such that, for each <code>j</code> (<code>1 &lt;= j &lt;= k</code>), <code>answer[j]</code> is the <strong>number of users</strong> whose <strong>UAM</strong> equals <code>j</code>.</p><p>Return <i>the array </i><code>answer</code><i> as described above</i>.</p>",
    examples: [
      {
        id: 1,
        inputText: "logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5",
        outputText: "[0,2,0,0,0]",
        explanation:
          "The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\nThe user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nSince both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.",
      },
      {
        id: 2,
        inputText: "logs = [[1,1],[2,2],[2,3]], k = 4",
        outputText: "[1,1,0,0]",
        explanation:
          "The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\nThe user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nThere is one user with a UAM of 1 and one with a UAM of 2.\nHence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.",
      },
    ],
    tests:
      "[[[0, 5], [1, 2], [0, 2], [0, 5], [1, 3]], [[1, 1], [2, 2], [2, 3]]]",
    answer: "[[0, 2, 0, 0, 0], [1, 1, 0, 0]]",
    code: "/**\n * @param {number[][]} logs\n * @param {number} k\n * @return {number[]}\n */\nvar findingUsersActiveMinutes = function(logs, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1950,
    title: "Sign of the Product of an Array",
    titleSlug: "sign-of-the-product-of-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math"],
    constaints:
      "<li><code>1</code> if <code>x</code> is positive.</li> <li><code>-1</code> if <code>x</code> is negative.</li> <li><code>0</code> if <code>x</code> is equal to <code>0</code>.</li> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>There is a function <code>signFunc(x)</code> that returns:</p><p>You are given an integer array <code>nums</code>. Let <code>product</code> be the product of all values in the array <code>nums</code>.</p><p>Return <code>signFunc(product)</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [-1,-2,-3,-4,3,2,1]",
        outputText: "1",
        explanation:
          "The product of all values in the array is 144, and signFunc(144) = 1",
      },
      {
        id: 2,
        inputText: "nums = [1,5,0,2,-3]",
        outputText: "0",
        explanation:
          "The product of all values in the array is 0, and signFunc(0) = 0",
      },
      {
        id: 3,
        inputText: "nums = [-1,1,-1,1,-1]",
        outputText: "-1",
        explanation:
          "The product of all values in the array is -1, and signFunc(-1) = -1",
      },
    ],
    tests: "[[-1, -2, -3, -4, 3, 2, 1], [1, 5, 0, 2, -3], [-1, 1, -1, 1, -1]]",
    answer: "[1, 0, -1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar arraySign = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1951,
    title: "Find the Winner of the Circular Game",
    titleSlug: "find-the-winner-of-the-circular-game",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Recursion", "Queue", "Simulation"],
    constaints:
      "<li><strong>Start</strong> at the <code>1<sup>st</sup></code> friend.</li> <li>Count the next <code>k</code> friends in the clockwise direction <strong>including</strong> the friend you started at. The counting wraps around the circle and may count some friends more than once.</li> <li>The last friend you counted leaves the circle and loses the game.</li> <li>If there is still more than one friend in the circle, go back to step <code>2</code> <strong>starting</strong> from the friend <strong>immediately clockwise</strong> of the friend who just lost and repeat.</li> <li>Else, the last friend in the circle wins the game.</li> <li><code>1 &lt;= k &lt;= n &lt;= 500</code></li>",
    question:
      "<p>There are <code>n</code> friends that are playing a game. The friends are sitting in a circle and are numbered from <code>1</code> to <code>n</code> in <strong>clockwise order</strong>. More formally, moving clockwise from the <code>i<sup>th</sup></code> friend brings you to the <code>(i+1)<sup>th</sup></code> friend for <code>1 &lt;= i &lt; n</code>, and moving clockwise from the <code>n<sup>th</sup></code> friend brings you to the <code>1<sup>st</sup></code> friend.</p><p>The rules of the game are as follows:</p><p>Given the number of friends, <code>n</code>, and an integer <code>k</code>, return <em>the winner of the game</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5, k = 2",
        outputText: "3",
        explanation:
          "Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.",
      },
      {
        id: 2,
        inputText: "n = 6, k = 5",
        outputText: "1",
        explanation:
          "The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.",
      },
    ],
    tests: "[5, 6]",
    answer: "[3, 1]",
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar findTheWinner = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1954,
    title: "Replace All Digits with Characters",
    titleSlug: "replace-all-digits-with-characters",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>For example, <code>shift('a', 5) = 'f'</code> and <code>shift('x', 0) = 'x'</code>.</li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists only of lowercase English letters and digits.</li> <li><code>shift(s[i-1], s[i]) &lt;= 'z'</code> for all <strong>odd</strong> indices <code>i</code>.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> string <code>s</code> that has lowercase English letters in its <strong>even</strong> indices and digits in its <strong>odd</strong> indices.</p><p>There is a function <code>shift(c, x)</code>, where <code>c</code> is a character and <code>x</code> is a digit, that returns the <code>x<sup>th</sup></code> character after <code>c</code>.</p><p>For every <strong>odd</strong>\u00a0index <code>i</code>, you want to replace the digit <code>s[i]</code> with <code>shift(s[i-1], s[i])</code>.</p><p>Return <code>s</code><em> after replacing all digits. It is <strong>guaranteed</strong> that </em><code>shift(s[i-1], s[i])</code><em> will never exceed </em><code>'z'</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "a1c1e1"',
        outputText: '"abcdef"',
        explanation:
          "The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('c',1) = 'd'\n- s[5] -> shift('e',1) = 'f'",
      },
      {
        id: 2,
        inputText: 's = "a1b2c3d4e"',
        outputText: '"abbdcfdhe"',
        explanation:
          "The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('b',2) = 'd'\n- s[5] -> shift('c',3) = 'f'\n- s[7] -> shift('d',4) = 'h'",
      },
    ],
    tests: '["a1c1e1", "a1b2c3d4e"]',
    answer: '["abcdef", "abbdcfdhe"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar replaceDigits = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1955,
    title: "Seat Reservation Manager",
    titleSlug: "seat-reservation-manager",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Design", "Heap (Priority Queue)"],
    constaints:
      "<li><code>SeatManager(int n)</code> Initializes a <code>SeatManager</code> object that will manage <code>n</code> seats numbered from <code>1</code> to <code>n</code>. All seats are initially available.</li> <li><code>int reserve()</code> Fetches the <strong>smallest-numbered</strong> unreserved seat, reserves it, and returns its number.</li> <li><code>void unreserve(int seatNumber)</code> Unreserves the seat with the given <code>seatNumber</code>.</li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= seatNumber &lt;= n</code></li> <li>For each call to <code>reserve</code>, it is guaranteed that there will be at least one unreserved seat.</li> <li>For each call to <code>unreserve</code>, it is guaranteed that <code>seatNumber</code> will be reserved.</li> <li>At most <code>10<sup>5</sup></code> calls <strong>in total</strong> will be made to <code>reserve</code> and <code>unreserve</code>.</li>",
    question:
      "<p>Design a system that manages the reservation state of <code>n</code> seats that are numbered from <code>1</code> to <code>n</code>.</p><p>Implement the <code>SeatManager</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["SeatManager", "reserve", "reserve", "unreserve", "reserve", "reserve", "reserve", "reserve", "unreserve"]\n[[5], [], [], [2], [], [], [], [], [5]]',
        outputText: "[null, 1, 2, null, 2, 3, 4, 5, null]",
        explanation:
          "SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve();    // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].",
      },
    ],
    tests:
      '[["SeatManager", "reserve", "reserve", "unreserve", "reserve", "reserve", "reserve", "reserve", "unreserve"]]',
    answer: "[[null, 1, 2, null, 2, 3, 4, 5, null]]",
    code: "/**\n * @param {number} n\n */\nvar SeatManager = function(n) {\n    \n};\n\n/**\n * @return {number}\n */\nSeatManager.prototype.reserve = function() {\n    \n};\n\n/** \n * @param {number} seatNumber\n * @return {void}\n */\nSeatManager.prototype.unreserve = function(seatNumber) {\n    \n};\n\n/** \n * Your SeatManager object will be instantiated and called as such:\n * var obj = new SeatManager(n)\n * var param_1 = obj.reserve()\n * obj.unreserve(seatNumber)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1961,
    title: "Maximum Ice Cream Bars",
    titleSlug: "maximum-ice-cream-bars",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li><code>costs.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= coins &lt;= 10<sup>8</sup></code></li>",
    question:
      "<p>It is a sweltering summer day, and a boy wants to buy some ice cream bars.</p><p>At the store, there are <code>n</code> ice cream bars. You are given an array <code>costs</code> of length <code>n</code>, where <code>costs[i]</code> is the price of the <code>i<sup>th</sup></code> ice cream bar in coins. The boy initially has <code>coins</code> coins to spend, and he wants to buy as many ice cream bars as possible.\u00a0</p><p><strong>Note:</strong> The boy can buy the ice cream bars in any order.</p><p>Return <em>the <strong>maximum</strong> number of ice cream bars the boy can buy with </em><code>coins</code><em> coins.</em></p><p>You must solve the problem by counting sort.</p>",
    examples: [
      {
        id: 1,
        inputText: "costs = [1,3,2,4,1], coins = 7",
        outputText: "4",
        explanation:
          "The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.",
      },
      {
        id: 2,
        inputText: "costs = [10,6,8,7,7,8], coins = 5",
        outputText: "0",
        explanation: "The boy cannot afford any of the ice cream bars.",
      },
      {
        id: 3,
        inputText: "costs = [1,6,3,1,2,5], coins = 20",
        outputText: "6",
        explanation:
          "The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.",
      },
    ],
    tests: "[[1, 3, 2, 4, 1], [10, 6, 8, 7, 7, 8], [1, 6, 3, 1, 2, 5]]",
    answer: "[4, 0, 6]",
    code: "/**\n * @param {number[]} costs\n * @param {number} coins\n * @return {number}\n */\nvar maxIceCream = function(costs, coins) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1965,
    title: "Sum of Digits in Base K",
    titleSlug: "sum-of-digits-in-base-k",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math"],
    constaints:
      "<li><code>1 &lt;= n &lt;= 100</code></li> <li><code>2 &lt;= k &lt;= 10</code></li>",
    question:
      "<p>Given an integer <code>n</code> (in base <code>10</code>) and a base <code>k</code>, return <em>the <strong>sum</strong> of the digits of </em><code>n</code><em> <strong>after</strong> converting </em><code>n</code><em> from base </em><code>10</code><em> to base </em><code>k</code>.</p><p>After converting, each digit should be interpreted as a base <code>10</code> number, and the sum should be returned in base <code>10</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 34, k = 6",
        outputText: "9",
        explanation: "34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.",
      },
      {
        id: 2,
        inputText: "n = 10, k = 10",
        outputText: "1",
        explanation: "n is already in base 10. 1 + 0 = 1.",
      },
    ],
    tests: "[34, 10]",
    answer: "[9, 1]",
    code: "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar sumBase = function(n, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1970,
    title: "Sorting the Sentence",
    titleSlug: "sorting-the-sentence",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Sorting"],
    constaints:
      '<li>For example, the sentence <code>"This is a sentence"</code> can be shuffled as <code>"sentence4 a3 is2 This1"</code> or <code>"is2 sentence4 This1 a3"</code>.</li> <li><code>2 &lt;= s.length &lt;= 200</code></li> <li><code>s</code> consists of lowercase and uppercase English letters, spaces, and digits from <code>1</code> to <code>9</code>.</li> <li>The number of words in <code>s</code> is between <code>1</code> and <code>9</code>.</li> <li>The words in <code>s</code> are separated by a single space.</li> <li><code>s</code> contains no leading or trailing spaces.</li>',
    question:
      "<p>A <strong>sentence</strong> is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.</p><p>A sentence can be <strong>shuffled</strong> by appending the <strong>1-indexed word position</strong> to each word then rearranging the words in the sentence.</p><p>Given a <strong>shuffled sentence</strong> <code>s</code> containing no more than <code>9</code> words, reconstruct and return <em>the original sentence</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "is2 sentence4 This1 a3"',
        outputText: '"This is a sentence"',
        explanation:
          'Sort the words in s to their original positions "This1 is2 a3 sentence4", then remove the numbers.',
      },
      {
        id: 2,
        inputText: 's = "Myself2 Me1 I4 and3"',
        outputText: '"Me Myself and I"',
        explanation:
          'Sort the words in s to their original positions "Me1 Myself2 and3 I4", then remove the numbers.',
      },
    ],
    tests: '["is2 sentence4 This1 a3", "Myself2 Me1 I4 and3"]',
    answer: '["This is a sentence", "Me Myself and I"]',
    code: "/**\n * @param {string} s\n * @return {string}\n */\nvar sortSentence = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1971,
    title: "Incremental Memory Leak",
    titleSlug: "incremental-memory-leak",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Simulation"],
    constaints:
      "<li><code>0 &lt;= memory1, memory2 &lt;= 2<sup>31</sup> - 1</code></li>",
    question:
      "<p>You are given two integers <code>memory1</code> and <code>memory2</code> representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.</p><p>At the <code>i<sup>th</sup></code> second (starting from 1), <code>i</code> bits of memory are allocated to the stick with <strong>more available memory</strong> (or from the first memory stick if both have the same available memory). If neither stick has at least <code>i</code> bits of available memory, the program <strong>crashes</strong>.</p><p>Return <em>an array containing </em><code>[crashTime, memory1<sub>crash</sub>, memory2<sub>crash</sub>]</code><em>, where </em><code>crashTime</code><em> is the time (in seconds) when the program crashed and </em><code>memory1<sub>crash</sub></code><em> and </em><code>memory2<sub>crash</sub></code><em> are the available bits of memory in the first and second sticks respectively</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "memory1 = 2, memory2 = 2",
        outputText: "[3,1,0]",
        explanation: "The memory is allocated as follows:\n- At the 1",
      },
      {
        id: 2,
        inputText: "memory1 = 8, memory2 = 11",
        outputText: "[6,0,4]",
        explanation: "The memory is allocated as follows:\n- At the 1",
      },
    ],
    tests: "[2, 8]",
    answer: "[[3, 1, 0], [6, 0, 4]]",
    code: "/**\n * @param {number} memory1\n * @param {number} memory2\n * @return {number[]}\n */\nvar memLeak = function(memory1, memory2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1975,
    title: "Minimum Distance to the Target Element",
    titleSlug: "minimum-distance-to-the-target-element",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= start &lt; nums.length</code></li> <li><code>target</code> is in <code>nums</code>.</li>",
    question:
      "<p>Given an integer array <code>nums</code> <strong>(0-indexed)</strong> and two integers <code>target</code> and <code>start</code>, find an index <code>i</code> such that <code>nums[i] == target</code> and <code>abs(i - start)</code> is <strong>minimized</strong>. Note that\u00a0<code>abs(x)</code>\u00a0is the absolute value of <code>x</code>.</p><p>Return <code>abs(i - start)</code>.</p><p>It is <strong>guaranteed</strong> that <code>target</code> exists in <code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4,5], target = 5, start = 3",
        outputText: "1",
        explanation:
          "nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.",
      },
      {
        id: 2,
        inputText: "nums = [1], target = 1, start = 0",
        outputText: "0",
        explanation:
          "nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.",
      },
      {
        id: 3,
        inputText: "nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0",
        outputText: "0",
        explanation:
          "Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",
    answer: "[1, 0, 0]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @param {number} start\n * @return {number}\n */\nvar getMinDistance = function(nums, target, start) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1983,
    title: "Maximum Population Year",
    titleSlug: "maximum-population-year",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Counting", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= logs.length &lt;= 100</code></li> <li><code>1950 &lt;= birth<sub>i</sub> &lt; death<sub>i</sub> &lt;= 2050</code></li>",
    question:
      "<p>You are given a 2D integer array <code>logs</code> where each <code>logs[i] = [birth<sub>i</sub>, death<sub>i</sub>]</code> indicates the birth and death years of the <code>i<sup>th</sup></code> person.</p><p>The <strong>population</strong> of some year <code>x</code> is the number of people alive during that year. The <code>i<sup>th</sup></code> person is counted in year <code>x</code>'s population if <code>x</code> is in the <strong>inclusive</strong> range <code>[birth<sub>i</sub>, death<sub>i</sub> - 1]</code>. Note that the person is <strong>not</strong> counted in the year that they die.</p><p>Return <em>the <strong>earliest</strong> year with the <strong>maximum population</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "logs = [[1993,1999],[2000,2010]]",
        outputText: "1993",
        explanation:
          "The maximum population is 1, and 1993 is the earliest year with this population.",
      },
      {
        id: 2,
        inputText: "logs = [[1950,1961],[1960,1971],[1970,1981]]",
        outputText: "1960",
        explanation:
          "The maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.",
      },
    ],
    tests:
      "[[[1993, 1999], [2000, 2010]], [[1950, 1961], [1960, 1971], [1970, 1981]]]",
    answer: "[1993, 1960]",
    code: "/**\n * @param {number[][]} logs\n * @return {number}\n */\nvar maximumPopulation = function(logs) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1987,
    title: "Substrings of Size Three with Distinct Characters",
    titleSlug: "substrings-of-size-three-with-distinct-characters",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Sliding Window", "Counting"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.</li>",
    question:
      "<p>A string is <strong>good</strong> if there are no repeated characters.</p><p>Given a string <code>s</code>\u200b\u200b\u200b\u200b\u200b, return <em>the number of <strong>good substrings</strong> of length <strong>three </strong>in </em><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b.</p><p>Note that if there are multiple occurrences of the same substring, every occurrence should be counted.</p><p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "xyzzaz"',
        outputText: "1",
        explanation:
          'There are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz". \nThe only good substring of length 3 is "xyz".',
      },
      {
        id: 2,
        inputText: 's = "aababcabc"',
        outputText: "4",
        explanation:
          'There are 7 substrings of size 3: "aab", "aba", "bab", "abc", "bca", "cab", and "abc".\nThe good substrings are "abc", "bca", "cab", and "abc".',
      },
    ],
    tests: '["xyzzaz", "aababcabc"]',
    answer: "[1, 4]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar countGoodSubstrings = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1988,
    title: "Minimize Maximum Pair Sum in Array",
    titleSlug: "minimize-maximum-pair-sum-in-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Greedy", "Sorting"],
    constaints:
      "<li>For example, if we have pairs <code>(1,5)</code>, <code>(2,3)</code>, and <code>(4,4)</code>, the <strong>maximum pair sum</strong> would be <code>max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8</code>.</li> <li>Each element of <code>nums</code> is in <strong>exactly one</strong> pair, and</li> <li>The <strong>maximum pair sum </strong>is <strong>minimized</strong>.</li> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>n</code> is <strong>even</strong>.</li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>The <strong>pair sum</strong> of a pair <code>(a,b)</code> is equal to <code>a + b</code>. The <strong>maximum pair sum</strong> is the largest <strong>pair sum</strong> in a list of pairs.</p><p>Given an array <code>nums</code> of <strong>even</strong> length <code>n</code>, pair up the elements of <code>nums</code> into <code>n / 2</code> pairs such that:</p><p>Return <em>the minimized <strong>maximum pair sum</strong> after optimally pairing up the elements</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,5,2,3]",
        outputText: "7",
        explanation:
          "The elements can be paired up into pairs (3,3) and (5,2).\r\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.",
      },
      {
        id: 2,
        inputText: "nums = [3,5,4,2,4,6]",
        outputText: "8",
        explanation:
          "The elements can be paired up into pairs (3,5), (4,4), and (6,2).\r\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.",
      },
    ],
    tests: "[[3, 5, 2, 3], [3, 5, 4, 2, 4, 6]]",
    answer: "[7, 8]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minPairSum = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1993,
    title: "Sum of All Subset XOR Totals",
    titleSlug: "sum-of-all-subset-xor-totals",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Array",
      "Math",
      "Backtracking",
      "Bit Manipulation",
      "Combinatorics",
    ],
    constaints:
      "<li>For example, the <strong>XOR total</strong> of the array <code>[2,5,6]</code> is <code>2 XOR 5 XOR 6 = 1</code>.</li> <li><code>1 &lt;= nums.length &lt;= 12</code></li> <li><code>1 &lt;= nums[i] &lt;= 20</code></li>",
    question:
      "<p>The <strong>XOR total</strong> of an array is defined as the bitwise <code>XOR</code> of<strong> all its elements</strong>, or <code>0</code> if the array is<strong> empty</strong>.</p><p>Given an array <code>nums</code>, return <em>the <strong>sum</strong> of all <strong>XOR totals</strong> for every <strong>subset</strong> of </em><code>nums</code>.\u00a0</p><p><strong>Note:</strong> Subsets with the <strong>same</strong> elements should be counted <strong>multiple</strong> times.</p><p>An array <code>a</code> is a <strong>subset</strong> of an array <code>b</code> if <code>a</code> can be obtained from <code>b</code> by deleting some (possibly zero) elements of <code>b</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,3]",
        outputText: "6",
        explanation:
          "The 4 subsets of [1,3] are:\n- The empty subset has an XOR total of 0.\n- [1] has an XOR total of 1.\n- [3] has an XOR total of 3.\n- [1,3] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6",
      },
      {
        id: 2,
        inputText: "nums = [5,1,6]",
        outputText: "28",
        explanation:
          "The 8 subsets of [5,1,6] are:\n- The empty subset has an XOR total of 0.\n- [5] has an XOR total of 5.\n- [1] has an XOR total of 1.\n- [6] has an XOR total of 6.\n- [5,1] has an XOR total of 5 XOR 1 = 4.\n- [5,6] has an XOR total of 5 XOR 6 = 3.\n- [1,6] has an XOR total of 1 XOR 6 = 7.\n- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28",
      },
      {
        id: 3,
        inputText: "nums = [3,4,5,6,7,8]",
        outputText: "480",
        explanation: "The sum of all XOR totals for every subset is 480.",
      },
    ],
    tests: "[[1, 3], [5, 1, 6], [3, 4, 5, 6, 7, 8]]",
    answer: "[6, 28, 480]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar subsetXORSum = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 1999,
    title: "Longer Contiguous Segments of Ones than Zeros",
    titleSlug: "longer-contiguous-segments-of-ones-than-zeros",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>For example, in <code>s = \"<u>11</u>01<u>000</u>10\"</code> the longest continuous segment of <code>1</code>s has length <code>2</code>, and the longest continuous segment of <code>0</code>s has length <code>3</code>.</li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li>",
    question:
      "<p>Given a binary string <code>s</code>, return <code>true</code><em> if the <strong>longest</strong> contiguous segment of </em><code>1</code>'<em>s is <strong>strictly longer</strong> than the <strong>longest</strong> contiguous segment of </em><code>0</code>'<em>s in </em><code>s</code>, or return <code>false</code><em> otherwise</em>.</p><p>Note that if there are no <code>0</code>'s, then the longest continuous segment of <code>0</code>'s is considered to have a length <code>0</code>. The same applies if there is no <code>1</code>'s.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "1101"',
        outputText: "true",
        explanation: 'The longest contiguous segment of 1s has length 2: "',
      },
      {
        id: 2,
        inputText: 's = "111000"',
        outputText: "false",
        explanation: 'The longest contiguous segment of 1s has length 3: "',
      },
      {
        id: 3,
        inputText: 's = "110100010"',
        outputText: "false",
        explanation: 'The longest contiguous segment of 1s has length 2: "',
      },
    ],
    tests: '["1101", "111000", "110100010"]',
    answer: "[true, false, false]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkZeroOnes = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2005,
    title: "Check if All the Integers in a Range Are Covered",
    titleSlug: "check-if-all-the-integers-in-a-range-are-covered",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Prefix Sum"],
    constaints:
      "<li><code>1 &lt;= ranges.length &lt;= 50</code></li> <li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 50</code></li> <li><code>1 &lt;= left &lt;= right &lt;= 50</code></li>",
    question:
      "<p>You are given a 2D integer array <code>ranges</code> and two integers <code>left</code> and <code>right</code>. Each <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represents an <strong>inclusive</strong> interval between <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code>.</p><p>Return <code>true</code> <em>if each integer in the inclusive range</em> <code>[left, right]</code> <em>is covered by <strong>at least one</strong> interval in</em> <code>ranges</code>. Return <code>false</code> <em>otherwise</em>.</p><p>An integer <code>x</code> is covered by an interval <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> if <code>start<sub>i</sub> &lt;= x &lt;= end<sub>i</sub></code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5",
        outputText: "true",
        explanation:
          "Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range.",
      },
      {
        id: 2,
        inputText: "ranges = [[1,10],[10,20]], left = 21, right = 21",
        outputText: "false",
        explanation: "21 is not covered by any range.",
      },
    ],
    tests: "[[[1, 2], [3, 4], [5, 6]], [[1, 10], [10, 20]]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[][]} ranges\n * @param {number} left\n * @param {number} right\n * @return {boolean}\n */\nvar isCovered = function(ranges, left, right) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2010,
    title: "Check if Word Equals Summation of Two Words",
    titleSlug: "check-if-word-equals-summation-of-two-words",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>For example, if <code>s = \"acb\"</code>, we concatenate each letter's letter value, resulting in <code>\"021\"</code>. After converting it, we get <code>21</code>.</li> <li><code>1 &lt;= firstWord.length, </code><code>secondWord.length, </code><code>targetWord.length &lt;= 8</code></li> <li><code>firstWord</code>, <code>secondWord</code>, and <code>targetWord</code> consist of lowercase English letters from <code>'a'</code> to <code>'j'</code> <strong>inclusive</strong>.</li>",
    question:
      "<p>The <strong>letter value</strong> of a letter is its position in the alphabet <strong>starting from 0</strong> (i.e. <code>'a' -&gt; 0</code>, <code>'b' -&gt; 1</code>, <code>'c' -&gt; 2</code>, etc.).</p><p>The <strong>numerical value</strong> of some string of lowercase English letters <code>s</code> is the <strong>concatenation</strong> of the <strong>letter values</strong> of each letter in <code>s</code>, which is then <strong>converted</strong> into an integer.</p><p>You are given three strings <code>firstWord</code>, <code>secondWord</code>, and <code>targetWord</code>, each consisting of lowercase English letters <code>'a'</code> through <code>'j'</code> <strong>inclusive</strong>.</p><p>Return <code>true</code> <em>if the <strong>summation</strong> of the <strong>numerical values</strong> of </em><code>firstWord</code><em> and </em><code>secondWord</code><em> equals the <strong>numerical value</strong> of </em><code>targetWord</code><em>, or </em><code>false</code><em> otherwise.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 'firstWord = "acb", secondWord = "cba", targetWord = "cdb"',
        outputText: "true",
        explanation:
          'The numerical value of firstWord is "acb" -> "021" -> 21.\nThe numerical value of secondWord is "cba" -> "210" -> 210.\nThe numerical value of targetWord is "cdb" -> "231" -> 231.\nWe return true because 21 + 210 == 231.',
      },
      {
        id: 2,
        inputText: 'firstWord = "aaa", secondWord = "a", targetWord = "aab"',
        outputText: "false",
        explanation:
          'The numerical value of firstWord is "aaa" -> "000" -> 0.\nThe numerical value of secondWord is "a" -> "0" -> 0.\nThe numerical value of targetWord is "aab" -> "001" -> 1.\nWe return false because 0 + 0 != 1.',
      },
      {
        id: 3,
        inputText: 'firstWord = "aaa", secondWord = "a", targetWord = "aaaa"',
        outputText: "true",
        explanation:
          'The numerical value of firstWord is "aaa" -> "000" -> 0.\nThe numerical value of secondWord is "a" -> "0" -> 0.\nThe numerical value of targetWord is "aaaa" -> "0000" -> 0.\nWe return true because 0 + 0 == 0.',
      },
    ],
    tests: '["acb", "aaa", "aaa"]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} firstWord\n * @param {string} secondWord\n * @param {string} targetWord\n * @return {boolean}\n */\nvar isSumEqual = function(firstWord, secondWord, targetWord) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2015,
    title: "Determine Whether Matrix Can Be Obtained By Rotation",
    titleSlug: "determine-whether-matrix-can-be-obtained-by-rotation",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix"],
    constaints:
      "<li><code>n == mat.length == target.length</code></li> <li><code>n == mat[i].length == target[i].length</code></li> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>mat[i][j]</code> and <code>target[i][j]</code> are either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>Given two <code>n x n</code> binary matrices <code>mat</code> and <code>target</code>, return <code>true</code><em> if it is possible to make </em><code>mat</code><em> equal to </em><code>target</code><em> by <strong>rotating</strong> </em><code>mat</code><em> in <strong>90-degree increments</strong>, or </em><code>false</code><em> otherwise.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "mat = [[0,1],[1,0]], target = [[1,0],[0,1]]",
        outputText: "true",
        explanation:
          "We can rotate mat 90 degrees clockwise to make mat equal target.",
      },
      {
        id: 2,
        inputText: "mat = [[0,1],[1,1]], target = [[1,0],[0,1]]",
        outputText: "false",
        explanation:
          "It is impossible to make mat equal to target by rotating mat.",
      },
      {
        id: 3,
        inputText:
          "mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]",
        outputText: "true",
        explanation:
          "We can rotate mat 90 degrees clockwise two times to make mat equal target.",
      },
    ],
    tests:
      "[[[0, 1], [1, 0]], [[0, 1], [1, 1]], [[0, 0, 0], [0, 1, 0], [1, 1, 1]]]",
    answer: "[true, false, true]",
    code: "/**\n * @param {number[][]} mat\n * @param {number[][]} target\n * @return {boolean}\n */\nvar findRotation = function(mat, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2021,
    title: "Remove All Occurrences of a Substring",
    titleSlug: "remove-all-occurrences-of-a-substring",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>Find the <strong>leftmost</strong> occurrence of the substring <code>part</code> and <strong>remove</strong> it from <code>s</code>.</li> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>1 &lt;= part.length &lt;= 1000</code></li> <li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>part</code> consists of lowercase English letters.</li>",
    question:
      "<p>Given two strings <code>s</code> and <code>part</code>, perform the following operation on <code>s</code> until <strong>all</strong> occurrences of the substring <code>part</code> are removed:</p><p>Return <code>s</code><em> after removing all occurrences of </em><code>part</code>.</p><p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "daabcbaabcbc", part = "abc"',
        outputText: '"dab"',
        explanation: ': The following operations are done:\n- s = "da',
      },
      {
        id: 2,
        inputText: 's = "axxxxyyyyb", part = "xy"',
        outputText: '"ab"',
        explanation: ': The following operations are done:\n- s = "axxx',
      },
    ],
    tests: '["daabcbaabcbc", "axxxxyyyyb"]',
    answer: '["dab", "ab"]',
    code: "/**\n * @param {string} s\n * @param {string} part\n * @return {string}\n */\nvar removeOccurrences = function(s, part) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2032,
    title: "Largest Odd Number in String",
    titleSlug: "largest-odd-number-in-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "String", "Greedy"],
    constaints:
      "<li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li> <li><code>num</code> only consists of digits and does not contain any leading zeros.</li>",
    question:
      '<p>You are given a string <code>num</code>, representing a large integer. Return <em>the <strong>largest-valued odd</strong> integer (as a string) that is a <strong>non-empty substring</strong> of </em><code>num</code><em>, or an empty string </em><code>""</code><em> if no odd integer exists</em>.</p><p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>',
    examples: [
      {
        id: 1,
        inputText: 'num = "52"',
        outputText: '"5"',
        explanation:
          'The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.',
      },
      {
        id: 2,
        inputText: 'num = "4206"',
        outputText: '""',
        explanation: 'There are no odd numbers in "4206".',
      },
      {
        id: 3,
        inputText: 'num = "35427"',
        outputText: '"35427"',
        explanation: '"35427" is already an odd number.',
      },
    ],
    tests: '["52", "4206", "35427"]',
    answer: '["5", "", "35427"]',
    code: "/**\n * @param {string} num\n * @return {string}\n */\nvar largestOddNumber = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2033,
    title: "The Number of Full Rounds You Have Played",
    titleSlug: "the-number-of-full-rounds-you-have-played",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String"],
    constaints:
      "<li>For example, the second round starts at <code>00:15</code>, the fourth round starts at <code>00:45</code>, and the seventh round starts at <code>01:30</code>.</li> <li><code>loginTime</code> is the time you will login to the game, and</li> <li><code>logoutTime</code> is the time you will logout from the game.</li> <li><code>loginTime</code> and <code>logoutTime</code> are in the format <code>hh:mm</code>.</li> <li><code>00 &lt;= hh &lt;= 23</code></li> <li><code>00 &lt;= mm &lt;= 59</code></li> <li><code>loginTime</code> and <code>logoutTime</code> are not equal.</li>",
    question:
      "<p>You are participating in an online chess tournament. There is a chess round that starts every <code>15</code> minutes. The first round of the day starts at <code>00:00</code>, and after every <code>15</code> minutes, a new round starts.</p><p>You are given two strings <code>loginTime</code> and <code>logoutTime</code> where:</p><p>If <code>logoutTime</code> is <strong>earlier</strong> than <code>loginTime</code>, this means you have played from <code>loginTime</code> to midnight and from midnight to <code>logoutTime</code>.</p><p>Return <em>the number of full chess rounds you have played in the tournament</em>.</p><p><strong>Note:</strong>\u00a0All the given times follow the 24-hour clock. That means the first round of the day starts at <code>00:00</code> and the last round of the day starts at <code>23:45</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'loginTime = "09:31", logoutTime = "10:14"',
        outputText: "1",
        explanation:
          "You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.",
      },
      {
        id: 2,
        inputText: 'loginTime = "21:30", logoutTime = "03:00"',
        outputText: "22",
        explanation:
          "You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22.",
      },
    ],
    tests: '["09:31", "21:30"]',
    answer: "[1, 22]",
    code: "/**\n * @param {string} loginTime\n * @param {string} logoutTime\n * @return {number}\n */\nvar numberOfRounds = function(loginTime, logoutTime) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2037,
    title: "Count Square Sum Triples",
    titleSlug: "count-square-sum-triples",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Enumeration"],
    constaints: "<li><code>1 &lt;= n &lt;= 250</code></li>",
    question:
      "<p>A <strong>square triple</strong> <code>(a,b,c)</code> is a triple where <code>a</code>, <code>b</code>, and <code>c</code> are <strong>integers</strong> and <code>a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></code>.</p><p>Given an integer <code>n</code>, return <em>the number of <strong>square triples</strong> such that </em><code>1 &lt;= a, b, c &lt;= n</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 5",
        outputText: "2",
        explanation: ": The square triples are (3,4,5) and (4,3,5).",
      },
      {
        id: 2,
        inputText: "n = 10",
        outputText: "4",
        explanation:
          ": The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).",
      },
    ],
    tests: "[5, 10]",
    answer: "[2, 4]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar countTriples = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2038,
    title: "Nearest Exit from Entrance in Maze",
    titleSlug: "nearest-exit-from-entrance-in-maze",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Breadth-First Search", "Matrix"],
    constaints:
      "<li><code>maze.length == m</code></li> <li><code>maze[i].length == n</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>maze[i][j]</code> is either <code>'.'</code> or <code>'+'</code>.</li> <li><code>entrance.length == 2</code></li> <li><code>0 &lt;= entrance<sub>row</sub> &lt; m</code></li> <li><code>0 &lt;= entrance<sub>col</sub> &lt; n</code></li> <li><code>entrance</code> will always be an empty cell.</li>",
    question:
      "<p>You are given an <code>m x n</code> matrix <code>maze</code> (<strong>0-indexed</strong>) with empty cells (represented as <code>'.'</code>) and walls (represented as <code>'+'</code>). You are also given the <code>entrance</code> of the maze, where <code>entrance = [entrance<sub>row</sub>, entrance<sub>col</sub>]</code> denotes the row and column of the cell you are initially standing at.</p><p>In one step, you can move one cell <strong>up</strong>, <strong>down</strong>, <strong>left</strong>, or <strong>right</strong>. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the <strong>nearest exit</strong> from the <code>entrance</code>. An <strong>exit</strong> is defined as an <strong>empty cell</strong> that is at the <strong>border</strong> of the <code>maze</code>. The <code>entrance</code> <strong>does not count</strong> as an exit.</p><p>Return <em>the <strong>number of steps</strong> in the shortest path from the </em><code>entrance</code><em> to the nearest exit, or </em><code>-1</code><em> if no such path exists</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'maze = [["+","+",".","+"],[".",".",".","+"],["+","+","+","."]], entrance = [1,2]',
        outputText: "1",
        explanation:
          "There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2].\n- You can reach [1,0] by moving 2 steps left.\n- You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away.",
      },
      {
        id: 2,
        inputText:
          'maze = [["+","+","+"],[".",".","."],["+","+","+"]], entrance = [1,0]',
        outputText: "2",
        explanation:
          "There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0].\n- You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away.",
      },
      {
        id: 3,
        inputText: 'maze = [[".","+"]], entrance = [0,0]',
        outputText: "-1",
        explanation: "There are no exits in this maze.",
      },
    ],
    tests:
      '[[["+", "+", ".", "+"], [".", ".", ".", "+"], ["+", "+", "+", "."]], [["+", "+", "+"], [".", ".", "."], ["+", "+", "+"]], [[".", "+"]]]',
    answer: "[1, 2, -1]",
    code: "/**\n * @param {character[][]} maze\n * @param {number[]} entrance\n * @return {number}\n */\nvar nearestExit = function(maze, entrance) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2042,
    title: "Maximum Product Difference Between Two Pairs",
    titleSlug: "maximum-product-difference-between-two-pairs",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li>For example, the product difference between <code>(5, 6)</code> and <code>(2, 7)</code> is <code>(5 * 6) - (2 * 7) = 16</code>.</li> <li><code>4 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>The <strong>product difference</strong> between two pairs <code>(a, b)</code> and <code>(c, d)</code> is defined as <code>(a * b) - (c * d)</code>.</p><p>Given an integer array <code>nums</code>, choose four <strong>distinct</strong> indices <code>w</code>, <code>x</code>, <code>y</code>, and <code>z</code> such that the <strong>product difference</strong> between pairs <code>(nums[w], nums[x])</code> and <code>(nums[y], nums[z])</code> is <strong>maximized</strong>.</p><p>Return <em>the <strong>maximum</strong> such product difference</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [5,6,2,7,4]",
        outputText: "34",
        explanation:
          "We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\r\nThe product difference is (6 * 7) - (2 * 4) = 34.",
      },
      {
        id: 2,
        inputText: "nums = [4,2,5,9,7,4,8]",
        outputText: "64",
        explanation:
          "We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\r\nThe product difference is (9 * 8) - (2 * 4) = 64.",
      },
    ],
    tests: "[[5, 6, 2, 7, 4], [4, 2, 5, 9, 7, 4, 8]]",
    answer: "[34, 64]",
    code: "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxProductDifference = function(nums) {\r\n    \r\n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2048,
    title: "Build Array from Permutation",
    titleSlug: "build-array-from-permutation",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Simulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt; nums.length</code></li> <li>The elements in <code>nums</code> are <strong>distinct</strong>.</li>",
    question:
      "<p>Given a <strong>zero-based permutation</strong> <code>nums</code> (<strong>0-indexed</strong>), build an array <code>ans</code> of the <strong>same length</strong> where <code>ans[i] = nums[nums[i]]</code> for each <code>0 &lt;= i &lt; nums.length</code> and return it.</p><p>A <strong>zero-based permutation</strong> <code>nums</code> is an array of <strong>distinct</strong> integers from <code>0</code> to <code>nums.length - 1</code> (<strong>inclusive</strong>).</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,2,1,5,3,4]",
        outputText: "[0,1,2,4,5,3]",
        explanation:
          "The array ans is built as follows: \nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n    = [0,1,2,4,5,3]",
      },
      {
        id: 2,
        inputText: "nums = [5,0,1,2,3,4]",
        outputText: "[4,5,0,1,2,3]",
        explanation:
          "The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n    = [4,5,0,1,2,3]",
      },
    ],
    tests: "[[0, 2, 1, 5, 3, 4], [5, 0, 1, 2, 3, 4]]",
    answer: "[[0, 1, 2, 4, 5, 3], [4, 5, 0, 1, 2, 3]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar buildArray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2053,
    title: "Check if All Characters Have Equal Number of Occurrences",
    titleSlug: "check-if-all-characters-have-equal-number-of-occurrences",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Counting"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of lowercase English letters.</li>",
    question:
      "<p>Given a string <code>s</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>good</strong> string, or </em><code>false</code><em> otherwise</em>.</p><p>A string <code>s</code> is <strong>good</strong> if <strong>all</strong> the characters that appear in <code>s</code> have the <strong>same</strong> number of occurrences (i.e., the same frequency).</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abacbc"',
        outputText: "true",
        explanation:
          "The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.",
      },
      {
        id: 2,
        inputText: 's = "aaabb"',
        outputText: "false",
        explanation:
          "The characters that appear in s are 'a' and 'b'.\n'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.",
      },
    ],
    tests: '["abacbc", "aaabb"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar areOccurrencesEqual = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2058,
    title: "Concatenation of Array",
    titleSlug: "concatenation-of-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Simulation"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>Given an integer array <code>nums</code> of length <code>n</code>, you want to create an array <code>ans</code> of length <code>2n</code> where <code>ans[i] == nums[i]</code> and <code>ans[i + n] == nums[i]</code> for <code>0 &lt;= i &lt; n</code> (<strong>0-indexed</strong>).</p><p>Specifically, <code>ans</code> is the <strong>concatenation</strong> of two <code>nums</code> arrays.</p><p>Return <em>the array </em><code>ans</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,1]",
        outputText: "[1,2,1,1,2,1]",
        explanation:
          "The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]",
      },
      {
        id: 2,
        inputText: "nums = [1,3,2,1]",
        outputText: "[1,3,2,1,1,3,2,1]",
        explanation:
          "The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n- ans = [1,3,2,1,1,3,2,1]",
      },
    ],
    tests: "[[1, 2, 1], [1, 3, 2, 1]]",
    answer: "[[1, 2, 1, 1, 2, 1], [1, 3, 2, 1, 1, 3, 2, 1]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar getConcatenation = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2076,
    title: "Sum of Digits of String After Convert",
    titleSlug: "sum-of-digits-of-string-after-convert",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Simulation"],
    constaints:
      '<li><strong>Convert</strong>: <code>"zbax" \u279d "(26)(2)(1)(24)" \u279d "262124" \u279d 262124</code></li> <li><strong>Transform #1</strong>: <code>262124 \u279d 2 + 6 + 2 + 1 + 2 + 4\u00a0\u279d 17</code></li> <li><strong>Transform #2</strong>: <code>17 \u279d 1 + 7 \u279d 8</code></li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 10</code></li> <li><code>s</code> consists of lowercase English letters.</li>',
    question:
      "<p>You are given a string <code>s</code> consisting of lowercase English letters, and an integer <code>k</code>.</p><p>First, <strong>convert</strong> <code>s</code> into an integer by replacing each letter with its position in the alphabet (i.e., replace <code>'a'</code> with <code>1</code>, <code>'b'</code> with <code>2</code>, ..., <code>'z'</code> with <code>26</code>). Then, <strong>transform</strong> the integer by replacing it with the <strong>sum of its digits</strong>. Repeat the <strong>transform</strong> operation <code>k</code><strong> times</strong> in total.</p><p>For example, if <code>s = \"zbax\"</code> and <code>k = 2</code>, then the resulting integer would be <code>8</code> by the following operations:</p><p>Return <em>the resulting integer after performing the operations described above</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "iiii", k = 1',
        outputText: "36",
        explanation:
          'The operations are as follows:\n- Convert: "iiii" \u279d "(9)(9)(9)(9)" \u279d "9999" \u279d 9999\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36\nThus the resulting integer is 36.',
      },
      {
        id: 2,
        inputText: 's = "leetcode", k = 2',
        outputText: "6",
        explanation:
          'The operations are as follows:\n- Convert: "leetcode" \u279d "(12)(5)(5)(20)(3)(15)(4)(5)" \u279d "12552031545" \u279d 12552031545\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33\n- Transform #2: 33 \u279d 3 + 3 \u279d 6\nThus the resulting integer is 6.',
      },
      {
        id: 3,
        inputText: 's = "zbax", k = 2',
        outputText: "8",
        explanation: "",
      },
    ],
    tests: '["iiii", "leetcode", "zbax"]',
    answer: "[36, 6, 8]",
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar getLucky = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2083,
    title: "Three Divisors",
    titleSlug: "three-divisors",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Enumeration", "Number Theory"],
    constaints: "<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>",
    question:
      "<p>Given an integer <code>n</code>, return <code>true</code><em> if </em><code>n</code><em> has <strong>exactly three positive divisors</strong>. Otherwise, return </em><code>false</code>.</p><p>An integer <code>m</code> is a <strong>divisor</strong> of <code>n</code> if there exists an integer <code>k</code> such that <code>n = k * m</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 2",
        outputText: "false",
        explanation: "2 has only two divisors: 1 and 2.",
      },
      {
        id: 2,
        inputText: "n = 4",
        outputText: "true",
        explanation: "4 has three divisors: 1, 2, and 4.",
      },
    ],
    tests: "[2, 4]",
    answer: "[false, true]",
    code: "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isThree = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2085,
    title: "Array With Elements Not Equal to Average of Neighbors",
    titleSlug: "array-with-elements-not-equal-to-average-of-neighbors",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of <strong>distinct</strong> integers. You want to rearrange the elements in the array such that every element in the rearranged array is <strong>not</strong> equal to the <strong>average</strong> of its neighbors.</p><p>More formally, the rearranged array should have the property such that for every <code>i</code> in the range <code>1 &lt;= i &lt; nums.length - 1</code>, <code>(nums[i-1] + nums[i+1]) / 2</code> is <strong>not</strong> equal to <code>nums[i]</code>.</p><p>Return <em><strong>any</strong> rearrangement of </em><code>nums</code><em> that meets the requirements</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,4,5]",
        outputText: "[1,2,4,5,3]",
        explanation:
          "When i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.",
      },
      {
        id: 2,
        inputText: "nums = [6,2,0,9,7]",
        outputText: "[9,7,6,2,0]",
        explanation:
          "When i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.",
      },
    ],
    tests: "[[1, 2, 3, 4, 5], [6, 2, 0, 9, 7]]",
    answer: "[[1, 2, 4, 5, 3], [9, 7, 6, 2, 0]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar rearrangeArray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2088,
    title: "Minimum Time to Type Word Using Special Typewriter",
    titleSlug: "minimum-time-to-type-word-using-special-typewriter",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Greedy"],
    constaints:
      "<li>Move the pointer one character <strong>counterclockwise</strong> or <strong>clockwise</strong>.</li> <li>Type the character the pointer is <strong>currently</strong> on.</li> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>word</code> consists of lowercase English letters.</li>",
    question:
      "<p>There is a special typewriter with lowercase English letters <code>'a'</code> to <code>'z'</code> arranged in a <strong>circle</strong> with a <strong>pointer</strong>. A character can <strong>only</strong> be typed if the pointer is pointing to that character. The pointer is <strong>initially</strong> pointing to the character <code>'a'</code>.</p><p>Each second, you may perform one of the following operations:</p><p>Given a string <code>word</code>, return the<strong> minimum</strong> number of seconds to type out the characters in <code>word</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'word = "abc"',
        outputText: "5",
        explanation:
          "The characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second.",
      },
      {
        id: 2,
        inputText: 'word = "bza"',
        outputText: "7",
        explanation:
          "The characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second.",
      },
      {
        id: 3,
        inputText: 'word = "zjpc"',
        outputText: "34",
        explanation:
          "The characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second.",
      },
    ],
    tests: '["abc", "bza", "zjpc"]',
    answer: "[5, 7, 34]",
    code: "/**\n * @param {string} word\n * @return {number}\n */\nvar minTimeToType = function(word) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2093,
    title: "Check If String Is a Prefix of Array",
    titleSlug: "check-if-string-is-a-prefix-of-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "String"],
    constaints:
      "<li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>words[i]</code> and <code>s</code> consist of only lowercase English letters.</li>",
    question:
      "<p>Given a string <code>s</code> and an array of strings <code>words</code>, determine whether <code>s</code> is a <strong>prefix string</strong> of <code>words</code>.</p><p>A string <code>s</code> is a <strong>prefix string</strong> of <code>words</code> if <code>s</code> can be made by concatenating the first <code>k</code> strings in <code>words</code> for some <strong>positive</strong> <code>k</code> no larger than <code>words.length</code>.</p><p>Return <code>true</code><em> if </em><code>s</code><em> is a <strong>prefix string</strong> of </em><code>words</code><em>, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          's = "iloveleetcode", words = ["i","love","leetcode","apples"]',
        outputText: "true",
        explanation:
          's can be made by concatenating "i", "love", and "leetcode" together.',
      },
      {
        id: 2,
        inputText:
          's = "iloveleetcode", words = ["apples","i","love","leetcode"]',
        outputText: "false",
        explanation: "It is impossible to make s using a prefix of arr.",
      },
    ],
    tests: '["iloveleetcode", "iloveleetcode"]',
    answer: "[true, false]",
    code: "/**\n * @param {string} s\n * @param {string[]} words\n * @return {boolean}\n */\nvar isPrefixString = function(s, words) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2099,
    title: "Number of Strings That Appear as Substrings in Word",
    titleSlug: "number-of-strings-that-appear-as-substrings-in-word",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= patterns.length &lt;= 100</code></li> <li><code>1 &lt;= patterns[i].length &lt;= 100</code></li> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>patterns[i]</code> and <code>word</code> consist of lowercase English letters.</li>",
    question:
      "<p>Given an array of strings <code>patterns</code> and a string <code>word</code>, return <em>the <strong>number</strong> of strings in </em><code>patterns</code><em> that exist as a <strong>substring</strong> in </em><code>word</code>.</p><p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>",
    examples: [
      {
        id: 1,
        inputText: 'patterns = ["a","abc","bc","d"], word = "abc"',
        outputText: "3",
        explanation: '- "a" appears as a substring in "',
      },
      {
        id: 2,
        inputText: 'patterns = ["a","b","c"], word = "aaaaabbbbb"',
        outputText: "2",
        explanation: '- "a" appears as a substring in "a',
      },
      {
        id: 3,
        inputText: 'patterns = ["a","a","a"], word = "ab"',
        outputText: "3",
        explanation: 'Each of the patterns appears as a substring in word "',
      },
    ],
    tests: '[["a", "abc", "bc", "d"], ["a", "b", "c"], ["a", "a", "a"]]',
    answer: "[3, 2, 3]",
    code: "/**\n * @param {string[]} patterns\n * @param {string} word\n * @return {number}\n */\nvar numOfStrings = function(patterns, word) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2103,
    title: "Find All Groups of Farmland",
    titleSlug: "find-all-groups-of-farmland",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Depth-First Search", "Breadth-First Search", "Matrix"],
    constaints:
      "<li><code>m == land.length</code></li> <li><code>n == land[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>land</code> consists of only <code>0</code>'s and <code>1</code>'s.</li> <li>Groups of farmland are <strong>rectangular</strong> in shape.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> binary matrix <code>land</code> where a <code>0</code> represents a hectare of forested land and a <code>1</code> represents a hectare of farmland.</p><p>To keep the land organized, there are designated rectangular areas of hectares that consist <strong>entirely</strong> of farmland. These rectangular areas are called <strong>groups</strong>. No two groups are adjacent, meaning farmland in one group is <strong>not</strong> four-directionally adjacent to another farmland in a different group.</p><p><code>land</code> can be represented by a coordinate system where the top left corner of <code>land</code> is <code>(0, 0)</code> and the bottom right corner of <code>land</code> is <code>(m-1, n-1)</code>. Find the coordinates of the top left and bottom right corner of each <strong>group</strong> of farmland. A <strong>group</strong> of farmland with a top left corner at <code>(r<sub>1</sub>, c<sub>1</sub>)</code> and a bottom right corner at <code>(r<sub>2</sub>, c<sub>2</sub>)</code> is represented by the 4-length array <code>[r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>].</code></p><p>Return <em>a 2D array containing the 4-length arrays described above for each <strong>group</strong> of farmland in </em><code>land</code><em>. If there are no groups of farmland, return an empty array. You may return the answer in <strong>any order</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "land = [[1,0,0],[0,1,1],[0,1,1]]",
        outputText: "[[0,0,0,0],[1,1,2,2]]",
        explanation:
          "The first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].\nThe second group has a top left corner at land[1][1] and a bottom right corner at land[2][2].",
      },
      {
        id: 2,
        inputText: "land = [[1,1],[1,1]]",
        outputText: "[[0,0,1,1]]",
        explanation:
          "The first group has a top left corner at land[0][0] and a bottom right corner at land[1][1].",
      },
      {
        id: 3,
        inputText: "land = [[0]]",
        outputText: "[]",
        explanation: "There are no groups of farmland.",
      },
    ],
    tests: "[[[1, 0, 0], [0, 1, 1], [0, 1, 1]], [[1, 1], [1, 1]], [[0]]]",
    answer: "[[[0, 0, 0, 0], [1, 1, 2, 2]], [[0, 0, 1, 1]], []]",
    code: "/**\n * @param {number[][]} land\n * @return {number[][]}\n */\nvar findFarmland = function(land) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2106,
    title: "Find Greatest Common Divisor of Array",
    titleSlug: "find-greatest-common-divisor-of-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Math", "Number Theory"],
    constaints:
      "<li><code>2 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, return<strong> </strong><em>the <strong>greatest common divisor</strong> of the smallest number and largest number in </em><code>nums</code>.</p><p>The <strong>greatest common divisor</strong> of two numbers is the largest positive integer that evenly divides both numbers.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,5,6,9,10]",
        outputText: "2",
        explanation:
          "The smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2.",
      },
      {
        id: 2,
        inputText: "nums = [7,5,6,8,3]",
        outputText: "1",
        explanation:
          "The smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1.",
      },
      {
        id: 3,
        inputText: "nums = [3,3]",
        outputText: "3",
        explanation:
          "The smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3.",
      },
    ],
    tests: "[[2, 5, 6, 9, 10], [7, 5, 6, 8, 3], [3, 3]]",
    answer: "[2, 1, 3]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findGCD = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2107,
    title: "Find Unique Binary String",
    titleSlug: "find-unique-binary-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Backtracking"],
    constaints:
      "<li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 16</code></li> <li><code>nums[i].length == n</code></li> <li><code>nums[i] </code>is either <code>'0'</code> or <code>'1'</code>.</li> <li>All the strings of <code>nums</code> are <strong>unique</strong>.</li>",
    question:
      "<p>Given an array of strings <code>nums</code> containing <code>n</code> <strong>unique</strong> binary strings each of length <code>n</code>, return <em>a binary string of length </em><code>n</code><em> that <strong>does not appear</strong> in </em><code>nums</code><em>. If there are multiple answers, you may return <strong>any</strong> of them</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'nums = ["01","10"]',
        outputText: '"11"',
        explanation:
          '"11" does not appear in nums. "00" would also be correct.',
      },
      {
        id: 2,
        inputText: 'nums = ["00","01"]',
        outputText: '"11"',
        explanation:
          '"11" does not appear in nums. "10" would also be correct.',
      },
      {
        id: 3,
        inputText: 'nums = ["111","011","001"]',
        outputText: '"101"',
        explanation:
          '"101" does not appear in nums. "000", "010", "100", and "110" would also be correct.',
      },
    ],
    tests: '[["01", "10"], ["00", "01"], ["111", "011", "001"]]',
    answer: '["11", "11", "101"]',
    code: "/**\n * @param {string[]} nums\n * @return {string}\n */\nvar findDifferentBinaryString = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2108,
    title: "Minimize the Difference Between Target and Chosen Elements",
    titleSlug: "minimize-the-difference-between-target-and-chosen-elements",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Matrix"],
    constaints:
      "<li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 70</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 70</code></li> <li><code>1 &lt;= target &lt;= 800</code></li>",
    question:
      "<p>You are given an <code>m x n</code> integer matrix <code>mat</code> and an integer <code>target</code>.</p><p>Choose one integer from <strong>each row</strong> in the matrix such that the <strong>absolute difference</strong> between <code>target</code> and the <strong>sum</strong> of the chosen elements is <strong>minimized</strong>.</p><p>Return <em>the <strong>minimum absolute difference</strong></em>.</p><p>The <strong>absolute difference</strong> between two numbers <code>a</code> and <code>b</code> is the absolute value of <code>a - b</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13",
        outputText: "0",
        explanation:
          "One possible choice is to:\n- Choose 1 from the first row.\n- Choose 5 from the second row.\n- Choose 7 from the third row.\nThe sum of the chosen elements is 13, which equals the target, so the absolute difference is 0.",
      },
      {
        id: 2,
        inputText: "mat = [[1],[2],[3]], target = 100",
        outputText: "94",
        explanation:
          "The best possible choice is to:\n- Choose 1 from the first row.\n- Choose 2 from the second row.\n- Choose 3 from the third row.\nThe sum of the chosen elements is 6, and the absolute difference is 94.",
      },
      {
        id: 3,
        inputText: "mat = [[1,2,9,8,7]], target = 6",
        outputText: "1",
        explanation:
          "The best choice is to choose 7 from the first row.\nThe absolute difference is 1.",
      },
    ],
    tests:
      "[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1], [2], [3]], [[1, 2, 9, 8, 7]]]",
    answer: "[0, 94, 1]",
    code: "/**\n * @param {number[][]} mat\n * @param {number} target\n * @return {number}\n */\nvar minimizeTheDifference = function(mat, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2112,
    title: "Minimum Difference Between Highest and Lowest of K Scores",
    titleSlug: "minimum-difference-between-highest-and-lowest-of-k-scores",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sliding Window", "Sorting"],
    constaints:
      "<li><code>1 &lt;= k &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, where <code>nums[i]</code> represents the score of the <code>i<sup>th</sup></code> student. You are also given an integer <code>k</code>.</p><p>Pick the scores of any <code>k</code> students from the array so that the <strong>difference</strong> between the <strong>highest</strong> and the <strong>lowest</strong> of the <code>k</code> scores is <strong>minimized</strong>.</p><p>Return <em>the <strong>minimum</strong> possible difference</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [90], k = 1",
        outputText: "0",
        explanation: "There is one way to pick score(s) of one student:\n- [",
      },
      {
        id: 2,
        inputText: "nums = [9,4,1,7], k = 2",
        outputText: "2",
        explanation:
          "There are six ways to pick score(s) of two students:\n- [",
      },
    ],
    tests: "[[90], [9, 4, 1, 7]]",
    answer: "[0, 2]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumDifference = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2113,
    title: "Find the Kth Largest Integer in the Array",
    titleSlug: "find-the-kth-largest-integer-in-the-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "String",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect",
    ],
    constaints:
      "<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i].length &lt;= 100</code></li> <li><code>nums[i]</code> consists of only digits.</li> <li><code>nums[i]</code> will not have any leading zeros.</li>",
    question:
      '<p>You are given an array of strings <code>nums</code> and an integer <code>k</code>. Each string in <code>nums</code> represents an integer without leading zeros.</p><p>Return <em>the string that represents the </em><code>k<sup>th</sup></code><em><strong> largest integer</strong> in </em><code>nums</code>.</p><p><strong>Note</strong>: Duplicate numbers should be counted distinctly. For example, if <code>nums</code> is <code>["1","2","2"]</code>, <code>"2"</code> is the first largest integer, <code>"2"</code> is the second-largest integer, and <code>"1"</code> is the third-largest integer.</p>',
    examples: [
      {
        id: 1,
        inputText: 'nums = ["3","6","7","10"], k = 4',
        outputText: '"3"',
        explanation:
          'The numbers in nums sorted in non-decreasing order are ["3","6","7","10"].\nThe 4',
      },
      {
        id: 2,
        inputText: 'nums = ["2","21","12","1"], k = 3',
        outputText: '"2"',
        explanation:
          'The numbers in nums sorted in non-decreasing order are ["1","2","12","21"].\nThe 3',
      },
      {
        id: 3,
        inputText: 'nums = ["0","0"], k = 2',
        outputText: '"0"',
        explanation:
          'The numbers in nums sorted in non-decreasing order are ["0","0"].\nThe 2',
      },
    ],
    tests: '[["3", "6", "7", "10"], ["2", "21", "12", "1"], ["0", "0"]]',
    answer: '["3", "2", "0"]',
    code: "/**\n * @param {string[]} nums\n * @param {number} k\n * @return {string}\n */\nvar kthLargestNumber = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2116,
    title: "Count Number of Pairs With Absolute Difference K",
    titleSlug: "count-number-of-pairs-with-absolute-difference-k",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Counting"],
    constaints:
      "<li><code>x</code> if <code>x &gt;= 0</code>.</li> <li><code>-x</code> if <code>x &lt; 0</code>.</li> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 99</code></li>",
    question:
      "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the number of pairs</em> <code>(i, j)</code> <em>where</em> <code>i &lt; j</code> <em>such that</em> <code>|nums[i] - nums[j]| == k</code>.</p><p>The value of <code>|x|</code> is defined as:</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,2,1], k = 1",
        outputText: "4",
        explanation: "The pairs with an absolute difference of 1 are:\n- [",
      },
      {
        id: 2,
        inputText: "nums = [1,3], k = 3",
        outputText: "0",
        explanation: "There are no pairs with an absolute difference of 3.",
      },
      {
        id: 3,
        inputText: "nums = [3,2,1,5,4], k = 2",
        outputText: "3",
        explanation: "The pairs with an absolute difference of 2 are:\n- [",
      },
    ],
    tests: "[[1, 2, 2, 1], [1, 3], [3, 2, 1, 5, 4]]",
    answer: "[4, 0, 3]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countKDifference = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2121,
    title: "Find if Path Exists in Graph",
    titleSlug: "find-if-path-exists-in-graph",
    difficulty: "Easy",
    category: "Algorithms",
    topics: [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
    ],
    constaints:
      "<li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li> <li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li><code>0 &lt;= source, destination &lt;= n - 1</code></li> <li>There are no duplicate edges.</li> <li>There are no self edges.</li>",
    question:
      "<p>There is a <strong>bi-directional</strong> graph with <code>n</code> vertices, where each vertex is labeled from <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>). The edges in the graph are represented as a 2D integer array <code>edges</code>, where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> denotes a bi-directional edge between vertex <code>u<sub>i</sub></code> and vertex <code>v<sub>i</sub></code>. Every vertex pair is connected by <strong>at most one</strong> edge, and no vertex has an edge to itself.</p><p>You want to determine if there is a <strong>valid path</strong> that exists from vertex <code>source</code> to vertex <code>destination</code>.</p><p>Given <code>edges</code> and the integers <code>n</code>, <code>source</code>, and <code>destination</code>, return <code>true</code><em> if there is a <strong>valid path</strong> from </em><code>source</code><em> to </em><code>destination</code><em>, or </em><code>false</code><em> otherwise</em><em>.</em></p>",
    examples: [
      {
        id: 1,
        inputText:
          "n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2",
        outputText: "true",
        explanation:
          "There are two paths from vertex 0 to vertex 2:\n- 0 \u2192 1 \u2192 2\n- 0 \u2192 2",
      },
      {
        id: 2,
        inputText:
          "n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5",
        outputText: "false",
        explanation: "There is no path from vertex 0 to vertex 5.",
      },
    ],
    tests: "[3, 6]",
    answer: "[true, false]",
    code: "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} source\n * @param {number} destination\n * @return {boolean}\n */\nvar validPath = function(n, edges, source, destination) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2122,
    title: "Count Special Quadruplets",
    titleSlug: "count-special-quadruplets",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Enumeration"],
    constaints:
      "<li><code>nums[a] + nums[b] + nums[c] == nums[d]</code>, and</li> <li><code>a &lt; b &lt; c &lt; d</code></li> <li><code>4 &lt;= nums.length &lt;= 50</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, return <em>the number of <strong>distinct</strong> quadruplets</em> <code>(a, b, c, d)</code> <em>such that:</em></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3,6]",
        outputText: "1",
        explanation:
          "The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6.",
      },
      {
        id: 2,
        inputText: "nums = [3,3,6,4,5]",
        outputText: "0",
        explanation: "There are no such quadruplets in [3,3,6,4,5].",
      },
      {
        id: 3,
        inputText: "nums = [1,1,1,3,5]",
        outputText: "4",
        explanation:
          "The 4 quadruplets that satisfy the requirement are:\n- (0, 1, 2, 3): 1 + 1 + 1 == 3\n- (0, 1, 3, 4): 1 + 1 + 3 == 5\n- (0, 2, 3, 4): 1 + 1 + 3 == 5\n- (1, 2, 3, 4): 1 + 1 + 3 == 5",
      },
    ],
    tests: "[[1, 2, 3, 6], [3, 3, 6, 4, 5], [1, 1, 1, 3, 5]]",
    answer: "[1, 0, 4]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countQuadruplets = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2123,
    title: "The Number of Weak Characters in the Game",
    titleSlug: "the-number-of-weak-characters-in-the-game",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Stack", "Greedy", "Sorting", "Monotonic Stack"],
    constaints:
      "<li><code>2 &lt;= properties.length &lt;= 10<sup>5</sup></code></li> <li><code>properties[i].length == 2</code></li> <li><code>1 &lt;= attack<sub>i</sub>, defense<sub>i</sub> &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are playing a game that contains multiple characters, and each of the characters has <strong>two</strong> main properties: <strong>attack</strong> and <strong>defense</strong>. You are given a 2D integer array <code>properties</code> where <code>properties[i] = [attack<sub>i</sub>, defense<sub>i</sub>]</code> represents the properties of the <code>i<sup>th</sup></code> character in the game.</p><p>A character is said to be <strong>weak</strong> if any other character has <strong>both</strong> attack and defense levels <strong>strictly greater</strong> than this character's attack and defense levels. More formally, a character <code>i</code> is said to be <strong>weak</strong> if there exists another character <code>j</code> where <code>attack<sub>j</sub> &gt; attack<sub>i</sub></code> and <code>defense<sub>j</sub> &gt; defense<sub>i</sub></code>.</p><p>Return <em>the number of <strong>weak</strong> characters</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "properties = [[5,5],[6,3],[3,6]]",
        outputText: "0",
        explanation:
          "No character has strictly greater attack and defense than the other.",
      },
      {
        id: 2,
        inputText: "properties = [[2,2],[3,3]]",
        outputText: "1",
        explanation:
          "The first character is weak because the second character has a strictly greater attack and defense.",
      },
      {
        id: 3,
        inputText: "properties = [[1,5],[10,4],[4,3]]",
        outputText: "1",
        explanation:
          "The third character is weak because the second character has a strictly greater attack and defense.",
      },
    ],
    tests:
      "[[[5, 5], [6, 3], [3, 6]], [[2, 2], [3, 3]], [[1, 5], [10, 4], [4, 3]]]",
    answer: "[0, 1, 1]",
    code: "/**\n * @param {number[][]} properties\n * @return {number}\n */\nvar numberOfWeakCharacters = function(properties) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2132,
    title: "Convert 1D Array Into 2D Array",
    titleSlug: "convert-1d-array-into-2d-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Simulation"],
    constaints:
      "<li><code>1 &lt;= original.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= original[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m, n &lt;= 4 * 10<sup>4</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> 1-dimensional (1D) integer array <code>original</code>, and two integers, <code>m</code> and <code>n</code>. You are tasked with creating a 2-dimensional (2D) array with <code> m</code> rows and <code>n</code> columns using <strong>all</strong> the elements from <code>original</code>.</p><p>The elements from indices <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>) of <code>original</code> should form the first row of the constructed 2D array, the elements from indices <code>n</code> to <code>2 * n - 1</code> (<strong>inclusive</strong>) should form the second row of the constructed 2D array, and so on.</p><p>Return <em>an </em><code>m x n</code><em> 2D array constructed according to the above procedure, or an empty 2D array if it is impossible</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "original = [1,2,3,4], m = 2, n = 2",
        outputText: "[[1,2],[3,4]]",
        explanation:
          "The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.",
      },
      {
        id: 2,
        inputText: "original = [1,2,3], m = 1, n = 3",
        outputText: "[[1,2,3]]",
        explanation:
          "The constructed 2D array should contain 1 row and 3 columns.\nPut all three elements in original into the first row of the constructed 2D array.",
      },
      {
        id: 3,
        inputText: "original = [1,2], m = 1, n = 1",
        outputText: "[]",
        explanation:
          "There are 2 elements in original.\nIt is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.",
      },
    ],
    tests: "[[1, 2, 3, 4], [1, 2, 3], [1, 2]]",
    answer: "[[[1, 2], [3, 4]], [[1, 2, 3]], []]",
    code: "/**\n * @param {number[]} original\n * @param {number} m\n * @param {number} n\n * @return {number[][]}\n */\nvar construct2DArray = function(original, m, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2133,
    title: "Number of Pairs of Strings With Concatenation Equal to Target",
    titleSlug: "number-of-pairs-of-strings-with-concatenation-equal-to-target",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Counting"],
    constaints:
      "<li><code>2 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i].length &lt;= 100</code></li> <li><code>2 &lt;= target.length &lt;= 100</code></li> <li><code>nums[i]</code> and <code>target</code> consist of digits.</li> <li><code>nums[i]</code> and <code>target</code> do not have leading zeros.</li>",
    question:
      "<p>Given an array of <strong>digit</strong> strings <code>nums</code> and a <strong>digit</strong> string <code>target</code>, return <em>the number of pairs of indices </em><code>(i, j)</code><em> (where </em><code>i != j</code><em>) such that the <strong>concatenation</strong> of </em><code>nums[i] + nums[j]</code><em> equals </em><code>target</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'nums = ["777","7","77","77"], target = "7777"',
        outputText: "4",
        explanation:
          'Valid pairs are:\n- (0, 1): "777" + "7"\n- (1, 0): "7" + "777"\n- (2, 3): "77" + "77"\n- (3, 2): "77" + "77"',
      },
      {
        id: 2,
        inputText: 'nums = ["123","4","12","34"], target = "1234"',
        outputText: "2",
        explanation:
          'Valid pairs are:\n- (0, 1): "123" + "4"\n- (2, 3): "12" + "34"',
      },
      {
        id: 3,
        inputText: 'nums = ["1","1","1"], target = "11"',
        outputText: "6",
        explanation:
          'Valid pairs are:\n- (0, 1): "1" + "1"\n- (1, 0): "1" + "1"\n- (0, 2): "1" + "1"\n- (2, 0): "1" + "1"\n- (1, 2): "1" + "1"\n- (2, 1): "1" + "1"',
      },
    ],
    tests:
      '[["777", "7", "77", "77"], ["123", "4", "12", "34"], ["1", "1", "1"]]',
    answer: "[4, 2, 6]",
    code: "/**\n * @param {string[]} nums\n * @param {string} target\n * @return {number}\n */\nvar numOfPairs = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2134,
    title: "Maximize the Confusion of an Exam",
    titleSlug: "maximize-the-confusion-of-an-exam",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Binary Search", "Sliding Window", "Prefix Sum"],
    constaints:
      "<li>Change the answer key for any question to <code>'T'</code> or <code>'F'</code> (i.e., set <code>answerKey[i]</code> to <code>'T'</code> or <code>'F'</code>).</li> <li><code>n == answerKey.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>answerKey[i]</code> is either <code>'T'</code> or <code>'F'</code></li> <li><code>1 &lt;= k &lt;= n</code></li>",
    question:
      "<p>A teacher is writing a test with <code>n</code> true/false questions, with <code>'T'</code> denoting true and <code>'F'</code> denoting false. He wants to confuse the students by <strong>maximizing</strong> the number of <strong>consecutive</strong> questions with the <strong>same</strong> answer (multiple trues or multiple falses in a row).</p><p>You are given a string <code>answerKey</code>, where <code>answerKey[i]</code> is the original answer to the <code>i<sup>th</sup></code> question. In addition, you are given an integer <code>k</code>, the maximum number of times you may perform the following operation:</p><p>Return <em>the <strong>maximum</strong> number of consecutive</em> <code>'T'</code>s or <code>'F'</code>s <em>in the answer key after performing the operation at most</em> <code>k</code> <em>times</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'answerKey = "TTFF", k = 2',
        outputText: "4",
        explanation:
          "We can replace both the 'F's with 'T's to make answerKey = \"",
      },
      {
        id: 2,
        inputText: 'answerKey = "TFFT", k = 1',
        outputText: "3",
        explanation:
          "We can replace the first 'T' with an 'F' to make answerKey = \"",
      },
      {
        id: 3,
        inputText: 'answerKey = "TTFTTFTT", k = 1',
        outputText: "5",
        explanation: "We can replace the first 'F' to make answerKey = \"",
      },
    ],
    tests: '["TTFF", "TFFT", "TTFTTFTT"]',
    answer: "[4, 3, 5]",
    code: "/**\n * @param {string} answerKey\n * @param {number} k\n * @return {number}\n */\nvar maxConsecutiveAnswers = function(answerKey, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2138,
    title: "Sum of Beauty in the Array",
    titleSlug: "sum-of-beauty-in-the-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>2</code>, if <code>nums[j] &lt; nums[i] &lt; nums[k]</code>, for <strong>all</strong> <code>0 &lt;= j &lt; i</code> and for <strong>all</strong> <code>i &lt; k &lt;= nums.length - 1</code>.</li> <li><code>1</code>, if <code>nums[i - 1] &lt; nums[i] &lt; nums[i + 1]</code>, and the previous condition is not satisfied.</li> <li><code>0</code>, if none of the previous conditions holds.</li> <li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. For each index <code>i</code> (<code>1 &lt;= i &lt;= nums.length - 2</code>) the <strong>beauty</strong> of <code>nums[i]</code> equals:</p><p>Return<em> the <strong>sum of beauty</strong> of all </em><code>nums[i]</code><em> where </em><code>1 &lt;= i &lt;= nums.length - 2</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,3]",
        outputText: "2",
        explanation:
          "For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 2.",
      },
      {
        id: 2,
        inputText: "nums = [2,4,6,4]",
        outputText: "1",
        explanation:
          "For each index i in the range 1 <= i <= 2:\n- The beauty of nums[1] equals 1.\n- The beauty of nums[2] equals 0.",
      },
      {
        id: 3,
        inputText: "nums = [3,2,1]",
        outputText: "0",
        explanation:
          "For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 0.",
      },
    ],
    tests: "[[1, 2, 3], [2, 4, 6, 4], [3, 2, 1]]",
    answer: "[2, 1, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfBeauties = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2145,
    title: "Grid Game",
    titleSlug: "grid-game",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Prefix Sum"],
    constaints:
      "<li><code>grid.length == 2</code></li> <li><code>n == grid[r].length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= grid[r][c] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> 2D array <code>grid</code> of size <code>2 x n</code>, where <code>grid[r][c]</code> represents the number of points at position <code>(r, c)</code> on the matrix. Two robots are playing a game on this matrix.</p><p>Both robots initially start at <code>(0, 0)</code> and want to reach <code>(1, n-1)</code>. Each robot may only move to the <strong>right</strong> (<code>(r, c)</code> to <code>(r, c + 1)</code>) or <strong>down </strong>(<code>(r, c)</code> to <code>(r + 1, c)</code>).</p><p>At the start of the game, the <strong>first</strong> robot moves from <code>(0, 0)</code> to <code>(1, n-1)</code>, collecting all the points from the cells on its path. For all cells <code>(r, c)</code> traversed on the path, <code>grid[r][c]</code> is set to <code>0</code>. Then, the <strong>second</strong> robot moves from <code>(0, 0)</code> to <code>(1, n-1)</code>, collecting the points on its path. Note that their paths may intersect with one another.</p><p>The <strong>first</strong> robot wants to <strong>minimize</strong> the number of points collected by the <strong>second</strong> robot. In contrast, the <strong>second </strong>robot wants to <strong>maximize</strong> the number of points it collects. If both robots play <strong>optimally</strong>, return <em>the <b>number of points</b> collected by the <strong>second</strong> robot.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "grid = [[2,5,4],[1,5,1]]",
        outputText: "4",
        explanation:
          "The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 0 + 4 + 0 = 4 points.",
      },
      {
        id: 2,
        inputText: "grid = [[3,3,1],[8,5,2]]",
        outputText: "4",
        explanation:
          "The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 3 + 1 + 0 = 4 points.",
      },
      {
        id: 3,
        inputText: "grid = [[1,3,1,15],[1,3,3,1]]",
        outputText: "7",
        explanation:
          "The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.",
      },
    ],
    tests:
      "[[[2, 5, 4], [1, 5, 1]], [[3, 3, 1], [8, 5, 2]], [[1, 3, 1, 15], [1, 3, 3, 1]]]",
    answer: "[4, 4, 7]",
    code: "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar gridGame = function(grid) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2146,
    title: "Check if Word Can Be Placed In Crossword",
    titleSlug: "check-if-word-can-be-placed-in-crossword",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Matrix", "Enumeration"],
    constaints:
      "<li>It does not occupy a cell containing the character <code>'#'</code>.</li> <li>The cell each letter is placed in must either be <code>' '</code> (empty) or <strong>match</strong> the letter already on the <code>board</code>.</li> <li>There must not be any empty cells <code>' '</code> or other lowercase letters <strong>directly left or right</strong><strong> </strong>of the word if the word was placed <strong>horizontally</strong>.</li> <li>There must not be any empty cells <code>' '</code> or other lowercase letters <strong>directly above or below</strong> the word if the word was placed <strong>vertically</strong>.</li> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li> <li><code>board[i][j]</code> will be <code>' '</code>, <code>'#'</code>, or a lowercase English letter.</li> <li><code>1 &lt;= word.length &lt;= max(m, n)</code></li> <li><code>word</code> will contain only lowercase English letters.</li>",
    question:
      "<p>You are given an <code>m x n</code> matrix <code>board</code>, representing the<strong> current </strong>state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), <code>' '</code> to represent any <strong>empty </strong>cells, and <code>'#'</code> to represent any <strong>blocked</strong> cells.</p><p>A word can be placed<strong> horizontally</strong> (left to right <strong>or</strong> right to left) or <strong>vertically</strong> (top to bottom <strong>or</strong> bottom to top) in the board if:</p><p>Given a string <code>word</code>, return <code>true</code><em> if </em><code>word</code><em> can be placed in </em><code>board</code><em>, or </em><code>false</code><em> <strong>otherwise</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          'board = [["#", " ", "#"], [" ", " ", "#"], ["#", "c", " "]], word = "abc"',
        outputText: "true",
        explanation:
          'The word "abc" can be placed as shown above (top to bottom).',
      },
      {
        id: 2,
        inputText:
          'board = [[" ", "#", "a"], [" ", "#", "c"], [" ", "#", "a"]], word = "ac"',
        outputText: "false",
        explanation:
          "It is impossible to place the word because there will always be a space/letter above or below it.",
      },
      {
        id: 3,
        inputText:
          'board = [["#", " ", "#"], [" ", " ", "#"], ["#", " ", "c"]], word = "ca"',
        outputText: "true",
        explanation:
          'The word "ca" can be placed as shown above (right to left).',
      },
    ],
    tests:
      '[[["#", " ", "#"], [" ", " ", "#"], ["#", "c", " "]], [[" ", "#", "a"], [" ", "#", "c"], [" ", "#", "a"]], [["#", " ", "#"], [" ", " ", "#"], ["#", " ", "c"]]]',
    answer: "[true, false, true]",
    code: "/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */\nvar placeWordInCrossword = function(board, word) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2148,
    title: "Minimum Number of Moves to Seat Everyone",
    titleSlug: "minimum-number-of-moves-to-seat-everyone",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li>Increase or decrease the position of the <code>i<sup>th</sup></code> student by <code>1</code> (i.e., moving the <code>i<sup>th</sup></code> student from position\u00a0<code>x</code>\u00a0to <code>x + 1</code> or <code>x - 1</code>)</li> <li><code>n == seats.length == students.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= seats[i], students[j] &lt;= 100</code></li>",
    question:
      "<p>There are <code>n</code> seats and <code>n</code> students in a room. You are given an array <code>seats</code> of length <code>n</code>, where <code>seats[i]</code> is the position of the <code>i<sup>th</sup></code> seat. You are also given the array <code>students</code> of length <code>n</code>, where <code>students[j]</code> is the position of the <code>j<sup>th</sup></code> student.</p><p>You may perform the following move any number of times:</p><p>Return <em>the <strong>minimum number of moves</strong> required to move each student to a seat</em><em> such that no two students are in the same seat.</em></p><p>Note that there may be <strong>multiple</strong> seats or students in the <strong>same </strong>position at the beginning.</p>",
    examples: [
      {
        id: 1,
        inputText: "seats = [3,1,5], students = [2,7,4]",
        outputText: "4",
        explanation:
          "The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.",
      },
      {
        id: 2,
        inputText: "seats = [4,1,5,9], students = [1,3,2,6]",
        outputText: "7",
        explanation:
          "The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used.",
      },
      {
        id: 3,
        inputText: "seats = [2,2,6,6], students = [1,3,2,6]",
        outputText: "4",
        explanation:
          "Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.",
      },
    ],
    tests: "[[3, 1, 5], [4, 1, 5, 9], [2, 2, 6, 6]]",
    answer: "[4, 7, 4]",
    code: "/**\n * @param {number[]} seats\n * @param {number[]} students\n * @return {number}\n */\nvar minMovesToSeat = function(seats, students) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2149,
    title: "Remove Colored Pieces if Both Neighbors are the Same Color",
    titleSlug: "remove-colored-pieces-if-both-neighbors-are-the-same-color",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String", "Greedy", "Game Theory"],
    constaints:
      "<li>Alice is only allowed to remove a piece colored <code>'A'</code> if <strong>both its neighbors</strong> are also colored <code>'A'</code>. She is <strong>not allowed</strong> to remove pieces that are colored <code>'B'</code>.</li> <li>Bob is only allowed to remove a piece colored <code>'B'</code> if <strong>both its neighbors</strong> are also colored <code>'B'</code>. He is <strong>not allowed</strong> to remove pieces that are colored <code>'A'</code>.</li> <li>Alice and Bob <strong>cannot</strong> remove pieces from the edge of the line.</li> <li>If a player cannot make a move on their turn, that player <strong>loses</strong> and the other player <strong>wins</strong>.</li> <li><code>1 &lt;=\u00a0colors.length &lt;= 10<sup>5</sup></code></li> <li><code>colors</code>\u00a0consists of only the letters\u00a0<code>'A'</code>\u00a0and\u00a0<code>'B'</code></li>",
    question:
      "<p>There are <code>n</code> pieces arranged in a line, and each piece is colored either by <code>'A'</code> or by <code>'B'</code>. You are given a string <code>colors</code> of length <code>n</code> where <code>colors[i]</code> is the color of the <code>i<sup>th</sup></code> piece.</p><p>Alice and Bob are playing a game where they take <strong>alternating turns</strong> removing pieces from the line. In this game, Alice moves<strong> first</strong>.</p><p>Assuming Alice and Bob play optimally, return <code>true</code><em> if Alice wins, or return </em><code>false</code><em> if Bob wins</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'colors = "AAABABB"',
        outputText: "true",
        explanation: "A",
      },
      {
        id: 2,
        inputText: 'colors = "AA"',
        outputText: "false",
        explanation:
          "Alice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false.",
      },
      {
        id: 3,
        inputText: 'colors = "ABBBBBBBAAA"',
        outputText: "false",
        explanation: "ABBBBBBBA",
      },
    ],
    tests: '["AAABABB", "AA", "ABBBBBBBAAA"]',
    answer: "[true, false, false]",
    code: "/**\n * @param {string} colors\n * @return {boolean}\n */\nvar winnerOfGame = function(colors) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2151,
    title: "The Time When the Network Becomes Idle",
    titleSlug: "the-time-when-the-network-becomes-idle",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Breadth-First Search", "Graph"],
    constaints:
      "<li>If it has not, it will <strong>resend</strong> the message periodically. The data server <code>i</code> will resend the message every <code>patience[i]</code> second(s), i.e., the data server <code>i</code> will resend the message if <code>patience[i]</code> second(s) have <strong>elapsed</strong> since the <strong>last</strong> time the message was sent from this server.</li> <li>Otherwise, <strong>no more resending</strong> will occur from this server.</li> <li><code>n == patience.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>patience[0] == 0</code></li> <li><code>1 &lt;= patience[i] &lt;= 10<sup>5</sup></code> for <code>1 &lt;= i &lt; n</code></li> <li><code>1 &lt;= edges.length &lt;= min(10<sup>5</sup>, n * (n - 1) / 2)</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li>There are no duplicate edges.</li> <li>Each server can directly or indirectly reach another server.</li>",
    question:
      "<p>There is a network of <code>n</code> servers, labeled from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates there is a message channel between servers <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>, and they can pass <strong>any</strong> number of messages to <strong>each other</strong> directly in <strong>one</strong> second. You are also given a <strong>0-indexed</strong> integer array <code>patience</code> of length <code>n</code>.</p><p>All servers are <strong>connected</strong>, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.</p><p>The server labeled <code>0</code> is the <strong>master</strong> server. The rest are <strong>data</strong> servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers <strong>optimally</strong>, so every message takes the <strong>least amount of time</strong> to arrive at the master server. The master server will process all newly arrived messages <strong>instantly</strong> and send a reply to the originating server via the <strong>reversed path</strong> the message had gone through.</p><p>At the beginning of second <code>0</code>, each data server sends its message to be processed. Starting from second <code>1</code>, at the <strong>beginning</strong> of <strong>every</strong> second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:</p><p>The network becomes <strong>idle</strong> when there are <strong>no</strong> messages passing between servers or arriving at servers.</p><p>Return <em>the <strong>earliest second</strong> starting from which the network becomes <strong>idle</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "edges = [[0,1],[1,2]], patience = [0,2,1]",
        outputText: "8",
        explanation:
          "At (the beginning of) second 0,\n- Data server 1 sends its message (denoted 1A) to the master server.\n- Data server 2 sends its message (denoted 2A) to the master server.\n\nAt second 1,\n- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.\n- Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.\n- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).\n\nAt second 2,\n- The reply 1A arrives at server 1. No more resending will occur from server 1.\n- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.\n- Server 2 resends the message (denoted 2C).\n...\nAt second 4,\n- The reply 2A arrives at server 2. No more resending will occur from server 2.\n...\nAt second 7, reply 2D arrives at server 2.\n\nStarting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.\nThis is the time when the network becomes idle.",
      },
      {
        id: 2,
        inputText: "edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]",
        outputText: "3",
        explanation:
          "Data servers 1 and 2 receive a reply back at the beginning of second 2.\nFrom the beginning of the second 3, the network becomes idle.",
      },
    ],
    tests: "[[[0, 1], [1, 2]], [[0, 1], [0, 2], [1, 2]]]",
    answer: "[8, 3]",
    code: "/**\n * @param {number[][]} edges\n * @param {number[]} patience\n * @return {number}\n */\nvar networkBecomesIdle = function(edges, patience) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2154,
    title: "Minimum Moves to Convert String",
    titleSlug: "minimum-moves-to-convert-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Greedy"],
    constaints:
      "<li><code>3 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'X'</code> or <code>'O'</code>.</li>",
    question:
      "<p>You are given a string <code>s</code> consisting of <code>n</code> characters which are either <code>'X'</code> or <code>'O'</code>.</p><p>A <strong>move</strong> is defined as selecting <strong>three</strong> <strong>consecutive characters</strong> of <code>s</code> and converting them to <code>'O'</code>. Note that if a move is applied to the character <code>'O'</code>, it will stay the <strong>same</strong>.</p><p>Return <em>the <strong>minimum</strong> number of moves required so that all the characters of </em><code>s</code><em> are converted to </em><code>'O'</code>.</p>",
    examples: [
      { id: 1, inputText: 's = "XXX"', outputText: "1", explanation: "XXX" },
      { id: 2, inputText: 's = "XXOX"', outputText: "2", explanation: "XXO" },
      {
        id: 3,
        inputText: 's = "OOOO"',
        outputText: "0",
        explanation: "There are no",
      },
    ],
    tests: '["XXX", "XXOX", "OOOO"]',
    answer: "[1, 2, 0]",
    code: "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumMoves = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2155,
    title: "Find Missing Observations",
    titleSlug: "find-missing-observations",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "Simulation"],
    constaints:
      "<li><code>m == rolls.length</code></li> <li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= rolls[i], mean &lt;= 6</code></li>",
    question:
      "<p>You have observations of <code>n + m</code> <strong>6-sided</strong> dice rolls with each face numbered from <code>1</code> to <code>6</code>. <code>n</code> of the observations went missing, and you only have the observations of <code>m</code> rolls. Fortunately, you have also calculated the <strong>average value</strong> of the <code>n + m</code> rolls.</p><p>You are given an integer array <code>rolls</code> of length <code>m</code> where <code>rolls[i]</code> is the value of the <code>i<sup>th</sup></code> observation. You are also given the two integers <code>mean</code> and <code>n</code>.</p><p>Return <em>an array of length </em><code>n</code><em> containing the missing observations such that the <strong>average value </strong>of the </em><code>n + m</code><em> rolls is <strong>exactly</strong> </em><code>mean</code>. If there are multiple valid answers, return <em>any of them</em>. If no such array exists, return <em>an empty array</em>.</p><p>The <strong>average value</strong> of a set of <code>k</code> numbers is the sum of the numbers divided by <code>k</code>.</p><p>Note that <code>mean</code> is an integer, so the sum of the <code>n + m</code> rolls should be divisible by <code>n + m</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "rolls = [3,2,4,3], mean = 4, n = 2",
        outputText: "[6,6]",
        explanation:
          "The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4.",
      },
      {
        id: 2,
        inputText: "rolls = [1,5,6], mean = 3, n = 4",
        outputText: "[2,3,2,2]",
        explanation:
          "The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3.",
      },
      {
        id: 3,
        inputText: "rolls = [1,2,3,4], mean = 6, n = 4",
        outputText: "[]",
        explanation:
          "It is impossible for the mean to be 6 no matter what the 4 missing rolls are.",
      },
    ],
    tests: "[[3, 2, 4, 3], [1, 5, 6], [1, 2, 3, 4]]",
    answer: "[[6, 6], [2, 3, 2, 2], []]",
    code: "/**\n * @param {number[]} rolls\n * @param {number} mean\n * @param {number} n\n * @return {number[]}\n */\nvar missingRolls = function(rolls, mean, n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2159,
    title: "Two Out of Three",
    titleSlug: "two-out-of-three",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums1.length, nums2.length, nums3.length &lt;= 100</code></li> <li><code>1 &lt;= nums1[i], nums2[j], nums3[k] &lt;= 100</code></li>",
    question: "",
    examples: [
      {
        id: 1,
        inputText: "nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]",
        outputText: "[3,2]",
        explanation:
          "The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2.",
      },
      {
        id: 2,
        inputText: "nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]",
        outputText: "[2,3,1]",
        explanation:
          "The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3.",
      },
      {
        id: 3,
        inputText: "nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]",
        outputText: "[]",
        explanation: "No value is present in at least two arrays.",
      },
    ],
    tests: "[[1, 1, 3, 2], [3, 1], [1, 2, 2]]",
    answer: "[[3, 2], [2, 3, 1], []]",
    code: "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number[]} nums3\n * @return {number[]}\n */\nvar twoOutOfThree = function(nums1, nums2, nums3) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2161,
    title: "Stock Price Fluctuation ",
    titleSlug: "stock-price-fluctuation",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Hash Table",
      "Design",
      "Heap (Priority Queue)",
      "Data Stream",
      "Ordered Set",
    ],
    constaints:
      "<li><strong>Updates</strong> the price of the stock at a particular timestamp, <strong>correcting</strong> the price from any previous records at the timestamp.</li> <li>Finds the <strong>latest price</strong> of the stock based on the current records. The <strong>latest price</strong> is the price at the latest timestamp recorded.</li> <li>Finds the <strong>maximum price</strong> the stock has been based on the current records.</li> <li>Finds the <strong>minimum price</strong> the stock has been based on the current records.</li> <li><code>StockPrice()</code> Initializes the object with no price records.</li> <li><code>void update(int timestamp, int price)</code> Updates the <code>price</code> of the stock at the given <code>timestamp</code>.</li> <li><code>int current()</code> Returns the <strong>latest price</strong> of the stock.</li> <li><code>int maximum()</code> Returns the <strong>maximum price</strong> of the stock.</li> <li><code>int minimum()</code> Returns the <strong>minimum price</strong> of the stock.</li> <li><code>1 &lt;= timestamp, price &lt;= 10<sup>9</sup></code></li> <li>At most <code>10<sup>5</sup></code> calls will be made <strong>in total</strong> to <code>update</code>, <code>current</code>, <code>maximum</code>, and <code>minimum</code>.</li> <li><code>current</code>, <code>maximum</code>, and <code>minimum</code> will be called <strong>only after</strong> <code>update</code> has been called <strong>at least once</strong>.</li>",
    question:
      "<p>You are given a stream of <strong>records</strong> about a particular stock. Each record contains a <strong>timestamp</strong> and the corresponding <strong>price</strong> of the stock at that timestamp.</p><p>Unfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream <strong>correcting</strong> the price of the previous wrong record.</p><p>Design an algorithm that:</p><p>Implement the <code>StockPrice</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["StockPrice", "update", "update", "current", "maximum", "update", "maximum", "update", "minimum"]\n[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]',
        outputText: "[null, null, null, 5, 10, null, 5, null, 2]",
        explanation:
          "StockPrice stockPrice = new StockPrice();\nstockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].\nstockPrice.update(2, 5);  // Timestamps are [1,2] with corresponding prices [10,5].\nstockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5.\nstockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1.\nstockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.\n                          // Timestamps are [1,2] with corresponding prices [3,5].\nstockPrice.maximum();     // return 5, the maximum price is 5 after the correction.\nstockPrice.update(4, 2);  // Timestamps are [1,2,4] with corresponding prices [3,5,2].\nstockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4.",
      },
    ],
    tests:
      '[["StockPrice", "update", "update", "current", "maximum", "update", "maximum", "update", "minimum"]]',
    answer: "[[null, null, null, 5, 10, null, 5, null, 2]]",
    code: "\nvar StockPrice = function() {\n    \n};\n\n/** \n * @param {number} timestamp \n * @param {number} price\n * @return {void}\n */\nStockPrice.prototype.update = function(timestamp, price) {\n    \n};\n\n/**\n * @return {number}\n */\nStockPrice.prototype.current = function() {\n    \n};\n\n/**\n * @return {number}\n */\nStockPrice.prototype.maximum = function() {\n    \n};\n\n/**\n * @return {number}\n */\nStockPrice.prototype.minimum = function() {\n    \n};\n\n/** \n * Your StockPrice object will be instantiated and called as such:\n * var obj = new StockPrice()\n * obj.update(timestamp,price)\n * var param_2 = obj.current()\n * var param_3 = obj.maximum()\n * var param_4 = obj.minimum()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2163,
    title: "Kth Distinct String in an Array",
    titleSlug: "kth-distinct-string-in-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Counting"],
    constaints:
      "<li><code>1 &lt;= k &lt;= arr.length &lt;= 1000</code></li> <li><code>1 &lt;= arr[i].length &lt;= 5</code></li> <li><code>arr[i]</code> consists of lowercase English letters.</li>",
    question:
      '<p>A <strong>distinct string</strong> is a string that is present only <strong>once</strong> in an array.</p><p>Given an array of strings <code>arr</code>, and an integer <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> <strong>distinct string</strong> present in </em><code>arr</code>. If there are <strong>fewer</strong> than <code>k</code> distinct strings, return <em>an <strong>empty string </strong></em><code>""</code>.</p><p>Note that the strings are considered in the <strong>order in which they appear</strong> in the array.</p>',
    examples: [
      {
        id: 1,
        inputText: 'arr = ["d","b","c","b","c","a"], k = 2',
        outputText: '"a"',
        explanation:
          'The only distinct strings in arr are "d" and "a".\n"d" appears 1',
      },
      {
        id: 2,
        inputText: 'arr = ["aaa","aa","a"], k = 1',
        outputText: '"aaa"',
        explanation: "All strings in arr are distinct, so the 1",
      },
      {
        id: 3,
        inputText: 'arr = ["a","b","a"], k = 3',
        outputText: '""',
        explanation:
          'The only distinct string is "b". Since there are fewer than 3 distinct strings, we return an empty string "".',
      },
    ],
    tests:
      '[["d", "b", "c", "b", "c", "a"], ["aaa", "aa", "a"], ["a", "b", "a"]]',
    answer: '["a", "aaa", ""]',
    code: "/**\n * @param {string[]} arr\n * @param {number} k\n * @return {string}\n */\nvar kthDistinct = function(arr, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2164,
    title: "Two Best Non-Overlapping Events",
    titleSlug: "two-best-non-overlapping-events",
    difficulty: "Medium",
    category: "Algorithms",
    topics: [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting",
      "Heap (Priority Queue)",
    ],
    constaints:
      "<li><code>2 &lt;= events.length &lt;= 10<sup>5</sup></code></li> <li><code>events[i].length == 3</code></li> <li><code>1 &lt;= startTime<sub>i</sub> &lt;= endTime<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= value<sub>i</sub> &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> 2D integer array of <code>events</code> where <code>events[i] = [startTime<sub>i</sub>, endTime<sub>i</sub>, value<sub>i</sub>]</code>. The <code>i<sup>th</sup></code> event starts at <code>startTime<sub>i</sub></code><sub> </sub>and ends at <code>endTime<sub>i</sub></code>, and if you attend this event, you will receive a value of <code>value<sub>i</sub></code>. You can choose <strong>at most</strong> <strong>two</strong> <strong>non-overlapping</strong> events to attend such that the sum of their values is <strong>maximized</strong>.</p><p>Return <em>this <strong>maximum</strong> sum.</em></p><p>Note that the start time and end time is <strong>inclusive</strong>: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time <code>t</code>, the next event must start at or after <code>t + 1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "events = [[1,3,2],[4,5,2],[2,4,3]]",
        outputText: "4",
        explanation: "Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.",
      },
      {
        id: 2,
        inputText: "events = [[1,3,2],[4,5,2],[1,5,5]]",
        outputText: "5",
        explanation: "Choose event 2 for a sum of 5.",
      },
      {
        id: 3,
        inputText: "events = [[1,5,3],[1,5,1],[6,6,5]]",
        outputText: "8",
        explanation: "Choose events 0 and 2 for a sum of 3 + 5 = 8.",
      },
    ],
    tests:
      "[[[1, 3, 2], [4, 5, 2], [2, 4, 3]], [[1, 3, 2], [4, 5, 2], [1, 5, 5]], [[1, 5, 3], [1, 5, 1], [6, 6, 5]]]",
    answer: "[4, 5, 8]",
    code: "/**\n * @param {number[][]} events\n * @return {number}\n */\nvar maxTwoEvents = function(events) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2169,
    title: "Simple Bank System",
    titleSlug: "simple-bank-system",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Design", "Simulation"],
    constaints:
      "<li>The given account number(s) are between <code>1</code> and <code>n</code>, and</li> <li>The amount of money withdrawn or transferred from is <strong>less than or equal</strong> to the balance of the account.</li> <li><code>Bank(long[] balance)</code> Initializes the object with the <strong>0-indexed</strong> integer array <code>balance</code>.</li> <li><code>boolean transfer(int account1, int account2, long money)</code> Transfers <code>money</code> dollars from the account numbered <code>account1</code> to the account numbered <code>account2</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li> <li><code>boolean deposit(int account, long money)</code> Deposit <code>money</code> dollars into the account numbered <code>account</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li> <li><code>boolean withdraw(int account, long money)</code> Withdraw <code>money</code> dollars from the account numbered <code>account</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li> <li><code>n == balance.length</code></li> <li><code>1 &lt;= n, account, account1, account2 &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= balance[i], money &lt;= 10<sup>12</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <strong>each</strong> function <code>transfer</code>, <code>deposit</code>, <code>withdraw</code>.</li>",
    question:
      "<p>You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has <code>n</code> accounts numbered from <code>1</code> to <code>n</code>. The initial balance of each account is stored in a <strong>0-indexed</strong> integer array <code>balance</code>, with the <code>(i + 1)<sup>th</sup></code> account having an initial balance of <code>balance[i]</code>.</p><p>Execute all the <strong>valid</strong> transactions. A transaction is <strong>valid</strong> if:</p><p>Implement the <code>Bank</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["Bank", "withdraw", "transfer", "deposit", "transfer", "withdraw"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]',
        outputText: "[null, true, true, true, false, false]",
        explanation:
          "Bank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n                         // Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.\n                         // Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n                         // so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.",
      },
    ],
    tests:
      '[["Bank", "withdraw", "transfer", "deposit", "transfer", "withdraw"]]',
    answer: "[[null, true, true, true, false, false]]",
    code: "/**\n * @param {number[]} balance\n */\nvar Bank = function(balance) {\n    \n};\n\n/** \n * @param {number} account1 \n * @param {number} account2 \n * @param {number} money\n * @return {boolean}\n */\nBank.prototype.transfer = function(account1, account2, money) {\n    \n};\n\n/** \n * @param {number} account \n * @param {number} money\n * @return {boolean}\n */\nBank.prototype.deposit = function(account, money) {\n    \n};\n\n/** \n * @param {number} account \n * @param {number} money\n * @return {boolean}\n */\nBank.prototype.withdraw = function(account, money) {\n    \n};\n\n/** \n * Your Bank object will be instantiated and called as such:\n * var obj = new Bank(balance)\n * var param_1 = obj.transfer(account1,account2,money)\n * var param_2 = obj.deposit(account,money)\n * var param_3 = obj.withdraw(account,money)\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2170,
    title: "Count Number of Maximum Bitwise-OR Subsets",
    titleSlug: "count-number-of-maximum-bitwise-or-subsets",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Backtracking", "Bit Manipulation"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 16</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>Given an integer array <code>nums</code>, find the <strong>maximum</strong> possible <strong>bitwise OR</strong> of a subset of <code>nums</code> and return <em>the <strong>number of different non-empty subsets</strong> with the maximum bitwise OR</em>.</p><p>An array <code>a</code> is a <strong>subset</strong> of an array <code>b</code> if <code>a</code> can be obtained from <code>b</code> by deleting some (possibly zero) elements of <code>b</code>. Two subsets are considered <strong>different</strong> if the indices of the elements chosen are different.</p><p>The bitwise OR of an array <code>a</code> is equal to <code>a[0] <strong>OR</strong> a[1] <strong>OR</strong> ... <strong>OR</strong> a[a.length - 1]</code> (<strong>0-indexed</strong>).</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,1]",
        outputText: "2",
        explanation:
          "The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:\n- [3]\n- [3,1]",
      },
      {
        id: 2,
        inputText: "nums = [2,2,2]",
        outputText: "7",
        explanation:
          "All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 2",
      },
      {
        id: 3,
        inputText: "nums = [3,2,1,5]",
        outputText: "6",
        explanation:
          "The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:\n- [3,5]\n- [3,1,5]\n- [3,2,5]\n- [3,2,1,5]\n- [2,5]\n- [2,1,5]",
      },
    ],
    tests: "[[3, 1], [2, 2, 2], [3, 2, 1, 5]]",
    answer: "[2, 7, 6]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countMaxOrSubsets = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2174,
    title: "Next Greater Numerically Balanced Number",
    titleSlug: "next-greater-numerically-balanced-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Backtracking", "Enumeration"],
    constaints: "<li><code>0 &lt;= n &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>An integer <code>x</code> is <strong>numerically balanced</strong> if for every digit <code>d</code> in the number <code>x</code>, there are <strong>exactly</strong> <code>d</code> occurrences of that digit in <code>x</code>.</p><p>Given an integer <code>n</code>, return <em>the <strong>smallest numerically balanced</strong> number <strong>strictly greater</strong> than </em><code>n</code><em>.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "n = 1",
        outputText: "22",
        explanation:
          "22 is numerically balanced since:\n- The digit 2 occurs 2 times. \nIt is also the smallest numerically balanced number strictly greater than 1.",
      },
      {
        id: 2,
        inputText: "n = 1000",
        outputText: "1333",
        explanation:
          "1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times. \nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times.",
      },
      {
        id: 3,
        inputText: "n = 3000",
        outputText: "3133",
        explanation:
          "3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000.",
      },
    ],
    tests: "[1, 1000, 3000]",
    answer: "[22, 1333, 3133]",
    code: "/**\n * @param {number} n\n * @return {number}\n */\nvar nextBeautifulNumber = function(n) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2176,
    title: "Parallel Courses III",
    titleSlug: "parallel-courses-iii",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Array", "Dynamic Programming", "Graph", "Topological Sort"],
    constaints:
      "<li>You may start taking a course at <strong>any time</strong> if the prerequisites are met.</li> <li><strong>Any number of courses</strong> can be taken at the <strong>same time</strong>.</li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= relations.length &lt;= min(n * (n - 1) / 2, 5 * 10<sup>4</sup>)</code></li> <li><code>relations[j].length == 2</code></li> <li><code>1 &lt;= prevCourse<sub>j</sub>, nextCourse<sub>j</sub> &lt;= n</code></li> <li><code>prevCourse<sub>j</sub> != nextCourse<sub>j</sub></code></li> <li>All the pairs <code>[prevCourse<sub>j</sub>, nextCourse<sub>j</sub>]</code> are <strong>unique</strong>.</li> <li><code>time.length == n</code></li> <li><code>1 &lt;= time[i] &lt;= 10<sup>4</sup></code></li> <li>The given graph is a directed acyclic graph.</li>",
    question:
      "<p>You are given an integer <code>n</code>, which indicates that there are <code>n</code> courses labeled from <code>1</code> to <code>n</code>. You are also given a 2D integer array <code>relations</code> where <code>relations[j] = [prevCourse<sub>j</sub>, nextCourse<sub>j</sub>]</code> denotes that course <code>prevCourse<sub>j</sub></code> has to be completed <strong>before</strong> course <code>nextCourse<sub>j</sub></code> (prerequisite relationship). Furthermore, you are given a <strong>0-indexed</strong> integer array <code>time</code> where <code>time[i]</code> denotes how many <strong>months</strong> it takes to complete the <code>(i+1)<sup>th</sup></code> course.</p><p>You must find the <strong>minimum</strong> number of months needed to complete all the courses following these rules:</p><p>Return <em>the <strong>minimum</strong> number of months needed to complete all the courses</em>.</p><p><strong>Note:</strong> The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3, relations = [[1,3],[2,3]], time = [3,2,5]",
        outputText: "8",
        explanation:
          "The figure above represents the given graph and the time required to complete each course. \nWe start course 1 and course 2 simultaneously at month 0.\nCourse 1 takes 3 months and course 2 takes 2 months to complete respectively.\nThus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.",
      },
      {
        id: 2,
        inputText:
          "n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]",
        outputText: "12",
        explanation:
          "The figure above represents the given graph and the time required to complete each course.\nYou can start courses 1, 2, and 3 at month 0.\nYou can complete them after 1, 2, and 3 months respectively.\nCourse 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.\nCourse 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.\nThus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.",
      },
    ],
    tests: "[3, 5]",
    answer: "[8, 12]",
    code: "/**\n * @param {number} n\n * @param {number[][]} relations\n * @param {number[]} time\n * @return {number}\n */\nvar minimumTime = function(n, relations, time) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2177,
    title: "Check Whether Two Strings are Almost Equivalent",
    titleSlug: "check-whether-two-strings-are-almost-equivalent",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String", "Counting"],
    constaints:
      "<li><code>n == word1.length == word2.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li>",
    question:
      "<p>Two strings <code>word1</code> and <code>word2</code> are considered <strong>almost equivalent</strong> if the differences between the frequencies of each letter from <code>'a'</code> to <code>'z'</code> between <code>word1</code> and <code>word2</code> is <strong>at most</strong> <code>3</code>.</p><p>Given two strings <code>word1</code> and <code>word2</code>, each of length <code>n</code>, return <code>true</code> <em>if </em><code>word1</code> <em>and</em> <code>word2</code> <em>are <strong>almost equivalent</strong>, or</em> <code>false</code> <em>otherwise</em>.</p><p>The <strong>frequency</strong> of a letter <code>x</code> is the number of times it occurs in the string.</p>",
    examples: [
      {
        id: 1,
        inputText: 'word1 = "aaaa", word2 = "bccb"',
        outputText: "false",
        explanation:
          "There are 4 'a's in \"aaaa\" but 0 'a's in \"bccb\".\nThe difference is 4, which is more than the allowed 3.",
      },
      {
        id: 2,
        inputText: 'word1 = "abcdeef", word2 = "abaaacc"',
        outputText: "true",
        explanation:
          "The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.\n- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.\n- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.\n- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.\n- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.\n- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1.",
      },
      {
        id: 3,
        inputText: 'word1 = "cccddabba", word2 = "babababab"',
        outputText: "true",
        explanation:
          "The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.\n- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.\n- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.\n- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.",
      },
    ],
    tests: '["aaaa", "abcdeef", "cccddabba"]',
    answer: "[false, true, true]",
    code: "/**\n * @param {string} word1\n * @param {string} word2\n * @return {boolean}\n */\nvar checkAlmostEquivalent = function(word1, word2) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2179,
    title: "Most Beautiful Item for Each Query",
    titleSlug: "most-beautiful-item-for-each-query",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= items.length, queries.length &lt;= 10<sup>5</sup></code></li> <li><code>items[i].length == 2</code></li> <li><code>1 &lt;= price<sub>i</sub>, beauty<sub>i</sub>, queries[j] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given a 2D integer array <code>items</code> where <code>items[i] = [price<sub>i</sub>, beauty<sub>i</sub>]</code> denotes the <strong>price</strong> and <strong>beauty</strong> of an item respectively.</p><p>You are also given a <strong>0-indexed</strong> integer array <code>queries</code>. For each <code>queries[j]</code>, you want to determine the <strong>maximum beauty</strong> of an item whose <strong>price</strong> is <strong>less than or equal</strong> to <code>queries[j]</code>. If no such item exists, then the answer to this query is <code>0</code>.</p><p>Return <em>an array </em><code>answer</code><em> of the same length as </em><code>queries</code><em> where </em><code>answer[j]</code><em> is the answer to the </em><code>j<sup>th</sup></code><em> query</em>.</p>",
    examples: [
      {
        id: 1,
        inputText:
          "items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]",
        outputText: "[2,4,5,5,6,6]",
        explanation:
          "- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6.",
      },
      {
        id: 2,
        inputText: "items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]",
        outputText: "[4]",
        explanation:
          "The price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty.",
      },
      {
        id: 3,
        inputText: "items = [[10,1000]], queries = [5]",
        outputText: "[0]",
        explanation:
          "No item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0.",
      },
    ],
    tests:
      "[[[1, 2], [3, 2], [2, 4], [5, 6], [3, 5]], [[1, 2], [1, 2], [1, 3], [1, 4]], [[10, 1000]]]",
    answer: "[[2, 4, 5, 5, 6, 6], [4], [0]]",
    code: "/**\n * @param {number[][]} items\n * @param {number[]} queries\n * @return {number[]}\n */\nvar maximumBeauty = function(items, queries) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2181,
    title: "Smallest Index With Equal Value",
    titleSlug: "smallest-index-with-equal-value",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 9</code></li>",
    question:
      "<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, return <em>the <strong>smallest</strong> index </em><code>i</code><em> of </em><code>nums</code><em> such that </em><code>i mod 10 == nums[i]</code><em>, or </em><code>-1</code><em> if such index does not exist</em>.</p><p><code>x mod y</code> denotes the <strong>remainder</strong> when <code>x</code> is divided by <code>y</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,1,2]",
        outputText: "0",
        explanation:
          "i=0: 0 mod 10 = 0 == nums[0].\ni=1: 1 mod 10 = 1 == nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\nAll indices have i mod 10 == nums[i], so we return the smallest index 0.",
      },
      {
        id: 2,
        inputText: "nums = [4,3,2,1]",
        outputText: "2",
        explanation:
          "i=0: 0 mod 10 = 0 != nums[0].\ni=1: 1 mod 10 = 1 != nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\ni=3: 3 mod 10 = 3 != nums[3].\n2 is the only index which has i mod 10 == nums[i].",
      },
      {
        id: 3,
        inputText: "nums = [1,2,3,4,5,6,7,8,9,0]",
        outputText: "-1",
        explanation: "No index satisfies i mod 10 == nums[i].",
      },
    ],
    tests: "[[0, 1, 2], [4, 3, 2, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]]",
    answer: "[0, 2, -1]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar smallestEqual = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2182,
    title:
      "Find the Minimum and Maximum Number of Nodes Between Critical Points",
    titleSlug:
      "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>A <strong>critical point</strong> in a linked list is defined as <strong>either</strong> a <strong>local maxima</strong> or a <strong>local minima</strong>.</p><p>A node is a <strong>local maxima</strong> if the current node has a value <strong>strictly greater</strong> than the previous node and the next node.</p><p>A node is a <strong>local minima</strong> if the current node has a value <strong>strictly smaller</strong> than the previous node and the next node.</p><p>Note that a node can only be a local maxima/minima if there exists <strong>both</strong> a previous node and a next node.</p><p>Given a linked list <code>head</code>, return <em>an array of length 2 containing </em><code>[minDistance, maxDistance]</code><em> where </em><code>minDistance</code><em> is the <strong>minimum distance</strong> between <strong>any\u00a0two distinct</strong> critical points and </em><code>maxDistance</code><em> is the <strong>maximum distance</strong> between <strong>any\u00a0two distinct</strong> critical points. If there are <strong>fewer</strong> than two critical points, return </em><code>[-1, -1]</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [3,1]",
        outputText: "[-1,-1]",
        explanation: "There are no critical points in [3,1].",
      },
      {
        id: 2,
        inputText: "head = [5,3,1,2,5,1,2]",
        outputText: "[1,3]",
        explanation: "There are three critical points:\n- [5,3,",
      },
      {
        id: 3,
        inputText: "head = [1,3,2,2,3,2,2,2,7]",
        outputText: "[3,3]",
        explanation: "There are two critical points:\n- [1,",
      },
    ],
    tests: "[[3, 1], [5, 3, 1, 2, 5, 1, 2], [1, 3, 2, 2, 3, 2, 2, 2, 7]]",
    answer: "[[-1, -1], [1, 3], [3, 3]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number[]}\n */\nvar nodesBetweenCriticalPoints = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2186,
    title: "Count Vowel Substrings of a String",
    titleSlug: "count-vowel-substrings-of-a-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>word</code> consists of lowercase English letters only.</li>",
    question:
      "<p>A <strong>substring</strong> is a contiguous (non-empty) sequence of characters within a string.</p><p>A <strong>vowel substring</strong> is a substring that <strong>only</strong> consists of vowels (<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>) and has <strong>all five</strong> vowels present in it.</p><p>Given a string <code>word</code>, return <em>the number of <strong>vowel substrings</strong> in</em> <code>word</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'word = "aeiouu"',
        outputText: "2",
        explanation:
          'The vowel substrings of word are as follows (underlined):\n- "',
      },
      {
        id: 2,
        inputText: 'word = "unicornarihan"',
        outputText: "0",
        explanation:
          "Not all 5 vowels are present, so there are no vowel substrings.",
      },
      {
        id: 3,
        inputText: 'word = "cuaieuouac"',
        outputText: "7",
        explanation:
          'The vowel substrings of word are as follows (underlined):\n- "c',
      },
    ],
    tests: '["aeiouu", "unicornarihan", "cuaieuouac"]',
    answer: "[2, 0, 7]",
    code: "/**\n * @param {string} word\n * @return {number}\n */\nvar countVowelSubstrings = function(word) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2187,
    title: "Vowels of All Substrings",
    titleSlug: "vowels-of-all-substrings",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "String", "Dynamic Programming", "Combinatorics"],
    constaints:
      "<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li> <li><code>word</code> consists of lowercase English letters.</li>",
    question:
      "<p>Given a string <code>word</code>, return <em>the <strong>sum of the number of vowels</strong> (</em><code>'a'</code>, <code>'e'</code><em>,</em> <code>'i'</code><em>,</em> <code>'o'</code><em>, and</em> <code>'u'</code><em>)</em> <em>in every substring of </em><code>word</code>.</p><p>A <strong>substring</strong> is a contiguous (non-empty) sequence of characters within a string.</p><p><strong>Note:</strong> Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.</p>",
    examples: [
      {
        id: 1,
        inputText: 'word = "aba"',
        outputText: "6",
        explanation:
          'All possible substrings are: "a", "ab", "aba", "b", "ba", and "a".\n- "b" has 0 vowels in it\n- "a", "ab", "ba", and "a" have 1 vowel each\n- "aba" has 2 vowels in it\nHence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6.',
      },
      {
        id: 2,
        inputText: 'word = "abc"',
        outputText: "3",
        explanation:
          'All possible substrings are: "a", "ab", "abc", "b", "bc", and "c".\n- "a", "ab", and "abc" have 1 vowel each\n- "b", "bc", and "c" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.',
      },
      {
        id: 3,
        inputText: 'word = "ltcd"',
        outputText: "0",
        explanation: 'There are no vowels in any substring of "ltcd".',
      },
    ],
    tests: '["aba", "abc", "ltcd"]',
    answer: "[6, 3, 0]",
    code: "/**\n * @param {string} word\n * @return {number}\n */\nvar countVowels = function(word) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2195,
    title: "Time Needed to Buy Tickets",
    titleSlug: "time-needed-to-buy-tickets",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Queue", "Simulation"],
    constaints:
      "<li><code>n == tickets.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= tickets[i] &lt;= 100</code></li> <li><code>0 &lt;= k &lt; n</code></li>",
    question:
      "<p>There are <code>n</code> people in a line queuing to buy tickets, where the <code>0<sup>th</sup></code> person is at the <strong>front</strong> of the line and the <code>(n - 1)<sup>th</sup></code> person is at the <strong>back</strong> of the line.</p><p>You are given a <strong>0-indexed</strong> integer array <code>tickets</code> of length <code>n</code> where the number of tickets that the <code>i<sup>th</sup></code> person would like to buy is <code>tickets[i]</code>.</p><p>Each person takes <strong>exactly 1 second</strong> to buy a ticket. A person can only buy <strong>1 ticket at a time</strong> and has to go back to <strong>the end</strong> of the line (which happens <strong>instantaneously</strong>) in order to buy more tickets. If a person does not have any tickets left to buy, the person will <strong>leave </strong>the line.</p><p>Return <em>the <strong>time taken</strong> for the person at position </em><code>k</code><em>\u00a0</em><strong><em>(0-indexed)</em>\u00a0</strong><em>to finish buying tickets</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "tickets = [2,3,2], k = 2",
        outputText: "6",
        explanation:
          "- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].\n- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].\nThe person at\u00a0position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.",
      },
      {
        id: 2,
        inputText: "tickets = [5,1,1,1], k = 0",
        outputText: "8",
        explanation:
          "- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].\n- In the next 4 passes, only the person in position 0 is buying tickets.\nThe person at\u00a0position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.",
      },
    ],
    tests: "[[2, 3, 2], [5, 1, 1, 1]]",
    answer: "[6, 8]",
    code: "/**\n * @param {number[]} tickets\n * @param {number} k\n * @return {number}\n */\nvar timeRequiredToBuy = function(tickets, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2196,
    title: "Reverse Nodes in Even Length Groups",
    titleSlug: "reverse-nodes-in-even-length-groups",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List"],
    constaints:
      "<li>The <code>1<sup>st</sup></code> node is assigned to the first group.</li> <li>The <code>2<sup>nd</sup></code> and the <code>3<sup>rd</sup></code> nodes are assigned to the second group.</li> <li>The <code>4<sup>th</sup></code>, <code>5<sup>th</sup></code>, and <code>6<sup>th</sup></code> nodes are assigned to the third group, and so on.</li> <li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given the <code>head</code> of a linked list.</p><p>The nodes in the linked list are <strong>sequentially</strong> assigned to <strong>non-empty</strong> groups whose lengths form the sequence of the natural numbers (<code>1, 2, 3, 4, ...</code>). The <strong>length</strong> of a group is the number of nodes assigned to it. In other words,</p><p>Note that the length of the last group may be less than or equal to <code>1 + the length of the second to last group</code>.</p><p><strong>Reverse</strong> the nodes in each group with an <strong>even</strong> length, and return <em>the</em> <code>head</code> <em>of the modified linked list</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [5,2,6,3,9,1,7,3,8,4]",
        outputText: "[5,6,2,3,9,1,4,8,3,7]",
        explanation:
          "- The length of the first group is 1, which is odd, hence no reversal occurs.\n- The length of the second group is 2, which is even, hence the nodes are reversed.\n- The length of the third group is 3, which is odd, hence no reversal occurs.\n- The length of the last group is 4, which is even, hence the nodes are reversed.",
      },
      {
        id: 2,
        inputText: "head = [1,1,0,6]",
        outputText: "[1,0,1,6]",
        explanation:
          "- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 1. No reversal occurs.",
      },
      {
        id: 3,
        inputText: "head = [1,1,0,6,5]",
        outputText: "[1,0,1,5,6]",
        explanation:
          "- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 2. The nodes are reversed.",
      },
    ],
    tests: "[[5, 2, 6, 3, 9, 1, 7, 3, 8, 4], [1, 1, 0, 6], [1, 1, 0, 6, 5]]",
    answer: "[[5, 6, 2, 3, 9, 1, 4, 8, 3, 7], [1, 0, 1, 6], [1, 0, 1, 5, 6]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseEvenLengthGroups = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2197,
    title: "Decode the Slanted Ciphertext",
    titleSlug: "decode-the-slanted-ciphertext",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Simulation"],
    constaints:
      "<li><code>0 &lt;= encodedText.length &lt;= 10<sup>6</sup></code></li> <li><code>encodedText</code> consists of lowercase English letters and <code>' '</code> only.</li> <li><code>encodedText</code> is a valid encoding of some <code>originalText</code> that <strong>does not</strong> have trailing spaces.</li> <li><code>1 &lt;= rows &lt;= 1000</code></li> <li>The testcases are generated such that there is <strong>only one</strong> possible <code>originalText</code>.</li>",
    question:
      "<p>A string <code>originalText</code> is encoded using a <strong>slanted transposition cipher</strong> to a string <code>encodedText</code> with the help of a matrix having a <strong>fixed number of rows</strong> <code>rows</code>.</p><p><code>originalText</code> is placed first in a top-left to bottom-right manner.</p><p>The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of <code>originalText</code>. The arrow indicates the order in which the cells are filled. All empty cells are filled with <code>' '</code>. The number of columns is chosen such that the rightmost column will <strong>not be empty</strong> after filling in <code>originalText</code>.</p><p><code>encodedText</code> is then formed by appending all characters of the matrix in a row-wise fashion.</p><p>The characters in the blue cells are appended first to <code>encodedText</code>, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.</p><p>For example, if <code>originalText = \"cipher\"</code> and <code>rows = 3</code>, then we encode it in the following manner:</p><p>The blue arrows depict how <code>originalText</code> is placed in the matrix, and the red arrows denote the order in which <code>encodedText</code> is formed. In the above example, <code>encodedText = \"ch ie pr\"</code>.</p><p>Given the encoded string <code>encodedText</code> and number of rows <code>rows</code>, return <em>the original string</em> <code>originalText</code>.</p><p><strong>Note:</strong> <code>originalText</code> <strong>does not</strong> have any trailing spaces <code>' '</code>. The test cases are generated such that there is only one possible <code>originalText</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'encodedText = "ch   ie   pr", rows = 3',
        outputText: '"cipher"',
        explanation:
          "This is the same example described in the problem description.",
      },
      {
        id: 2,
        inputText: 'encodedText = "iveo    eed   l te   olc", rows = 4',
        outputText: '"i love leetcode"',
        explanation:
          "The figure above denotes the matrix that was used to encode originalText. \nThe blue arrows show how we can find originalText from encodedText.",
      },
      {
        id: 3,
        inputText: 'encodedText = "coding", rows = 1',
        outputText: '"coding"',
        explanation:
          "Since there is only 1 row, both originalText and encodedText are the same.",
      },
    ],
    tests: '["ch   ie   pr", "iveo    eed   l te   olc", "coding"]',
    answer: '["cipher", "i love leetcode", "coding"]',
    code: "/**\n * @param {string} encodedText\n * @param {number} rows\n * @return {string}\n */\nvar decodeCiphertext = function(encodedText, rows) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2198,
    title: "Process Restricted Friend Requests",
    titleSlug: "process-restricted-friend-requests",
    difficulty: "Hard",
    category: "Algorithms",
    topics: ["Union Find", "Graph"],
    constaints:
      "<li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= restrictions.length &lt;= 1000</code></li> <li><code>restrictions[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1</code></li> <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> <li><code>1 &lt;= requests.length &lt;= 1000</code></li> <li><code>requests[j].length == 2</code></li> <li><code>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt;= n - 1</code></li> <li><code>u<sub>j</sub> != v<sub>j</sub></code></li>",
    question:
      "<p>You are given an integer <code>n</code> indicating the number of people in a network. Each person is labeled from <code>0</code> to <code>n - 1</code>.</p><p>You are also given a <strong>0-indexed</strong> 2D integer array <code>restrictions</code>, where <code>restrictions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> means that person <code>x<sub>i</sub></code> and person <code>y<sub>i</sub></code> <strong>cannot </strong>become <strong>friends</strong>,<strong> </strong>either <strong>directly</strong> or <strong>indirectly</strong> through other people.</p><p>Initially, no one is friends with each other. You are given a list of friend requests as a <strong>0-indexed</strong> 2D integer array <code>requests</code>, where <code>requests[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> is a friend request between person <code>u<sub>j</sub></code> and person <code>v<sub>j</sub></code>.</p><p>A friend request is <strong>successful </strong>if <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> can be <strong>friends</strong>. Each friend request is processed in the given order (i.e., <code>requests[j]</code> occurs before <code>requests[j + 1]</code>), and upon a successful request, <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> <strong>become direct friends</strong> for all future friend requests.</p><p>Return <em>a <strong>boolean array</strong> </em><code>result</code>,<em> where each </em><code>result[j]</code><em> is </em><code>true</code><em> if the </em><code>j<sup>th</sup></code><em> friend request is <strong>successful</strong> or </em><code>false</code><em> if it is not</em>.</p><p><strong>Note:</strong> If <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> are already direct friends, the request is still <strong>successful</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
        outputText: "[true,false]",
        explanation:
          "Request 0: Person 0 and person 2 can be friends, so they become direct friends. \nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0).",
      },
      {
        id: 2,
        inputText: "n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
        outputText: "[true,false]",
        explanation:
          "Request 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1).",
      },
      {
        id: 3,
        inputText:
          "n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
        outputText: "[true,false,true,false]",
        explanation:
          "Request 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).",
      },
    ],
    tests: "[3, 3, 5]",
    answer: "[[true, false], [true, false], [true, false, true, false]]",
    code: "/**\n * @param {number} n\n * @param {number[][]} restrictions\n * @param {number[][]} requests\n * @return {boolean[]}\n */\nvar friendRequests = function(n, restrictions, requests) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2204,
    title: "Find Subsequence of Length K With the Largest Sum",
    titleSlug: "find-subsequence-of-length-k-with-the-largest-sum",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sorting", "Heap (Priority Queue)"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-10<sup>5</sup>\u00a0&lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li>",
    question:
      "<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You want to find a <strong>subsequence </strong>of <code>nums</code> of length <code>k</code> that has the <strong>largest</strong> sum.</p><p>Return<em> </em><em><strong>any</strong> such subsequence as an integer array of length </em><code>k</code>.</p><p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,1,3,3], k = 2",
        outputText: "[3,3]",
        explanation: "The subsequence has the largest sum of 3 + 3 = 6.",
      },
      {
        id: 2,
        inputText: "nums = [-1,-2,3,4], k = 3",
        outputText: "[-1,3,4]",
        explanation: "The subsequence has the largest sum of -1 + 3 + 4 = 6.",
      },
      {
        id: 3,
        inputText: "nums = [3,4,3,3], k = 2",
        outputText: "[3,4]",
        explanation:
          "The subsequence has the largest sum of 3 + 4 = 7. \nAnother possible subsequence is [4, 3].",
      },
    ],
    tests: "[[2, 1, 3, 3], [-1, -2, 3, 4], [3, 4, 3, 3]]",
    answer: "[[3, 3], [-1, 3, 4], [3, 4]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSubsequence = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2210,
    title: "Find Target Indices After Sorting Array",
    titleSlug: "find-target-indices-after-sorting-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Binary Search", "Sorting"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i], target &lt;= 100</code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a target element <code>target</code>.</p><p>A <strong>target index</strong> is an index <code>i</code> such that <code>nums[i] == target</code>.</p><p>Return <em>a list of the target indices of</em> <code>nums</code> after<em> sorting </em><code>nums</code><em> in <strong>non-decreasing</strong> order</em>. If there are no target indices, return <em>an <strong>empty</strong> list</em>. The returned list must be sorted in <strong>increasing</strong> order.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,2,5,2,3], target = 2",
        outputText: "[1,2]",
        explanation: "After sorting, nums is [1,",
      },
      {
        id: 2,
        inputText: "nums = [1,2,5,2,3], target = 3",
        outputText: "[3]",
        explanation: "After sorting, nums is [1,2,2,",
      },
      {
        id: 3,
        inputText: "nums = [1,2,5,2,3], target = 5",
        outputText: "[4]",
        explanation: "After sorting, nums is [1,2,2,3,",
      },
    ],
    tests: "[[1, 2, 5, 2, 3], [1, 2, 5, 2, 3], [1, 2, 5, 2, 3]]",
    answer: "[[1, 2], [3], [4]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar targetIndices = function(nums, target) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2211,
    title: "K Radius Subarray Averages",
    titleSlug: "k-radius-subarray-averages",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sliding Window"],
    constaints:
      "<li>For example, the average of four elements <code>2</code>, <code>3</code>, <code>1</code>, and <code>5</code> is <code>(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75</code>, which truncates to <code>2</code>.</li> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of <code>n</code> integers, and an integer <code>k</code>.</p><p>The <strong>k-radius average</strong> for a subarray of <code>nums</code> <strong>centered</strong> at some index <code>i</code> with the <strong>radius</strong> <code>k</code> is the average of <strong>all</strong> elements in <code>nums</code> between the indices <code>i - k</code> and <code>i + k</code> (<strong>inclusive</strong>). If there are less than <code>k</code> elements before <strong>or</strong> after the index <code>i</code>, then the <strong>k-radius average</strong> is <code>-1</code>.</p><p>Build and return <em>an array </em><code>avgs</code><em> of length </em><code>n</code><em> where </em><code>avgs[i]</code><em> is the <strong>k-radius average</strong> for the subarray centered at index </em><code>i</code>.</p><p>The <strong>average</strong> of <code>x</code> elements is the sum of the <code>x</code> elements divided by <code>x</code>, using <strong>integer division</strong>. The integer division truncates toward zero, which means losing its fractional part.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [7,4,3,9,1,8,5,2,6], k = 3",
        outputText: "[-1,-1,-1,5,4,4,-1,-1,-1]",
        explanation:
          "- avg[0], avg[1], and avg[2] are -1 because there are less than k elements",
      },
      {
        id: 2,
        inputText: "nums = [100000], k = 0",
        outputText: "[100000]",
        explanation:
          "- The sum of the subarray centered at index 0 with radius 0 is: 100000.\n  avg[0] = 100000 / 1 = 100000.",
      },
      {
        id: 3,
        inputText: "nums = [8], k = 100000",
        outputText: "[-1]",
        explanation:
          "- avg[0] is -1 because there are less than k elements before and after index 0.",
      },
    ],
    tests: "[[7, 4, 3, 9, 1, 8, 5, 2, 6], [100000], [8]]",
    answer: "[[-1, -1, -1, 5, 4, 4, -1, -1, -1], [100000], [-1]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar getAverages = function(nums, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2215,
    title: "Finding 3-Digit Even Numbers",
    titleSlug: "finding-3-digit-even-numbers",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sorting", "Enumeration"],
    constaints:
      "<li>The integer consists of the <strong>concatenation</strong> of <strong>three</strong> elements from <code>digits</code> in <strong>any</strong> arbitrary order.</li> <li>The integer does not have <strong>leading zeros</strong>.</li> <li>The integer is <strong>even</strong>.</li> <li><code>3 &lt;= digits.length &lt;= 100</code></li> <li><code>0 &lt;= digits[i] &lt;= 9</code></li>",
    question:
      "<p>You are given an integer array <code>digits</code>, where each element is a digit. The array may contain duplicates.</p><p>You need to find <strong>all</strong> the <strong>unique</strong> integers that follow the given requirements:</p><p>For example, if the given <code>digits</code> were <code>[1, 2, 3]</code>, integers <code>132</code> and <code>312</code> follow the requirements.</p><p>Return <em>a <strong>sorted</strong> array of the unique integers.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "digits = [2,1,3,0]",
        outputText: "[102,120,130,132,210,230,302,310,312,320]",
        explanation:
          "All the possible integers that follow the requirements are in the output array. \nNotice that there are no",
      },
      {
        id: 2,
        inputText: "digits = [2,2,8,8,2]",
        outputText: "[222,228,282,288,822,828,882]",
        explanation:
          "The same digit can be used as many times as it appears in digits. \nIn this example, the digit 8 is used twice each time in 288, 828, and 882.",
      },
      {
        id: 3,
        inputText: "digits = [3,7,5]",
        outputText: "[]",
        explanation: "No",
      },
    ],
    tests: "[[2, 1, 3, 0], [2, 2, 8, 8, 2], [3, 7, 5]]",
    answer:
      "[[102, 120, 130, 132, 210, 230, 302, 310, 312, 320], [222, 228, 282, 288, 822, 828, 882], []]",
    code: "/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar findEvenNumbers = function(digits) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2216,
    title: "Delete the Middle Node of a Linked List",
    titleSlug: "delete-the-middle-node-of-a-linked-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers"],
    constaints:
      "<li>For <code>n</code> = <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, and <code>5</code>, the middle nodes are <code>0</code>, <code>1</code>, <code>1</code>, <code>2</code>, and <code>2</code>, respectively.</li> <li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given the <code>head</code> of a linked list. <strong>Delete</strong> the <strong>middle node</strong>, and return <em>the</em> <code>head</code> <em>of the modified linked list</em>.</p><p>The <strong>middle node</strong> of a linked list of size <code>n</code> is the <code>\u230an / 2\u230b<sup>th</sup></code> node from the <b>start</b> using <strong>0-based indexing</strong>, where <code>\u230ax\u230b</code> denotes the largest integer less than or equal to <code>x</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [1,3,4,7,1,2,6]",
        outputText: "[1,3,4,1,2,6]",
        explanation:
          "The above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node.",
      },
      {
        id: 2,
        inputText: "head = [1,2,3,4]",
        outputText: "[1,2,4]",
        explanation:
          "The above figure represents the given linked list.\nFor n = 4, node 2 with value 3 is the middle node, which is marked in red.",
      },
      {
        id: 3,
        inputText: "head = [2,1]",
        outputText: "[2]",
        explanation:
          "The above figure represents the given linked list.\nFor n = 2, node 1 with value 1 is the middle node, which is marked in red.\nNode 0 with value 2 is the only node remaining after removing node 1.",
      },
    ],
    tests: "[[1, 3, 4, 7, 1, 2, 6], [1, 2, 3, 4], [2, 1]]",
    answer: "[[1, 3, 4, 1, 2, 6], [1, 2, 4], [2]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteMiddle = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2221,
    title: "Check if a Parentheses String Can Be Valid",
    titleSlug: "check-if-a-parentheses-string-can-be-valid",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Stack", "Greedy"],
    constaints:
      "<li>It is <code>()</code>.</li> <li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid parentheses strings.</li> <li>It can be written as <code>(A)</code>, where <code>A</code> is a valid parentheses string.</li> <li>If <code>locked[i]</code> is <code>'1'</code>, you <strong>cannot</strong> change <code>s[i]</code>.</li> <li>But if <code>locked[i]</code> is <code>'0'</code>, you <strong>can</strong> change <code>s[i]</code> to either <code>'('</code> or <code>')'</code>.</li> <li><code>n == s.length == locked.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'('</code> or <code>')'</code>.</li> <li><code>locked[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li>",
    question:
      "<p>A parentheses string is a <strong>non-empty</strong> string consisting only of <code>'('</code> and <code>')'</code>. It is valid if <strong>any</strong> of the following conditions is <strong>true</strong>:</p><p>You are given a parentheses string <code>s</code> and a string <code>locked</code>, both of length <code>n</code>. <code>locked</code> is a binary string consisting only of <code>'0'</code>s and <code>'1'</code>s. For <strong>each</strong> index <code>i</code> of <code>locked</code>,</p><p>Return <code>true</code> <em>if you can make <code>s</code> a valid parentheses string</em>. Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "))()))", locked = "010100"',
        outputText: "true",
        explanation:
          "locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].\nWe change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid.",
      },
      {
        id: 2,
        inputText: 's = "()()", locked = "0000"',
        outputText: "true",
        explanation:
          "We do not need to make any changes because s is already valid.",
      },
      {
        id: 3,
        inputText: 's = ")", locked = "0"',
        outputText: "false",
        explanation:
          "locked permits us to change s[0]. \nChanging s[0] to either '(' or ')' will not make s valid.",
      },
    ],
    tests: '["))()))", "()()", ")"]',
    answer: "[true, true, false]",
    code: "/**\n * @param {string} s\n * @param {string} locked\n * @return {boolean}\n */\nvar canBeValid = function(s, locked) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2226,
    title: "Rings and Rods",
    titleSlug: "rings-and-rods",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Hash Table", "String"],
    constaints:
      "<li>The <strong>first</strong> character of the <code>i<sup>th</sup></code> pair denotes the <code>i<sup>th</sup></code> ring's <strong>color</strong> (<code>'R'</code>, <code>'G'</code>, <code>'B'</code>).</li> <li>The <strong>second</strong> character of the <code>i<sup>th</sup></code> pair denotes the <strong>rod</strong> that the <code>i<sup>th</sup></code> ring is placed on (<code>'0'</code> to <code>'9'</code>).</li> <li><code>rings.length == 2 * n</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>rings[i]</code> where <code>i</code> is <strong>even</strong> is either <code>'R'</code>, <code>'G'</code>, or <code>'B'</code> (<strong>0-indexed</strong>).</li> <li><code>rings[i]</code> where <code>i</code> is <strong>odd</strong> is a digit from <code>'0'</code> to <code>'9'</code> (<strong>0-indexed</strong>).</li>",
    question:
      '<p>There are <code>n</code> rings and each ring is either red, green, or blue. The rings are distributed <strong>across ten rods</strong> labeled from <code>0</code> to <code>9</code>.</p><p>You are given a string <code>rings</code> of length <code>2n</code> that describes the <code>n</code> rings that are placed onto the rods. Every two characters in <code>rings</code> forms a <strong>color-position pair</strong> that is used to describe each ring where:</p><p>For example, <code>"R3G2B1"</code> describes <code>n == 3</code> rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.</p><p>Return <em>the number of rods that have <strong>all three colors</strong> of rings on them.</em></p>',
    examples: [
      {
        id: 1,
        inputText: 'rings = "B0B6G0R6R0R6G9"',
        outputText: "1",
        explanation:
          "- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1.",
      },
      {
        id: 2,
        inputText: 'rings = "B0R0G0R9R0B0G0"',
        outputText: "1",
        explanation:
          "- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1.",
      },
      {
        id: 3,
        inputText: 'rings = "G4"',
        outputText: "0",
        explanation:
          "Only one ring is given. Thus, no rods have all three colors.",
      },
    ],
    tests: '["B0B6G0R6R0R6G9", "B0R0G0R9R0B0G0", "G4"]',
    answer: "[1, 1, 0]",
    code: "/**\n * @param {string} rings\n * @return {number}\n */\nvar countPoints = function(rings) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2232,
    title: "Adding Spaces to a String",
    titleSlug: "adding-spaces-to-a-string",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "String", "Simulation"],
    constaints:
      "<li>For example, given <code>s = \"EnjoyYourCoffee\"</code> and <code>spaces = [5, 9]</code>, we place spaces before <code>'Y'</code> and <code>'C'</code>, which are at indices <code>5</code> and <code>9</code> respectively. Thus, we obtain <code>\"Enjoy <strong><u>Y</u></strong>our <u><strong>C</strong></u>offee\"</code>.</li> <li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consists only of lowercase and uppercase English letters.</li> <li><code>1 &lt;= spaces.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>0 &lt;= spaces[i] &lt;= s.length - 1</code></li> <li>All the values of <code>spaces</code> are <strong>strictly increasing</strong>.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> string <code>s</code> and a <strong>0-indexed</strong> integer array <code>spaces</code> that describes the indices in the original string where spaces will be added. Each space should be inserted <strong>before</strong> the character at the given index.</p><p>Return<strong> </strong><em>the modified string <strong>after</strong> the spaces have been added.</em></p>",
    examples: [
      {
        id: 1,
        inputText: 's = "LeetcodeHelpsMeLearn", spaces = [8,13,15]',
        outputText: '"Leetcode Helps Me Learn"',
        explanation:
          'The indices 8, 13, and 15 correspond to the underlined characters in "Leetcode',
      },
      {
        id: 2,
        inputText: 's = "icodeinpython", spaces = [1,5,7,9]',
        outputText: '"i code in py thon"',
        explanation:
          'The indices 1, 5, 7, and 9 correspond to the underlined characters in "i',
      },
      {
        id: 3,
        inputText: 's = "spacing", spaces = [0,1,2,3,4,5,6]',
        outputText: '" s p a c i n g"',
        explanation:
          "We are also able to place spaces before the first character of the string.",
      },
    ],
    tests: '["LeetcodeHelpsMeLearn", "icodeinpython", "spacing"]',
    answer:
      '["Leetcode Helps Me Learn", "i code in py thon", " s p a c i n g"]',
    code: "/**\n * @param {string} s\n * @param {number[]} spaces\n * @return {string}\n */\nvar addSpaces = function(s, spaces) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2235,
    title: "Capitalize the Title",
    titleSlug: "capitalize-the-title",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li>If the length of the word is <code>1</code> or <code>2</code> letters, change all letters to lowercase.</li> <li>Otherwise, change the first letter to uppercase and the remaining letters to lowercase.</li> <li><code>1 &lt;= title.length &lt;= 100</code></li> <li><code>title</code> consists of words separated by a single space without any leading or trailing spaces.</li> <li>Each word consists of uppercase and lowercase English letters and is <strong>non-empty</strong>.</li>",
    question:
      "<p>You are given a string <code>title</code> consisting of one or more words separated by a single space, where each word consists of English letters. <strong>Capitalize</strong> the string by changing the capitalization of each word such that:</p><p>Return <em>the <strong>capitalized</strong> </em><code>title</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'title = "capiTalIze tHe titLe"',
        outputText: '"Capitalize The Title"',
        explanation:
          "Since all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.",
      },
      {
        id: 2,
        inputText: 'title = "First leTTeR of EACH Word"',
        outputText: '"First Letter of Each Word"',
        explanation:
          'The word "of" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.',
      },
      {
        id: 3,
        inputText: 'title = "i lOve leetcode"',
        outputText: '"i Love Leetcode"',
        explanation:
          'The word "i" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.',
      },
    ],
    tests:
      '["capiTalIze tHe titLe", "First leTTeR of EACH Word", "i lOve leetcode"]',
    answer:
      '["Capitalize The Title", "First Letter of Each Word", "i Love Leetcode"]',
    code: "/**\n * @param {string} title\n * @return {string}\n */\nvar capitalizeTitle = function(title) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2236,
    title: "Maximum Twin Sum of a Linked List",
    titleSlug: "maximum-twin-sum-of-a-linked-list",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Two Pointers", "Stack"],
    constaints:
      "<li>For example, if <code>n = 4</code>, then node <code>0</code> is the twin of node <code>3</code>, and node <code>1</code> is the twin of node <code>2</code>. These are the only nodes with twins for <code>n = 4</code>.</li> <li>The number of nodes in the list is an <strong>even</strong> integer in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>In a linked list of size <code>n</code>, where <code>n</code> is <strong>even</strong>, the <code>i<sup>th</sup></code> node (<strong>0-indexed</strong>) of the linked list is known as the <strong>twin</strong> of the <code>(n-1-i)<sup>th</sup></code> node, if <code>0 &lt;= i &lt;= (n / 2) - 1</code>.</p><p>The <strong>twin sum </strong>is defined as the sum of a node and its twin.</p><p>Given the <code>head</code> of a linked list with even length, return <em>the <strong>maximum twin sum</strong> of the linked list</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [5,4,2,1]",
        outputText: "6",
        explanation:
          "Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6.",
      },
      {
        id: 2,
        inputText: "head = [4,2,2,3]",
        outputText: "7",
        explanation:
          "The nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7.",
      },
      {
        id: 3,
        inputText: "head = [1,100000]",
        outputText: "100001",
        explanation:
          "There is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.",
      },
    ],
    tests: "[[5, 4, 2, 1], [4, 2, 2, 3], [1, 100000]]",
    answer: "[6, 7, 100001]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar pairSum = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2239,
    title: "Execution of All Suffix Instructions Staying in a Grid",
    titleSlug: "execution-of-all-suffix-instructions-staying-in-a-grid",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Simulation"],
    constaints:
      "<li>The next instruction will move the robot off the grid.</li> <li>There are no more instructions left to execute.</li> <li><code>m == s.length</code></li> <li><code>1 &lt;= n, m &lt;= 500</code></li> <li><code>startPos.length == 2</code></li> <li><code>0 &lt;= start<sub>row</sub>, start<sub>col</sub> &lt; n</code></li> <li><code>s</code> consists of <code>'L'</code>, <code>'R'</code>, <code>'U'</code>, and <code>'D'</code>.</li>",
    question:
      "<p>There is an <code>n x n</code> grid, with the top-left cell at <code>(0, 0)</code> and the bottom-right cell at <code>(n - 1, n - 1)</code>. You are given the integer <code>n</code> and an integer array <code>startPos</code> where <code>startPos = [start<sub>row</sub>, start<sub>col</sub>]</code> indicates that a robot is initially at cell <code>(start<sub>row</sub>, start<sub>col</sub>)</code>.</p><p>You are also given a <strong>0-indexed</strong> string <code>s</code> of length <code>m</code> where <code>s[i]</code> is the <code>i<sup>th</sup></code> instruction for the robot: <code>'L'</code> (move left), <code>'R'</code> (move right), <code>'U'</code> (move up), and <code>'D'</code> (move down).</p><p>The robot can begin executing from any <code>i<sup>th</sup></code> instruction in <code>s</code>. It executes the instructions one by one towards the end of <code>s</code> but it stops if either of these conditions is met:</p><p>Return <em>an array</em> <code>answer</code> <em>of length</em> <code>m</code> <em>where</em> <code>answer[i]</code> <em>is <strong>the number of instructions</strong> the robot can execute if the robot <strong>begins executing from</strong> the</em> <code>i<sup>th</sup></code> <em>instruction in</em> <code>s</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'n = 3, startPos = [0,1], s = "RRDDLU"',
        outputText: "[1,5,4,3,1,0]",
        explanation:
          "Starting from startPos and beginning execution from the i",
      },
      {
        id: 2,
        inputText: 'n = 2, startPos = [1,1], s = "LURD"',
        outputText: "[4,1,0,0]",
        explanation: "- 0",
      },
      {
        id: 3,
        inputText: 'n = 1, startPos = [0,0], s = "LRUD"',
        outputText: "[0,0,0,0]",
        explanation:
          "No matter which instruction the robot begins execution from, it would move off the grid.",
      },
    ],
    tests: "[3, 2, 1]",
    answer: "[[1, 5, 4, 3, 1, 0], [4, 1, 0, 0], [0, 0, 0, 0]]",
    code: "/**\n * @param {number} n\n * @param {number[]} startPos\n * @param {string} s\n * @return {number[]}\n */\nvar executeInstructions = function(n, startPos, s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2243,
    title: "Check if All A's Appears Before All B's",
    titleSlug: "check-if-all-as-appears-before-all-bs",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String"],
    constaints:
      "<li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s[i]</code> is either <code>'a'</code> or <code>'b'</code>.</li>",
    question:
      "<p>Given a string <code>s</code> consisting of <strong>only</strong> the characters <code>'a'</code> and <code>'b'</code>, return <code>true</code> <em>if <strong>every</strong> </em><code>'a'</code> <em>appears before <strong>every</strong> </em><code>'b'</code><em> in the string</em>. Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "aaabbb"',
        outputText: "true",
        explanation:
          "The 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.\nHence, every 'a' appears before every 'b' and we return true.",
      },
      {
        id: 2,
        inputText: 's = "abab"',
        outputText: "false",
        explanation:
          "There is an 'a' at index 2 and a 'b' at index 1.\nHence, not every 'a' appears before every 'b' and we return false.",
      },
      {
        id: 3,
        inputText: 's = "bbb"',
        outputText: "true",
        explanation:
          "There are no 'a's, hence, every 'a' appears before every 'b' and we return true.",
      },
    ],
    tests: '["aaabbb", "abab", "bbb"]',
    answer: "[true, false, true]",
    code: "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkString = function(s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2244,
    title: "Number of Laser Beams in a Bank",
    titleSlug: "number-of-laser-beams-in-a-bank",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Math", "String", "Matrix"],
    constaints:
      "<li>The two devices are located on two <strong>different rows</strong>: <code>r<sub>1</sub></code> and <code>r<sub>2</sub></code>, where <code>r<sub>1</sub> &lt; r<sub>2</sub></code>.</li> <li>For <strong>each</strong> row <code>i</code> where <code>r<sub>1</sub> &lt; i &lt; r<sub>2</sub></code>, there are <strong>no security devices</strong> in the <code>i<sup>th</sup></code> row.</li> <li><code>m == bank.length</code></li> <li><code>n == bank[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>bank[i][j]</code> is either <code>'0'</code> or <code>'1'</code>.</li>",
    question:
      "<p>Anti-theft security devices are activated inside a bank. You are given a <strong>0-indexed</strong> binary string array <code>bank</code> representing the floor plan of the bank, which is an <code>m x n</code> 2D matrix. <code>bank[i]</code> represents the <code>i<sup>th</sup></code> row, consisting of <code>'0'</code>s and <code>'1'</code>s. <code>'0'</code> means the cell is empty, while<code>'1'</code> means the cell has a security device.</p><p>There is <strong>one</strong> laser beam between any <strong>two</strong> security devices <strong>if both</strong> conditions are met:</p><p>Laser beams are independent, i.e., one beam does not interfere nor join with another.</p><p>Return <em>the total number of laser beams in the bank</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'bank = ["011001","000000","010100","001000"]',
        outputText: "8",
        explanation:
          "Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n * bank[0][1] -- bank[2][1]\n * bank[0][1] -- bank[2][3]\n * bank[0][2] -- bank[2][1]\n * bank[0][2] -- bank[2][3]\n * bank[0][5] -- bank[2][1]\n * bank[0][5] -- bank[2][3]\n * bank[2][1] -- bank[3][2]\n * bank[2][3] -- bank[3][2]\nNote that there is no beam between any device on the 0",
      },
      {
        id: 2,
        inputText: 'bank = ["000","111","000"]',
        outputText: "0",
        explanation:
          "There does not exist two devices located on two different rows.",
      },
    ],
    tests: '[["011001", "000000", "010100", "001000"], ["000", "111", "000"]]',
    answer: "[8, 0]",
    code: "/**\n * @param {string[]} bank\n * @return {number}\n */\nvar numberOfBeams = function(bank) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2248,
    title: "Minimum Cost of Buying Candies With Discount",
    titleSlug: "minimum-cost-of-buying-candies-with-discount",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Greedy", "Sorting"],
    constaints:
      "<li>For example, if there are <code>4</code> candies with costs <code>1</code>, <code>2</code>, <code>3</code>, and <code>4</code>, and the customer buys candies with costs <code>2</code> and <code>3</code>, they\u00a0can take the candy with cost <code>1</code> for free, but not the candy with cost <code>4</code>.</li> <li><code>1 &lt;= cost.length &lt;= 100</code></li> <li><code>1 &lt;= cost[i] &lt;= 100</code></li>",
    question:
      "<p>A shop is selling candies at a discount. For <strong>every two</strong> candies sold, the shop gives a <strong>third</strong> candy for <strong>free</strong>.</p><p>The customer can choose <strong>any</strong> candy to take away for free as long as the cost of the chosen candy is less than or equal to the <strong>minimum</strong> cost of the two candies bought.</p><p>Given a <strong>0-indexed</strong> integer array <code>cost</code>, where <code>cost[i]</code> denotes the cost of the <code>i<sup>th</sup></code> candy, return <em>the <strong>minimum cost</strong> of buying <strong>all</strong> the candies</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "cost = [1,2,3]",
        outputText: "5",
        explanation:
          "We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the",
      },
      {
        id: 2,
        inputText: "cost = [6,5,7,9,2,2]",
        outputText: "23",
        explanation:
          "The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.",
      },
      {
        id: 3,
        inputText: "cost = [5,5]",
        outputText: "10",
        explanation:
          "Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.",
      },
    ],
    tests: "[[1, 2, 3], [6, 5, 7, 9, 2, 2], [5, 5]]",
    answer: "[5, 23, 10]",
    code: "/**\n * @param {number[]} cost\n * @return {number}\n */\nvar minimumCost = function(cost) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2254,
    title: "Check if Every Row and Column Contains All Numbers",
    titleSlug: "check-if-every-row-and-column-contains-all-numbers",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Matrix"],
    constaints:
      "<li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= matrix[i][j] &lt;= n</code></li>",
    question:
      "<p>An <code>n x n</code> matrix is <strong>valid</strong> if every row and every column contains <strong>all</strong> the integers from <code>1</code> to <code>n</code> (<strong>inclusive</strong>).</p><p>Given an <code>n x n</code> integer matrix <code>matrix</code>, return <code>true</code> <em>if the matrix is <strong>valid</strong>.</em> Otherwise, return <code>false</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "matrix = [[1,2,3],[3,1,2],[2,3,1]]",
        outputText: "true",
        explanation:
          "In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.\nHence, we return true.",
      },
      {
        id: 2,
        inputText: "matrix = [[1,1,1],[1,2,3],[1,2,3]]",
        outputText: "false",
        explanation:
          "In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.\nHence, we return false.",
      },
    ],
    tests:
      "[[[1, 2, 3], [3, 1, 2], [2, 3, 1]], [[1, 1, 1], [1, 2, 3], [1, 2, 3]]]",
    answer: "[true, false]",
    code: "/**\n * @param {number[][]} matrix\n * @return {boolean}\n */\nvar checkValid = function(matrix) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2255,
    title: "Minimum Swaps to Group All 1's Together II",
    titleSlug: "minimum-swaps-to-group-all-1s-together-ii",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>A <strong>swap</strong> is defined as taking two <strong>distinct</strong> positions in an array and swapping the values in them.</p><p>A <strong>circular</strong> array is defined as an array where we consider the <strong>first</strong> element and the <strong>last</strong> element to be <strong>adjacent</strong>.</p><p>Given a <strong>binary</strong> <strong>circular</strong> array <code>nums</code>, return <em>the minimum number of swaps required to group all </em><code>1</code><em>'s present in the array together at <strong>any location</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,1,0,1,1,0,0]",
        outputText: "1",
        explanation:
          "Here are a few of the ways to group all the 1's together:\n[0,",
      },
      {
        id: 2,
        inputText: "nums = [0,1,1,1,0,0,1,1,0]",
        outputText: "2",
        explanation:
          "Here are a few of the ways to group all the 1's together:\n[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).\n[1,1,1,1,1,0,0,0,0] using 2 swaps.\nThere is no way to group all 1's together with 0 or 1 swaps.\nThus, the minimum number of swaps required is 2.",
      },
      {
        id: 3,
        inputText: "nums = [1,1,0,0,1]",
        outputText: "0",
        explanation:
          "All the 1's are already grouped together due to the circular property of the array.\nThus, the minimum number of swaps required is 0.",
      },
    ],
    tests:
      "[[0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 0, 1]]",
    answer: "[1, 2, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minSwaps = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2260,
    title: "Divide a String Into Groups of Size k",
    titleSlug: "divide-a-string-into-groups-of-size-k",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Simulation"],
    constaints:
      "<li>The first group consists of the first <code>k</code> characters of the string, the second group consists of the next <code>k</code> characters of the string, and so on. Each character can be a part of <strong>exactly one</strong> group.</li> <li>For the last group, if the string <strong>does not</strong> have <code>k</code> characters remaining, a character <code>fill</code> is used to complete the group.</li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters only.</li> <li><code>1 &lt;= k &lt;= 100</code></li> <li><code>fill</code> is a lowercase English letter.</li>",
    question:
      "<p>A string <code>s</code> can be partitioned into groups of size <code>k</code> using the following procedure:</p><p>Note that the partition is done so that after removing the <code>fill</code> character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be <code>s</code>.</p><p>Given the string <code>s</code>, the size of each group <code>k</code> and the character <code>fill</code>, return <em>a string array denoting the <strong>composition of every group</strong> </em><code>s</code><em> has been divided into, using the above procedure</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "abcdefghi", k = 3, fill = "x"',
        outputText: '["abc","def","ghi"]',
        explanation:
          'The first 3 characters "abc" form the first group.\nThe next 3 characters "def" form the second group.\nThe last 3 characters "ghi" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are "abc", "def", and "ghi".',
      },
      {
        id: 2,
        inputText: 's = "abcdefghij", k = 3, fill = "x"',
        outputText: '["abc","def","ghi","jxx"]',
        explanation:
          'Similar to the previous example, we are forming the first three groups "abc", "def", and "ghi".\nFor the last group, we can only use the character \'j\' from the string. To complete this group, we add \'x\' twice.\nThus, the 4 groups formed are "abc", "def", "ghi", and "jxx".',
      },
    ],
    tests: '["abcdefghi", "abcdefghij"]',
    answer: '[["abc", "def", "ghi"], ["abc", "def", "ghi", "jxx"]]',
    code: "/**\n * @param {string} s\n * @param {number} k\n * @param {character} fill\n * @return {string[]}\n */\nvar divideString = function(s, k, fill) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2261,
    title: "All Divisions With the Highest Score of a Binary Array",
    titleSlug: "all-divisions-with-the-highest-score-of-a-binary-array",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array"],
    constaints:
      "<li><code>nums<sub>left</sub></code> has all the elements of <code>nums</code> between index <code>0</code> and <code>i - 1</code> <strong>(inclusive)</strong>, while <code>nums<sub>right</sub></code> has all the elements of nums between index <code>i</code> and <code>n - 1</code> <strong>(inclusive)</strong>.</li> <li>If <code>i == 0</code>, <code>nums<sub>left</sub></code> is <strong>empty</strong>, while <code>nums<sub>right</sub></code> has all the elements of <code>nums</code>.</li> <li>If <code>i == n</code>, <code>nums<sub>left</sub></code> has all the elements of nums, while <code>nums<sub>right</sub></code> is <strong>empty</strong>.</li> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> binary array <code>nums</code> of length <code>n</code>. <code>nums</code> can be divided at index <code>i</code> (where <code>0 &lt;= i &lt;= n)</code> into two arrays (possibly empty) <code>nums<sub>left</sub></code> and <code>nums<sub>right</sub></code>:</p><p>The <strong>division score</strong> of an index <code>i</code> is the <strong>sum</strong> of the number of <code>0</code>'s in <code>nums<sub>left</sub></code> and the number of <code>1</code>'s in <code>nums<sub>right</sub></code>.</p><p>Return <em><strong>all distinct indices</strong> that have the <strong>highest</strong> possible <strong>division score</strong></em>. You may return the answer in <strong>any order</strong>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [0,0,1,0]",
        outputText: "[2,4]",
        explanation: "Division at index\n- 0: nums",
      },
      {
        id: 2,
        inputText: "nums = [0,0,0]",
        outputText: "[3]",
        explanation: "Division at index\n- 0: nums",
      },
      {
        id: 3,
        inputText: "nums = [1,1]",
        outputText: "[0]",
        explanation: "Division at index\n- 0: nums",
      },
    ],
    tests: "[[0, 0, 1, 0], [0, 0, 0], [1, 1]]",
    answer: "[[2, 4], [3], [0]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar maxScoreIndices = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2265,
    title: "Partition Array According to Given Pivot",
    titleSlug: "partition-array-according-to-given-pivot",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Simulation"],
    constaints:
      "<li>Every element less than <code>pivot</code> appears <strong>before</strong> every element greater than <code>pivot</code>.</li> <li>Every element equal to <code>pivot</code> appears <strong>in between</strong> the elements less than and greater than <code>pivot</code>.</li> <li>The <strong>relative order</strong> of the elements less than <code>pivot</code> and the elements greater than <code>pivot</code> is maintained.\n\t<ul>\n<li>More formally, consider every <code>p<sub>i</sub></code>, <code>p<sub>j</sub></code> where <code>p<sub>i</sub></code> is the new position of the <code>i<sup>th</sup></code> element and <code>p<sub>j</sub></code> is the new position of the <code>j<sup>th</sup></code> element. For elements less than <code>pivot</code>, if <code>i &lt; j</code> and <code>nums[i] &lt; pivot</code> and <code>nums[j] &lt; pivot</code>, then <code>p<sub>i</sub> &lt; p<sub>j</sub></code>. Similarly for elements greater than <code>pivot</code>, if <code>i &lt; j</code> and <code>nums[i] &gt; pivot</code> and <code>nums[j] &gt; pivot</code>, then <code>p<sub>i</sub> &lt; p<sub>j</sub></code>.</li>\n</ul>\n</li> <li>More formally, consider every <code>p<sub>i</sub></code>, <code>p<sub>j</sub></code> where <code>p<sub>i</sub></code> is the new position of the <code>i<sup>th</sup></code> element and <code>p<sub>j</sub></code> is the new position of the <code>j<sup>th</sup></code> element. For elements less than <code>pivot</code>, if <code>i &lt; j</code> and <code>nums[i] &lt; pivot</code> and <code>nums[j] &lt; pivot</code>, then <code>p<sub>i</sub> &lt; p<sub>j</sub></code>. Similarly for elements greater than <code>pivot</code>, if <code>i &lt; j</code> and <code>nums[i] &gt; pivot</code> and <code>nums[j] &gt; pivot</code>, then <code>p<sub>i</sub> &lt; p<sub>j</sub></code>.</li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>pivot</code> equals to an element of <code>nums</code>.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>pivot</code>. Rearrange <code>nums</code> such that the following conditions are satisfied:</p><p>Return <code>nums</code><em> after the rearrangement.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [9,12,5,10,14,3,10], pivot = 10",
        outputText: "[9,5,3,10,10,12,14]",
        explanation:
          "The elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.\nThe elements 12 and 14 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings.",
      },
      {
        id: 2,
        inputText: "nums = [-3,4,3,2], pivot = 2",
        outputText: "[-3,2,4,3]",
        explanation:
          "The element -3 is less than the pivot so it is on the left side of the array.\nThe elements 4 and 3 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings.",
      },
    ],
    tests: "[[9, 12, 5, 10, 14, 3, 10], [-3, 4, 3, 2]]",
    answer: "[[9, 5, 3, 10, 10, 12, 14], [-3, 2, 4, 3]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} pivot\n * @return {number[]}\n */\nvar pivotArray = function(nums, pivot) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2271,
    title: "Rearrange Array Elements by Sign",
    titleSlug: "rearrange-array-elements-by-sign",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Two Pointers", "Simulation"],
    constaints:
      "<li>Every <strong>consecutive pair</strong> of integers have <strong>opposite signs</strong>.</li> <li>For all integers with the same sign, the <strong>order</strong> in which they were present in <code>nums</code> is <strong>preserved</strong>.</li> <li>The rearranged array begins with a positive integer.</li> <li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>nums.length</code> is <strong>even</strong></li> <li><code>1 &lt;= |nums[i]| &lt;= 10<sup>5</sup></code></li> <li><code>nums</code> consists of <strong>equal</strong> number of positive and negative integers.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of <strong>even</strong> length consisting of an <strong>equal</strong> number of positive and negative integers.</p><p>You should return the array of nums such that the the array follows the given conditions:</p><p>Return <em>the modified array after rearranging the elements to satisfy the aforementioned conditions</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,1,-2,-5,2,-4]",
        outputText: "[3,-2,1,-5,2,-4]",
        explanation:
          "The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].\nThe only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].\nOther ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.",
      },
      {
        id: 2,
        inputText: "nums = [-1,1]",
        outputText: "[1,-1]",
        explanation:
          "1 is the only positive integer and -1 the only negative integer in nums.\nSo nums is rearranged to [1,-1].",
      },
    ],
    tests: "[[3, 1, -2, -5, 2, -4], [-1, 1]]",
    answer: "[[3, -2, 1, -5, 2, -4], [1, -1]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar rearrangeArray = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2274,
    title: "Keep Multiplying Found Values by Two",
    titleSlug: "keep-multiplying-found-values-by-two",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sorting", "Simulation"],
    constaints:
      "<li>If <code>original</code> is found in <code>nums</code>, <strong>multiply</strong> it by two (i.e., set <code>original = 2 * original</code>).</li> <li>Otherwise, <strong>stop</strong> the process.</li> <li><strong>Repeat</strong> this process with the new number as long as you keep finding the number.</li> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i], original &lt;= 1000</code></li>",
    question:
      "<p>You are given an array of integers <code>nums</code>. You are also given an integer <code>original</code> which is the first number that needs to be searched for in <code>nums</code>.</p><p>You then do the following steps:</p><p>Return <em>the <strong>final</strong> value of </em><code>original</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [5,3,6,1,12], original = 3",
        outputText: "24",
        explanation:
          "- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.",
      },
      {
        id: 2,
        inputText: "nums = [2,7,9], original = 4",
        outputText: "4",
        explanation: "- 4 is not found in nums. Thus, 4 is returned.",
      },
    ],
    tests: "[[5, 3, 6, 1, 12], [2, 7, 9]]",
    answer: "[24, 4]",
    code: "/**\n * @param {number[]} nums\n * @param {number} original\n * @return {number}\n */\nvar findFinalValue = function(nums, original) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2278,
    title: "Find Three Consecutive Integers That Sum to a Given Number",
    titleSlug: "find-three-consecutive-integers-that-sum-to-a-given-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Simulation"],
    constaints: "<li><code>0 &lt;= num &lt;= 10<sup>15</sup></code></li>",
    question:
      "<p>Given an integer <code>num</code>, return <em>three consecutive integers (as a sorted array)</em><em> that <strong>sum</strong> to </em><code>num</code>. If <code>num</code> cannot be expressed as the sum of three consecutive integers, return<em> an <strong>empty</strong> array.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "num = 33",
        outputText: "[10,11,12]",
        explanation:
          "33 can be expressed as 10 + 11 + 12 = 33.\n10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12].",
      },
      {
        id: 2,
        inputText: "num = 4",
        outputText: "[]",
        explanation:
          "There is no way to express 4 as the sum of 3 consecutive integers.",
      },
    ],
    tests: "[33, 4]",
    answer: "[[10, 11, 12], []]",
    code: "/**\n * @param {number} num\n * @return {number[]}\n */\nvar sumOfThree = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2283,
    title: "Sort Even and Odd Indices Independently",
    titleSlug: "sort-even-and-odd-indices-independently",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Sorting"],
    constaints:
      "<li>Sort the values at <strong>odd indices</strong> of <code>nums</code> in <strong>non-increasing</strong> order.\n\n\t<ul>\n<li>For example, if <code>nums = [4,<strong><u>1</u></strong>,2,<u><strong>3</strong></u>]</code> before this step, it becomes <code>[4,<u><strong>3</strong></u>,2,<strong><u>1</u></strong>]</code> after. The values at odd indices <code>1</code> and <code>3</code> are sorted in non-increasing order.</li>\n</ul>\n</li> <li>For example, if <code>nums = [4,<strong><u>1</u></strong>,2,<u><strong>3</strong></u>]</code> before this step, it becomes <code>[4,<u><strong>3</strong></u>,2,<strong><u>1</u></strong>]</code> after. The values at odd indices <code>1</code> and <code>3</code> are sorted in non-increasing order.</li> <li>Sort the values at <strong>even indices</strong> of <code>nums</code> in <strong>non-decreasing</strong> order.\n\t<ul>\n<li>For example, if <code>nums = [<u><strong>4</strong></u>,1,<u><strong>2</strong></u>,3]</code> before this step, it becomes <code>[<u><strong>2</strong></u>,1,<u><strong>4</strong></u>,3]</code> after. The values at even indices <code>0</code> and <code>2</code> are sorted in non-decreasing order.</li>\n</ul>\n</li> <li>For example, if <code>nums = [<u><strong>4</strong></u>,1,<u><strong>2</strong></u>,3]</code> before this step, it becomes <code>[<u><strong>2</strong></u>,1,<u><strong>4</strong></u>,3]</code> after. The values at even indices <code>0</code> and <code>2</code> are sorted in non-decreasing order.</li> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. Rearrange the values of <code>nums</code> according to the following rules:</p><p>Return <em>the array formed after rearranging the values of</em> <code>nums</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [4,1,2,3]",
        outputText: "[2,3,4,1]",
        explanation:
          "First, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,",
      },
      {
        id: 2,
        inputText: "nums = [2,1]",
        outputText: "[2,1]",
        explanation:
          "Since there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array.",
      },
    ],
    tests: "[[4, 1, 2, 3], [2, 1]]",
    answer: "[[2, 3, 4, 1], [2, 1]]",
    code: "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortEvenOdd = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2284,
    title: "Smallest Value of the Rearranged Number",
    titleSlug: "smallest-value-of-the-rearranged-number",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Math", "Sorting"],
    constaints:
      "<li><code>-10<sup>15</sup> &lt;= num &lt;= 10<sup>15</sup></code></li>",
    question:
      "<p>You are given an integer <code>num.</code> <strong>Rearrange</strong> the digits of <code>num</code> such that its value is <strong>minimized</strong> and it does not contain <strong>any</strong> leading zeros.</p><p>Return <em>the rearranged number with minimal value</em>.</p><p>Note that the sign of the number does not change after rearranging the digits.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 310",
        outputText: "103",
        explanation:
          "The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.",
      },
      {
        id: 2,
        inputText: "num = -7605",
        outputText: "-7650",
        explanation:
          "Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.",
      },
    ],
    tests: "[310, -7605]",
    answer: "[103, -7650]",
    code: "/**\n * @param {number} num\n * @return {number}\n */\nvar smallestNumber = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2285,
    title: "Design Bitset",
    titleSlug: "design-bitset",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "String", "Design"],
    constaints:
      "<li><code>Bitset(int size)</code> Initializes the Bitset with <code>size</code> bits, all of which are <code>0</code>.</li> <li><code>void fix(int idx)</code> Updates the value of the bit at the index <code>idx</code> to <code>1</code>. If the value was already <code>1</code>, no change occurs.</li> <li><code>void unfix(int idx)</code> Updates the value of the bit at the index <code>idx</code> to <code>0</code>. If the value was already <code>0</code>, no change occurs.</li> <li><code>void flip()</code> Flips the values of each bit in the Bitset. In other words, all bits with value <code>0</code> will now have value <code>1</code> and vice versa.</li> <li><code>boolean all()</code> Checks if the value of <strong>each</strong> bit in the Bitset is <code>1</code>. Returns <code>true</code> if it satisfies the condition, <code>false</code> otherwise.</li> <li><code>boolean one()</code> Checks if there is <strong>at least one</strong> bit in the Bitset with value <code>1</code>. Returns <code>true</code> if it satisfies the condition, <code>false</code> otherwise.</li> <li><code>int count()</code> Returns the <strong>total number</strong> of bits in the Bitset which have value <code>1</code>.</li> <li><code>String toString()</code> Returns the current composition of the Bitset. Note that in the resultant string, the character at the <code>i<sup>th</sup></code> index should coincide with the value at the <code>i<sup>th</sup></code> bit of the Bitset.</li> <li><code>1 &lt;= size &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= idx &lt;= size - 1</code></li> <li>At most <code>10<sup>5</sup></code> calls will be made <strong>in total</strong> to <code>fix</code>, <code>unfix</code>, <code>flip</code>, <code>all</code>, <code>one</code>, <code>count</code>, and <code>toString</code>.</li> <li>At least one call will be made to <code>all</code>, <code>one</code>, <code>count</code>, or <code>toString</code>.</li> <li>At most <code>5</code> calls will be made to <code>toString</code>.</li>",
    question:
      "<p>A <strong>Bitset</strong> is a data structure that compactly stores bits.</p><p>Implement the <code>Bitset</code> class:</p>",
    examples: [
      {
        id: 1,
        inputText:
          '["Bitset", "fix", "fix", "flip", "all", "unfix", "flip", "one", "unfix", "count", "toString"]\n[[5], [3], [1], [], [], [0], [], [], [0], [], []]',
        outputText:
          '[null, null, null, null, false, null, null, true, null, 2, "01010"]',
        explanation:
          'Bitset bs = new Bitset(5); // bitset = "00000".\nbs.fix(3);     // the value at idx = 3 is updated to 1, so bitset = "00010".\nbs.fix(1);     // the value at idx = 1 is updated to 1, so bitset = "01010". \nbs.flip();     // the value of each bit is flipped, so bitset = "10101". \nbs.all();      // return False, as not all values of the bitset are 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = "00101".\nbs.flip();     // the value of each bit is flipped, so bitset = "11010". \nbs.one();      // return True, as there is at least 1 index with value 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = "01010".\nbs.count();    // return 2, as there are 2 bits with value 1.\nbs.toString(); // return "01010", which is the composition of bitset.',
      },
    ],
    tests:
      '[["Bitset", "fix", "fix", "flip", "all", "unfix", "flip", "one", "unfix", "count", "toString"]]',
    answer:
      '[[null, null, null, null, false, null, null, true, null, 2, "01010"]]',
    code: "/**\n * @param {number} size\n */\nvar Bitset = function(size) {\n    \n};\n\n/** \n * @param {number} idx\n * @return {void}\n */\nBitset.prototype.fix = function(idx) {\n    \n};\n\n/** \n * @param {number} idx\n * @return {void}\n */\nBitset.prototype.unfix = function(idx) {\n    \n};\n\n/**\n * @return {void}\n */\nBitset.prototype.flip = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nBitset.prototype.all = function() {\n    \n};\n\n/**\n * @return {boolean}\n */\nBitset.prototype.one = function() {\n    \n};\n\n/**\n * @return {number}\n */\nBitset.prototype.count = function() {\n    \n};\n\n/**\n * @return {string}\n */\nBitset.prototype.toString = function() {\n    \n};\n\n/** \n * Your Bitset object will be instantiated and called as such:\n * var obj = new Bitset(size)\n * obj.fix(idx)\n * obj.unfix(idx)\n * obj.flip()\n * var param_4 = obj.all()\n * var param_5 = obj.one()\n * var param_6 = obj.count()\n * var param_7 = obj.toString()\n */",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2298,
    title: "Count Integers With Even Digit Sum",
    titleSlug: "count-integers-with-even-digit-sum",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Math", "Simulation"],
    constaints: "<li><code>1 &lt;= num &lt;= 1000</code></li>",
    question:
      "<p>Given a positive integer <code>num</code>, return <em>the number of positive integers <strong>less than or equal to</strong></em> <code>num</code> <em>whose digit sums are <strong>even</strong></em>.</p><p>The <strong>digit sum</strong> of a positive integer is the sum of all its digits.</p>",
    examples: [
      {
        id: 1,
        inputText: "num = 4",
        outputText: "2",
        explanation:
          "The only integers less than or equal to 4 whose digit sums are even are 2 and 4.",
      },
      {
        id: 2,
        inputText: "num = 30",
        outputText: "14",
        explanation:
          "The 14 integers less than or equal to 30 whose digit sums are even are\n2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.",
      },
    ],
    tests: "[4, 30]",
    answer: "[2, 14]",
    code: "/**\n * @param {number} num\n * @return {number}\n */\nvar countEven = function(num) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2299,
    title: "Merge Nodes in Between Zeros",
    titleSlug: "merge-nodes-in-between-zeros",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Linked List", "Simulation"],
    constaints:
      "<li>The number of nodes in the list is in the range <code>[3, 2 * 10<sup>5</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> <li>There are <strong>no</strong> two consecutive nodes with <code>Node.val == 0</code>.</li> <li>The <strong>beginning</strong> and <strong>end</strong> of the linked list have <code>Node.val == 0</code>.</li>",
    question:
      "<p>You are given the <code>head</code> of a linked list, which contains a series of integers <strong>separated</strong> by <code>0</code>'s. The <strong>beginning</strong> and <strong>end</strong> of the linked list will have <code>Node.val == 0</code>.</p><p>For <strong>every </strong>two consecutive <code>0</code>'s, <strong>merge</strong> all the nodes lying in between them into a single node whose value is the <strong>sum</strong> of all the merged nodes. The modified list should not contain any <code>0</code>'s.</p><p>Return <em>the</em> <code>head</code> <em>of the modified linked list</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "head = [0,3,1,0,4,5,2,0]",
        outputText: "[4,11]",
        explanation:
          "The above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 3 + 1 = 4.\n- The sum of the nodes marked in red: 4 + 5 + 2 = 11.",
      },
      {
        id: 2,
        inputText: "head = [0,1,0,3,0,2,2,0]",
        outputText: "[1,3,4]",
        explanation:
          "The above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 1 = 1.\n- The sum of the nodes marked in red: 3 = 3.\n- The sum of the nodes marked in yellow: 2 + 2 = 4.",
      },
    ],
    tests: "[[0, 3, 1, 0, 4, 5, 2, 0], [0, 1, 0, 3, 0, 2, 2, 0]]",
    answer: "[[4, 11], [1, 3, 4]]",
    code: "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar mergeNodes = function(head) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2300,
    title: "Construct String With Repeat Limit",
    titleSlug: "construct-string-with-repeat-limit",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["String", "Greedy", "Heap (Priority Queue)", "Counting"],
    constaints:
      "<li><code>1 &lt;= repeatLimit &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li>",
    question:
      "<p>You are given a string <code>s</code> and an integer <code>repeatLimit</code>. Construct a new string <code>repeatLimitedString</code> using the characters of <code>s</code> such that no letter appears <strong>more than</strong> <code>repeatLimit</code> times <strong>in a row</strong>. You do <strong>not</strong> have to use all characters from <code>s</code>.</p><p>Return <em>the <strong>lexicographically largest</strong> </em><code>repeatLimitedString</code> <em>possible</em>.</p><p>A string <code>a</code> is <strong>lexicographically larger</strong> than a string <code>b</code> if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears later in the alphabet than the corresponding letter in <code>b</code>. If the first <code>min(a.length, b.length)</code> characters do not differ, then the longer string is the lexicographically larger one.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "cczazcc", repeatLimit = 3',
        outputText: '"zzcccac"',
        explanation:
          "We use all of the characters from s to construct the repeatLimitedString \"zzcccac\".\nThe letter 'a' appears at most 1 time in a row.\nThe letter 'c' appears at most 3 times in a row.\nThe letter 'z' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"zzcccac\".\nNote that the string \"zzcccca\" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.",
      },
      {
        id: 2,
        inputText: 's = "aababab", repeatLimit = 2',
        outputText: '"bbabaa"',
        explanation:
          "We use only some of the characters from s to construct the repeatLimitedString \"bbabaa\". \nThe letter 'a' appears at most 2 times in a row.\nThe letter 'b' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"bbabaa\".\nNote that the string \"bbabaaa\" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.",
      },
    ],
    tests: '["cczazcc", "aababab"]',
    answer: '["zzcccac", "bbabaa"]',
    code: "/**\n * @param {string} s\n * @param {number} repeatLimit\n * @return {string}\n */\nvar repeatLimitedString = function(s, repeatLimit) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2312,
    title: "Most Frequent Number Following Key In an Array",
    titleSlug: "most-frequent-number-following-key-in-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Counting"],
    constaints:
      "<li><code>0 &lt;= i &lt;= nums.length - 2</code>,</li> <li><code>nums[i] == key</code> and,</li> <li><code>nums[i + 1] == target</code>.</li> <li><code>2 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li>The test cases will be generated such that the answer is unique.</li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.<strong> </strong>You are also given an integer <code>key</code>, which is present in <code>nums</code>.</p><p>For every unique integer <code>target</code> in <code>nums</code>, <strong>count</strong> the number of times <code>target</code> immediately follows an occurrence of <code>key</code> in <code>nums</code>. In other words, count the number of indices <code>i</code> such that:</p><p>Return <em>the </em><code>target</code><em> with the <strong>maximum</strong> count</em>. The test cases will be generated such that the <code>target</code> with maximum count is unique.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [1,100,200,1,100], key = 1",
        outputText: "100",
        explanation:
          "For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.\nNo other integers follow an occurrence of key, so we return 100.",
      },
      {
        id: 2,
        inputText: "nums = [2,2,2,2,3], key = 2",
        outputText: "2",
        explanation:
          "For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.\nFor target = 3, there is only one occurrence at index 4 which follows an occurrence of key.\ntarget = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.",
      },
    ],
    tests: "[[1, 100, 200, 1, 100], [2, 2, 2, 2, 3]]",
    answer: "[100, 2]",
    code: "/**\n * @param {number[]} nums\n * @param {number} key\n * @return {number}\n */\nvar mostFrequent = function(nums, key) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2320,
    title: "Find All K-Distant Indices in an Array",
    titleSlug: "find-all-k-distant-indices-in-an-array",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "Two Pointers"],
    constaints:
      "<li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li><code>key</code> is an integer from the array <code>nums</code>.</li> <li><code>1 &lt;= k &lt;= nums.length</code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and two integers <code>key</code> and <code>k</code>. A <strong>k-distant index</strong> is an index <code>i</code> of <code>nums</code> for which there exists at least one index <code>j</code> such that <code>|i - j| &lt;= k</code> and <code>nums[j] == key</code>.</p><p>Return <em>a list of all k-distant indices sorted in <strong>increasing order</strong></em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [3,4,9,1,3,9,5], key = 9, k = 1",
        outputText: "[1,2,3,4,5,6]",
        explanation: "Here,",
      },
      {
        id: 2,
        inputText: "nums = [2,2,2,2,2], key = 2, k = 2",
        outputText: "[0,1,2,3,4]",
        explanation:
          "For all indices i in nums, there exists some index j such that |i - j| <= k and nums[j] == key, so every index is a k-distant index. \nHence, we return [0,1,2,3,4].",
      },
    ],
    tests: "[[3, 4, 9, 1, 3, 9, 5], [2, 2, 2, 2, 2]]",
    answer: "[[1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4]]",
    code: "/**\n * @param {number[]} nums\n * @param {number} key\n * @param {number} k\n * @return {number[]}\n */\nvar findKDistantIndices = function(nums, key, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2323,
    title: "Minimum Bit Flips to Convert Number",
    titleSlug: "minimum-bit-flips-to-convert-number",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Bit Manipulation"],
    constaints:
      "<li>For example, for <code>x = 7</code>, the binary representation is <code>111</code> and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get <code>110</code>, flip the second bit from the right to get <code>101</code>, flip the fifth bit from the right (a leading zero) to get <code>10111</code>, etc.</li> <li><code>0 &lt;= start, goal &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>A <strong>bit flip</strong> of a number <code>x</code> is choosing a bit in the binary representation of <code>x</code> and <strong>flipping</strong> it from either <code>0</code> to <code>1</code> or <code>1</code> to <code>0</code>.</p><p>Given two integers <code>start</code> and <code>goal</code>, return<em> the <strong>minimum</strong> number of <strong>bit flips</strong> to convert </em><code>start</code><em> to </em><code>goal</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "start = 10, goal = 7",
        outputText: "3",
        explanation:
          "The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 101",
      },
      {
        id: 2,
        inputText: "start = 3, goal = 4",
        outputText: "3",
        explanation:
          "The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:\n- Flip the first bit from the right: 01",
      },
    ],
    tests: "[10, 3]",
    answer: "[3, 3]",
    code: "/**\n * @param {number} start\n * @param {number} goal\n * @return {number}\n */\nvar minBitFlips = function(start, goal) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2337,
    title: "Remove Digit From Number to Maximize Result",
    titleSlug: "remove-digit-from-number-to-maximize-result",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Greedy", "Enumeration"],
    constaints:
      "<li><code>2 &lt;= number.length &lt;= 100</code></li> <li><code>number</code> consists of digits from <code>'1'</code> to <code>'9'</code>.</li> <li><code>digit</code> is a digit from <code>'1'</code> to <code>'9'</code>.</li> <li><code>digit</code> occurs at least once in <code>number</code>.</li>",
    question:
      "<p>You are given a string <code>number</code> representing a <strong>positive integer</strong> and a character <code>digit</code>.</p><p>Return <em>the resulting string after removing <strong>exactly one occurrence</strong> of </em><code>digit</code><em> from </em><code>number</code><em> such that the value of the resulting string in <strong>decimal</strong> form is <strong>maximized</strong></em>. The test cases are generated such that <code>digit</code> occurs at least once in <code>number</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: 'number = "123", digit = "3"',
        outputText: '"12"',
        explanation:
          "There is only one '3' in \"123\". After removing '3', the result is \"12\".",
      },
      {
        id: 2,
        inputText: 'number = "1231", digit = "1"',
        outputText: '"231"',
        explanation:
          'We can remove the first \'1\' to get "231" or remove the second \'1\' to get "123".\nSince 231 > 123, we return "231".',
      },
      {
        id: 3,
        inputText: 'number = "551", digit = "5"',
        outputText: '"51"',
        explanation:
          'We can remove either the first or second \'5\' from "551".\nBoth result in the string "51".',
      },
    ],
    tests: '["123", "1231", "551"]',
    answer: '["12", "231", "51"]',
    code: "/**\n * @param {string} number\n * @param {character} digit\n * @return {string}\n */\nvar removeDigit = function(number, digit) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2338,
    title: "Minimum Consecutive Cards to Pick Up",
    titleSlug: "minimum-consecutive-cards-to-pick-up",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Sliding Window"],
    constaints:
      "<li><code>1 &lt;= cards.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= cards[i] &lt;= 10<sup>6</sup></code></li>",
    question:
      "<p>You are given an integer array <code>cards</code> where <code>cards[i]</code> represents the <strong>value</strong> of the <code>i<sup>th</sup></code> card. A pair of cards are <strong>matching</strong> if the cards have the <strong>same</strong> value.</p><p>Return<em> the <strong>minimum</strong> number of <strong>consecutive</strong> cards you have to pick up to have a pair of <strong>matching</strong> cards among the picked cards.</em> If it is impossible to have matching cards, return <code>-1</code>.</p>",
    examples: [
      {
        id: 1,
        inputText: "cards = [3,4,2,3,4,7]",
        outputText: "4",
        explanation:
          "We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal.",
      },
      {
        id: 2,
        inputText: "cards = [1,0,5,3]",
        outputText: "-1",
        explanation:
          "There is no way to pick up a set of consecutive cards that contain a pair of matching cards.",
      },
    ],
    tests: "[[3, 4, 2, 3, 4, 7], [1, 0, 5, 3]]",
    answer: "[4, -1]",
    code: "/**\n * @param {number[]} cards\n * @return {number}\n */\nvar minimumCardPickup = function(cards) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2341,
    title: "Count Prefixes of a Given String",
    titleSlug: "count-prefixes-of-a-given-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Array", "String"],
    constaints:
      "<li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length, s.length &lt;= 10</code></li> <li><code>words[i]</code> and <code>s</code> consist of lowercase English letters <strong>only</strong>.</li>",
    question:
      "<p>You are given a string array <code>words</code> and a string <code>s</code>, where <code>words[i]</code> and <code>s</code> comprise only of <strong>lowercase English letters</strong>.</p><p>Return <em>the <strong>number of strings</strong> in</em> <code>words</code> <em>that are a <strong>prefix</strong> of</em> <code>s</code>.</p><p>A <strong>prefix</strong> of a string is a substring that occurs at the beginning of the string. A <b>substring</b> is a contiguous sequence of characters within a string.</p>",
    examples: [
      {
        id: 1,
        inputText: 'words = ["a","b","c","ab","bc","abc"], s = "abc"',
        outputText: "3",
        explanation:
          'The strings in words which are a prefix of s = "abc" are:\n"a", "ab", and "abc".\nThus the number of strings in words which are a prefix of s is 3.',
      },
      {
        id: 2,
        inputText: 'words = ["a","a"], s = "aa"',
        outputText: "2",
        explanation:
          "Both of the strings are a prefix of s. \nNote that the same string can occur multiple times in words, and it should be counted each time.",
      },
    ],
    tests: '[["a", "b", "c", "ab", "bc", "abc"], ["a", "a"]]',
    answer: "[3, 2]",
    code: "/**\n * @param {string[]} words\n * @param {string} s\n * @return {number}\n */\nvar countPrefixes = function(words, s) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2342,
    title: "Minimum Average Difference",
    titleSlug: "minimum-average-difference",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Prefix Sum"],
    constaints:
      "<li>The <strong>absolute difference</strong> of two numbers is the absolute value of their difference.</li> <li>The <strong>average</strong> of <code>n</code> elements is the <strong>sum</strong> of the <code>n</code> elements divided (<strong>integer division</strong>) by <code>n</code>.</li> <li>The average of <code>0</code> elements is considered to be <code>0</code>.</li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code>.</p><p>The <strong>average difference</strong> of the index <code>i</code> is the <strong>absolute</strong> <strong>difference</strong> between the average of the <strong>first</strong> <code>i + 1</code> elements of <code>nums</code> and the average of the <strong>last</strong> <code>n - i - 1</code> elements. Both averages should be <strong>rounded down</strong> to the nearest integer.</p><p>Return<em> the index with the <strong>minimum average difference</strong></em>. If there are multiple such indices, return the <strong>smallest</strong> one.</p><p><strong>Note:</strong></p>",
    examples: [
      {
        id: 1,
        inputText: "nums = [2,5,3,9,5,3]",
        outputText: "3",
        explanation:
          "- The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.\n- The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.\n- The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.\n- The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.\n- The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.\n- The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4.\nThe average difference of index 3 is the minimum average difference so return 3.",
      },
      {
        id: 2,
        inputText: "nums = [0]",
        outputText: "0",
        explanation:
          "The only index is 0 so return 0.\nThe average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0.",
      },
    ],
    tests: "[[2, 5, 3, 9, 5, 3], [0]]",
    answer: "[3, 0]",
    code: "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumAverageDifference = function(nums) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2361,
    title: "Calculate Digit Sum of a String",
    titleSlug: "calculate-digit-sum-of-a-string",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["String", "Simulation"],
    constaints:
      '<li><strong>Divide</strong> <code>s</code> into <strong>consecutive groups</strong> of size <code>k</code> such that the first <code>k</code> characters are in the first group, the next <code>k</code> characters are in the second group, and so on. <strong>Note</strong> that the size of the last group can be smaller than <code>k</code>.</li> <li><strong>Replace</strong> each group of <code>s</code> with a string representing the sum of all its digits. For example, <code>"346"</code> is replaced with <code>"13"</code> because <code>3 + 4 + 6 = 13</code>.</li> <li><strong>Merge</strong> consecutive groups together to form a new string. If the length of the string is greater than <code>k</code>, repeat from step <code>1</code>.</li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>2 &lt;= k &lt;= 100</code></li> <li><code>s</code> consists of digits only.</li>',
    question:
      "<p>You are given a string <code>s</code> consisting of digits and an integer <code>k</code>.</p><p>A <strong>round</strong> can be completed if the length of <code>s</code> is greater than <code>k</code>. In one round, do the following:</p><p>Return <code>s</code> <em>after all rounds have been completed</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: 's = "11111222223", k = 3',
        outputText: '"135"',
        explanation:
          '- For the first round, we divide s into groups of size 3: "111", "112", "222", and "23".\n  \u200b\u200b\u200b\u200b\u200bThen we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. \n\u00a0 So, s becomes "3" + "4" + "6" + "5" = "3465" after the first round.\n- For the second round, we divide s into "346" and "5".\n\u00a0 Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. \n\u00a0 So, s becomes "13" + "5" = "135" after second round. \nNow, s.length <= k, so we return "135" as the answer.',
      },
      {
        id: 2,
        inputText: 's = "00000000", k = 3',
        outputText: '"000"',
        explanation:
          'We divide s into "000", "000", and "00".\nThen we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. \ns becomes "0" + "0" + "0" = "000", whose length is equal to k, so we return "000".',
      },
    ],
    tests: '["11111222223", "00000000"]',
    answer: '["135", "000"]',
    code: "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar digitSum = function(s, k) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2362,
    title: "Minimum Rounds to Complete All Tasks",
    titleSlug: "minimum-rounds-to-complete-all-tasks",
    difficulty: "Medium",
    category: "Algorithms",
    topics: ["Array", "Hash Table", "Greedy", "Counting"],
    constaints:
      "<li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li>",
    question:
      "<p>You are given a <strong>0-indexed</strong> integer array <code>tasks</code>, where <code>tasks[i]</code> represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the <strong>same difficulty level</strong>.</p><p>Return <em>the <strong>minimum</strong> rounds required to complete all the tasks, or </em><code>-1</code><em> if it is not possible to complete all the tasks.</em></p>",
    examples: [
      {
        id: 1,
        inputText: "tasks = [2,2,3,3,2,4,4,4,4,4]",
        outputText: "4",
        explanation:
          "To complete all the tasks, a possible plan is:\n- In the first round, you complete 3 tasks of difficulty level 2. \n- In the second round, you complete 2 tasks of difficulty level 3. \n- In the third round, you complete 3 tasks of difficulty level 4. \n- In the fourth round, you complete 2 tasks of difficulty level 4.  \nIt can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.",
      },
      {
        id: 2,
        inputText: "tasks = [2,3,3]",
        outputText: "-1",
        explanation:
          "There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.",
      },
    ],
    tests: "[[2, 2, 3, 3, 2, 4, 4, 4, 4, 4], [2, 3, 3]]",
    answer: "[4, -1]",
    code: "/**\n * @param {number[]} tasks\n * @return {number}\n */\nvar minimumRounds = function(tasks) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2384,
    title: "Root Equals Sum of Children",
    titleSlug: "root-equals-sum-of-children",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Binary Tree"],
    constaints:
      "<li>The tree consists only of the root, its left child, and its right child.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>You are given the <code>root</code> of a <strong>binary tree</strong> that consists of exactly <code>3</code> nodes: the root, its left child, and its right child.</p><p>Return <code>true</code> <em>if the value of the root is equal to the <strong>sum</strong> of the values of its two children, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [10,4,6]",
        outputText: "true",
        explanation:
          "The values of the root, its left child, and its right child are 10, 4, and 6, respectively.\n10 is equal to 4 + 6, so we return true.",
      },
      {
        id: 2,
        inputText: "root = [5,3,1]",
        outputText: "false",
        explanation:
          "The values of the root, its left child, and its right child are 5, 3, and 1, respectively.\n5 is not equal to 3 + 1, so we return false.",
      },
    ],
    tests: "[[10, 4, 6], [5, 3, 1]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar checkTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
  {
    id: 2384,
    title: "Root Equals Sum of Children",
    titleSlug: "root-equals-sum-of-children",
    difficulty: "Easy",
    category: "Algorithms",
    topics: ["Tree", "Binary Tree"],
    constaints:
      "<li>The tree consists only of the root, its left child, and its right child.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li>",
    question:
      "<p>You are given the <code>root</code> of a <strong>binary tree</strong> that consists of exactly <code>3</code> nodes: the root, its left child, and its right child.</p><p>Return <code>true</code> <em>if the value of the root is equal to the <strong>sum</strong> of the values of its two children, or </em><code>false</code><em> otherwise</em>.</p>",
    examples: [
      {
        id: 1,
        inputText: "root = [10,4,6]",
        outputText: "true",
        explanation:
          "The values of the root, its left child, and its right child are 10, 4, and 6, respectively.\n10 is equal to 4 + 6, so we return true.",
      },
      {
        id: 2,
        inputText: "root = [5,3,1]",
        outputText: "false",
        explanation:
          "The values of the root, its left child, and its right child are 5, 3, and 1, respectively.\n5 is not equal to 3 + 1, so we return false.",
      },
    ],
    tests: "[[10, 4, 6], [5, 3, 1]]",
    answer: "[true, false]",
    code: "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar checkTree = function(root) {\n    \n};",
    likes: 0,
    dislikes: 0,
  },
];
